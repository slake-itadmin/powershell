Windows PowerShell31 
3.0 Step by Step
Ed Wilson
Published with the authorization of Microsoft Corporation by:
O22Reilly Media, Inc.
1005 Gravenstein Highway North
Sebastopol, California 95472
Copyright 51 2013 by Ed Wilson
All rights reserved. No part of the contents of this book may be reproduced or transmitted in any form or by any 
means without the written permission of the publisher.
ISBN: 978-0-735-66339-8
Printed and bound in the United States of America.
Microsoft Press books are available through booksellers and distributors worldwide. If you need support related 
to this book, email Microsoft Press Book Support at mspinput@microsoft.com. Please tell us what you think of 
this book at 
http://www.microsoft.com/learning/booksurvey
Microsoft and the trademarks listed at 
http://www.microsoft.com/about/legal/en/us/IntellectualProperty/
Trademarks/EN-US.aspx
 are trademarks of the Microsoft group of companies.  All other marks are property of 
their respective owners.
The example companies, organizations, products, domain names, email addresses, logos, people, places, and 
[<0048>-8<0059>1<0048>-10<00510057>-19<00560003>55<0047>-7<0048>-10<0053>-6<004C>-3<0046>-25<0057>-3<0048>-16<00470003>55<004B>-9<0048>-10<0055>-12<0048>-9<004C00510003>55<0044>-4<0055>-12<00480003>55<00C0>-5<0046>-25<0057>-2<004C>-5<0057>-2<004C>-5<0052>-9<0058>-6<0056>-19<00110003>55<0031>-7<00520003>55<0044>-10<0056>-14<0056>-12<0052>-13<0046>4<004C>-2<0044>-3<0057>-2<004C>-5<0052>-7<00510003>55<005A>-9<004C>-5<0057>-2<004B0003>55<0044>-4<0051>4<005C0003>55<0055>-12<0048>-10<0044>-4<004F0003>55<00460052>-7<0050>-4<0053>-9<0044>-4<0051>4<005C>34<000F0003>55<0052>-7<0055>-12<004A>-3<0044>-4<0051>-2<004C>-7<005D>-18<0044>-3<0057>-2<004C>-5<0052>-7<0051>-14<000F0003>55<0053>-7<0055>-12<0052>-13<0047>-3<0058>-5<0046>-25<0057>-20<000F0003>55<0047>-5<0052>-7<0050>-7<0044>-2<004C00510003>55<0051>-7<0044>-4<0050>-9<0048>-9<000F>-13<0003>]TJ
email address, logo, person, place, or event is intended or should be inferred.
This book expresses the author22s views and opinions. The information contained in this book is provided without 
any express, statutory, or implied warranties. Neither the author, O22Reilly Media, Inc., Microsoft Corporation, nor 
its resellers, or distributors will be held liable for any damages caused or alleged to be caused either directly or 
indirectly by this book.
Acquisitions and Developmental Editor:
 Michael Bolinger
Production Editor:
 Kristen Borg
Editorial Production:
 Zyg Group, LLC
Technical Reviewer:
 Thomas Lee
Copyeditor:
 Zyg Group, LLC
Indexer:
 Zyg Group, LLC
Cover Design:
[<00030037>55<005A>-9<004C>-5<0056>-16<005700030026>8<0055>-12<0048>-10<0044>-3<0057>-2<004C>-12<0059>1<00480003008700030036>-11<0048>-10<0044>-3<0057>-31<0057>-2<004F>-7<0048>]TJ
Cover Composition:
 Zyg Group, LLC
Illustrators:
 Rebecca Demarest and Robert Romano
To Teresa, who makes each day seem fresh with opportunity 
and new with excitement. 
Contents at a Glance
Foreword
xix
Introduction
xxi
CHA
Overview of Windows PowerShell 3.0
CHA
Using Windows PowerShell Cmdlets
23
CHA
Understanding and Using PowerShell Providers
65
CHA
Using PowerShell 
emoting and Jobs
107
CHA
Using PowerShell Scripts
131
CHA
Working with Functions
171
CHA
Creating 
dvanced Functions and Modules
209
CHA
Using the Windows PowerShell ISE
251
CHA
[<003A>17<0052>-6<0055>-12<004E>-16<004C>-1<0051>-12<004A0003005A>-9<004C>-3<0057>-7<004B0003003A>-16<004C>-1<0051>-12<0047>-7<0052>-4<005A>-11<005600030033>1<0052>-4<005A>-4<0048>-12<0055>-25<0036>-4<004B>-12<0048>-13<004F004F00030033>-1<0055>-16<0052>-6<00C0>-2<004F>-8<0048>-17<0056>]TJ
[<0015>9<0019>8<001A>]TJ
CHA
R 10
Using WMI
283
CHA
R 11
Querying WMI
307
CHA
R 12
emoting WMI
337
CHA
R 13
Calling WMI Methods on WMI Classes
355
CHA
Using the CIM Cmdlets
367
CHA
R 15
Working with 
ctive Directory
383
CHA
R 16
Working with the 
D DS Module
419
CHA
R 17
Deploying 
ctive Directory with Windows Server 2012
447
CHA
R 18
Debugging Scripts
461
CHA
R 19
andling Errors
501
CHA
R 20
Managing Exchange Server
539
APPE
DI
Windows PowerShell Core Cmdlets
571
APPE
DI
Windows PowerShell Module Coverage
579
APPE
DI
Windows PowerShell Cmdlet 
aming
583
APPE
DI
Windows PowerShell F
587
APPE
DI
Useful WMI Classes
597
APPE
DI
Basic 
roubleshooting 
ips
621
APPE
DI
General PowerShell Scripting Guidelines
625
Index
633
Contents
Foreword
 .......................................................
xix
Introduction
xxi
Chapter 1
Overview of Windows PowerShell 3.0
Understanding Windows PowerShell
Using cmdlets
Installing Windows PowerShell
Deploying Windows PowerShell to down-level 
operating systems
Using command-line utilities
Security issues with Windows PowerShell
Controlling execution of PowerShell cmdlets
[<0026>2<0052>-7<005100C0>-2<0055>-12<0050>-2<004C0051>-11<004A00030044>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051>-9<0056>]TJ
[<0036>-1<0058>-6<0056>-4<0053>-13<0048>-10<0051>-11<0047004C0051>-11<004A000300460052>-7<005100C0>-2<0055>-12<0050>-7<0044>-3<0057>-2<004C>-5<0052>-7<005100030052004900030046>4<0050>-11<0047>1<004F>-7<0048>-10<0057>-19<0056>]TJ
Working with Windows PowerShell
Accessing Windows PowerShell
[<0026>2<0052>-7<005100C0>-7<004A>-3<0058>1<0055>-12<004C0051>-11<004A00030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F000300460052>-7<0051>-9<0056>-12<0052>-6<004F>-7<0048>]TJ
Supplying options for cmdlets
Working with the help options
Exploring commands: step-by-step exercises
Chapter 1 quick reference
 .........................................
What do you think of this book? We want to hear from you! 
Microsoft is interested in hearing your feedback so we can continually improve our 
books and learning resources for you. 
o participate in a brief online survey, please visit: 
microsoft.com/learning/booksurvey
Chapter 2
Using Windows PowerShell Cmdlets
23
Understanding the basics of cmdlets
Using the 
Get-ChildItem
 cmdlet
Obtaining a directory listing
Formatting a directory listing using the 
Format-List
 cmdlet
Using the 
Format-Wide
 cmdlet
Formatting a directory listing using 
Format-Table
Formatting output with 
Out-GridView
Leveraging the power of 
Get-Command
Searching for cmdlets using wildcard characters 
Using the 
Get-Member
 cmdlet
Using the 
Get-Member
 cmdlet to examine properties 
and methods
Using the 
New-Object
 cmdlet
Creating and Using the 
wshShell
 Object
Using the Show-Command cmdlet
Windows PowerShell cmdlet naming helps you learn
Windows PowerShell verb grouping
Windows PowerShell verb distribution 
[<0026>8<0055>-12<0048>-10<0044>-3<0057>-2<004C0051>-11<004A000300440003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>]TJ
Finding all aliases for a particular object
Working with cmdlets: step-by-step exercises
Chapter 2 quick reference
 .........................................
Chapter 3
Understanding and Using PowerShell Providers
65
Understanding PowerShell providers
Understanding the alias provider
[<0038>-2<0051>-11<0047>-7<0048>-10<0055>-26<0056>-16<0057>-19<0044>-4<0051>-11<0047004C0051>-11<004A00030057>-2<004B>-9<004800030046>-2<0048>-10<0055>-41<0057>-2<004C>-5<00C0>-5<0046>-14<0044>-3<0057>-3<004800030053>-7<0055>-12<0052>-1<0059>-12<004C>-5<0047>-7<0048>-10<0055>]TJ
Understanding the environment provider
[<0038>-2<0051>-11<0047>-7<0048>-10<0055>-26<0056>-16<0057>-19<0044>-4<0051>-11<0047004C0051>-11<004A00030057>-2<004B>-9<0048000300C0>-2<004F>-7<0048>-12<0056>-21<005C>-12<0056>-16<0057>-3<0048>-10<005000030053>-7<0055>-12<0052>-1<0059>-12<004C>-5<0047>-7<0048>-10<0055>]TJ
Understanding the function provider
Using the registry provider to manage the Windows registry
The two registry drives
Understanding the variable provider
Exploring PowerShell providers: step-by-step exercises
101
Chapter 3 quick reference
 ........................................
106
Chapter 4
Using PowerShell Remoting and Jobs
107
Understanding Windows PowerShell remoting
107
Classic remoting
107
WinRM 
112
Using Windows PowerShell jobs
Using Windows PowerShell remoting: step-by-step exercises
127
Chapter 4 quick reference
 ........................................
130
Chapter 5
Using PowerShell Scripts
131
Why write Windows PowerShell scripts?
131
Scripting fundamentals
133
Running Windows PowerShell scripts
133
Enabling Windows PowerShell scripting support
134
Transitioning from command line to script
136
Running Windows PowerShell scripts
138
Understanding variables and constants
141
Use of constants
146
Using the 
While
 statement
147
Constructing the 
While
 statement in PowerShell
148
A practical example of using the 
While
 statement
150
Using special features of Windows PowerShell
150
Using the 
Do...While
 statement
151
Using the range operator
 ...................................
152
Operating over an array
152
Casting to ASCII values
152
Using the 
Do...Until
 statement
153
Comparing the PowerShell 
Do...Until
 statement with VBScript
154
Using the Windows PowerShell 
 statement
154
The 
For
 statement
156
Using the 
For
 statement 
156
Using the 
Foreach 
statement
158
Exiting the 
Foreach
 statement early
 ..........................
159
The 
 statement
Using assignment and comparison operators
163
Evaluating multiple conditions
164
The 
Switch
 statement
164
Using the 
Switch 
statement
165
Controlling matching behavior
167
Creating multiple folders: step-by-step exercises
168
Chapter 5 quick reference
 ........................................
170
Chapter 6
Working with Functions
171
Understanding functions
171
Using functions to provide ease of code reuse
178
Including functions in the Windows PowerShell environment
 .........
180
Using dot-sourcing
180
Using dot-sourced functions
182
Adding help for functions
184
Using a 
here-string
 object for help
184
Using two input parameters
186
Using a type constraint in a function
190
Using more than two input parameters
192
Use of functions to encapsulate business logic
194
[<0038>-3<0056>-12<004800030052004900030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051>-9<005600030057>-1<005200030053>-7<0055>-12<0052>-1<0059>-12<004C>-5<0047>-7<004800030048>-10<0044>-10<0056>-12<004800030052004900030050>-9<0052>-13<0047004C>-5<00C0>-5<0046>-14<0044>-3<0057>-2<004C>-5<0052>-7<0051>]TJ
196
[<0038>-2<0051>-11<0047>-7<0048>-10<0055>-26<0056>-16<0057>-19<0044>-4<0051>-11<0047004C0051>-11<004A000300C0>-2<004F>-6<0057>-3<0048>-10<0055>-26<0056>]TJ
201
Creating a function: step-by-step exercises
205
Chapter 6 quick reference
 ........................................
208
Chapter 7
Creating Advanced Functions and Modules
209
The 
[cmdletbinding]
 attribute
209
Easy verbose messages
210
Automatic parameter checks
211
Adding support for the 
-whatif 
parameter
214
Adding support for the 
[<0010>-16<0046>9<00520051>-1<00C00055>1<0050>7<0003>]TJ
parameter
215
Specifying the default parameter set
216
The 
parameter
 attribute
217
The 
mandatory 
parameter property
217
The 
position
 parameter property
218
The 
ParameterSetName 
parameter property
219
The 
ValueFromPipeline 
property
220
The 
HelpMessage
 property
221
Understanding modules
Locating and loading modules
Listing available modules
223
Loading modules
225
Installing modules
227
Creating a per-user Modules folder
227
Working with the 
$modulePath
 variable
 ......................
230
Creating a module drive
232
Checking for module dependencies
234
Using a module from a share
237
Creating a module
238
Creating an advanced function: step-by-step exercises
245
Chapter 7 quick reference
 ........................................
249
Chapter 8
Using the Windows PowerShell ISE
251
Running the Windows PowerShell ISE
251
Navigating the Windows PowerShell ISE
252
Working with the script pane
254
Tab expansion and IntelliSense
256
Working with Windows PowerShell ISE snippets
257
Using Windows PowerShell ISE snippets to create code
 .........
257
Creating new Windows PowerShell ISE snippets
259
[<0035>-2<0048>-10<0050>-9<0052>-1<0059>-12<004C0051>-11<004A00030058>-6<0056>-12<0048>-10<0055>-10<0010>-18<0047>-7<0048>-9<00C0>-2<0051>-9<0048>-16<00470003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F0003002C>-8<0036002800030056>-3<0051>-2<004C0053>-7<0053>-13<0048>-10<0057>-19<0056>]TJ
261
Using the Commands add-on: step-by-step exercises
262
Chapter 8 quick reference
 ........................................
265
Chapter 9
[<003A>27<0052>-3<0055>-3<004E>-10<004C>-2<0051>-7<004A0003005A>-3<004C>4<0057>-14<004B0003003A>-7<004C>-2<0051>-6<0047>-3<0052>7<005A>3<005600030033>9<0052>7<005A>7<0048>-10<0055>-12<0036>-5<004B>-6<0048>-9<004F>-1<004F00030033>4<0055>-10<0052>-1<00C0>-2<004F>-5<0048>-7<0056>]TJ
[<0015>11<0019>24<001A>]TJ
[<0036>2<004C>-9<005B00030027>-8<004C>-3<0049>-39<0049>-7<0048>-10<0055>-12<0048>-10<0051005700030033>6<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-12<0056>]TJ
267
[<0038>-2<0051>-11<0047>-7<0048>-10<0055>-26<0056>-16<0057>-19<0044>-4<0051>-11<0047004C0051>-11<004A00030057>-2<004B>-9<004800030056>-4<004C>-9<005B00030047004C>-3<0049>-39<0049>-7<0048>-10<0055>-12<0048>-10<0051>-1<00570003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-12<0056>]TJ
268
Examining the 
[<00070053>-15<0055>-19<0052>-21<00C0>-17<004F>-12<0048>]TJ
 variable
268
[<0027>-12<0048>-10<0057>-3<0048>-10<0055>-12<0050>-2<004C0051>-2<004C0051>-11<004A0003005A>-9<004B>-9<0048>-10<0057>-2<004B>-9<0048>-10<00550003004400030056>-3<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<004600030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<004800030048>-6<005B>-8<004C>-5<0056>-16<0057>-19<0056>]TJ
270
[<0026>8<0055>-12<0048>-10<0044>-3<0057>-2<004C0051>-11<004A0003004400030051>-9<0048>-9<005A00030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>]TJ
270
[<0027>-12<0048>-12<0056>-3<004C>-5<004A>1<005100030046>1<0052>-7<0051>-9<0056>-3<004C>-5<0047>-7<0048>-10<0055>-8<0044>-3<0057>-2<004C>-5<0052>-7<0051>-9<005600030049>-7<0052>-7<005500030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-12<0056>]TJ
271
[<0038>-3<0056>-3<004C0051>-11<004A00030052>-7<0051>-9<004800030052>-7<005500030050>-9<0052>-7<0055>-12<004800030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-12<0056>]TJ
273
[<0038>-3<0056>-3<004C0051>-11<004A00030057>-2<004B>-9<004800030024>-11<004F>1<004F00030038>-3<0056>-12<0048>-10<0055>-26<0056>-20<000F00030024>-10<004F>1<004F0003002B>-8<0052>-7<0056>-16<0057>-19<005600030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>]TJ
275
[<0038>-3<0056>-3<004C0051>-11<004A0003005C>1<0052>-9<0058>1<005500030052>-3<005A>-9<0051000300C0>-2<004F>-7<0048>]TJ
276
Grouping similar functionality into a module
277
[<003A>-10<004B>-9<0048>-10<0055>-12<004800030057>-1<005200030056>-16<0057>-1<0052>-7<0055>-12<004800030057>-2<004B>-9<004800030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>]TJ
module
278
[<0026>8<0055>-12<0048>-10<0044>-3<0057>-2<004C0051>-11<004A0003004400030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>5<001D00030056>-16<0057>-3<0048>-10<0053>-16<0010>-4<0045>-3<005C>4<0010>-4<0056>-16<0057>-3<0048>-10<005300030048>-6<005B>2<0048>-10<0055>-10<0046>4<004C>-5<0056>-12<0048>-12<0056>]TJ
 ...........................
278
Chapter 9 quick reference
 ........................................
282
Chapter 10
Using WMI
283
Understanding the WMI model
284
Working with objects and namespaces
284
Listing WMI providers
289
Working with WMI classes
289
Querying WMI
293
Obtaining service information: step-by-step exercises
298
Chapter 10 quick reference
305
Chapter 11
Querying WMI
307
Alternate ways to connect to WMI
307
Selective data from all instances
 .............................
316
Selecting multiple properties
316
[<0026>8<004B>-9<0052>-13<0052>-7<0056>-4<004C0051>-11<004A00030056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<00460003004C0051>-9<0056>-16<0057>-19<0044>-4<0051>-9<0046>-2<0048>-12<0056>]TJ
319
Utilizing an operator
321
Where is the 
where
325
Shortening the syntax
325
Working with software: step-by-step exercises
327
Chapter 11 quick reference 
335
Chapter 12
Remoting WMI
337
Using WMI against remote systems
337
Supplying alternate credentials for the remote connection
338
Using Windows PowerShell remoting to run WMI
341
Using CIM classes to query WMI classes
343
Working with remote results
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
344
Reducing data via Windows PowerShell parameters
347
Running WMI jobs
350
Using Windows PowerShell remoting and WMI: 
Step-by-step exercises
352
Chapter 12 quick reference 
354
Chapter 13
Calling WMI Methods on WMI Classes
355
Using WMI cmdlets to execute instance methods
355
Using the 
terminate 
method directly
357
Using the 
Invoke-WmiMethod
 cmdlet
358
Using the 
[wmi]
 type accelerator
360
Using WMI to work with static methods
361
Executing instance methods: step-by-step exercises
364
Chapter 13 quick reference 
366
Chapter 14
Using the CIM Cmdlets
367
Using the CIM cmdlets to explore WMI classes
367
Using the 
-classname 
parameter
367
Finding WMI class methods
368
[<0029>-2<004C004F>-6<0057>-3<0048>-10<0055>-12<004C0051>-11<004A00030046>4<004F>-5<0044>-10<0056>-14<0056>-12<0048>-12<005600030045>-3<005C00030054>-3<0058>-3<0044>-4<004F004C>-5<00C0>-7<0048>-10<0055>]TJ
369
Retrieving WMI instances
371
Reducing returned properties and instances
372
Cleaning up output from the command
373
Working with associations
373
Retrieving WMI instances: step-by-step exercises
379
Chapter 14 quick reference 
382
Chapter 15
Working with Active Directory
383
Creating objects in Active Directory
383
Creating an OU
383
ADSI providers
385
LDAP names
387
Creating users
393
What is user account control?
396
Working with users
397
Creating multiple organizational units: step-by-step exercises
412
Chapter 15 quick reference
418
Chapter 16
Working with the AD DS Module
419
Understanding the Active Directory module
419
Installing the Active Directory module
419
Getting started with the Active Directory module
421
Using the Active Directory module
421
Finding the FSMO role holders
422
Discovering Active Directory
428
Renaming Active Directory sites
431
Managing users
432
Creating a user
435
Finding and unlocking Active Directory user accounts
436
Finding disabled users
438
Finding unused user accounts
440
Updating Active Directory objects: step-by-step exercises
443
Chapter 16 quick reference
 .......................................
445
Chapter 17
Deploying Active Directory with 
Windows Server 2012
447
Using the Active Directory module to deploy a new forest
447
Adding a new domain controller to an existing domain
Adding a read-only domain controller
455
Domain controller prerequisites: step-by-step exercises
457
Chapter 17 quick reference
460
Chapter 18
Debugging Scripts
461
Understanding debugging in Windows PowerShell
461
Understanding three different types of errors
 .................
461
Using the 
Set-PSDebug
 cmdlet 
467
Tracing the script
467
Stepping through the script
471
Enabling strict mode
479
Using 
Set-PSDebug -Strict
479
Using the 
Set-StrictMode
 cmdlet
481
Debugging the script
483
Setting breakpoints
483
Setting a breakpoint on a line number
483
Setting a breakpoint on a variable
485
Setting a breakpoint on a command
489
Responding to breakpoints
490
Listing breakpoints
492
Enabling and disabling breakpoints
 ..........................
494
Deleting breakpoints
494
Debugging a function: step-by-step exercises
494
Chapter 18 quick reference
 .......................................
499
Chapter 19
Handling Errors
501
Handling missing parameters
501
Creating a default value for a parameter
502
Making the parameter mandatory
503
Limiting choices
504
Using 
PromptForChoice
 to limit selections
504
Using 
Test-Connection
 to identify computer connectivity
506
Using the 
-contains
 operator to examine contents of an array
507
Using the 
-contains
 operator to test for properties
509
Handling missing rights 
512
Attempt and fail
512
Checking for rights and exiting gracefully
513
Handling missing WMI providers
513
Incorrect data types
 .............................................
523
Out-of-bounds errors
526
Using a boundary-checking function
526
Placing limits on the parameter
528
Using 
Try...Catch...Finally
529
Catching multiple errors
 ....................................
532
Using 
PromptForChoice
 to limit selections: Step-by-step exercises
534
Chapter 19 quick reference 
537
Chapter 20
Managing Exchange Server
539
Exploring the Exchange 2010 cmdlets
539
Working with remote Exchange servers
540
[<0026>2<0052>-7<005100C0>-7<004A>-3<0058>1<0055>-12<004C0051>-11<004A00030055>-12<0048>-16<0046>4<004C0053>-6<004C>-5<0048>-10<0051005700030056>-12<0048>-10<0057>-31<0057>-2<004C0051>-11<004A>-6<0056>]TJ
544
Creating the user and the mailbox
544
Reporting user settings
 .....................................
548
Managing storage settings
 .......................................
550
Examining the mailbox database
550
Managing the mailbox database
551
Managing Exchange logging
553
Managing auditing
557
[<0033>6<0044>-4<0055>-26<0056>-3<004C0051>-11<004A00030057>-2<004B>-9<004800030044>-6<0058>-7<0047004C>-5<00570003003B>-6<0030>-4<002F000300C0>-2<004F>-7<0048>]TJ
562
Creating user accounts: step-by-step exercises
 ......................
565
Chapter 20 quick reference
570
Appendix A
Windows PowerShell Core Cmdlets
571
Appendix B
Windows PowerShell Module Coverage
579
Appendix C
Windows PowerShell Cmdlet Naming
583
Appendix D
Windows PowerShell FAQ
587
Appendix E
Useful WMI Classes
597
Appendix F
Basic Troubleshooting Tips
621
Appendix G
General PowerShell Scripting Guidelines
625
Index
633
About the Author
667
What do you think of this book? We want to hear from you! 
Microsoft is interested in hearing your feedback so we can continually improve our 
books and learning resources for you. 
o participate in a brief online survey, please visit: 
microsoft.com/learning/booksurvey
Foreword
22ve always known that automation was a critical IT Pro skill. Automation dramatically 
increases both productivity and quality of IT operations; it is a transformational skill 
that improves both the companies and the careers of the individuals that master it. 
Improving IT Pro automation was my top priority when I joined Microsoft in 1999 as the 
Architect for management products and technologies. That led to inventing Windows 
PowerShell and the long hard road to making it a centerpiece of the Microsoft manage
ment story. Along the way, the industry made some dramatic shifts. These shifts make it 
even more critical for IT Pros to become experts of automation. 
During the development of PowerShell V1, the team developed a very strong partner
ship with Exchange. We thought Exchange would drive industry adoption of PowerShell. 
You can imagine our surprise and delight when we discovered that the most active 
PowerShell V1 community was VMWare customers. I reached out to the VMWare team 
[<0057>-1<0052000300C0>-2<0051>-11<004700030052>-9<0058>-5<00570003005A>-9<004B>3<005C0003004C>-5<00570003005A>-3<0044>-10<005600030056>-12<005200030056>-6<0058>-5<00460046>-2<0048>-12<0056>-14<0056>-14<0049>-18<0058>1<004F0003005A>-9<004C>-5<0057>-2<004B00030057>-2<004B>-9<0048>-9<004C005500030046>-2<0058>-6<0056>-16<0057>-1<0052>-7<0050>-9<0048>-10<0055>-26<0056>-19<001100030037>-7<004B>-9<0048>-7<005C00030048>-6<005B>-8<0053>-8<004F>-5<0044>-2<004C0051>-9<0048>-16<004700030057>-1<005200030050>-9<004800030057>-2<004B>-7<0044>-3<005700030057>-2<004B>-9<0048>-9<004C0055>-10<0003>]TJ
customers were IT Pros that were barely keeping up with the servers they had. When 
they adopted virtualization, they suddenly had 5-10 times the number of servers so it was 
[<0048>-9<004C>-5<0057>-2<004B>-9<0048>-10<0055000300B4>38<0044>-6<0058>-5<0057>-1<0052>-7<0050>-7<0044>-3<0057>-3<004800030052>-7<005500030047>1<0055>-12<0052>-3<005A>-9<0051>-14<0011>37<00B500030037>-7<004B>-9<0048>-9<004C00550003004B>-7<0044>-2<004C00550003005A>-3<0044>-10<005600030052>-7<0051000300C0>-2<0055>-12<004800030044>-4<0051>-11<004700030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F0003005A>-3<0044>-10<00560003004400030045>-9<0058>-5<0046>4<004E>12<0048>-10<00570003005200490003005A>-3<0044>-3<0057>-3<0048>-10<0055>43<0011>]TJ
 The move to the cloud is another shift that increases the importance of automa
tion. The entire DevOps movement is all about making change safe through changes 
in culture and automation. When you run cloud scale applications, you can22t afford to 
have it all depend upon a smart guy with a cup of coffee and a mouse26you need to au
[<0057>-1<0052>-7<0050>-7<0044>-3<0057>-3<004800030052>-7<0053>-13<0048>-10<0055>-8<0044>-3<0057>-2<004C>-5<0052>-7<0051>-9<00560003005A>-9<004C>-5<0057>-2<004B00030056>-12<0046>4<0055>-12<004C0053>-5<0057>-19<005600030044>-4<0051>-11<00470003005A>-2<0052>-7<0055>-12<004E>-34<00C1>-8<0052>-3<005A>-12<0056>-19<00110003003A>-10<004B>-9<0048>-10<00510003005C>1<0052>-9<005800030055>-12<0048>-10<0044>-11<004700030057>-2<004B>-9<004800030049>-9<0044>-2<004C004F>-4<0058>1<0055>-12<004800030055>-12<0048>-10<0053>-13<0052>-7<0055>-41<0057>-19<005600030052004900030057>-2<004B>-9<00480003>]TJ
[<0045>-6<004C>-5<004A>-7<004A>-7<0048>-12<0056>-16<005700030046>4<004F>-7<0052>-9<0058>-7<004700030052>-9<0058>-5<0057>-19<0044>-11<004A>-7<0048>-12<0056>-20<000F0003005C>1<0052>-10<005800030056>-12<0048>-16<004800030057>-2<004B>-7<0044>-3<005700030057>-2<004B>-9<004800030055>-12<0052>-13<0052>-2<005700030046>-14<0044>-6<0058>-6<0056>-12<00480003004C>-5<0056000300520049>-41<0057>-3<0048>-10<005100030050>-7<0044>-4<0051>-6<0058>-3<0044>-4<004F000300460052>-7<0051>-1<00C0>-7<004A>-3<0058>1<0055>-8<0044>-3<0057>-2<004C>-5<0052>-7<0051>-14<00110003003A>-10<004B>-9<0048>-10<00510003>]TJ
you have automation and an error occurs, you review the scripts and modify them to 
it doesn22t happen again. With automation, Nietzsche was right: that which does not kill 
you strengthens you. It is no surprise that Azure has supported PowerShell for some 
time, but I was delighted to see that Amazon just released 587 cmdlets to manage AWS.
 Learning automation with PowerShell is a critical IT Pro skill and there are few 
[<0053>-13<0048>-16<0052>-7<0053>-8<004F>-7<004800030045>-13<0048>-10<0057>-31<0057>-3<0048>-10<005500030054>-3<0058>-3<0044>-4<004F004C>-5<00C0>-7<0048>-16<004700030057>-1<00520003004B>-9<0048>-11<004F>1<00530003005C>1<0052>-10<005800030047>-5<005200030057>-2<004B>-7<0044>-3<005700030057>-2<004B>-7<0044>-4<005100030028>2<00470003003A>-16<004C004F>-8<0056>-12<0052>-7<0051>-14<001100030028>2<00470003003A>-16<004C004F>-8<0056>-12<0052>-7<00510003004C>-5<005600030057>-2<004B>-9<00480003004B>-6<0058>-6<0056>-4<0045>-9<0044>-4<0051>-11<00470003005200490003>]TJ
The Scripting Wife and the man behind the wildly popular blog The Scripting Guy. It is 
no exaggeration to say that Ed and his wife Teresa are two of the most active people in 
the PowerShell community. Ed is known for his practical 23how to24 approach to Pow
erShell. Having worked with so many customers and people learning PowerShell, Ed 
knows what questions you are going to have even before you have them and has taken 
the time to lay it all out for you in his new book: Windows PowerShell 3.0 Step by Step. 
27Jeffrey Snover, Distinguished Engineer and Lead Architect, Microsoft Windows
Introduction
indows PowerShell 3.0 is an essential management and automation tool that 
brings the simplicity of the command line to next generation operating systems. 
Included in Windows 8 and Windows Server 2012, and portable to Windows 7 and 
Windows Server 2008 R2, Windows PowerShell 3.0 offers unprecedented power and 
[<00C1>-10<0048>-6<005B>-8<004C0045>-6<004C004F004C>-5<0057>-38<005C00030057>-1<005200030048>-8<0059>1<0048>-10<0055>-47<005C>1<0052>-7<0051>-9<004800030049>-12<0055>-12<0052>-7<005000030053>-13<0052>-3<005A>-2<0048>-10<005500030058>-6<0056>-12<0048>-10<0055>-26<005600030057>-1<005200030048>-10<00510057>-3<0048>-10<0055>-12<0053>-7<0055>-12<004C>-5<0056>-12<004800030051>-9<0048>-10<0057>-35<005A>-2<0052>-7<0055>-12<004E00030044>-11<0047>1<0050>-2<004C0051>-2<004C>-5<0056>-16<0057>-2<0055>-8<0044>-3<0057>-1<0052>-7<0055>-26<005600030044>-4<0051>-11<00470003>]TJ
architects.  
Who should read this book
This book exists to help IT Pros come up to speed quickly on the exciting Windows 
PowerShell 3.0 technology. 
Windows PowerShell 3.0 Step by Step
[<0003004C>-5<005600030056>-4<0053>-13<0048>-16<0046>4<004C>-4<00C0>-5<0046>-14<0044>-4<004F>1<004F>-12<005C00030044>-2<004C0050>-9<0048>-16<004700030044>-3<00570003>]TJ
several audiences, including:
Windows networking consultants
  Anyone desiring to standardize and to 
[<0044>-6<0058>-5<0057>-1<0052>-7<0050>-7<0044>-3<0057>-3<004800030057>-2<004B>-9<00480003004C0051>-9<0056>-16<0057>-19<0044>-4<004F>1<004F>-5<0044>-3<0057>-2<004C>-5<0052>-7<005100030044>-4<0051>-11<0047000300460052>-7<005100C0>-7<004A>-3<0058>1<0055>-8<0044>-3<0057>-2<004C>-5<0052>-7<005100030052>1<004900030047>-5<0052>-2<0057>33<0010>-4<0051>-9<0048>-10<005700030051>-9<0048>-10<0057>-35<005A>-2<0052>-7<0055>-12<004E>-14<004C0051>-11<004A000300460052>-7<0050>-4<0053>-13<0052>-7<0051>-9<0048>-10<00510057>-19<0056>-19<00110003>]TJ
Windows network administrators
  Anyone desiring to automate the day-to-
day management of Windows dot-net networks.
[<0030>-7<004C>-10<0046>-19<0055>-18<0052>-9<0056>-12<0052>-8<0049>-31<005700030026>-7<0048>-18<0055>-33<0057>-17<004C>-9<00C0>-11<0048>-20<004700030036>-14<0052>-12<004F>-12<0058>-7<0057>-17<004C>-10<0052>-11<0051>-15<005600030028>-29<005B>-12<0053>-16<0048>-18<0055>-33<0057>-22<00560003000B>-3<0030>-9<0026>-13<0036>-12<0028>-22<0056>23<000C00030044>-12<0051>-14<004700030030>-7<004C>-10<0046>-19<0055>-18<0052>-9<0056>-12<0052>-8<0049>-31<005700030026>-7<0048>-18<0055>-32<0057>-17<004C>-9<00C0>-11<0048>-20<00470003>]TJ
[<0037>54<0055>-5<0044>-11<004C>-10<0051>-14<0048>-18<0055>-21<00560003000B>-4<0030>-9<0026>-19<0037>53<0056>23<000C>]TJ
  Windows PowerShell is a key component of many Microsoft 
[<00460052>-9<0058>1<0055>-26<0056>-12<0048>-12<005600030044>-4<0051>-11<004700030046>-1<0048>-10<0055>-41<0057>-2<004C>-5<00C0>-5<0046>-14<0044>-3<0057>-2<004C>-5<0052>-7<005100030048>-6<005B>-6<0044>-4<0050>-9<0056>-19<00110003>]TJ
General technical staff
[<000300030024>-11<0051>4<005C>1<0052>-7<0051>-9<004800030047>-7<0048>-12<0056>-3<004C0055>-12<004C0051>-11<004A00030057>-1<0052000300460052>-6<004F>1<004F>-7<0048>-16<0046>-25<00570003004C0051>2<0049>-7<0052>-7<0055>-12<0050>-7<0044>-3<0057>-2<004C>-5<0052>-7<0051>-14<000F00030046>1<0052>-7<0051>-1<00C0>-7<004A>-3<0058>1<0055>-12<004800030056>-12<0048>-10<0057>]TJ
tings on Windows machines.
Power users
[<000300030024>-11<0051>4<005C>1<0052>-7<0051>-9<00480003005A>-9<004C>-5<0056>-4<004B>-2<004C0051>-11<004A00030057>-1<005200030052>-7<0045>-5<0057>-19<0044>-2<004C005100030050>-7<0044>-14<005B>-8<004C0050>-6<0058>1<005000030053>-13<0052>-3<005A>-2<0048>-10<005500030044>-4<0051>-11<004700030046>1<0052>-7<005100C0>-7<004A>-3<0058>1<0055>-8<0044>-4<0045>-6<004C004F004C>-5<0057>-38<005C00030052>1<00490003>]TJ
their Windows machines either at home or in an unmanaged desktop workplace 
environment.
ssumptions
This book expects that you are familiar with the Windows operating system, and 
therefore basic networking terms are not explained in detail. The book does not expect 
you to have any background in programming, development, or scripting. All elements 
related to these topics, as they arise, are fully explained. 
Who should not read this book
Not every book is aimed at every possible audience. This is not a Windows PowerShell 
3.0 reference book, and therefore extremely deep, esoteric topics are not covered. 
While some advanced topics are covered, in general the discussion starts with beginner 
topics and proceeds through an intermediate depth. If you have never seen a computer, 
[<0051>-9<0052>-7<00550003004B>-7<0044>1<0059>1<004800030044>-4<0051>4<005C0003004C>-5<0047>-7<0048>-10<00440003005A>-9<004B>-7<0044>-3<0057000300440003004E>12<0048>-7<005C>-12<0045>-13<0052>-10<0044>-4<0055>-13<004700030052>-7<00550003004400030050>-9<0052>-9<0058>-6<0056>-12<004800030044>-4<0055>-12<0048>-9<000F00030057>-2<004B>-9<0048>-10<005100030057>-2<004B>-2<004C>-5<005600030045>-13<0052>-13<0052>-7<004E00030047>-7<0048>-9<00C0>-2<0051>-2<004C>-5<0057>-3<0048>-11<004F>-12<005C0003004C>-5<005600030051>-9<0052>-2<00570003>]TJ
for you. 
Organization of this book
This book is divided into three sections, each of which focuses on a different aspect or 
[<0057>-3<0048>-16<0046>4<004B>-4<0051>-9<0052>-6<004F>-7<0052>-13<004A>-12<005C0003005A>-9<004C>-5<0057>-2<004B>-2<004C005100030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F0003005A>-2<0052>-7<0055>-12<004F>-8<0047>-8<001100030037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030056>-12<0048>-16<0046>-25<0057>-2<004C>-5<0052>-7<005100030053>-7<0055>-12<0052>-1<0059>-12<004C>-5<0047>-7<0048>-12<00560003004400030054>-3<0058004C>-3<0046>4<004E0003>]TJ
overview of Windows PowerShell and its fundamental role in Windows Management. 
It then delves into the details of Windows PowerShell remoting. The second section 
covers the basics of Windows PowerShell scripting. The last portion of the book covers 
[<0047004C>-3<0049>-39<0049>-7<0048>-10<0055>-12<0048>-10<0051>-1<005700030050>-7<0044>-4<0051>-7<0044>-11<004A>-7<0048>-10<0050>-9<0048>-10<0051>-1<005700030057>-3<0048>-16<0046>4<004B>-4<0051>-9<0052>-6<004F>-7<0052>-13<004A>-12<005C00030044>-4<0051>-11<004700030047004C>-5<0056>-13<0046>-2<0058>-6<0056>-14<0056>-12<0048>-12<005600030056>-4<0053>-13<0048>-16<0046>4<004C>-4<00C0>-5<004600030044>-4<0053>-7<0053>-8<004F004C>-3<0046>-14<0044>-3<0057>-2<004C>-5<0052>-7<0051>-9<005600030056>-6<0058>-5<0046>4<004B00030044>-10<0056000300240046>-25<0057>-2<004C>-12<0059>1<00480003>]TJ
Directory and Exchange. 
Finding your best starting point in this book
The different sections of 
Windows PowerShell 3.0 Step by Step
 cover a wide range of 
technologies associated with the data library. Depending on your needs and your exist
[<004C0051>-11<004A00030058>1<0051>-11<0047>-7<0048>-10<0055>-26<0056>-16<0057>-19<0044>-4<0051>-11<0047004C0051>-11<004A00030052004900030030>-2<004C>-3<0046>4<0055>-12<0052>-7<0056>-12<00520049>-41<005700030047>-3<0044>-3<0057>-19<0044000300570052>-13<0052>-6<004F>-8<0056>-20<000F0003005C>1<0052>-9<005800030050>-7<0044>2<005C0003005A>-9<004C>-5<0056>-4<004B00030057005200030049>-7<0052>-13<0046>-2<0058>-6<005600030052>-7<005100030056>-3<0053>-13<0048>-16<0046>4<004C>-4<00C0>-5<004600030044>-4<0055>-12<0048>-10<0044>-10<00560003005200490003>]TJ
the book. Use the following table to determine how best to proceed through the book.
If you are
Follow these steps
New to Windows PowerShell
Focus on Chapters 1263 and 5269, or read through the 
entire book in order.
An IT pro who knows the basics of Windows 
PowerShell and only needs to learn how to 
manage network resources
[<0025>-14<0055>-19<004C>-12<0048>-16<00C1>-21<005C00030056>-11<004E>-21<004C>-7<005000030026>1<004B>-14<0044>-11<0053>-12<0057>-10<0048>-17<0055>-32<005600030014>9<00B2>-24<00160003004C>-10<00490003005C>-6<0052>-16<005800030051>-16<0048>-23<0048>-23<00470003004400030055>-19<0048>-15<0049>-19<0055>-19<0048>-19<0056>-11<004B>-16<0048>-17<005500030052>-14<00510003>]TJ
the core concepts.
Read up on the new technologies in Chapters 4 and 
102614.
Interested in Active Directory and Exchange
Read Chapters 152617 and 20.
Interested in Windows PowerShell Scripting
Read Chapters 5268, 18, and 19.
Most of the book22s chapters include hands-on samples that let you try out the con
cepts just learned. 
  
Conventions and features in this book
This book presents information using conventions designed to make the information 
readable and easy to follow.
Each chapter concludes with two exercises.
Each exercise consists of a series of tasks, presented as numbered steps 1, 2, 
and so on listing each action you must take to complete the exercise.
Boxed elements with labels such as 23Note24 provide additional information or 
alternative methods for completing a step successfully.
Text that you type apart from code blocks appears in bold.
A plus sign + between two key names means that you must press those keys at 
the same time. For example, 23Press Alt+Tab24 means that you hold down the Alt 
key while you press the Tab key.
A vertical bar between two or more menu items e.g. File | Close, means that 
[<005C>1<0052>-9<005800030056>-3<004B>-9<0052>-9<0058>1<004F>-8<004700030056>-12<0048>-11<004F>-7<0048>-16<0046>-25<005700030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030050>-9<0048>-10<0051>-6<005800030052>-7<005500030050>-9<0048>-10<0051>-6<00580003004C>-5<0057>-3<0048>-10<0050>-14<000F00030057>-2<004B>-9<0048>-10<005100030057>-2<004B>-9<004800030051>-9<0048>-6<005B>-37<0057>-20<000F00030044>-3<0051>-11<004700030056>-12<005200030052>-7<0051>-14<0011>]TJ
System requirements
You will need the following hardware and software to complete the practice exercises in 
this book:
One of the following: Windows 7, Windows Server 2008 with Service Pack 2, 
Windows Server 2008 R2, Windows 8 or Windows Server 2012.
Computer that has a 1.6GHz or faster processor 2GHz recommended
1 GB 32 Bit or 2 GB 64 Bit RAM Add 512 MB if running in a virtual machine 
or SQL Server Express Editions, more for advanced SQL Server editions
3.5 GB of available hard disk space
5400 RPM hard disk drive
DirectX 9 capable video card running at 1024 
 768 or higher-resolution display
DVD-ROM drive if installing Visual Studio from DVD
Internet connection to download software or chapter examples
[<0027>-12<0048>-10<0053>-13<0048>-10<0051>-11<0047004C0051>-11<004A00030052>-7<00510003005C>1<0052>-9<0058>1<00550003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<0056000300460052>-7<005100C0>-7<004A>-3<0058>1<0055>-8<0044>-3<0057>-2<004C>-5<0052>-7<0051>-14<000F0003005C>1<0052>-9<005800030050>-2<004C>-5<004A>1<004B>-2<005700030055>-12<0048>-16<0054>-3<0058004C0055>-12<00480003002F>-8<0052>-13<0046>-14<0044>-4<004F00030024>-3<0047>1<0050>-2<004C0051>-2<004C>-5<0056>-16<0057>-2<0055>-8<0044>-3<0057>-1<0052>-7<00550003>]TJ
[<0055>-12<004C>-5<004A>1<004B>-1<0057>-19<005600030057>-1<00520003004C0051>-9<0056>-16<0057>-19<0044>-4<004F>1<004F00030052>-7<0055000300460052>-7<005100C0>-7<004A>-3<0058>1<0055>-12<004800030039>-17<004C>-5<0056>-6<0058>-3<0044>-4<004F00030036>14<0057>-8<0058>-7<0047004C>-5<0052000300150013>13<0014>18<001300030044>-4<0051>-11<004700030036>-4<0034>-9<002F00030036>-11<0048>-10<0055>-47<0059>1<0048>-10<0055000300150013>-31<0013>-17<001B00030053>-7<0055>-12<0052>-13<0047>-3<0058>-5<0046>-25<0057>-19<0056>-19<0011>]TJ
Code samples
Most of the chapters in this book include exercises that let you interactively try out new 
material learned in the main text. All sample projects, in both their pre-exercise and 
post-exercise formats, can be downloaded from the following page:
http://aka.ms/PowerShellSBS_book
[<0029>-3<0052>-6<004F>1<004F>-7<0052>-3<005A00030057>-2<004B>-9<00480003004C0051>-9<0056>-16<0057>-2<0055>-17<0058>-5<0046>-25<0057>-2<004C>-5<0052>-7<0051>-9<005600030057>-1<005200030047>-5<0052>-3<005A>-9<0051>-4<004F>-7<0052>-10<0044>-11<004700030057>-2<004B>-9<004800030056>-13<0046>4<0055>-12<004C0053>-5<0057>-19<0056>-19<0011>-24<005D>-5<004C0053000300C0>-2<004F>-7<0048>-7<0011>]TJ
ote
In addition to the code samples, your system should have Windows 
PowerShell 3.0 installed.
Installing the code samples 
Follow these steps to install the code samples on your computer so that you can use 
them with the exercises in this book.
1.
[<0024>3<0049>-41<0057>-3<0048>-10<00550003005C>1<0052>-9<005800030047>-5<0052>-3<005A>-9<0051>-4<004F>-7<0052>-10<0044>-11<004700030057>-2<004B>-9<004800030056>-13<0046>4<0055>-12<004C0053>-5<0057>-19<0056>-19<0011>-24<005D>-4<004C0053000300C0>-2<004F>-7<0048>-9<000F00030050>-7<0044>-4<004E>12<004800030056>-6<0058>1<0055>-12<00480003005C>1<0052>-10<005800030058>1<0051>-4<0045>-8<004F>-7<0052>-13<0046>4<004E0003004C>-5<005700030045>-2<005C00030055>-11<004C>-5<004A>1<004B>-1<0057>33<0010>]TJ
[<0046>4<004F004C>-3<0046>4<004E>-14<004C0051>-11<004A00030052>-7<005100030057>-2<004B>-9<004800030056>-13<0046>4<0055>-12<004C0053>-5<0057>-19<0056>-19<0011>-24<005D>-5<004C0053000300C0>-2<004F>-7<0048>-9<000F00030044>-3<0051>-11<004700030057>-2<004B>-9<0048>-10<005100030046>4<004F004C>-3<0046>4<004E>-14<004C0051>-11<004A00030052>-7<005100030057>-2<004B>-9<004800030038>-2<0051>-4<0045>-8<004F>-7<0052>-13<0046>4<004E00030045>-9<0058>-5<0057>-31<0057>-1<0052>-7<005100030052>-7<005100030057>-2<004B>-9<00480003>]TJ
property sheet.
2.
[<0038>-2<0051>-12<005D>-5<004C005300030057>-2<004B>-9<004800030056>-13<0046>4<0055>-12<004C0053>-5<0057>-19<0056>-19<0011>-24<005D>-4<004C0053000300C0>-2<004F>-7<004800030057>-2<004B>-7<0044>-3<00570003005C>1<0052>-9<005800030047>-5<0052>-3<005A>-9<0051>-4<004F>-7<0052>-10<0044>-11<0047>-7<0048>-16<004700030049>-12<0055>-12<0052>-7<005000030057>-2<004B>-9<004800030045>-13<0052>-13<0052>-7<004E>-36<00B7>26<00560003005A>-2<0048>-10<0045>-8<0056>-4<004C>-5<0057>-3<00480003000B>28<0051>-7<0044>-4<0050>-9<0048000300440003>]TJ
[<0056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<004600030047004C0055>-12<0048>-16<0046>-25<0057>-1<0052>-7<0055>-47<005C00030044>-4<004F>-7<0052>-7<0051>-11<004A0003005A>-9<004C>-5<0057>-2<004B00030047004C0055>-12<0048>-16<0046>-25<0057>-2<004C>-5<0052>-7<0051>-9<005600030057>-1<005200030046>4<0055>-12<0048>-10<0044>-3<0057>-3<00480003004C>-5<0057>-20<000F0003004C>-3<004900030051>-9<0048>-16<0046>-2<0048>-12<0056>-14<0056>-17<0044>-4<0055>-47<005C>7<000C>14<0011>]TJ
Acknowledgments
I22d like to thank the following people: my agent Claudette Moore, because without her 
this book would never have come to pass. My editors Devon Musgrave and Michael 
Bolinger for turning the book into something resembling English, and my technical 
  
[<0055>-12<0048>-8<0059>-12<004C>-5<0048>-9<005A>-2<0048>-10<005500030037>-7<004B>-9<0052>-7<0050>-7<0044>-10<00560003002F>-10<0048>-16<00480003005A>-9<004B>-9<0052>-7<0056>-12<004800030044>-3<0057>-31<0057>-3<0048>-10<0051>-1<0057>-2<004C>-5<0052>-7<005100030057>-1<005200030047>-7<0048>-10<0057>-19<0044>-2<004C004F00030047>-7<0048>-9<00C0>-2<0051>-2<004C>-5<0057>-3<0048>-11<004F>-12<005C00030048>-10<0051>-9<0056>-5<0058>1<0055>-12<0048>-16<00470003004400030050>-6<0058>-5<0046>4<004B00030045>-13<0048>-10<0057>-31<0057>-3<0048>-10<005500030045>-13<0052>-13<0052>-7<004E>-26<00110003>]TJ
Lastly I want to acknowledge my wife Teresa aka the Scripting Wife who read every 
[<0053>-9<0044>-11<004A>-7<004800030044>-4<0051>-11<004700030050>-7<0044>-11<0047>-7<004800030051>-6<0058>1<0050>-9<0048>-10<0055>-12<0052>-9<0058>-6<005600030056>-6<0058>-7<004A>-7<004A>-7<0048>-12<0056>-16<0057>-2<004C>-5<0052>-7<0051>-9<005600030057>-2<004B>-7<0044>-3<00570003005A>-9<004C004F>1<004F00030045>-13<00480003005200490003004A>1<0055>-12<0048>-10<0044>-3<005700030045>-13<0048>-10<0051>-9<0048>-9<00C0>-7<005700030057005200030045>-13<0048>-16<004A004C0051>-4<0051>-2<004C0051>-11<004A0003>]TJ
scripters. 
Errata and book support
We22ve made every effort to ensure the accuracy of this book and its companion con
tent. Any errors that have been reported since this book was published are listed on our 
Microsoft Press site at 
oreilly.com:
http://go.microsoft.com/FWLink/?Linkid=
275530
[<002C00490003005C>1<0052>-9<0058000300C0>-2<0051>-11<004700030044>-4<005100030048>-10<0055>-12<0055>-12<0052>-7<005500030057>-2<004B>-7<0044>-3<00570003004C>-5<005600030051>-9<0052>-2<005700030044>-4<004F>1<0055>-12<0048>-10<0044>-11<0047>-12<005C0003004F004C>-5<0056>-16<0057>-3<0048>-16<0047>-9<000F0003005C>1<0052>-9<005800030046>-14<0044>-4<005100030055>-12<0048>-10<0053>-13<0052>-7<0055>-41<00570003004C>-5<005700030057005200030058>-6<005600030057>-2<004B>-4<0055>-12<0052>-9<0058>-7<004A>1<004B00030057>-2<004B>-9<00480003>]TJ
same page.
If you need additional support, email Microsoft Press Book Support at 
mspinput@microsoft.com
Please note that product support for Microsoft software is not offered through the 
addresses above.
We want to hear from you
At Microsoft Press, your satisfaction is our top priority, and your feedback our most 
valuable asset. Please tell us what you think of this book at: 
http://www.microsoft.com/learning/booksurvey
The survey is short, and we read every one of your comments and ideas. Thanks in 
advance for your input!
Stay in touch
Let22s keep the conversation going! We22re on Twitter: 
http://twitter.com/MicrosoftPress
CHAPTER 1
Overview of 
Windows PowerShell 3.0
fter completing this chapter, you will be able to:
Understand basic use and capabilities of Windows PowerShell.
Install Windows PowerShell.
Use basic command-line utilities inside Windows PowerShell.
Use Windows PowerShell help.
Run basic Windows PowerShell cmdlets.
Get help on basic Windows PowerShell cmdlets.
[<0026>2<0052>-7<005100C0>-7<004A>-3<0058>1<0055>-12<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030057>-1<005200030055>-17<0058>1<005100030056>-12<0046>4<0055>-12<004C0053>-5<0057>-19<0056>-19<0011>]TJ
[<0037>-7<004B>-9<004800030055>-12<0048>-11<004F>-7<0048>-10<0044>-10<0056>-12<004800030052004900030030>-2<004C>-3<0046>4<0055>-12<0052>-7<0056>-12<00520049>-41<00570003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030016>-7<0011>-9<001300030050>-7<0044>-4<0055>-12<004E>-31<00560003004400030056>-3<004C>-5<004A>1<0051>-2<004C>-5<00C0>-5<0046>-14<0044>-4<0051005700030044>-11<0047>-12<0059>-5<0044>-4<0051>-9<0046>-2<004800030049>-7<0052>-7<005500030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<00560003>]TJ
[<0051>-9<0048>-10<0057>-35<005A>-2<0052>-7<0055>-12<004E00030044>-11<0047>1<0050>-2<004C0051>-2<004C>-5<0056>-16<0057>-2<0055>-8<0044>-3<0057>-1<0052>-7<0055>43<001100030026>2<0052>-7<0050>-4<0045>-6<004C0051>-2<004C0051>-11<004A00030057>-2<004B>-9<004800030053>-13<0052>-3<005A>-2<0048>-10<00550003005200490003004400030049>-18<0058>1<004F>1<004F>-3<0010>4<00C1>-10<0048>-16<0047>-7<004A>-7<0048>-16<004700030056>-12<0046>4<0055>-12<004C0053>-5<0057>-2<004C0051>-11<004A0003004F>-5<0044>-4<0051>-11<004A>-3<0058>-3<0044>-11<004A>-7<00480003005A>-9<004C>-5<0057>-2<004B00030044>-9<00460046>-2<0048>-12<0056>-14<005600030057>-1<00520003>]TJ
command-line utilities, 
Windows Management Instrumentation WMI, and even VBScript, Windows 
PowerShell provides the power and ease of use that have been missing from the Windows plat
form since the beginning of time. As part of the Microsoft Common Engineering Criteria, Windows 
PowerShell is quickly becoming the management solution for the Windows platform. IT professionals 
using the Windows Server 2012 core installation must come to grips with Windows PowerShell sooner 
rather than later.  
Understanding Windows PowerShell
Perhaps the biggest obstacle for a Windows network administrator in migrating to Windows 
PowerShell 3.0 is understanding what PowerShell actually is. In some respects, it is a replacement 
for the venerable 
CMD command shell. In fact, on Windows Server 2012 running in core mode, it is 
possible to replace the CMD shell with Windows PowerShell so that when the server boots up, it uses 
Windows PowerShell as the interface. As shown here, after Windows PowerShell launches, you can use 
 to change the working directory, and then use 
dir
 to produce a directory listing in exactly the same 
way you would perform these tasks from the CMD shell.
You can also combine traditional CMD interpreter commands with some of the newer utilities, such 
as 
fsutil
. This is shown here:
The preceding two examples show Windows PowerShell being used in an interactive man
ner. Interactivity is one of the primary features of Windows PowerShell, and you can begin to use 
Windows PowerShell interactively by opening a Windows PowerShell prompt and typing commands. 
[<003C>49<0052>-9<005800030046>-14<0044>-4<005100030048>-10<00510057>-3<0048>-10<005500030057>-2<004B>-9<0048000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<0047>-6<005600030052>-7<0051>-9<004800030044>-3<00570003004400030057>-2<004C0050>-9<0048>-9<000F00030052>-6<00550003005C>1<0052>-9<005800030046>-14<0044>-4<00510003004A>1<0055>-12<0052>-9<0058>1<005300030057>-2<004B>-9<0048>-10<0050000300570052>-13<004A>-7<0048>-10<0057>-2<004B>-9<0048>-10<00550003004F004C004E>12<00480003004400030045>-9<0044>-3<0057>-1<0046>4<004B000300C0>-2<004F>-7<0048>-7<00110003002C0003005A>-9<004C004F>1<004F0003>]TJ
discuss this later because you will need more information to understand it.
Using cmdlets
In 
addition to using Windows console applications and built-in commands, you can also use the 
cmdlets
 pronounced 
commandlets
 that are built into Windows PowerShell. Cmdlets can be cre
ated by anyone. The Windows PowerShell team creates the core cmdlets, but many other teams at 
Microsoft were involved in creating the hundreds of cmdlets shipping with Windows 8. They are like 
executable programs, but they take advantage of the facilities built into Windows PowerShell, and 
therefore are easy to write. They are not scripts, which are uncompiled code, because they are built 
using the services of a special .NET Framework namespace. Windows PowerShell 3.0 comes with 
about 1,000 cmdlets on Windows 8, and as additional features and roles are added, so are additional 
cmdlets. These cmdlets are designed to assist the network administrator or consultant to leverage 
the power of Windows PowerShell without having to learn a scripting language. One of the strengths 
of Windows PowerShell is that 
cmdlets use a standard naming convention that follows a verb-noun 
pattern, such as 
Get-Help
Get-EventLog, 
 Get-Process.
 The cmdlets using the 
get
 verb display 
information about the item on the right side of the dash. The cmdlets that use the 
set
 verb modify 
or set information about the item on the right side of the dash. An example of a cmdlet that uses the 
set
 verb is 
Set-Service
, which can be used to change the start mode of a service. All cmdlets use one 
[<0052004900030057>-2<004B>-9<004800030056>-16<0057>-19<0044>-4<0051>-11<0047>-3<0044>-4<0055>-13<004700030059>1<0048>-10<0055>-12<0045>-8<0056>-19<001100030037>55<0052000300C0>-2<0051>-11<004700030044>-4<004F>1<004F00030052004900030057>-2<004B>-9<004800030056>-16<0057>-19<0044>-4<0051>-11<0047>-3<0044>-4<0055>-12<004700030059>1<0048>-10<0055>-12<0045>-8<0056>-20<000F0003005C>1<0052>-9<005800030046>-14<0044>-4<005100030058>-6<0056>-12<004800030057>-2<004B>-9<00480003>]TJ
Get-Verb
 cmdlet. In Windows 
PowerShell 3.0, there are nearly 100 approved verbs. 
Installing Windows PowerShell
Windows 
PowerShell 3.0 comes with Windows 8 Client and Windows Server 2012. You can down
load the 
Windows Management Framework 3.0 package containing updated versions of 
Windows 
Remote Management WinRM, WMI, and Windows PowerShell 3.0 from the Microsoft Download 
center. Because Windows 8 and Windows Server 2012 come with Windows PowerShell 3.0, there is no 
Windows Management Framework 3.0 package available for download27it is not needed. In order to 
install Windows Management Framework 3.0 on Windows 7, Windows Server 2008 R2, and Windows 
Server 2008, they all must be running at least 
Service Pack SP 1 and the Microsoft .NET Framework 
4.0. There is no package for Windows Vista, Windows Server 2003, or earlier versions of the operating 
system. You can run both Windows PowerShell 3.0 and Windows PowerShell 2.0 on the same system, 
but this requires both the .NET Framework 3.5 and 4.0.
To prevent frustration during the installation, it makes sense to use a script that checks for the 
operating system, service pack level, and .NET Framework 4.0. A sample script that will check for the 
prerequisites is 
Get-PowerShellRequirements.ps1, which follows.
Deploying Windows PowerShell to down-level 
operating systems
After 
Windows PowerShell is downloaded from 
http://www.microsoft.com/downloads
, you can deploy 
it to your enterprise by using any of the standard methods. Here are few of the methods that you can 
use to accomplish Windows PowerShell deployment:
Create a 
[<0030>-2<004C>-3<0046>4<0055>-12<0052>-7<0056>-12<00520049>-41<005700030036>18<005C>-12<0056>-16<0057>-3<0048>-10<0050>-9<0056000300260048>-10<00510057>-3<0048>-10<005500030026>2<0052>-7<005100C0>-7<004A>-3<0058>1<0055>-8<0044>-3<0057>-2<004C>-5<0052>-7<005100030030>-5<0044>-4<0051>-7<0044>-11<004A>-7<0048>-10<005500030053>-9<0044>-9<0046>4<004E>-11<0044>-11<004A>-7<004800030044>-4<0051>-11<004700030044>-11<0047>-12<0059>1<0048>-10<0055>-41<0057>-2<004C>-5<0056>-12<00480003004C>-5<005700030057005200030057>-2<004B>-9<00480003>]TJ
appropriate 
organizational unit OU or collection.
Create a 
Group Policy Object GPO in Active Directory Domain Services AD DS and link it to 
the appropriate OU.
Approve the update in 
Software Update Services SUS when available.
[<0024>-3<0047>-7<004700030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030030>-6<0044>-4<0051>-7<0044>-11<004A>-7<0048>-10<0050>-9<0048>-10<0051005700030029>13<0055>-8<0044>-4<0050>-9<0048>-9<005A>-2<0052>-7<0055>-12<004E00030016>-7<0011>-9<001300030053>-9<0044>-9<0046>4<004E>-11<0044>-11<004A>-7<0048>-12<005600030057>-1<00520003004400030046>-1<0048>-10<00510057>-2<0055>-8<0044>-4<004F000300C0>-2<004F>-7<004800030056>-4<004B>-7<0044>-4<0055>-12<004800030052>-7<00550003005A>-2<0048>-10<0045>-7<0053>-9<0044>-11<004A>-7<00480003>]TJ
for self service.
If you are not deploying to an entire enterprise, perhaps the easiest way to install Windows 
PowerShell is to download the package and step through the wizard. 
ote
To use a 
command-line utility in Windows PowerShell, launch Windows PowerShell 
by choosing Start | Run | PowerShell
At the PowerShell prompt, type in the command 
to run.
Using command-line utilities
As 
mentioned earlier, command-line utilities can be used directly within Windows PowerShell. The 
advantages of using command-line utilities in Windows PowerShell, as opposed to simply run
ning them in the CMD interpreter, are the Windows PowerShell pipelining and formatting features. 
[<0024>-3<0047>-7<0047004C>-5<0057>-2<004C>-5<0052>-7<0051>-7<0044>-4<004F>1<004F>-12<005C>34<000F0003004C>-3<00490003005C>1<0052>-9<00580003004B>-7<0044>1<0059>1<004800030045>-9<0044>-3<0057>-1<0046>4<004B000300C0>-2<004F>-7<0048>-12<005600030052>-7<005500030026>11<0030>-4<0027000300C0>-2<004F>-7<0048>-12<005600030057>-2<004B>-7<0044>-3<005700030044>-4<004F>1<0055>-12<0048>-10<0044>-11<0047>-12<005C00030058>-6<0056>-12<004800030048>-6<005B>-8<004C>-5<0056>-16<0057>-2<004C0051>-11<004A000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<0047>-2<0010>-5<004F004C0051>-9<004800030058>-5<0057>-2<004C004F004C>-5<0057>-2<004C>-5<0048>-12<0056>-20<000F0003005C>1<0052>-9<00580003>]TJ
can easily modify them to run within the Windows PowerShell environment. The following procedure 
illustrates adding 
[<004C>1<0053>-3<0046>9<00520051>-1<00C0004A>]TJ
[<000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<0047>-6<005600030057>-1<00520003004400030057>-3<0048>-6<005B>-37<0057000300C0>-2<004F>-7<0048>-7<0011>]TJ
unning
[<004C>1<0053>1<0046>11<0052>2<0051>-1<00C0004A>]TJ
 commands
1.
Start Windows PowerShell by choosing Start | Run | Windows PowerShell
 The PowerShell 
prompt will open by default at the root of your Documents folder.
2.
Enter the command 
[<004C>-10<0053>-14<0046>-11<0052>-11<0051>-7<00C0>-13<004A00030012>27<0044>-12<004F>-9<004F>]TJ
. This is shown here:
3.
Pipe the result of 
[<004C>-6<0053>-10<0046>2<0052>-7<0051>-8<00C0>-7<004A00030012>28<0044>-5<004F>-3<004F>]TJ
[<00030057>-1<00520003004400030057>-3<0048>-6<005B>-37<0057000300C0>-2<004F>-7<0048>-7<001100030037>-7<004B>-2<004C>-5<00560003004C>-5<00560003004C>-1<004F>1<004F>-4<0058>-6<0056>-16<0057>-2<0055>-8<0044>-3<0057>-3<0048>-16<00470003004B>-9<0048>-10<0055>-12<0048>5<001D>]TJ
4.
[<0032>-11<0053>-13<0048>-10<005100030031>-7<0052>-2<0057>-3<0048>-10<0053>-9<0044>-11<004700030057>-1<005200030059>-12<004C>-5<0048>-9<005A00030057>-2<004B>-9<0048000300460052>-7<00510057>-3<0048>-10<00510057>-19<005600030052004900030057>-2<004B>-9<004800030057>-3<0048>-6<005B>-37<0057000300C0>-2<004F>-7<0048>-9<000F00030044>-10<005600030049>-7<0052>-6<004F>1<004F>-7<0052>-3<005A>-12<0056>-5<001D>]TJ
Typing a single command into Windows PowerShell is useful, but at times you may need more 
[<0057>-2<004B>-7<0044>-4<005100030052>-7<0051>-9<0048000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<004700030057>-1<005200030053>-7<0055>-12<0052>-1<0059>-12<004C>-5<0047>-7<004800030057>-2<0055>-12<0052>-9<0058>1<0045>-8<004F>-7<0048>-12<0056>-4<004B>-9<0052>-13<0052>-2<0057>-2<004C0051>-11<004A0003004C0051>2<0049>-7<0052>-7<0055>-12<0050>-7<0044>-3<0057>-2<004C>-5<0052>-7<005100030052>-7<0055000300460052>-7<005100C0>-7<004A>-3<0058>1<0055>-8<0044>-3<0057>-2<004C>-5<0052>-7<005100030047>-7<0048>-10<0057>-19<0044>-2<004C004F>-8<005600030057>-1<005200030044>-11<0056>-14<0056>-4<004C>-5<0056>-16<00570003005A>-9<004C>-5<0057>-2<004B0003>]TJ
setup issues or performance problems. This is where Windows PowerShell really shines. In the past, 
[<005C>1<0052>-9<00580003005A>-2<0052>-9<0058>1<004F>-8<00470003004B>-7<0044>1<0059>1<004800030048>-9<004C>-5<0057>-2<004B>-9<0048>-10<00550003004B>-7<0044>-11<004700030057>-1<00520003005A>-9<0055>-12<004C>-5<0057>-3<00480003004400030045>-9<0044>-3<0057>-1<0046>4<004B000300C0>-2<004F>-7<004800030052>-7<005500030057>-38<005C>-12<0053>-13<004800030057>-2<004B>-9<0048000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<0047>-6<005600030050>-7<0044>-4<0051>-6<0058>-3<0044>-4<004F>1<004F>-12<005C>35<001100030037>-7<004B>-2<004C>-5<00560003004C>-5<005600030056>-4<004B>-9<0052>-3<005A>-9<00510003004C005100030057>-2<004B>-9<00480003>]TJ
TroubleShoot.bat script that follows.
roubleShoot.bat
Of course, if you typed the commands manually, then you had to wait for each command to com
plete before entering the subsequent command. In that case, it was always possible to lose your place 
in the command sequence, or to have to wait for the result of each command. Windows PowerShell 
eliminates this problem. You can now enter multiple commands on a single line, and then leave the 
[<00460052>-7<0050>-4<0053>-9<0058>-5<0057>-3<0048>-10<005500030052>-7<005500030053>-13<0048>-10<0055>-38<0049>-7<0052>-7<0055>-12<005000030052>-2<0057>-2<004B>-9<0048>-10<005500030057>-19<0044>-10<0056>-4<004E>-31<00560003005A>-9<004B>-2<004C004F>-7<004800030057>-2<004B>-9<0048000300460052>-7<0050>-4<0053>-9<0058>-5<0057>-3<0048>-10<005500030053>-7<0055>-12<0052>-13<0047>-3<0058>-5<0046>-2<0048>-12<005600030057>-2<004B>-9<004800030052>-10<0058>-5<0057>-2<0053>-9<0058>-5<0057>-20<001100030031>-7<005200030045>-9<0044>-3<0057>-1<0046>4<004B000300C0>-2<004F>-7<004800030051>-9<0048>-16<0048>-16<0047>-6<005600030057>-1<005200030045>-13<00480003>]TJ
written to achieve this capability.
Use multiple commands on a single Windows PowerShell line. Type each complete 
command, and then use a semicolon to separate each command.
The following exercise describes how to run multiple commands. The commands used in the pro
cedure are in the 
[<00350058>1<0051>-4<0051>-2<004C0051>-11<004A>-1<0030>-6<0058>1<004F>-6<0057>-2<004C0053>-8<004F>-7<0048>-20<0026>2<0052>-7<0050>-4<0050>-7<0044>-4<0051>-11<0047>-6<0056>-19<0011>12<0057>-34<005B>-37<0057000300C0>-2<004F>-7<0048>-7<0011>]TJ
unning 
multiple commands
1.
Open Windows PowerShell by choosing
Start | Run | Windows PowerShell
The PowerShell 
prompt will open by default at the root of your Documents And Settings folder.
2.
Enter the 
[<004C>-10<0053>-14<0046>-11<0052>-11<0051>-7<00C0>-13<004A00030012>27<0044>-12<004F>-9<004F>]TJ
[<000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<0047>-8<001100030033>3<004C0053>-13<004800030057>-2<004B>-9<004800030052>-10<0058>-5<0057>-2<0053>-9<0058>-5<00570003005700520003004400030057>-3<0048>-6<005B>-37<0057000300C0>-2<004F>-7<004800030046>-15<0044>-4<004F>1<004F>-7<0048>-16<004700030037>57<0056>-4<004B>-9<0052>-13<0052>-2<0057>-20<0011>12<0057>-34<005B>-37<005700030045>-2<005C00030058>-6<0056>-4<004C0051>-11<004A00030057>-2<004B>-9<00480003>]TJ
redirection arrow >. This is the result:
3.
On the same line, use a semicolon to separate the
[<004C>-6<0053>-10<0046>2<0052>-7<0051>-8<00C0>-7<004A00030012>28<0044>-5<004F>-3<004F>]TJ
 command from the 
route print
[<00460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<0047>-8<001100030024>-10<0053>-7<0053>-13<0048>-10<0051>-11<004700030057>-2<004B>-9<004800030052>-10<0058>-5<0057>-2<0053>-9<0058>-5<005700030049>-12<0055>-12<0052>-7<005000030057>-2<004B>-9<0048000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<00470003005700520003004400030057>-3<0048>-6<005B>-37<0057000300C0>-2<004F>-7<004800030046>-15<0044>-4<004F>1<004F>-7<0048>-16<004700030037>57<0056>-4<004B>-9<0052>-13<0052>-2<0057>-20<0011>12<0057>-34<005B>-37<005700030045>-2<005C00030058>-6<0056>-4<004C0051>-11<004A00030057>-2<004B>-9<00480003>]TJ
redirect-and-append arrow >>. Here is the command so far:
4.
On the same line, use a semicolon to separate the 
route print
 command from the 
hostname 
[<00460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<0047>-8<001100030024>-10<0053>-7<0053>-13<0048>-10<0051>-11<004700030057>-2<004B>-9<004800030052>-10<0058>-5<0057>-2<0053>-9<0058>-5<005700030049>-12<0055>-12<0052>-7<005000030057>-2<004B>-9<0048000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<00470003005700520003004400030057>-3<0048>-6<005B>-37<0057000300C0>-2<004F>-7<004800030046>-15<0044>-4<004F>1<004F>-7<0048>-16<00470003>]TJ
Tshoot.txt by using the 
redirect-and-append arrow. The command up to this point is shown here:
5.
On the same line, use a semicolon to separate the 
hostname
 command from the 
net statistics 
workstation
[<000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<0047>-8<001100030024>-10<0053>-7<0053>-13<0048>-10<0051>-11<004700030057>-2<004B>-9<004800030052>-10<0058>-5<0057>-2<0053>-9<0058>-5<005700030049>-12<0055>-12<0052>-7<005000030057>-2<004B>-9<0048000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<00470003005700520003004400030057>-3<0048>-6<005B>-37<0057000300C0>-2<004F>-7<004800030046>-14<0044>-4<004F>1<004F>-7<0048>-16<004700030037>57<0056>-4<004B>-9<0052>-13<0052>-2<0057>-20<0011>12<0057>-34<005B>-37<00570003>]TJ
by using the redirect-and-append arrow. The completed command looks like the following:
Security issues with Windows PowerShell
 with any tool as versatile as Windows PowerShell, there are bound to be some security concerns. 
Security, however, was one of the design goals in the development of Windows PowerShell.
When you launch Windows PowerShell, it opens in your Documents folder; this ensures you are in 
a directory where you will have permission to perform certain actions and activities. This is far safer 
than opening at the root of the drive, or even opening in system root.
To change to a directory in the Windows PowerShell console, you cannot automatically go up to 
the next level; you must explicitly name the destination of the change-directory operation although 
you can use the 
cd ..
 command to move up one level.
The running of scripts is disabled by default and can be easily managed through group policy. It 
can also be managed on a per-user or per-session basis. 
Controlling execution of PowerShell cmdlets
Have 
you ever opened a CMD interpreter prompt, typed in a command, and pressed Enter so that 
you could see what it does? What if that command happened to be 
Format C:
? Are you sure you 
want to format your C drive? This section will cover some arguments that can be supplied to cmdlets 
that allow you to control the way they execute. Although not all cmdlets support these arguments, 
most of those included with Windows PowerShell do. The three arguments you can use to control 
execution are 
-whatif
[<0010>-16<0046>9<00520051>-1<00C00055>1<0050>]TJ
, and 
suspend. 
Suspend
 is not really an argument that is supplied to 
[<004400030046>4<0050>-11<0047>1<004F>-7<0048>-10<0057>-20<000F00030045>-9<0058>-5<005700030055>-8<0044>-3<0057>-2<004B>-9<0048>-10<00550003004C>-5<005600030044>-4<005100030044>-9<0046>-25<0057>-2<004C>-5<0052>-7<00510003005C>1<0052>-9<005800030046>-14<0044>-4<005100030057>-19<0044>-4<004E>12<004800030044>-3<00570003004400030046>1<0052>-7<005100C0>-2<0055>-12<0050>-7<0044>-3<0057>-2<004C>-5<0052>-7<005100030053>-7<0055>-12<0052>-7<0050>-4<0053>-5<0057>-20<000F00030044>-3<0051>-11<00470003004C>-5<005600030057>-2<004B>-9<0048>-10<0055>-12<0048>-8<0049>-7<0052>-7<0055>-12<004800030044>-4<0051>-9<0052>-2<0057>-2<004B>-9<0048>-10<00550003>]TJ
method of controlling execution.
ote
To use 
 at a Windows PowerShell prompt, enter the cmdlet. Type the 
-whatif
 parameter after the cmdlet. This only works for cmdlets that change system state. 
Therefore, there is no 
 parameter for cmdlets like 
 that only display 
information.
Windows PowerShell cmdlets that change system state such as 
Set-Service
 support a 
prototype 
mode 
that you can enter by using the 
-whatif
 parameter. The developer decides to implement 
-whatif
when developing the cmdlet; however, the Windows PowerShell team recommends that developers 
implement 
-whatif
. The use of the 
-whatif
 argument is shown in the following procedure. The com
mands used in the procedure are in the 
[<00380056004C>3<0051>-8<004A>19<003A>-7<004B>-4<00440057>1<004C0049>16<0011>15<0057>-31<005B>-34<0057>3<0003>3<00C0>1<004F>-4<0048>-4<0011>]TJ
Using 
-whatif
 to prototype a command
1.
Open Windows PowerShell by choosing
Start | Run | Windows PowerShell
The PowerShell 
prompt will open by default at the root of your Documents And Settings folder.
2.
Start an instance of 
Notepad.exe. Do this by typing 
notepad
 and pressing the Enter key. This 
is shown here:
3.
Identify the Notepad process you just started by using the 
Get-Process
 cmdlet. Type enough 
of the process name to identify it, and then use a 
wildcard asterisk * to avoid typing the 
entire name of the process, as follows:
4.
Examine the output from the 
Get-Process
 cmdlet and identify the process ID. The output 
on my machine is shown here. Please note that in all likelihood, the 
process ID used by your 
instance of Notepad.exe will be different from the one on my machine.
5.
Use 
-whatif
 to see what would happen if you used 
Stop-Process
 to stop the process ID you 
obtained in step 4. This process ID will be found under the Id column in your output. Use the 
-id
 parameter to identify the Notepad.exe process. The command is as follows:
6.
Examine the output from the command. It tells you that the command will stop the Notepad 
process with the process ID that you used in your command. 
[<002600520051>2<00C0>4<0055>-6<0050>2<004C>5<0051>-6<004A>-8<0003>-8<0044>-11<0046>-16<0057>5<004C>1<00520051>-9<0056>]TJ
As 
described in the previous section, you can use 
-whatif
 to prototype a cmdlet in Windows PowerShell. 
This is useful for seeing what a cmdlet would do; however, if you want to be prompted before the 
execution of the cmdlet, you can use the 
[<0010>-16<0046>9<00520051>-1<00C00055>1<0050>]TJ
[<00030044>-4<0055>-12<004A>-3<0058>1<0050>-9<0048>-10<00510057>-20<001100030037>-7<004B>-9<004800030046>4<0050>-11<0047>1<004F>-7<0048>-10<0057>-19<005600030058>-6<0056>-12<0048>-16<00470003004C005100030057>-2<004B>-9<004800030005>9<0026>2<0052>-7<005100C0>-2<0055>-12<0050>-2<004C0051>-11<004A00030057>-2<004B>-9<0048>-10<0003>]TJ
execution of cmdlets" procedure are listed in the 
[<0026>4<0052>-5<0051>2<00C00055>-10<0050004C>2<0051>-9<004A>1<0028>-26<005B>4<0048>-14<00460058>-3<0057004C>-3<0052>-5<0051>-12<0032>-17<0049>-26<0026>10<0050>-9<0047>3<004F>-5<0048>-8<0057>-17<0056>-17<0011>14<0057>-32<005B>-35<0057>2<0003>2<00C0004F>-5<0048>-5<0011>]TJ
[<0026>-2<0052>-2<005100C0>3<0055>-8<0050>1<004C>4<0051>-7<004A00030057>-2<004B>-8<004800030048>-5<005B>6<0048>-13<0046>-8<0058>1<0057>4<004C0052>-2<005100030052>-1<004900030046>-8<0050>-8<0047>4<004F>-4<0048>-11<0057>-12<0056>]TJ
1.
Open Windows PowerShell, start an instance of Notepad.exe, identify the process, and exam
ine the output, just as in steps 1 through 4 in the previous exercise.
2.
Use the 
[<0010>-16<0046>9<00520051>-1<00C00055>1<0050>]TJ
 argument to force a prompt when using the 
Stop-Process
 cmdlet to stop the 
[<0031>-7<0052>-2<0057>-3<0048>-10<0053>-9<0044>-11<004700030053>-7<0055>-12<0052>-13<0046>-2<0048>-12<0056>-14<00560003004C>-5<0047>-7<0048>-10<00510057>-2<004C>-5<00C0>-7<0048>-16<004700030045>-2<005C00030057>-2<004B>-9<00480003>]TJ
Get-Process note*
 command. This is shown here:
The 
Stop-Process
 cmdlet, when used with the 
[<0010>-16<0046>9<00520051>-1<00C00055>1<0050>]TJ
 argument, displays the following con
[<00C0>5<0055>-5<00500044>4<0057>5<004C>2<00520051>7<0003>7<00530055>-5<00520050>3<0053>2<0057>-9<001D>]TJ
3.
Type 
 and press Enter. The Notepad.exe process ends. The Windows PowerShell prompt 
returns to the default, ready for new commands, as shown here:
[<0037>58<005200030056>-3<0058>-4<0056>-1<0053>-11<0048>-8<0051>-9<004700030046>7<0050>-9<0047>3<004F>-5<0048>-8<005700030046>3<0052>-5<0051>2<00C00055>-9<0050>-5<0044>-1<0057004C>-3<0052>-5<0051>-12<000F00030044005700030057004B>-7<004800030046>3<0052>-5<0051>2<00C00055>-9<0050>-5<0044>-1<0057004C>-3<0052>-5<005100030053>-4<0055>-10<0052>-5<0050>-2<0053>-3<005700030049>-10<0055>-10<0052>-5<005000030057>1<004B>-7<004800030046>6<0050>-9<0047>4<004F>-5<0048>-8<0057>-17<000F00030057>-35<005C>-10<0053>-11<00480003>]TJ
and press Enter.
[<0036>4<00580056>4<0053>-3<004800510047>11<004C>11<0051004A>-2<0003>-2<0046>3<0052>6<0051>8<00C0>10<005500500044>1<0057>11<004C>7<0052>6<0051>-2<0003>-2<0052>6<0049>-2<0003>-2<0046>-1<0050>-1<0047>12<004F>3<0048>-4<0057>-6<0056>]TJ
The 
[<0044>-4<0045>-6<004C004F004C>-5<0057>-38<005C00030057005200030053>-7<0055>-12<0052>-7<0050>-4<0053>-5<005700030049>-7<0052>-7<0055000300460052>-7<005100C0>-2<0055>-12<0050>-7<0044>-3<0057>-2<004C>-5<0052>-7<005100030052>1<004900030057>-2<004B>-9<004800030048>-6<005B>2<0048>-16<0046>-2<0058>-5<0057>-2<004C>-5<0052>-7<005100030052>1<00490003004400030046>4<0050>-11<0047>1<004F>-7<0048>-10<00570003004C>-5<005600030048>-7<005B>-37<0057>-2<0055>-12<0048>-10<0050>-9<0048>-11<004F>-12<005C00030058>-6<0056>-12<0048>-8<0049>-18<0058>1<004F00030044>-4<0051>-11<004700030044>-3<005700030057>-2<004C0050>-9<0048>-12<00560003>]TJ
may be vital to assisting in maintaining a high level of system uptime. There may be times when you 
[<0057>-38<005C>-12<0053>-13<00480003004C0051000300440003004F>-7<0052>-7<0051>-11<004A000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<004700030044>-4<0051>-11<004700030057>-2<004B>-9<0048>-10<005100030055>-12<0048>-10<0050>-9<0048>-10<0050>-4<0045>-13<0048>-10<005500030057>-2<004B>-7<0044>-3<00570003005C>1<0052>-10<005800030051>-9<0048>-16<0048>-16<004700030057>-1<005200030046>4<004B>-9<0048>-16<0046>4<004E00030052>-7<005100030056>-12<0052>-7<0050>-9<0048>-10<0057>-2<004B>-2<004C0051>-11<004A00030048>-11<004F>-8<0056>-12<0048000300C0>-2<0055>-26<0056>-16<0057>-20<001100030029>-3<0052>-7<00550003>]TJ
example, you may be in the middle of stopping a number of processes, but you need to view details 
on the processes to ensure you do not stop the wrong one. For such eventualities, you can tell the 
[<00460052>-7<0051>-1<00C0>-2<0055>-12<0050>-7<0044>-3<0057>-2<004C>-5<0052>-7<00510003005C>1<0052>-9<00580003005A>-2<0052>-9<0058>1<004F>-8<00470003004F004C004E>12<004800030057>-1<005200030056>-6<0058>-6<0056>-4<0053>-13<0048>-10<0051>-11<004700030048>-6<005B>2<0048>-16<0046>-2<0058>-5<0057>-2<004C>-5<0052>-7<005100030052004900030057>-2<004B>-9<0048000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<0047>-8<001100030037>-7<004B>-9<0048000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<0047>-6<005600030058>-6<0056>-12<0048>-16<004700030049>-7<0052>-7<005500030056>-6<0058>-6<0056>-4<0053>-13<0048>-10<0051>-11<0047>]TJ
ing execution of a cmdlet are in the 
[<0036>6<0058>1<0056>3<0053>-6<0048>-3<0051>-4<0047>-6<0026>9<00520051>7<00C0>5<0055>-5<00500044>4<0057>5<004C>2<00520051>-7<0032>-12<0049>-21<0026>15<0050>-4<0047>8<004F0048>-3<0057>-12<0056>-12<0011>19<0057>-27<005B>-30<0057>7<0003>7<00C0>5<004F00480011>]TJ
Suspending execution of a cmdlet
1.
Open Windows PowerShell, start an instance of Notepad.exe, identify the process, and exam
ine the output, just as in steps 1 through 4 in the previous exercise. The output on my machine 
is shown following. Please note that in all likelihood, the process ID used by your instance of 
Notepad.exe will be different from the one on my machine.
2.
Use the 
[<0010>-16<0046>9<00520051>-1<00C00055>1<0050>]TJ
 argument to force a prompt when using the 
Stop-Process
 cmdlet to stop the 
[<0031>-7<0052>-2<0057>-3<0048>-10<0053>-9<0044>-11<004700030053>-7<0055>-12<0052>-13<0046>-2<0048>-12<0056>-14<00560003004C>-5<0047>-7<0048>-10<00510057>-2<004C>-5<00C0>-7<0048>-16<004700030045>-2<005C00030057>-2<004B>-9<00480003>]TJ
Get-Process note* 
command. This is illustrated here:
The 
Stop-Process
 cmdlet, when used with the 
[<0010>-16<0046>9<00520051>-1<00C00055>1<0050>]TJ
 argument, displays the following con
[<00C0>5<0055>-5<00500044>4<0057>5<004C>2<00520051>7<0003>7<00530055>-5<00520050>3<0053>2<0057>-9<001D>]TJ
3.
To suspend execution of the 
Stop-Process
 cmdlet, enter 
triple-arrow prompt will appear, 
as follows:
4.
Use the 
Get-Process
 cmdlet to obtain a list of all the running processes that begin with the let
ter 
. The syntax is as follows:
On my machine, two processes appear. The Notepad process I launched earlier and another 
process. This is shown here:
5.
[<0035>-2<0048>-10<0057>-8<0058>1<0055>-12<005100030057005200030057>-2<004B>-9<004800030053>-7<0055>-12<0048>-8<0059>-12<004C>-5<0052>-10<0058>-6<0056000300460052>-7<005100C0>-2<0055>-12<0050>-7<0044>-3<0057>-2<004C>-5<0052>-7<005100030053>-7<0055>-12<0052>-7<0050>-4<0053>-5<005700030045>-2<005C00030057>-37<005C>-12<0053>-6<004C0051>-11<004A0003>]TJ
exit
[<0032>-11<0051>-9<0046>-2<004800030044>-11<004A>-3<0044>-2<004C0051>-14<000F00030057>-2<004B>-9<0048000300460052>-7<005100C0>-2<0055>-12<0050>-7<0044>-3<0057>-2<004C>-5<0052>-7<005100030053>-7<0055>-12<0052>-7<0050>-4<0053>-5<005700030044>-4<0053>-7<0053>-13<0048>-10<0044>-4<0055>-26<005600030044>-10<005600030049>-7<0052>-6<004F>1<004F>-7<0052>-3<005A>-12<0056>-5<001D>]TJ
6.
Type 
[<00030044>-4<0051>-11<004700030053>-7<0055>-12<0048>-12<0056>-14<005600030028>3<0051>-1<0057>-3<0048>-10<005500030057>-1<005200030056>-16<0057>-1<0052>-7<005300030057>-2<004B>-9<004800030031>-7<0052>-2<0057>-3<0048>-10<0053>-9<0044>-11<004700030053>-7<0055>-12<0052>-13<0046>-2<0048>-12<0056>-14<0056>-19<001100030037>-7<004B>-9<0048>-10<0055>-12<00480003004C>-5<005600030051>-9<005200030049>-18<0058>1<0055>-41<0057>-2<004B>-9<0048>-10<0055000300460052>-7<0051>-1<00C0>-2<0055>-12<0050>-7<0044>-3<0057>-2<004C>-5<0052>-7<0051>-14<001100030037>-7<004B>-9<00480003>]TJ
prompt now displays the default Windows PowerShell prompt, as shown here:
Working with Windows PowerShell
[<0037>-7<004B>-2<004C>-5<005600030056>-12<0048>-16<0046>-25<0057>-2<004C>-5<0052>-7<00510003005A>-9<004C004F>1<004F0003004A>-5<00520003004C0051>-1<0057>-1<005200030047>-7<0048>-10<0057>-19<0044>-2<004C004F00030044>-4<0045>-13<0052>-9<0058>-5<00570003004B>-9<0052>-3<005A00030057>-1<005200030044>-9<00460046>-2<0048>-12<0056>-14<00560003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030044>-4<0051>-11<0047000300460052>-7<005100C0>-7<004A>-3<0058>1<0055>-12<004800030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<00560003>]TJ
PowerShell console. 
ccessing Windows PowerShell
After 
Windows PowerShell is installed on a down-level system, it becomes available for immediate 
use. However, using the 
[<003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<0056000300C1>-6<0044>-11<004A0003004E>12<0048>-7<005C00030052>-7<005100030057>-2<004B>-9<00480003004E>12<0048>-7<005C>-12<0045>-13<0052>-10<0044>-4<0055>-12<004700030044>-4<0051>-11<004700030053>-7<0055>-12<0048>-12<0056>-14<0056>-3<004C0051>-11<004A0003003500030057>-1<005200030045>-7<0055>-12<004C0051>-11<004A00030058>1<0053000300440003>]TJ
run
 com
mand prompt27or mousing around and choosing
Start | Run | Windows PowerShell all the time27will 
become time-consuming and tedious. This is not quite as big a problem on Windows 8, where you 
can just type 
PowerShell
 on the Start screen. On Windows 8, I pin both Windows PowerShell and 
the PowerShell ISE to both the Start screen and the taskbar. On Windows Server 2012 in core mode, 
I replace the CMD prompt with the Windows PowerShell console. For me and the way I work, this is 
ideal, so I wrote a script to do it. This script can be called through a log-on script to automatically 
deploy the shortcut on the desktop. On Windows 8, the script adds both the Windows PowerShell ISE 
and the Windows PowerShell console to both the Start screen and the taskbar. On Windows 7, it adds 
both to the taskbar and to the Start menu. The script only works for U.S. English26language operating 
systems. To make it work in other languages, change the value of 
$pinToStart
 or 
$pinToTaskBar
 to the 
equivalent values in the target language. 
ote
Using Windows PowerShell scripts is covered in Chapter 5, 23Using PowerShell Scripts.24 
See that chapter for information about how the script works and how to actually run 
the script. 
The script is called 
PinToStartAndTaskBar.ps1, and is as follows:
Pin
oStart
askBar.ps1
[<0026>8<0052>8<0051>10<00C0>6<004A>8<0058>13<0055>2<004C>13<0051>2<004A00030057>7<004B>1<00480003003A>-3<004C>13<0051>2<0047>7<0052>10<005A>2<005600030033>15<0052>10<005A>10<0048>2<0055>-12<0036>9<004B>1<0048>1<004F>14<004F00030046>5<0052>8<0051>-1<0056>-1<0052>6<004F>5<0048>]TJ
Many 
[<004C>-5<0057>-3<0048>-10<0050>-9<005600030046>-15<0044>-4<005100030045>-13<0048000300460052>-7<005100C0>-7<004A>-3<0058>1<0055>-12<0048>-16<004700030049>-7<0052>-7<00550003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F>-9<001100030037>-7<004B>-9<0048>-12<0056>-12<00480003004C>-5<0057>-3<0048>-10<0050>-9<005600030046>-15<0044>-4<005100030045>-13<004800030056>-16<0057>-1<0052>-7<0055>-12<0048>-16<00470003004C00510003004400030033>-6<0056>-13<00460052>-7<0051>-9<0056>-12<0052>-6<004F>-7<0048000300C0>-2<004F>-7<0048>-7<00110003>]TJ
[<0037>55<005200030048>-6<005B>-8<0053>-13<0052>-7<0055>-41<005700030057>-2<004B>-9<0048000300460052>-7<0051>-9<0056>-12<0052>-6<004F>-7<0048000300460052>-7<005100C0>-7<004A>-3<0058>1<0055>-8<0044>-3<0057>-2<004C>-5<0052>-7<0051000300C0>-2<004F>-7<0048>-9<000F00030058>-6<0056>-12<004800030057>-2<004B>-9<00480003>]TJ
Export-Console 
cmdlet, as shown here:
The 
[<0033>-6<0056>-13<00460052>-7<0051>-9<0056>-12<0052>-6<004F>-7<0048000300C0>-2<004F>-7<00480003004C>-5<005600030056>-17<0044>1<0059>1<0048>-16<00470003004C005100030057>-2<004B>-9<004800030046>-2<0058>1<0055>-12<0055>-12<0048>-10<0051005700030047004C0055>-12<0048>-16<0046>-25<0057>-1<0052>-7<0055>-47<005C00030045>-2<005C00030047>-7<0048>-8<0049>-9<0044>-6<0058>1<004F>-6<005700030044>-4<0051>-11<00470003004B>-7<0044>-10<005600030044>-4<005100030048>-6<005B>-37<0057>-3<0048>-10<0051>-9<0056>-3<004C>-5<0052>-7<005100030052004900030011>-8<0053>-8<0056>-13<0046>5<0014>-10<001100030037>-7<004B>-9<00480003>]TJ
[<0033>-6<0056>-13<00460052>-7<0051>-9<0056>-12<0052>-6<004F>-7<0048000300C0>-2<004F>-7<00480003004C>-5<005600030056>-17<0044>1<0059>1<0048>-16<00470003004C00510003003B>-6<0030>-4<002F00030049>-7<0052>-7<0055>-12<0050>-7<0044>-3<0057>-20<0011000300240003004A>-6<0048>-10<0051>-9<0048>-10<0055>-12<004C>-3<0046000300460052>-7<0051>-9<0056>-12<0052>-6<004F>-7<0048000300C0>-2<004F>-7<00480003004C>-5<005600030056>-4<004B>-9<0052>-3<005A>-9<00510003004B>-9<0048>-10<0055>-12<0048>5<001D>]TJ
Controlling PowerShell launch options
1.
Launch Windows PowerShell without the banner by using the 
-nologo
 argument. This is shown 
here: 
2.
[<002F>-26<0044>-6<0058>1<0051>-9<0046>4<004B0003004400030056>-3<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<004600030059>1<0048>-10<0055>-26<0056>-4<004C>-5<0052>-7<005100030052>1<00490003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030045>-3<005C00030058>-6<0056>-3<004C0051>-11<004A00030057>-2<004B>-9<00480003>]TJ
-version
 argument. To launch 
Windows PowerShell 2.0, you must install the .NET Framework 3.5. This is shown here:
3.
[<002F>-26<0044>-6<0058>1<0051>-9<0046>4<004B0003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030058>-6<0056>-3<004C0051>-11<004A0003004400030056>-3<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<0046000300460052>-7<0051>-1<00C0>-7<004A>-3<0058>1<0055>-8<0044>-3<0057>-2<004C>-5<0052>-7<0051000300C0>-2<004F>-7<004800030045>-3<005C00030056>-3<0053>-13<0048>-16<0046>4<004C>-3<0049>-48<005C>-12<004C0051>-11<004A00030057>-2<004B>-9<00480003>]TJ
[<0010>-14<005300560046>1<0052>-8<005100560052>-8<004F>-4<0048>-20<00C0>-9<004F>-4<0048>]TJ
argument, as follows:
4.
[<002F>-26<0044>-6<0058>1<0051>-9<0046>4<004B0003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F>-9<000F00030048>-6<005B>2<0048>-16<0046>-2<0058>-5<0057>-3<00480003004400030056>-3<0053>-13<0048>-16<0046>4<004C>-4<00C0>-5<0046000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<0047>-9<000F00030044>-3<0051>-11<004700030057>-2<004B>-9<0048>-10<005100030048>-6<005B>-8<004C>-5<005700030045>-2<005C00030058>-6<0056>-4<004C0051>-11<004A00030057>-2<004B>-9<00480003>]TJ
-command
[<00030044>-4<0055>-13<004A>-3<0058>1<0050>-9<0048>-10<00510057>-20<001100030037>-7<004B>-9<0048000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<00470003004C>-5<0057>-19<0056>-12<0048>-11<004F>-3<004900030050>-6<0058>-6<0056>-16<005700030045>-13<004800030053>-7<0055>-12<0048>-9<00C0>-11<005B>2<0048>-16<004700030045>-2<005C00030044>-4<00510003>]TJ
ampersand & and 
enclosed in curly brackets. This is shown here:
Supplying options for cmdlets
One of the useful features of Windows PowerShell is the standardization of the syntax in working with 
[<0046>4<0050>-11<0047>1<004F>-7<0048>-10<0057>-19<0056>-19<001100030037>-7<004B>-2<004C>-5<005600030059>-5<0044>-10<0056>-16<0057>-2<004F>-12<005C00030056>-3<004C0050>-4<0053>-8<004F004C>-5<00C0>-7<0048>-12<005600030057>-2<004B>-9<00480003004F>-7<0048>-10<0044>-4<0055>-12<0051>-2<004C0051>-11<004A00030052004900030057>-2<004B>-9<004800030051>-9<0048>-9<005A00030056>-4<004B>-9<0048>-11<004F>1<004F00030044>-4<0051>-11<00470003004F>-5<0044>-4<0051>-11<004A>-3<0058>-3<0044>-11<004A>-7<0048>-7<001100030037>59<0044>-4<0045>-8<004F>-7<004800030014>50<0010>59<00140003004F004C>-5<0056>-16<0057>-19<005600030057>-2<004B>-9<0048000300460052>-7<0050>-4<0050>-9<0052>-7<00510003>]TJ
parameters. Keep in mind that some cmdlets cannot implement some of these parameters. However, 
if these parameters are used, they will be interpreted in the same manner for all cmdlets, because the 
Windows PowerShell engine itself interprets the parameters.
TABLE 1-1
Common parameters
Parameter
Meaning
-whatif
Tells the cmdlet to not execute, but to tell you what would 
happen if the cmdlet were to run.
[<0010>-15<0046>9<00520051>-1<00C00055>1<0050>]TJ
Tells the cmdlet to prompt before executing the 
command.
-verbose
Instructs the cmdlet to provide a higher level of detail 
than a cmdlet not using the verbose parameter.
-debug
Instructs the cmdlet to provide debugging information.
-ErrorAction
Instructs the cmdlet to perform a certain action when an 
error occurs. Allowed actions are 
continue
stop
silently
Continue
, and 
inquire
-ErrorVariable
[<002C>-8<0051>-16<0056>-23<0057>-9<0055>-24<0058>-12<0046>-31<0057>-25<005600030057>-9<004B>-16<004800030046>-3<0050>-18<0047>-6<004F>-14<0048>-17<005700030057>-8<005200030058>-13<0056>-19<00480003004400030056>-11<0053>-20<0048>-23<0046>-3<004C>-12<00C0>-12<004600030059>-12<0044>-11<0055>-19<004C>-9<0044>-11<0045>-15<004F>-14<004800030057>-8<00520003004B>-16<0052>-13<004F>-15<004700030048>-17<0055>]TJ
ror information. This is in addition to the standard $error 
variable.
-OutVariable
[<002C>-8<0051>-16<0056>-23<0057>-9<0055>-24<0058>-12<0046>-31<0057>-25<005600030057>-9<004B>-16<004800030046>-3<0050>-18<0047>-6<004F>-14<0048>-17<005700030057>-8<005200030058>-13<0056>-19<00480003004400030056>-11<0053>-20<0048>-23<0046>-3<004C>-12<00C0>-12<004600030059>-12<0044>-11<0055>-19<004C>-9<0044>-11<0045>-15<004F>-14<004800030057>-8<00520003004B>-16<0052>-13<004F>-15<004700030057>-9<004B>-16<00480003>]TJ
output information.
-OutBuffer
Instructs the cmdlet to hold a certain number of objects 
before calling the next cmdlet in the pipeline.
ote
To get help on any cmdlet, use the 
cmdletname>
 cmdlet. For example, use 
Get-Help Get-Process 
 cmdlet.
Working with the help options
One 
[<0052004900030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030046>1<0052>-7<0050>-4<0050>-7<0044>-4<0051>-11<0047>-6<005600030057>-1<005200030055>-17<0058>1<00510003005A>-9<004B>-9<0048>-10<005100030052>-7<0053>-13<0048>-10<0051>-2<004C0051>-11<004A0003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030049>-7<0052>-7<005500030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030057>-2<004C0050>-9<00480003004C>-5<005600030057>-2<004B>-9<00480003>]TJ
Update-Help 
[<0046>4<0050>-11<0047>1<004F>-7<0048>-10<0057>-20<001100030037>-7<004B>-2<004C>-5<00560003004C>-5<005600030045>-13<0048>-16<0046>-14<0044>-6<0058>-6<0056>-12<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>6<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030047>-5<0052>-13<0048>-12<005600030051>-9<0052>-2<005700030056>-3<004B>-2<004C00530003004B>-9<0048>-11<004F>1<0053000300C0>-2<004F>-7<0048>-12<00560003005A>-9<004C>-5<0057>-2<004B00030057>-2<004B>-9<004800030053>-7<0055>-12<0052>-13<0047>-3<0058>-5<0046>-25<0057>-20<00110003>]TJ
This does not mean that no help presents itself27it does mean that help beyond simple syntax display 
requires an additional download. 
A default installation of Windows PowerShell 3.0 contains numerous modules that vary from 
installation to installation depending upon the operating system features and roles selected. In fact, 
Windows PowerShell 3.0 installed on Windows 7 workstations contains far fewer modules and cmdlets 
than are available on a similar Windows 8 workstation. This does not mean all is chaos, however, 
because the essential Windows PowerShell cmdlets27the 
core
 cmdlets27remain unchanged from 
installation to installation. The difference between installations is because additional features and 
roles often install additional Windows PowerShell modules and cmdlets. 
The modular nature of Windows PowerShell requires additional consideration when updating 
help. Simply running 
Update-Help
 does not update all of the modules loaded on a particular system. 
In fact, some modules may not support updatable help at all27these generate an error when you 
attempt to update help. The easiest way to ensure you update all possible help is to use both the 
module 
parameter and the 
force 
switched parameter. The command to update help for all installed 
modules that support updatable help is shown here:
The result of running the 
Update-Help
 cmdlet on a typical Windows 8 client system is shown in 
Figure 1-1.
FIGURE 1-1
[<0028>-2<0055>-16<0055>-17<0052>-11<0055>-30<005600030044>-9<0053>-11<0053>-17<0048>-14<0044>-8<00550003005A>-13<004B>-14<0048>-15<005100030044>-7<0057>-35<0057>-8<0048>-15<0050>-8<0053>-10<0057>-7<004C>-5<0051>-15<004A00030057>-5<005200030058>-4<0053>-19<0047>-8<0044>-8<0057>-7<00480003004B>-14<0048>-16<004F>-4<0053000300C0>-7<004F>-11<0048>-17<005600030057>-7<004B>-11<0044>-8<005700030047>-10<005200030051>-14<0052>-7<005700030056>-10<0058>-4<0053>-11<0053>-17<0052>-11<0055>-45<005700030058>-3<0053>-19<0047>-8<0044>-8<0057>-23<0044>-8<0045>-12<004F>-11<00480003004B>-14<0048>-15<004F>-4<0053>-4<0011>]TJ
One way to update help and not to receive a screen full of error messages is to run the 
Update-Help
 cmdlet and suppress the errors all together. This technique appears here:
The problem with this approach is that you can never be certain that you have actually received 
updated help for everything you wanted to update. A better approach is to hide the errors during the 
update process, but also to display errors after the update completes. The advantage to this approach 
is the ability to display cleaner errors. The 
UpdateHelpTrackErrors.ps1 script illustrates this technique. 
[<0037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030057>-2<004B>-2<004C0051>-11<004A00030057>-2<004B>-9<004800030038>-2<0053>-15<0047>-3<0044>-3<0057>-3<0048>-13<002B>-9<0048>-11<004F>1<0053>56<0037>56<0055>-8<0044>-9<0046>4<004E>-11<0028>3<0055>-12<0055>-12<0052>-7<0055>-26<0056>-19<0011>-8<0053>-8<0056>8<001400030056>-13<0046>4<0055>-12<004C0053>-5<005700030047>-5<0052>-13<0048>-12<00560003004C>-5<005600030057>-1<005200030048>-10<0050>-4<0053>-5<0057>-38<005C00030057>-2<004B>-9<004800030048>-10<0055>-12<0055>-12<0052>-7<005500030056>-16<0057>-19<0044>-9<0046>4<004E00030045>-3<005C00030046>-14<0044>-4<004F>1<004F004C0051>-11<004A00030057>-2<004B>-9<00480003>]TJ
clear 
method. Next, it calls the 
Update-Help
 module with both the 
module 
parameter and the 
force 
switched parameter. In addition, it uses the 
ErrorAction 
parameter 
ea
 is an alias for this parameter 
with a value of 0. A 0 value means that errors will not be displayed when the command runs. The 
script concludes by using a 
For 
loop to walk through the errors and displays the error exceptions. The 
complete UpdateHelpTrackErrors.ps1 script appears here.
ote
For information about writing Windows PowerShell scripts and about using the 
For 
loop, see Chapter 5
Once the UpdateHelpTrackErrors script runs, a progress bar displays indicating the progress as the 
[<0058>1<0053>-15<0047>-3<0044>-3<0057>-19<0044>-4<0045>-8<004F>-7<00480003004B>-9<0048>-11<004F>1<0053000300C0>-2<004F>-7<0048>-12<005600030058>1<0053>-15<0047>-3<0044>-3<0057>-3<0048>-7<001100030032>-11<0051>-9<0046>-2<004800030057>-2<004B>-9<004800030056>-13<0046>4<0055>-12<004C0053>-5<005700030046>1<0052>-7<0050>-4<0053>-8<004F>-7<0048>-10<0057>-3<0048>-12<0056>-20<000F00030044>-3<0051>4<005C00030048>-10<0055>-12<0055>-12<0052>-7<0055>-26<005600030044>-4<0053>-7<0053>-13<0048>-10<0044>-4<00550003004C005100030052>-7<0055>-13<0047>-7<0048>-10<0055>44<001100030037>-7<004B>-9<004800030056>-13<0046>4<0055>-12<004C0053>-5<005700030044>-4<0051>-11<00470003>]TJ
associated errors appear in Figure 1-2.
FIGURE 1-2
Cleaner error output from updatable help generated by the UpdateHelpTrackErrors script.
You can also determine which modules receive updated help by running the 
Update-Help 
cmdlet 
with the
-verbose 
parameter. Unfortunately, when you do this, the output scrolls by so fast that it is 
hard to see what has actually updated. To solve this problem, redirect the verbose output to a text 
[<00C0>-2<004F>-7<0048>-7<00110003002C>-1<005100030057>-2<004B>-9<0048000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<004700030057>-2<004B>-7<0044>-3<005700030049>-7<0052>-6<004F>1<004F>-7<0052>-3<005A>-12<0056>-20<000F00030044>-4<004F>1<004F00030050>-9<0052>-13<0047>-3<0058>1<004F>-7<0048>-12<005600030044>-3<0057>-31<0057>-3<0048>-10<0050>-4<0053>-5<005700030057005200030058>1<0053>-15<0047>-3<0044>-3<0057>-3<00480003>]TJ
help
. The verbose messages redirect 
[<0057>-1<00520003004400030057>-3<0048>-6<005B>-37<0057000300C0>-2<004F>-7<004800030051>-7<0044>-4<0050>-9<0048>-16<004700030058>1<0053>-15<0047>-3<0044>-3<0057>-3<0048>-16<0047>1<004B>-9<0048>-11<004F>1<0053>1<0011>12<0057>-34<005B>-37<00570003004C00510003004400030049>-6<0052>-6<004F>-8<0047>-7<0048>-10<005500030051>-7<0044>-4<0050>-9<0048>-16<004700030049>-23<0056>-12<0052>]TJ
off the root. 
Windows 
PowerShell has a high level of discoverability; that is, to learn how to use PowerShell, you 
can simply use PowerShell. Online help serves an important role in assisting in this discoverability. 
The help system in Windows PowerShell can be entered by several methods. To learn about using 
Windows PowerShell, use the 
Get-Help
 cmdlet as follows:
This command prints out help about the 
Get-Help
 cmdlet. The output from this cmdlet is illus
trated here:
The good thing about help with the Windows PowerShell is that it not only displays help about 
cmdlets, which you would expect, but it also has three levels of display: normal, detailed, and full. 
Additionally, you can obtain help about concepts in Windows PowerShell. This last feature is equiva
lent to having an online instruction manual. To retrieve a listing of all the conceptual help articles, use 
the 
Get-Help about*
 command, as follows:
Suppose you do not remember the exact name of the cmdlet you wish to use, but you remember 
it was a 
get
 cmdlet? You can use a wildcard, such as an 
  asterisk *, to obtain the name of the cmdlet. 
This is shown here:
This technique of using a wildcard operator can be extended further. If you remember that the 
cmdlet was a 
get
 cmdlet, and that it started with the letter 
, you can use the following syntax to 
retrieve the desired cmdlet:
Suppose, however, that you know the exact name of the cmdlet, but you cannot exactly remember 
the syntax. For this scenario, you can use the 
-examples
 argument. For example, for the 
Get-PSDrive
cmdlet, you would use 
Get-Help
 with the 
-examples
 argument, as follows:
To see help displayed one page at a time, you can use the 
Help
 function. The 
Help
 function passes 
your input to the 
Get-Help
 cmdlet, and pipelines the resulting information to the 
more.com 
utility. 
This causes output to display one page at a time in the Windows PowerShell console. This is useful if 
you want to avoid scrolling up and down to see the help output. 
ote
Keep in mind that in the Windows PowerShell ISE, the pager does not work, and 
therefore you will see no difference in output between 
 and 
. In the ISE, both 
Get-Help
 and 
 behave the same way. However, it is likely that if you are using the 
Windows PowerShell ISE, you will use 
 for your help instead of relying on 
Get-Help
This formatted output is shown in Figure 1-3.
FIGURE 1-3
Using 
Help
 to display information one page at a time.
Getting tired of typing 
Get-Help
 all the time? After all, it is eight characters long. The solution is to 
create an alias to the 
Get-Help
 cmdlet. An alias is a shortcut keystroke combination that will launch a 
program or cmdlet when typed. In the 23Creating an alias for the 
Get-Help
 cmdlet24 procedure, you will 
assign the 
Get-Help
 cmdlet to the G+H
key combination.
ote
[<003A>-8<004B>-7<0048>-8<005100030046>7<0055>-10<0048>-8<0044>-1<0057004C>2<0051>-9<004A00030044>-1<005100030044>-2<004F>2<004C0044>-8<005600030049>-5<0052>-5<00550003004400030046>7<0050>-9<0047>4<004F>-5<0048>-8<0057>-17<000F00030046>3<0052>-5<0051>2<00C00055>-9<00500003004C>-3<005700030047>-3<0052>-11<0048>-10<005600030051>-7<0052005700030044>-2<004F>3<0055>-10<0048>-8<0044>-9<0047>-9<005C0003004B>-4<0044>4<0059>3<004800030044>-2<005100030044>-2<004F>2<004C0044>-8<005600030045005C0003>]TJ
using 
. Use 
New-Alias
 to assign the cmdlet to a unique keystroke combination.
Creating an alias for the 
Get-Help
 cmdlet
1.
Open 
Windows PowerShell by choosing Start | Run | Windows PowerShell. The PowerShell 
prompt will open by default at the root of your Documents folder.
2.
[<0035>-2<0048>-10<0057>-2<0055>-12<004C>-5<0048>-8<0059>1<004800030044>-4<005100030044>-4<004F>1<0053>-7<004B>-7<0044>-4<0045>-13<0048>-10<0057>-2<004C>-3<00460003004F004C>-5<0056>-16<0057>-2<004C0051>-11<004A00030052004900030044>-4<004F>1<004F00030046>-2<0058>1<0055>-12<0055>-12<0048>-10<00510057>-2<004F>-12<005C00030047>-7<0048>-9<00C0>-2<0051>-9<0048>-16<004700030044>-4<004F004C>-2<0044>-10<0056>-12<0048>-12<0056>-20<000F00030044>-3<0051>-11<00470003004C0051>-9<0056>-4<0053>-13<0048>-16<0046>-25<005700030057>-2<004B>-9<00480003004F004C>-5<0056>-16<005700030049>-7<0052>-7<005500030052>-7<0051>-9<00480003>]TJ
assigned to either the 
Get-Help
 cmdlet or the keystroke combination G+H. The command to 
do this is as follows:
3.
After you have determined that there is no alias for the 
Get-Help
 cmdlet and that none is 
assigned to the 
G+H keystroke combination, review the syntax for the 
New-Alias
 cmdlet. Use 
the 
-full
 argument to the 
Get-Help
 cmdlet. This is shown here:
4.
Use the 
New-Alias 
cmdlet to assign the G+H keystroke combination to the 
Get-Help
 cmdlet. 
To do this, use the following command:
Exploring commands: step-by-step exercises
In the following exercises, you22ll explore the use of command-line utilities in Windows PowerShell. You 
will see that it is as easy to use command-line utilities in Windows PowerShell as in the CMD inter
preter; however, by using such commands in Windows PowerShell, you gain access to new levels of 
functionality.
Using command-line utilities
1.
Open 
Windows PowerShell by choosing Start | Run | Windows PowerShell. The PowerShell 
prompt will open by default at the root of your Documents folder.
2.
Change to the C:root directory by typing 
cd c:
 inside the PowerShell prompt:
3.
[<0032>-11<0045>-5<0057>-19<0044>-2<004C0051000300440003004F004C>-5<0056>-16<0057>-2<004C0051>-11<004A00030052004900030044>-4<004F>1<004F00030057>-2<004B>-9<0048000300C0>-2<004F>-7<0048>-12<00560003004C005100030057>-2<004B>-9<004800030026>-6<001D>3<003F>-3<0055>-12<0052>-13<0052>-2<005700030047004C0055>-12<0048>-16<0046>-25<0057>-1<0052>-7<0055>-47<005C00030045>-2<005C00030058>-6<0056>-3<004C0051>-11<004A00030057>-2<004B>-9<00480003>]TJ
dir 
command:
4.
Create a directory off the C:root directory by using the 
 command:
5.
[<0032>-11<0045>-5<0057>-19<0044>-2<004C0051000300440003004F004C>-5<0056>-16<0057>-2<004C0051>-11<004A00030052004900030044>-4<004F>1<004F000300C0>-2<004F>-7<0048>-12<005600030044>-4<0051>-11<004700030049>-7<0052>-6<004F>-8<0047>-7<0048>-10<0055>-26<0056000300520049>-39<004900030057>-2<004B>-9<004800030055>-12<0052>-13<0052>-2<005700030057>-2<004B>-7<0044>-3<005700030045>-13<0048>-16<004A004C00510003005A>-9<004C>-5<0057>-2<004B00030057>-2<004B>-9<00480003004F>-7<0048>-10<0057>-31<0057>-3<0048>-10<00550003>]TJ
6.
Change the working directory to the PowerShell working directory. You can do this by using 
the 
Set-Location
 command as follows: 
Obtain a listing of memory counters related to the available bytes by using the 
typeperf 
com
mand. This command is shown here:
8.
After a few counters have been displayed in the PowerShell window, press Ctrl+C to break the 
listing.
[<0027>-8<004C>-5<0056>-4<0053>-8<004F>-5<0044>2<005C00030057>-2<004B>-9<004800030046>-2<0058>1<0055>-12<0055>-12<0048>-10<0051005700030045>-13<0052>-13<0052>-2<005700030046>1<0052>-7<005100C0>-7<004A>-3<0058>1<0055>-8<0044>-3<0057>-2<004C>-5<0052>-7<005100030045>-2<005C00030058>-6<0056>-3<004C0051>-11<004A00030057>-2<004B>-9<00480003>]TJ
bootcfg 
command note that you must run 
this command with admin rights:
10.
Change the working directory back to the C:Mytest directory you created earlier:
11.
[<0026>8<0055>-12<0048>-10<0044>-3<0057>-3<004800030044000300C0>-2<004F>-7<004800030051>-7<0044>-4<0050>-9<0048>-16<00470003>]TJ
[<0050>3<005C>-41<0057>-3<0048>-12<0056>-16<0057>-30<00C0>-2<004F>-7<0048>-7<0011>12<0057>-34<005B>-37<00570003004C005100030057>-2<004B>-9<004800030026>-6<001D>3<003F0030>-8<005C>-41<0057>-3<0048>-12<0056>-16<005700030047004C0055>-12<0048>-16<0046>-25<0057>-1<0052>-7<0055>-47<005C>35<001100030038>-3<0056>-12<004800030057>-2<004B>-9<0048>]TJ
fsutil
 utility, and make the 
[<00C0>-2<004F>-7<004800030014>-8<000F>-9<0013>-31<0013>-31<001300030045>-3<005C>-41<0057>-3<0048>-12<00560003004C005100030056>-3<004C>-7<005D>-1<0048>-7<001100030037>55<005200030047>-5<005200030057>-2<004B>-2<004C>-5<0056>-20<000F00030058>-6<0056>-12<004800030057>-2<004B>-9<004800030049>-7<0052>-6<004F>1<004F>-7<0052>-3<005A>-9<004C0051>-11<004A000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<0047>8<001D>]TJ
12.
[<0032>-11<0045>-5<0057>-19<0044>-2<004C00510003004400030047>1<004C0055>-12<0048>-16<0046>-25<0057>-1<0052>-7<0055>-47<005C0003004F004C>-5<0056>-16<0057>-2<004C0051>-11<004A00030052004900030044>-4<004F>1<004F00030057>-2<004B>-9<0048000300C0>-2<004F>-7<0048>-12<00560003004C005100030057>-2<004B>-9<004800030026>-6<001D>3<003F0030>-8<005C>-41<0057>-3<0048>-12<0056>-16<005700030047004C0055>-12<0048>-16<0046>-25<0057>-1<0052>-7<0055>-47<005C00030045>-2<005C00030058>-6<0056>-3<004C0051>-11<004A00030057>-2<004B>-9<00480003>]TJ
Get-ChildItem
cmdlet.
13.
Print out the current date by using the 
Get-Date
 cmdlet.
14.
Clear the screen by using the 
cls
 command.
15.
Print out a listing of all the cmdlets built into Windows PowerShell. To do this, use the 
Get-
Command
 cmdlet.
16.
Use the 
Get-Command
 cmdlet to get the 
Get-Alias
 cmdlet. To do this, use the 
-name
 argu
ment while supplying 
Get-Alias
 as the value for the argument. This is shown here:
This concludes the step-by-step exercise. Exit Windows PowerShell by typing 
exit
 and press
ing Enter.
In the following exercise, you22ll use various help options to obtain assistance with various cmdlets.
Obtaining help
1.
Open 
Windows PowerShell by choosing Start | Run | Windows PowerShell. The PowerShell 
prompt will open by default at the root of your Documents folder.
2.
Use the 
Get-Help
 cmdlet to obtain help about the 
Get-Help
 cmdlet. Use the command 
Get-Help Get-Help
 as follows:
3.
To obtain detailed help about the 
Get-Help
 cmdlet, use the 
-detailed
 argument as follows:
4.
To retrieve technical information about the 
Get-Help
 cmdlet, use the
-full
 argument. This is 
shown here:
5.
If you only want to obtain a listing of examples of command usage, use the 
-examples
 argu
ment as follows:
6.
Obtain a listing of all the informational help topics by using the 
Get-Help
 cmdlet and the 
about
 noun with the 
asterisk 
* wildcard operator. The code to do this is shown here:
Obtain a listing of all the help topics related to 
get
 cmdlets. To do this, use the 
Get-Help
 cmd
let, and specify the word 
get
 followed by the wildcard operator as follows:
8.
Obtain a listing of all the help topics related to 
set
 cmdlets. To do this, use the 
Get-Help
cmdlet, followed by the 
set
 verb, followed by the asterisk wildcard. This is shown here:
This concludes this exercise. Exit Windows PowerShell by typing 
exit
 and pressing Enter.
Chapter 1 quick reference
Do This
Use an external command-line utility
Type the name of the command-line utility while inside 
Windows PowerShell.
Use multiple external command-line utilities sequentially
Separate each command-line utility with a semicolon on a 
single Windows PowerShell line.
Obtain a list of running processes
Use the 
Get-Process
 cmdlet.
Stop a process
Use the 
Stop-Process
 cmdlet and specify either the name 
or the process ID as an argument.
Model the effect of a cmdlet before actually performing 
the requested action
Use the 
-whatif
 argument.
Instruct Windows PowerShell to start up, run a cmdlet, 
and then exit
Use the 
PowerShell 
[<0046>-7<0052>-14<0050>-11<0050>-14<0044>-11<0051>-18<00470003005A>-16<004B>-9<004C>-8<004F>-14<004800030053>-14<0055>-19<0048>-16<00C0>-18<005B>-15<004C>-7<0051>-18<004A00030057>-9<004B>-16<004800030046>-3<0050>-18<0047>-6<004F>-14<0048>-17<00570003>]TJ
with & and enclosing the name of the cmdlet in curly 
brackets.
[<0033>-5<0055>-19<0052>-14<0050>-11<0053>-12<005700030049>-14<0052>-14<005500030046>-7<0052>-14<0051>-8<00C0>-9<0055>-18<0050>-14<0044>-10<0057>-9<004C>-12<0052>-14<005100030045>-20<0048>-15<0049>-14<0052>-14<0055>-19<004800030056>-23<0057>-8<0052>-14<0053>-14<0053>-13<004C>-7<0051>-18<004A0003004400030053>-13<0055>-19<0052>-20<0046>-9<0048>-19<0056>-21<0056>]TJ
Use the 
Stop-Process
 cmdlet while specifying the 
[<0010>-15<0046>9<00520051>-1<00C00055>1<0050>]TJ
argument.
CHAPTER 2
Using Windows PowerShell 
Cmdlets
fter completing this chapter, you will be able to:
Understand the basic use of Windows PowerShell cmdlets.
Use 
Get-Command
 to retrieve a listing of cmdlets.
[<0026>2<0052>-7<005100C0>-7<004A>-3<0058>1<0055>-12<004800030046>4<0050>-11<0047>1<004F>-7<0048>-10<005700030056>-12<0048>-10<0044>-4<0055>-10<0046>4<004B00030052>-7<0053>-5<0057>-2<004C>-5<0052>-7<0051>-9<0056>-19<0011>]TJ
[<0026>2<0052>-7<005100C0>-7<004A>-3<0058>1<0055>-12<004800030052>-10<0058>-5<0057>-2<0053>-9<0058>-5<005700030047004C>-5<0056>-4<0053>-8<004F>-5<0044>2<005C>35<00110003>]TJ
Use 
Get-Member
Use 
Show-Command
Use 
New-Object
The inclusion of a large amount of cmdlets in Microsoft Windows PowerShell makes it immediately 
useful to network administrators and others who need to perform various maintenance and admin
istrative tasks on their Windows servers and desktop systems. In this chapter, you22ll review several of 
[<0057>-2<004B>-9<004800030050>-9<0052>-7<0055>-12<004800030058>-6<0056>-12<0048>-8<0049>-18<0058>1<004F00030046>4<0050>-11<0047>1<004F>-7<0048>-10<0057>-19<005600030044>-11<00560003004400030050>-9<0048>-10<0044>-4<0051>-9<00560003005200490003004B>-2<004C>-5<004A>1<004B>-4<004F004C>-5<004A>1<004B>-1<0057>-2<004C0051>-11<004A00030057>-2<004B>-9<004800030053>-13<0052>-3<005A>-2<0048>-10<005500030044>-4<0051>-11<0047000300C1>-10<0048>-6<005B>-8<004C0045>-6<004C004F004C>-5<0057>-38<005C0003005200490003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F>-9<00110003>]TJ
[<002B>-8<0052>-3<005A>-2<0048>-8<0059>1<0048>-10<0055>39<000F00030057>-2<004B>-9<004800030055>-12<0048>-10<0044>-4<004F00030045>-13<0048>-10<0051>-9<0048>-9<00C0>-7<005700030052>1<004900030057>-2<004B>-2<004C>-5<005600030046>4<004B>-7<0044>-4<0053>-5<0057>-3<0048>-10<00550003004C>-5<005600030057>-2<004B>-9<004800030050>-9<0048>-10<0057>-2<004B>-9<0052>-13<0047>-5<0052>-6<004F>-7<0052>-13<004A>-11<005C0003005C>1<0052>-10<0058>4<00B7>7<004F>1<004F00030058>-6<0056>-12<004800030057>-1<005200030047004C>-5<0056>-13<00460052>-1<0059>1<0048>-10<005500030057>-2<004B>-9<004800030058>-6<0056>-12<004800030052004900030057>-2<004B>-9<004800030059>-5<0044>-4<0055>-12<004C>]TJ
ous cmdlets. All the scripts mentioned in this chapter are located in the download package from the 
Microsoft TechNet Script Center Script Repository 
http://aka.ms/PowerShellSBS_book
Understanding the basics of cmdlets
In 
Chapter 1, 23Overview of Windows PowerShell 3.0,24 you learned about using the various help utilities 
available that demonstrate how to use cmdlets. You looked at a couple of cmdlets that are helpful in 
[<00C0>-2<0051>-11<0047004C0051>-11<004A00030052>-9<0058>-5<00570003005A>-9<004B>-7<0044>-3<005700030046>1<0052>-7<0050>-4<0050>-7<0044>-4<0051>-11<0047>-6<005600030044>-4<0055>-12<004800030044>1<0059>-5<0044>-2<004C004F>-5<0044>-4<0045>-8<004F>-7<004800030044>-4<0051>-11<00470003004B>-9<0052>-3<005A00030057>-1<005200030052>-7<0045>-5<0057>-19<0044>-2<004C00510003004C0051>2<0049>-7<0052>-7<0055>-12<0050>-7<0044>-3<0057>-2<004C>-5<0052>-7<005100030044>-4<0045>-13<0052>-9<0058>-5<005700030057>-2<004B>-9<0048>-10<0050>-14<00110003002C>-1<005100030057>-2<004B>-2<004C>-5<005600030056>-12<0048>-16<0046>-25<0057>-2<004C>-5<0052>-7<0051>-14<000F0003>]TJ
you will learn some additional ways to use cmdlets in Windows PowerShell.
Typing long cmdlet names can be somewhat tedious. To simplify this process, type 
enough of the cmdlet name to uniquely distinguish it, and then press the Tab key on the 
keyboard. What is the result? 
 completes the cmdlet name for you. This also 
works with parameter names and other things you are entering such as .NET objects, direc
tories, registry keys, and so on. Feel free to experiment with this great time-saving tech
nique. You may never have to type 
 again!
Because the cmdlets return objects instead of string values, you can obtain additional information 
about the returned objects. The additional information would not be available if you were working 
with just string data. To take information from one cmdlet and feed it to another cmdlet, you can 
use the 
pipe character |. This may seem complicated, but it is actually quite simple and, by the end 
of this chapter, will seem quite natural. At the most basic level, consider obtaining a directory list
ing; after you have the directory listing, perhaps you would like to format the way it is displayed27as 
a table or a list. As you can see, obtaining the directory information and formatting the list are two 
separate operations. The second task takes place on the right side of the pipe.
Using the 
Get-ChildItem
 cmdlet
In 
Chapter 1, you used the 
dir
[<000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<004700030057>-1<005200030052>-7<0045>-5<0057>-19<0044>-2<004C0051000300440003004F004C>-5<0056>-16<0057>-2<004C0051>-11<004A00030052004900030044>-4<004F>1<004F00030057>-2<004B>-9<0048000300C0>-2<004F>-7<0048>-12<005600030044>-4<0051>-11<004700030049>-7<0052>-6<004F>-8<0047>-7<0048>-10<0055>-26<00560003004C00510003004400030047>1<004C0055>-12<0048>-16<0046>-25<0057>-1<0052>-7<0055>-47<005C>35<00110003>]TJ
This works because there is an alias built into Windows PowerShell that assigns the 
Get-ChildItem
cmdlet to the letter combination 
dir.
Obtaining a directory listing
In a Windows PowerShell console, enter the 
Get-ChildItem
 cmdlet followed by the directory to list. 
Remember that you can use tab completion to compete the command. Type 
get-ch
and press Tab to 
complete the command name. Here is the command:
ote
Windows PowerShell is not case sensitive, therefore 
Get-ChildItem
 all work the same way, because Windows PowerShell views all three as the 
same command.
In Windows PowerShell, there actually is no cmdlet called 
dir
, nor does Windows PowerShell actu
ally use the 
dir
 command from the DOS days. The alias 
dir
 is associated with the 
Get-ChildItem
 cmdlet. 
This is why the output from 
dir
 is different in Windows PowerShell from output appearing in the 
CMD.exe interpreter. The Windows PowerShell cmdlet 
Get-Alias
 resolves the association between 
dir 
and the 
Get-ChildItem
 cmdlet as follows:
If you use the 
Get-ChildItem
 cmdlet to obtain the directory listing, the output appears exactly the 
same as output produced in Windows PowerShell by using 
dir
 because 
dir
 is simply an alias for the 
Get-ChildItem
 cmdlet. This is shown here:
If you were to use 
Get-Help
 and then 
dir
, you would receive the same output as if you were to use 
Get-Help Get-ChildItem
. This is shown following, where only the name and the synopsis of the cmdlets 
are displayed in the output:
In Windows PowerShell, an alias and a full cmdlet name perform in exactly the same manner. 
You do not use an alias to modify the behavior of a cmdlet. To do that, create a function or a proxy 
function. 
Formatting a directory listing using the 
Format-List
 cmdlet
In a 
Windows PowerShell console, enter the 
Get-ChildItem
 cmdlet, followed by the directory to list, 
followed by the pipe character and the 
Format-List
 cmdlet. Here22s an example:
Formatting output with the 
Format-List
 cmdlet
1.
Open the Windows PowerShell console. 
2.
Use the 
Get-ChildItem
 cmdlet to obtain a directory listing of the C: directory.
3.
Use the 
Format-List
 cmdlet to arrange the output of 
Get-ChildItem
4.
Use the 
-property
 argument of the 
Format-List
 cmdlet to retrieve only a listing of the name of 
[<0048>-10<0044>-9<0046>4<004B000300C0>-2<004F>-7<00480003004C005100030057>-2<004B>-9<004800030055>-12<0052>-13<0052>-2<0057>-20<0011>]TJ
5.
Use the 
-property
 argument of the 
Format-List
 cmdlet to retrieve only a listing of the name 
[<0044>-4<0051>-11<00470003004F>-7<0048>-10<0051>-11<004A>-5<0057>-2<004B00030052>1<004900030048>-10<0044>-9<0046>4<004B000300C0>-2<004F>-7<00480003004C005100030057>-2<004B>-9<004800030055>-12<0052>-13<0052>-2<0057>-20<0011>]TJ
Using the 
Format-Wide
 cmdlet
In the 
same way that you use the 
Format-List
 cmdlet to produce output in a list, you can use the 
Format-Wide
 cmdlet to produce output that22s more compact. The difference is that 
Format-Wide
permits the selection of only a single property; however, you can choose how many columns you will 
use to display the information. By default, the 
Format-Wide
 cmdlet uses two columns. 
Formatting a directory listing using 
Format-Wide
1.
In a Windows PowerShell prompt, enter the 
Get-ChildItem
 cmdlet, followed by the directory 
to list, followed by the pipe character and the 
Format-Wide
 cmdlet. Here22s an example: 
2.
[<0026>8<004B>-7<0044>-4<0051>-11<004A>-7<004800030057>-1<00520003004400030057>-2<004B>-4<0055>-12<0048>-16<0048>-18<0010>-18<00460052>-6<004F>-4<0058>1<0050>-4<005100030047004C>-5<0056>-4<0053>-8<004F>-5<0044>2<005C00030044>-4<0051>-11<004700030056>-3<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<0046>-14<0044>-4<004F>1<004F>-12<005C00030056>-12<0048>-11<004F>-7<0048>-16<0046>-25<005700030057>-2<004B>-9<00480003>]TJ
name
 property. 
3.
Allow Windows PowerShell to maximize the amount of space between columns and display as 
many columns as possible. Use the 
-AutoSize 
switched parameter to do this:
4.
Force Windows PowerShell to truncate the columns by choosing a number of columns greater 
than can be displayed on the screen:
Formatting output with the 
Format-Wide
 cmdlet
1.
Open
 the Windows PowerShell console.
2.
Use the 
Get-ChildItem
 cmdlet to obtain a directory listing of the C:Windows directory.
3.
Use the 
-recursive
 argument to cause the 
Get-ChildItem
 cmdlet to walk through a nested 
[<0047004C0055>-12<0048>-16<0046>-25<0057>-1<0052>-7<0055>-47<005C00030056>-16<0057>-2<0055>-17<0058>-5<0046>-25<0057>-8<0058>1<0055>-12<0048>-9<000F0003004C0051>-9<0046>4<004F>-4<0058>-7<0047004C0051>-11<004A00030052>-7<0051>-4<004F>-12<005C00030011>12<0057>-34<005B>-37<0057000300C0>-2<004F>-7<0048>-12<00560003004C005100030057>-2<004B>-9<004800030052>-10<0058>-5<0057>-2<0053>-9<0058>-5<0057>-20<00110003002B>-2<004C>-5<0047>-7<004800030048>-10<0055>-12<0055>-12<0052>-7<0055>-26<005600030045>-3<005C00030058>-6<0056>-3<004C0051>-11<004A00030057>-2<004B>-9<00480003>]TJ
-ea 
parameter 
ea 
is an alias for 
ErrorAction
 and assign a value of 0 which means that errors will 
be ignored:
Partial output from the command is shown here:
4.
Use the 
Format-Wide
 cmdlet to adjust the output from the 
Get-ChildItem
 cmdlet. Use the 
-columns
 argument and supply a parameter of 
 to it. This is shown here:
Once this command is run, you will see output similar to this:
5.
Use the 
Format-Wide
 cmdlet to adjust the output from the 
Get-ChildItem
 cmdlet. Use 
the 
-property
 argument to specify the 
name
 property, and group the outputs by size. 
The command shown here appears on two lines; however, when typed into Windows 
PowerShell, it is a single command and can be on one line. In addition, when typed into 
the Windows PowerShell console, if you continue typing when approaching the end of a 
line, Windows PowerShell will automatically wrap the command to the next line; therefore, 
you do not need to press the Enter key.
[<0033>6<0044>-4<0055>-41<0057>-2<004C>-2<0044>-4<004F00030052>-10<0058>-5<0057>-2<0053>-9<0058>-5<00570003004C>-5<005600030056>-4<004B>-9<0052>-3<005A>-9<00510003004B>-9<0048>-10<0055>-12<0048>-7<001100030031>-7<0052>-2<0057>-3<004800030057>-2<004B>-7<0044>-3<005700030044>-4<004F>-5<0057>-2<004B>-9<0052>-10<0058>-7<004A>1<004B00030057>-2<004B>-4<0055>-12<0048>-16<0048000300460052>-6<004F>-4<0058>1<0050>-4<0051>-9<00560003005A>-2<0048>-10<0055>-12<004800030056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-7<0048>-16<0047>-9<000F0003004C>-3<004900030057>-2<004B>-9<0048>-10<0055>-12<004800030044>-4<0055>-12<004800030051>-9<0052>-2<00570003>]TJ
[<0057>-2<004B>-4<0055>-12<0048>-16<0048000300C0>-2<004F>-7<0048>-12<005600030052004900030057>-2<004B>-9<004800030056>-17<0044>-4<0050>-9<00480003004F>-7<0048>-10<0051>-11<004A>-5<0057>-2<004B>-14<000F00030052>-6<0051>-4<004F>-12<005C00030052>-7<0051>-9<0048000300460052>-6<004F>-4<0058>1<0050>-4<00510003005A>-9<004C004F>1<004F00030045>-13<004800030058>-6<0056>-12<0048>-16<0047>8<001D>]TJ
Formatting a directory listing using 
Format-Table
In a 
Windows PowerShell console, enter the 
Get-ChildItem
 cmdlet, followed by the directory to list, 
followed by the pipe character and the 
Format-Table
 cmdlet. Here22s an example:
Formatting output with the 
Format-Table
 cmdlet
1.
Open Windows PowerShell by choosing Start | Run | Windows PowerShell. The PowerShell 
prompt will open by default at the root of your Documents And Settings folder.
2.
Use the 
Get-ChildItem
 cmdlet to obtain a directory listing of the C:Windows directory:
3.
Use the
-recursive
 argument to cause the 
Get-ChildItem
 cmdlet to walk through a nested 
[<0047004C0055>-12<0048>-16<0046>-25<0057>-1<0052>-7<0055>-47<005C00030056>-16<0057>-2<0055>-17<0058>-5<0046>-25<0057>-8<0058>1<0055>-12<0048>-7<00110003002C>-1<0051>-9<0046>4<004F>-4<0058>-7<0047>-7<004800030052>-7<0051>-4<004F>-12<005C00030011>12<0057>-34<005B>-37<0057000300C0>-2<004F>-7<0048>-12<00560003004C005100030057>-2<004B>-9<004800030052>-10<0058>-5<0057>-2<0053>-9<0058>-5<0057>-20<0011>]TJ
4.
Use the 
Format-Table
 cmdlet to adjust the output from the 
Get-ChildItem
 cmdlet. This is 
shown here:
The command results in the creation of a table, as follows: 
5.
Use the 
-property
 argument of the 
Format-Table
 cmdlet and choose the 
name
length
, and 
last-write-time
 properties. This is shown here:
This command results in producing a table with the name, length, and last write time as col
umn headers. A sample of this output is shown here:
Formatting output with 
Out-GridView
The 
Out-GridView
 cmdlet is different from the other formatting cmdlets explored thus far in this 
chapter. 
Out-GridView
 is an interactive cmdlet27that is, it does not format output for display on the 
Windows PowerShell console, or for sending to a printer. Instead, 
Out-GridView
 provides a control 
[<0053>-13<0048>-10<0055>-12<0050>-2<004C>-5<0057>-31<0057>-2<004C0051>-11<004A00030048>-6<005B>-8<0053>-8<004F>-7<0052>-7<0055>-8<0044>-3<0057>-2<004C>-5<0052>-7<005100030052004900030057>-2<004B>-9<004800030053>-6<004C0053>-13<0048>-11<004F004C0051>-9<0048>-16<004700030047>-3<0044>-3<0057>-19<0044>-14<00110003002C>-1<005700030047>-5<0052>-13<0048>-12<005600030057>-2<004B>-2<004C>-5<005600030045>-3<005C00030044>-11<0047>-7<0047004C0051>-11<004A00030057>-2<004B>-9<004800030047>-3<0044>-3<0057>-19<00440003005700520003004400030057>-19<0044>-4<0045>-8<004F>-7<00480003004C005100030044000300C1>-8<0052>-10<0044>-3<0057>-2<004C0051>-11<004A0003>]TJ
window. For example, the following command pipelines the results of the 
Get-Process
 cmdlet to the 
Out-GridView
 cmdlet 
gps
 is an alias for the 
Get-Process
 cmdlet:
When the 
Get-Process
 cmdlet completes, a grid appears containing process information arranged 
in columns and in rows. Figure 2-1 shows the new window displaying the process information in a 
grid. One useful feature of the 
Out-GridView
 cmdlet is that the returned control contains the com
mand producing the control in the title bar. Figure 2-1 lists the command 
gps | Out-GridView 
in the 
title bar the command that is run to produce the grid control.
FIGURE 2-1
The 
Out-GridView
 cmdlet accepts pipelined input and displays a control that permits further 
exploration.
You can click the column headings to sort the output in descending order. Clicking the same 
column again changes the sort to ascending order. Figure 2-2 sorts the processes by the number of 
handles used by each process. The sort is ordered from largest number of handles to smallest. 
FIGURE 2-2
Clicking the 
column heading buttons permits sorting in either descending or ascending order.
Out-GridView
 accepts input from other cmdlets, as well as from the 
Get-Process
 cmdlet. For exam
ple, you can pipeline the output from the 
Get-Service
 cmdlet to 
Out-GridView
 by using the syntax 
that appears here 
gsv
 is an alias for the 
Get-Service
 cmdlet, and 
ogv
 is an alias for the 
Out-GridView
cmdlet:
Figure 2-3 shows the resulting grid view. 
FIGURE 2-3
Out-GridView
[<00030047>-4<004C>-10<0056>-8<0053>-12<004F>-9<0044>-3<005C>-16<005600030056>-17<0048>-15<0055>-51<0059>-17<004C>-8<0046>-6<004800030046>-4<0052>-11<0051>-5<0057>-7<0055>-17<0052>-11<004F>-4<004F>-11<0048>-15<00550003004C>-5<0051>-3<0049>-11<0052>-11<0055>-16<0050>-11<0044>-8<0057>-7<004C>-10<0052>-11<0051>-19<000F00030056>-10<0058>-10<0046>-1<004B00030044>-15<005600030057>-7<004B>-14<004800030046>-6<0058>-4<0055>-16<0055>-17<0048>-15<0051>-5<005700030056>-20<0057>-23<0044>-8<0057>-12<0058>-11<005600030052>-5<004900030044>-9<004F>-4<004F00030047>-11<0048>-14<00C0>-7<0051>-14<0048>-21<004700030056>-16<0048>-15<0055>-51<0059>-17<004C>-8<0046>-6<0048>-17<0056>-24<0011>]TJ
The 
Out-GridView
 cmdlet automatically detects the data type of the incoming properties. It 
[<0058>-6<0056>-12<0048>-12<005600030057>-2<004B>-2<004C>-5<005600030047>-3<0044>-3<0057>-19<004400030057>-37<005C>-12<0053>-13<004800030057>-1<005200030047>-7<0048>-10<0057>-3<0048>-10<0055>-12<0050>-2<004C0051>-9<00480003004B>-9<0052>-3<005A00030057>-1<005200030053>-7<0055>-12<0048>-12<0056>-12<0048>-10<0051>-1<005700030057>-2<004B>-9<0048000300C0>-2<004F>-6<0057>-3<0048>-10<0055>-12<0048>-16<004700030044>-4<0051>-11<004700030057>-2<004B>-9<004800030056>-12<0052>-7<0055>-41<0057>-3<0048>-16<00470003004C0051>2<0049>-7<0052>-7<0055>-12<0050>-7<0044>-3<0057>-2<004C>-5<0052>-7<005100030057>-1<00520003005C>1<0052>-9<0058>-8<001100030029>-3<0052>-7<00550003>]TJ
example, the data type of the 
Status 
property is a string. Clicking the 
Add Criteria button, choosing 
the 
status 
property, and selecting Add
[<0044>-11<0047>-7<0047>-6<005600030044000300C0>-2<004F>-5<0057>-3<0048>-10<005500030057>-2<004B>-7<0044>-3<0057>]TJ
permits choosing various ways of interacting 
with the text stored in the 
status 
property. The available options include the following: 
contains
does 
not contain
equals
does not equal
ends with
is empty
, and 
is not empty
. The options change depend
ing upon the perceived data type of the incoming property.  
[<0037>55<0052000300C0>-2<004F>-6<0057>-3<0048>-10<005500030052>-7<0051>-4<004F>-12<005C00030055>-17<0058>1<0051>-4<0051>-2<004C0051>-11<004A00030056>-12<0048>-10<0055>-47<0059>-12<004C>-3<0046>-2<0048>-12<0056>-20<000F0003005C>1<0052>-9<005800030046>-14<0044>-4<005100030046>4<004B>-7<0044>-4<0051>-11<004A>-7<004800030057>-2<004B>-9<0048000300C0>-2<004F>-6<0057>-3<0048>-10<005500030057>-1<00520003>]TJ
equals
 and the value to 
running
. Keep 
[<004C005100030050>-2<004C0051>-11<004700030057>-2<004B>-7<0044>-3<00570003004C>-3<00490003005C>1<0052>-9<005800030046>4<004B>-9<0052>-13<0052>-7<0056>-12<004800030044>-4<005100030048>-16<0054>-3<0058>-3<0044>-4<004F004C>-5<0057>-38<005C00030052>-7<0053>-13<0048>-10<0055>-8<0044>-3<0057>-1<0052>-7<0055>39<000F0003005C>1<0052>-9<0058>1<0055000300C0>-2<004F>-6<0057>-3<0048>-10<0055>-12<0048>-16<004700030056>-16<0057>-2<0055>-12<004C0051>-11<004A00030050>-6<0058>-6<0056>-16<005700030050>-7<0044>-3<0057>-1<0046>4<004B00030048>-6<005B>-6<0044>-9<0046>-25<0057>-2<004F>-12<005C>35<001100030037>-7<004B>-9<0048>-10<0055>-12<0048>-8<0049>-7<0052>-7<0055>-12<0048>-9<000F0003>]TJ
equals run
 will not return any matches. Only 
equals running
 works. On the other hand, if you choose a 
starts with
[<00030052>-7<0053>-13<0048>-10<0055>-8<0044>-3<0057>-1<0052>-7<0055>39<000F0003005C>1<0052>-10<00580003005A>-9<004C004F>1<004F000300C0>-2<0051>-11<004700030044>-4<004F>1<004F00030057>-2<004B>-9<004800030055>-17<0058>1<0051>-4<0051>-2<004C0051>-11<004A00030056>-12<0048>-10<0055>-47<0059>-12<004C>-3<0046>-2<0048>-12<00560003005A>-9<004C>-5<0057>-2<004B00030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<00570003004F>-7<0048>-10<0057>-31<0057>-3<0048>-10<0055>43<001100030029>-3<0052>-7<00550003004C0051>-9<0056>-16<0057>-19<0044>-4<0051>-9<0046>-2<0048>-9<000F0003>]TJ
starts with r
[<0055>-12<0048>-10<0057>-8<0058>1<0055>-12<0051>-9<005600030048>-8<0059>1<0048>-10<0055>-47<005C>-41<0057>-2<004B>-2<004C0051>-11<004A>-8<001100030024>-27<00560003005C>1<0052>-10<005800030046>1<0052>-7<0051>-1<0057>-2<004C0051>-6<0058>-7<004800030057>-1<005200030057>-38<005C>-12<0053>-13<0048>-9<000F00030050>-7<0044>-3<0057>-1<0046>4<004B>-9<0048>-12<0056000300460052>-7<00510057>-2<004C0051>-6<0058>-7<004800030057>-1<005200030045>-13<004800030055>-12<0048>-9<00C0>-2<0051>-9<0048>-16<00470003004C005100030057>-2<004B>-9<004800030052>-10<0058>-5<0057>-2<0053>-9<0058>-5<0057>-20<00110003>]TJ
ote
[<002E>12<0048>-14<0048>-8<00530003004C>3<005100030057004B>-7<004800030050004C>2<0051>-9<004700030057004B>-7<004800030047>2<004C>-1<0049>-37<0049>-5<0048>-8<0055>-10<0048>-8<0051>-7<0046>1<00480003004C>2<005100030057004B>-7<004800030045>-11<0048>-8<004B>-5<0044>4<0059>-10<004C>-3<0052>-5<005500030052>3<004900030057004B>-7<004800030059>-3<0044>-2<0055>-9<004C>-3<0052>-7<0058>-4<0056000300C0004F>-3<0057>-1<0048>-8<0055>-24<0056>-17<001100030027>-9<0048>-8<0053>-11<0048>-8<0051>-9<0047>2<004C>2<0051>-9<004A00030052>-5<00510003>]TJ
the operator you select, the self-updating output is extremely useful. This works especially 
[<005A>1<0048>-9<004F>3<004F0003005A>-6<004B>-7<0048>-8<0051000300440057>-29<0057>-1<0048>-8<0050>-1<0053>-3<0057004C>2<0051>-9<004A00030057>2<0052000300C0004F>-3<0057>-1<0048>-8<005500030052>-7<0058>-3<005700030051>-4<0058>3<0050>-7<0048>-8<0055>-9<004C>-1<0046>-12<0044>-2<004F00030047>-1<0044>-1<0057>-17<00440003004C>-1<00490003005C>3<0052>-7<005800030044>-1<0055>-10<004800030051>-7<0052005700030059>3<0048>-8<0055>-45<005C00030049>-7<0044>-2<0050004C>2<004F>2<004C0044>-2<00550003005A>-7<004C>-3<0057004B00030057004B>-7<004800030047>-1<0044>-1<0057>-17<00440003>]TJ
ranges and what a typical value looks like. This technique appears in Figure 2-4.
FIGURE 2-4
The 
Out-GridView
[<00030056>-17<0048>-15<004F>-8<0049>15<0010>-15<0058>-4<0053>-19<0047>-8<0044>-8<0057>-8<0048>-17<00560003005A>-13<004B>-14<0048>-15<00510003005C>-4<0052>-14<005800030057>-42<005C>-17<0053>-17<00480003004C>-5<005100030057>-6<004B>-14<0048000300C0>-7<004F>-10<0057>-8<0048>-15<005500030045>-18<0052005B>-23<0011>]TJ
[<0025>-9<005C00030057>-2<004B>-9<004800030057>-2<004C0050>-9<00480003005C>1<0052>-10<005800030057>-38<005C>-12<0053>-13<004800030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030057>-35<005A>-2<00520003004F>-7<0048>-10<0057>-31<0057>-3<0048>-10<0055>-26<005600030052004900030057>-2<004B>-9<00480003>]TJ
explorer 
[<0053>-7<0055>-12<0052>-13<0046>-2<0048>-12<0056>-14<005600030051>-7<0044>-4<0050>-9<00480003004C005100030057>-2<004B>-9<0048000300C0>-2<004F>-5<0057>-3<0048>-10<005500030045>-13<0052>5<005B>-26<000F00030057>-2<004B>-9<004800030055>-12<0048>-12<0056>-5<0058>1<004F>]TJ
tant process information changes to display the single matching process name. The output appears in 
Figure 2-5.
FIGURE 2-5
Clicking the red 
[<00030044>-7<005700030057>-6<004B>-14<004800030055>-16<004C>-10<004A>-4<004B>-6<005700030052>-4<004900030057>-7<004B>-14<0048000300C0>-7<004F>-10<0057>-8<0048>-15<005500030045>-18<0052005B00030046>-1<004F>-11<0048>-14<0044>-8<0055>-30<005600030057>-7<004B>-14<0048>]TJ
explorer
[<000300C0>-7<004F>-10<0057>-8<0048>-15<00550003005C>-4<0052>-14<005800030044>-15<0047>-11<0047>-11<0048>-21<0047>-13<0011>]TJ
Filtering 
processes using CPU time with a memory working set greater than 20,000
1.
First use the Add Criteria button to choose CPUs. 
2.
Click the blue plus symbol on the Add Criteria button beneath the Filter dialog box. 
3.
In the Add Criteria selection menu that appears, place a check beside CPUs and press the 
Add button. 
4.
Click the underlined word 
contains
 and select Is Not Empty
from the selection menu.
5.
Click the blue plus symbol on the Add Criteria button. 
6.
Places a check next to the WSK item.
Click the Add button to add the working set memory to the criteria. 
8.
Click the blue underlined 23is less than or equal to24 criterion to change it to 23is greater than or 
equal to.24 
Add the number 20000 to the box beside the 23is greater than or equal to24 criterion. 
Creating a sorted process list
1.
Type 
the following command into the Windows PowerShell console:
2.
Send the output of the 
Get-Process
 cmdlet to the 
Get-Member
 cmdlet: 
3.
Examine the property section. Note that CPU is a 
script
 property.
4.
Pipeline the results from the 
Get-Process
 cmdlet to the 
Sort-Object
 cmdlet and use the 
cpu
property:
5.
Retrieve the previous command and add the
-Descending
 switched parameter:
6.
Send the whole thing to the 
Out-GridView
 cmdlet. The command appears here:
Remove columns from the grid view. Right-click the column process names and select the 
columns.
8.
When the select-column prompt appears, click it to bring up the 
Select Columns dialog box. 
Click to add or remove the columns individually. 
The Select Columns dialog box appears in Figure 2-6.
FIGURE 2-6
Use the Select Columns dialog box to control columns appearing in the 
gridview
 control. 
ote
Because the process of selecting columns is a bit slow, if you only want to see a few 
[<0046>3<0052>-4<004F>-2<0058>3<0050>-2<0051>-7<0056>-18<000F0003004C>-3<00570003004C>-3<005600030045>-11<0048>-10<0056>-14<005700030057>2<0052000300C0004F>-3<0057>-1<0048>-8<005500030057004B>-7<004800030046>3<0052>-4<004F>-2<0058>3<0050>-1<0051>-7<005600030045005C00030058>-4<0056>-1<004C>2<0051>-9<004A00030057004B>-7<00480003>]TJ
Select-Object 
cmdlet before you send it 
to the 
Out-GridView
Leveraging the power of 
Get-Command
The 
Get-Command
 cmdlet gets details of every command available to you. These commands include 
[<0046>4<0050>-11<0047>1<004F>-7<0048>-10<0057>-19<0056>-20<000F00030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051>-9<0056>-20<000F0003005A>-1<0052>-7<0055>-12<004E>-34<00C1>-8<0052>-3<005A>-12<0056>-20<000F00030044>-4<004F004C>-2<0044>-10<0056>-12<0048>-12<0056>-20<000F00030044>-3<0051>-11<004700030048>-6<005B>2<0048>-16<0046>-2<0058>-5<0057>-19<0044>-4<0045>-8<004F>-7<0048000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<0047>-6<0056>-19<001100030038>-3<0056>-4<004C0051>-11<004A00030057>-2<004B>-9<00480003>]TJ
Get-Command
 cmdlet, 
you can obtain a listing of all the cmdlets installed on Windows PowerShell, but there is much more 
that can be done using this extremely versatile cmdlet. For example, you can use wildcard characters 
to search for cmdlets using 
Get-Command
. This is shown in the following procedure.
Searching for cmdlets using wildcard characters 
In a 
Windows PowerShell prompt, enter the 
Get-Command
 cmdlet followed by a wildcard character:
Finding commands by using the 
Get-Command
 cmdlet
1.
Open Windows PowerShell.
2.
Use an alias to refer to the 
Get-Command
[<00030046>4<0050>-11<0047>1<004F>-7<0048>-10<0057>-20<001100030037>55<0052000300C0>-2<0051>-11<004700030057>-2<004B>-9<0048000300460052>-7<0055>-12<0055>-12<0048>-16<0046>-25<005700030044>-4<004F004C>-2<0044>-10<0056>-20<000F00030058>-6<0056>-12<004800030057>-2<004B>-9<00480003>]TJ
Get-Alias
cmdlet as follows:
[<0037>-7<004B>-2<004C>-5<0056000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<004700030053>-7<0055>-12<0052>-13<0047>-3<0058>-5<0046>-2<0048>-12<0056000300440003004F004C>-5<0056>-16<0057>-2<004C0051>-11<004A00030052004900030044>-4<004F>1<004F00030057>-2<004B>-9<004800030044>-4<004F004C>-2<0044>-10<0056>-12<0048>-12<005600030047>-7<0048>-9<00C0>-2<0051>-9<0048>-16<004700030057>-2<004B>-7<0044>-3<005700030045>-13<0048>-16<004A004C00510003005A>-9<004C>-5<0057>-2<004B00030057>-2<004B>-9<00480003004F>-7<0048>-10<0057>-31<0057>-3<0048>-10<00550003>]TJ
. An 
example of the output of this command is shown here:
3.
Using the 
gcm
 alias, use the 
Get-Command
 cmdlet to return the 
Get-Command
 cmdlet. This is 
shown here:
This command returns the 
Get-Command
 cmdlet. The output is shown here:
4.
Using the 
gcm
 alias to get the 
Get-Command
 cmdlet, pipe the output to the 
Format-List
 cmd
let. Use the wildcard asterisk * to obtain a listing of all the properties of the 
Get-Command
cmdlet. This is shown here:
This command will return all the properties from the 
Get-Command
 cmdlet. The output is 
shown here:
5.
Using the 
gcm
 alias and the 
Get-Command
 cmdlet, pipe the output to the 
Format-List
 cmdlet. 
Use the 
-property
 argument and specify the 
[<0047>5<0048>-12<00C0>-1<0051>4<004C0057>4<004C>2<00520051>]TJ
 property of the 
Get-Command
 cmdlet. 
Rather than retyping the entire command, use the up arrow on your keyboard to retrieve the 
previous 
gcm
Get-Command | Format-List *
 command. Use the 
Backspace key to remove the 
asterisk, and then simply add 
[<0010>-6<0053>1<0055>-3<0052>-3<0053>-3<0048>1<0055>-31<0057>-27<005C>7<0003>7<0047>5<0048>-12<00C0>-1<0051>4<004C0057>4<004C>2<00520051>]TJ
 to your command. This is shown here:
[<0037>-7<004B>-2<004C>-5<0056000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<004700030052>-7<0051>-4<004F>-12<005C00030055>-12<0048>-10<0057>-8<0058>1<0055>-12<0051>-9<005600030057>-2<004B>-9<004800030053>-7<0055>-12<0052>-7<0053>-13<0048>-10<0055>-41<0057>-38<005C00030047>-6<0048>-9<00C0>-2<0051>-2<004C>-5<0057>-2<004C>-5<0052>-7<005100030049>-7<0052>-7<005500030057>-2<004B>-9<00480003>]TJ
Get-Command
 cmdlet. The 
[<0055>-12<0048>-10<0057>-8<0058>1<0055>-12<0051>-9<0048>-16<004700030047>-7<0048>-9<00C0>-2<0051>-2<004C>-5<0057>-2<004C>-5<0052>-7<00510003004C>-5<005600030056>-4<004B>-9<0052>-3<005A>-9<00510003004B>-9<0048>-10<0055>-12<0048>5<001D>]TJ
6.
Because objects are returned from cmdlets instead of simply string data, you can also retrieve 
[<0057>-2<004B>-9<004800030047>-7<0048>-9<00C0>-2<0051>-2<004C>-5<0057>-2<004C>-5<0052>-7<005100030052004900030057>-2<004B>-9<00480003>]TJ
Get-Command
 cmdlet by directly using the 
[<0047>5<0048>-12<00C0>-1<0051>4<004C0057>4<004C>2<00520051>]TJ
 property. This is 
done by putting the expression inside parentheses and using 
dotted notation
, as shown here:
[<0037>-7<004B>-9<004800030047>-7<0048>-9<00C0>-2<0051>-2<004C>-5<0057>-2<004C>-5<0052>-7<005100030055>-12<0048>-10<0057>-8<0058>1<0055>-12<0051>-9<0048>-16<004700030049>-12<0055>-12<0052>-7<005000030057>-2<004B>-9<004800030053>-7<0055>-12<0048>-8<0059>-12<004C>-5<0052>-9<0058>-6<0056000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<00470003004C>-5<005600030059>-12<004C0055>-41<0057>-8<0058>-3<0044>-4<004F>1<004F>-12<005C0003004C>-5<0047>-7<0048>-10<00510057>-2<004C>-3<0046>-14<0044>-4<004F00030057>-1<005200030057>-2<004B>-9<004800030052>-7<0051>-9<004800030055>-12<0048>-10<0057>-8<0058>1<0055>-12<0051>-9<0048>-16<00470003>]TJ
by using the 
Format-List
 cmdlet.
Use the 
gcm
 alias and specify the 
-verb
 argument. Use 
se*
 for the verb. This is shown here:
The previous command returns a listing of all the cmdlets that contain a verb beginning with 
. The result is as follows:
8.
Use the 
gcm
 alias and specify the 
-noun
 argument. Use 
o*
 for the noun. This is shown here:
The previous command will return all the cmdlets that contain a noun that begins with the 
letter 
. This result is as follows:
Retrieve 
only the syntax of the 
Get-Command
 cmdlet by specifying the 
-syntax
 argument. Use 
the 
gcm
 alias to do this, as shown here:
The syntax of the 
Get-Command
 cmdlet is returned by the previous command. The output is 
as follows:
10.
Try to use only aliases to repeat the 
Get-Command
 syntax command to retrieve the syntax of 
the 
Get-Command
 cmdlet. This is shown here:
The result of this command is not the nice syntax description of the previous command. The 
rather disappointing result is as follows:
[<0037>-7<004B>-2<004C>-5<0056000300460052>-7<0051>-9<0046>4<004F>-4<0058>-7<0047>-7<0048>-12<005600030057>-2<004B>-9<004800030053>-7<0055>-12<0052>-13<0046>-2<0048>-16<0047>-3<0058>1<0055>-12<004800030049>-7<0052>-7<0055000300C0>-2<0051>-11<0047004C0051>-11<004A000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<0047>-6<005600030045>-3<005C00030058>-6<0056>-4<004C0051>-11<004A00030057>-2<004B>-9<00480003>]TJ
Get-Command
 cmdlet.
Quick Check
[<0037>55<005200030055>-12<0048>-10<0057>-2<0055>-12<004C>-5<0048>-8<0059>1<00480003004400030047>-7<0048>-9<00C0>-2<0051>-2<004C>-5<0057>-2<004C>-5<0052>-7<005100030052004900030057>-2<004B>-9<00480003>]TJ
 cmdlet, using the dotted notation, what com
mand would you use?
Using the 
Get-Member
 cmdlet
The
Get-Member
 cmdlet retrieves information about the members of objects. Although this may 
not seem very exciting, remember that because everything returned from a cmdlet is an object, 
you can use the 
Get-Member
 cmdlet to examine the methods and properties of objects. When 
the 
Get-Member
 cmdlet is used with 
Get-ChildItem
[<00030052>-7<005100030057>-2<004B>-9<0048000300C0>-2<004F>-7<004800030056>-21<005C>-12<0056>-16<0057>-3<0048>-10<0050>-15<000F0003004C>-5<005700030055>-12<0048>-10<0057>-8<0058>1<0055>-12<0051>-9<0056000300440003004F004C>-5<0056>-16<0057>-2<004C0051>-11<004A00030052004900030044>-4<004F>1<004F00030057>-2<004B>-9<00480003>]TJ
methods and properties available to work with the 
DirectoryInfo
 and 
FileInfo
 objects.
Objects, properties, and methods
One of the fundamental features of Windows PowerShell is that cmdlets return objects. An 
object is a thing that gives us the ability to either describe something or do something. If 
you are not going to describe or do something, then there is no reason to create the object. 
Depending on the circumstances, you may be more interested in the methods or the proper
ties. As an example, let22s consider rental cars. I used to travel a great deal when I was a consul
tant at Microsoft, and I often needed to obtain a rental car.
To put this into programming terms, when I got to the airport, I would go to the rental 
car counter, and I would use the 
 cmdlet to create a 
 object. When I 
used this cmdlet, I was only interested in the methods available from the 
 object. 
I needed to use the 
 method, the 
 method, and perhaps 
the 
 method. I was not, however, interested in the properties of the 
object.
At home, I have a cute little sports car. It has exactly the same methods as the 
object, but I created the 
 object primarily because of its properties. It is green and 
has alloy rims, a convertible top, and a 3.5-liter engine. Interestingly enough, it has exactly 
the same methods as the 
 object. It also has the 
 method, the 
StopAtaRedLight
 method, and the 
 method, but the deciding factor in creating 
the 
 object was the properties, not the methods.
Using the 
Get-Member
 cmdlet to examine properties 
and methods
In a Windows PowerShell prompt, enter the 
Get-ChildItem
 cmdlet followed by the path to a folder, 
and pipe it to the 
Get-Member
 cmdlet. Here22s an example:
Using the 
Get-Member 
cmdlet
1.
Open Windows PowerShell by choosing Start | Run | Windows PowerShell. The PowerShell 
prompt will open by default at the root of your Documents And Settings folder.
2.
Use an alias to refer to the 
Get-Alias
[<00030046>4<0050>-11<0047>1<004F>-7<0048>-10<0057>-20<001100030037>55<0052000300C0>-2<0051>-11<004700030057>-2<004B>-9<0048000300460052>-7<0055>-12<0055>-12<0048>-16<0046>-25<005700030044>-4<004F004C>-2<0044>-10<0056>-20<000F00030058>-6<0056>-12<004800030057>-2<004B>-9<00480003>]TJ
Get-Alias
 cmdlet 
as follows:
3.
After you have retrieved the alias for the 
Get-Alias
[<00030046>4<0050>-11<0047>1<004F>-7<0048>-10<0057>-20<000F00030058>-6<0056>-12<00480003004C>-5<0057000300570052000300C0>-2<0051>-11<004700030057>-2<004B>-9<004800030044>-4<004F004C>-2<0044>-10<005600030049>-7<0052>-7<005500030057>-2<004B>-9<00480003>]TJ
Get-Member
 cmdlet. One way to do this is to use the following command, simply using 
gal
place of the 
Get-Alias
 name you used in the previous command:
[<0037>-7<004B>-9<00480003004F004C>-5<0056>-16<0057>-2<004C0051>-11<004A00030052004900030044>-4<004F004C>-2<0044>-10<0056>-12<0048>-12<005600030047>-7<0048>-9<00C0>-2<0051>-9<0048>-16<004700030057>-2<004B>-7<0044>-3<005700030045>-13<0048>-16<004A004C00510003005A>-9<004C>-5<0057>-2<004B00030057>-2<004B>-9<00480003004F>-7<0048>-10<0057>-31<0057>-3<0048>-10<00550003>]TJ
 appears as a result of the previous 
command. The output is shown here:
4.
Use the 
gal 
alias to obtain a listing of all aliases that begin with the letter 
 Pipe the results to 
the 
Sort-Object
 cmdlet and sort on the property attribute called 
[<0047>5<0048>-12<00C0>-1<0051>4<004C0057>4<004C>2<00520051>]TJ
. This is shown here:
The listings of cmdlets that begin with the letter 
 are now sorted, and the results of the com
mand are as follows:
5.
Use the alias for the 
Get-ChildItem
 cmdlet and pipe the output to the alias for the 
Get-Member
cmdlet. This is shown here:
6.
To only see properties available for the 
Get-ChildItem
 cmdlet, use the 
-membertype
 argument 
and supply a value of 
property
. Use tab completion this time, rather than the 
gci | gm
 alias. 
This is shown here:
The output from this command is shown here:
Use the 
-membertype
 parameter of the 
Get-Member
 cmdlet to view the methods available 
from the object returned by the 
Get-ChildItem
 cmdlet. To do this, supply a value of method to 
the 
-membertype
 parameter, as follows:
8.
[<0037>-7<004B>-9<004800030052>-10<0058>-5<0057>-2<0053>-9<0058>-5<005700030049>-12<0055>-12<0052>-7<005000030057>-2<004B>-9<004800030053>-7<0055>-12<0048>-8<0059>-12<004C>-5<0052>-10<0058>-6<00560003004F004C>-5<0056>-16<005700030055>-12<0048>-10<0057>-8<0058>1<0055>-12<0051>-9<005600030044>-4<004F>1<004F00030057>-2<004B>-9<004800030050>-9<0048>-10<0057>-2<004B>-9<0052>-13<0047>-6<005600030047>-7<0048>-9<00C0>-2<0051>-9<0048>-16<004700030049>-7<0052>-7<005500030057>-2<004B>-9<00480003>]TJ
Get-ChildItem
 cmd
let. This output is shown here:
Use the up arrow key in the Windows PowerShell console to retrieve the previous 
Get-ChildItem | Get-Member -MemberType 
method command, and change the value method 
to 
 to use a wildcard to retrieve the methods. The output will be exactly the same as the 
previous listing of members because the only member type beginning with the letter 
 on 
the 
Get-ChildItem
 cmdlet is the 
MemberType
 method. The command is as follows:
10.
Use the 
-inputobject
 argument to the 
Get-Member
[<00030046>4<0050>-11<0047>1<004F>-7<0048>-10<005700030057005200030055>-12<0048>-10<0057>-2<0055>-12<004C>-5<0048>-8<0059>1<004800030050>-9<0048>-10<0050>-4<0045>-13<0048>-10<005500030047>-7<0048>-9<00C0>-2<0051>-2<004C>-5<0057>-2<004C>-5<0052>-7<0051>-9<00560003005200490003>]TJ
each property or method in the list. The command to do this is as follows:
The output from the previous command is shown here:
This concludes the procedure for using the 
Get-Member
 cmdlet. 
Quick Check
Q.
To retrieve a listing of aliases beginning with the letter 
 that is sorted on the 
property, what command would you use?
[<004A>-3<0044>-5<004F0003004A>16<000D0003005F00030036>-4<0052>-7<0055>-37<0057>32<0010>-32<0032>-13<0045>-4<004D>-2<0048>-9<0046>-25<005700030010>-13<0053>-6<0055>-10<0052>-10<0053>-10<0048>-6<0055>-38<0057>-34<005C00030047>-2<0048>-19<00C0>-7<0051>-3<004C>-7<0057>-3<004C>-5<0052>-7<0051>]TJ
Using the 
New-Object
 cmdlet
The 
use of objects in Windows PowerShell provides many exciting opportunities to do things that are 
not built into the PowerShell. You may recall from using VBScript that there is an object called the 
wshShell
 object. If you are not familiar with this object, see Figure 2-7, which shows a drawing of the 
object model.
FIGURE 2-7
The VBScript 
wshShell
 object contributes many easy-to-use methods and properties for the network 
administrator.
Creating and Using the 
wshShell
 Object
To 
create a new instance of the 
wshShell
 object, use the 
New-Object
 cmdlet while specifying the 
-comobject
 argument and supplying the program ID of 
wscript.shell
. Hold the object created in a vari
able. Here22s an example: 
After the object has been created and stored in a variable, you can directly use any of the methods 
that are provided by the object. This is shown in the two lines of code that follow:
In this code, you use the 
New-Object
 cmdlet to create an instance of the 
wshShell
 object. You then 
use the 
run
 method to launch Calculator. After the object is created and stored in the variable, you 
can use tab completion to suggest the names of the methods contained in the object. This is shown in 
Figure 2-8.
FIGURE 2-8
Tab completion enumerates methods provided by the object.
Creating the 
wshShell
 object
1.
Open Windows PowerShell by choosing Start | Run | Windows PowerShell. The PowerShell 
prompt will open by default at the root of your Documents And Settings folder.
2.
Create an instance of the 
wshShell
 object by using the 
New-Object
 cmdlet. Supply the 
-comobject
 argument to the cmdlet and specify the program ID for the 
wshShell
 object, which 
is 
wscript.shell
. Assign the result of the 
New-Object
 cmdlet to the variable 
$wshShell
. The code 
to do this is as follows:
3.
Launch an instance of Calculator by using the 
run
 method from the 
wshShell
 object. Use 
tab 
completion to avoid having to type the entire name of the method. To use the method, begin 
the line with the variable you used to hold the 
wshShell
 object, followed by a period and the 
name of the method. Then supply the name of the program to run inside parentheses and 
quotes, as shown here:
4.
Use the 
ExpandEnvironmentStrings
 method to print out the path to the Windows directory. It 
is stored in an environment variable called 
%windir%.
 The tab-completion feature of Windows 
PowerShell is useful for this method name. The environment variable must be enclosed in 
quotation marks, as shown here: 
5.
This command reveals the full path to the Windows directory on your machine. On my com
puter, the output looks like the following:
Using the 
Show-Command
 cmdlet
The 
Show-Command
 cmdlet displays a graphical command picker that enables you to select cmdlets 
[<0049>-12<0055>-12<0052>-7<0050000300440003004F>1<004C>-5<0056>-16<0057>-20<001100030024>12<0057000300C0>-2<0055>-26<0056>-16<00570003004A>1<004F>-5<0044>-4<0051>-9<0046>-2<0048>-9<000F00030057>-2<004B>-9<00480003>]TJ
Show-Command
 cmdlet might appear to be a graphical version of the 
Get-Command
[<00030046>4<0050>-11<0047>1<004F>-7<0048>-10<0057>-20<000F00030045>-9<0058>-5<00570003004C>-5<00570003004C>-5<005600030044>-9<0046>-25<0057>-8<0058>-3<0044>-4<004F>1<004F>-12<005C00030050>-6<0058>-5<0046>4<004B00030050>-9<0052>-7<0055>-12<0048>-7<001100030037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<00570003004C0051>-11<0047004C>-3<0046>-14<0044>-3<0057>-2<004C>-5<0052>-7<005100030052>1<004900030057>-2<004B>-2<004C>-5<00560003004C>-5<005600030057>-2<004B>-7<0044>-3<00570003004C>-5<005700030045>-7<004F>-7<0052>-13<0046>4<004E>-31<005600030057>-2<004B>-9<00480003>]TJ
Windows PowerShell console27that is, control to the Windows PowerShell console does not return 
until you have either selected a command from the picker or canceled the operation. 
When you run the 
Show-Command
 cmdlet with no parameters, a window 600 pixels high and 300 
pixels wide appears. You can control the size of the window by using the 
-Height 
and 
-Width 
param
eters. The following command creates a command window 500 pixels high and 350 pixels wide.
The command window created by the this command appears in Figure 2-9.
FIGURE 2-9
The 
Show-Command 
cmdlet displays all commands from all modules by default.
[<0037>55<005200030055>-12<0048>-10<0057>-2<0055>-12<004C>-5<0048>-8<0059>1<00480003004400030056>-3<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<0046000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<0047>-9<000F00030056>-5<0058>1<0053>-7<0053>-8<004F>-12<005C00030057>-2<004B>-9<004800030051>-7<0044>-4<0050>-9<00480003005200490003004400030056>-3<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<004600030046>4<0050>-11<0047>1<004F>-7<0048>-10<00570003005A>-9<004B>-9<0048>-10<005100030046>-14<0044>-4<004F>1<004F004C0051>-11<004A00030057>-2<004B>-9<00480003>]TJ
Show-
Command
 cmdlet. This technique appears here:
When the command dialog box appears, use the check boxes to enable switched parameters, and 
the rectangular boxes to supply values for other parameters. This technique appears in Figure 2-10.
FIGURE 2-10
Use the check boxes to add switched parameters to a command and the rectangular boxes to add 
values for parameters in the command dialog box.
Once you have the created the command you wish to use, you can either copy the command to 
the clipboard or run the command. If you choose to run it, the Windows PowerShell console displays 
both the created command and the output from the command. This appears in Figure 2-11.
FIGURE 2-11
Both the created command and the output from that command return to the 
Windows 
PowerShell console when using the 
Show-Command 
cmdlet.
Windows PowerShell cmdlet naming helps you learn
One
 of the great things about Windows PowerShell is the verb-noun naming convention. In Windows 
PowerShell, the verbs indicate an action to perform, such as 
set
 to make a change or 
get
 to retrieve 
a value. The noun indicates the item with which to work, such as a process or a service. By master
ing the verb-noun naming convention, you can quickly hypothesize what a prospective command 
might be called. For example, if you need to obtain information about a process, and you know that 
Windows PowerShell uses the verb 
get 
retrieve information, you can surmise that the command 
might be called 
Get-Process
. To obtain information about services, you could try 
Get-Service
, and 
once again you would be correct. 
ote
[<003A>-8<004B>-7<0048>-8<00510003004A>-1<0058>-5<0048>-10<0056>-12<0056>-1<004C>2<0051>-9<004A0003003A>-14<004C>2<0051>-9<0047>-3<0052005A>-9<005600030033>8<0052005A>1<0048>-8<0055>-21<0036>3<004B>-7<0048>-9<004F>3<004F00030046>6<0050>-9<0047>3<004F>-5<0048>-8<005700030051>-4<0044>-2<0050>-7<0048>-10<0056>-18<000F00030044>-1<004F>-7<005A0044>4<005C>-10<0056000300570055>-45<005C00030057004B>-7<004800030056>-1<004C>2<0051>-9<004A>-1<0058>4<004F>-3<0044>-2<005500030049>-5<0052>-5<0055>-9<0050000300C0>1<0055>-24<0056>-14<0057>-18<00110003>]TJ
Windows PowerShell convention uses the singular form of nouns. It is not a design require
ment, but it is a strong preference. For example, the cmdlets are named 
 and 
Get-Process
, not 
s and 
es.
To see the list of approved verbs, use the 
Get-Verb
 cmdlet:
There are 98 approved verbs in Windows PowerShell 3.0. This number increases the 96 approved 
verbs from Windows PowerShell 2.0 by only 2 new verbs. The new verbs are 
use 
and 
unprotect. 
This 
appears in the command that follows, where the 
Measure-Object
 cmdlet returns the count of the dif
ferent verbs.
But you do not need to add the 
Measure-Object
 cmdlet to the previous command because the 
Get-Verb
 cmdlet returns an array. 
Array objects always contain a 
count
 property. Therefore, an easier 
form of the command appears here:
Windows PowerShell verb grouping
While
[<0003004F>-7<0048>-10<0044>-4<0055>-12<0051>-2<004C0051>-11<004A00030014>18<0013>-31<001300030047004C>-3<0049>-39<0049>-7<0048>-10<0055>-12<0048>-10<0051>-1<005700030059>1<0048>-10<0055>-12<0045>-8<005600030050>-2<004C>-5<004A>1<004B>-1<005700030045>-13<004800030047004C>-3<0049>-41<00C0>-5<0046>-2<0058>1<004F>-6<0057>-20<000F00030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030057>-3<0048>-10<0044>-4<00500003004A>1<0055>-12<0052>-9<0058>1<0053>-13<0048>-16<004700030057>-2<004B>-9<00480003>]TJ
verbs together to make them easier to learn
 For example, analyzing the common verbs reveals a 
pattern. The common verbs appear here:
The pattern to the verbs emerges when you analyze them: 
Add
Remove, Enter
Exit, Get
Set, Select
Skip, Lock
Unlock, Push
Pop
, and so on. By learning the pattern of opposite verbs, you quickly gain a 
handle on the Windows PowerShell naming convention. Not every verb has an opposite partner, but 
there are enough that it makes sense to look for them.
By using the Windows PowerShell verb grouping, you can determine where to focus your efforts. 
The PowerShell team separated the verbs into seven different groups based on common IT tasks, 
such as working with data and performing diagnostics. The following command lists the Windows 
PowerShell verb grouping:
Windows PowerShell verb distribution 
Another 
way to get a better handle on the Windows PowerShell cmdlets is to analyze the verb distri
bution. While there are nearly 100 different approved verbs as well as a variety of unapproved ones, 
you22ll typically only use a fraction of them often in a standard Windows PowerShell installation, and 
some not at all. If you use the 
Group-Object
 cmdlet which has an alias of 
group
 and the 
Sort-Object
cmdlet which has an alias of 
sort
, the distribution of the cmdlets quickly becomes evident. The fol
lowing command shows the verb distribution:
ote
The exact number of Windows PowerShell cmdlets and the exact distribution of 
Windows PowerShell cmdlet verbs and nouns depend on the version of the operating 
system used, as well as which features are enabled on the operating system. In addition, 
the installation of certain programs and applications adds additional Windows PowerShell 
cmdlets. Therefore, when following along with this section, your numbers probably will not 
[<0048>-4<005B>-4<0044>-7<0046>-23<0057004F>-10<005C00030050>-4<0044>-1<0057>1<0046>6<004B0003005A>-6<004B>-5<0044>-1<005700030044>-1<0053>-5<0053>-11<0048>-8<0044>-1<0055>-24<00560003004B>-7<0048>-8<0055>-10<0048>-5<001100030037>-5<004B004C>-3<00560003004C>-3<0056000300C00051>-7<0048>-7<000F00030044>-1<0051>-9<004700030047>-3<0052>-11<0048>-10<005600030051>-7<005200570003004C>3<0051>-9<0047>2<004C>-1<0046>-12<0044>-1<0057>-1<00480003004400030053>-4<0055>-10<0052>-5<0045>-5<004F>-5<0048>-8<00500003005A>-6<004C>-3<0057004B00030057004B>-7<00480003>]TJ
command or your installation.
Figure 2-12 shows the command and the associated output. 
FIGURE 2-12
Using 
Get-Command
 to display the Windows PowerShell verbs.
The output shown in Figure 2-12 makes it clear that most cmdlets only use a few of the verbs. For 
instance, of 436 cmdlets on my particular machines, 278 of the cmdlets use 1 of only 10 different 
verbs. This appears here:
Therefore, all you need to do is master the 10 different verbs listed earlier and you will have a 
good handle on more than one-half of the cmdlets that ship with Windows PowerShell 3.0.
[<0026>5<0055>-5<0048>-4<0044>8<0057>-4<004C>3<0051>-3<004A000300440003003A>-2<004C>3<0051>-1<0047>2<0052>12<005A>8<005600030033>14<0052>12<005A>12<0048>-5<0055>-7<0036004B>-1<0048>-5<004F>4<004F00030053>-1<0055>-6<0052>4<00C0>3<004F0048>]TJ
As 
you create various aliases and functions, you may decide you like a particular keystroke combi
[<0051>-7<0044>-3<0057>-2<004C>-5<0052>-7<005100030044>-4<0051>-11<00470003005A>-9<004C>-5<0056>-4<004B0003005C>1<0052>-9<0058000300460052>-9<0058>1<004F>-8<004700030058>-6<0056>-12<00480003005C>1<0052>-9<0058>1<005500030047>-7<0048>-9<00C0>-2<0051>-2<004C>-5<0057>-2<004C>-5<0052>-7<00510003005A>-9<004C>-5<0057>-2<004B>-9<0052>-10<0058>-5<005700030044>-4<004F>-9<005A>-3<0044>2<005C>-12<00560003004B>-7<0044>1<0059>-12<004C0051>-11<004A00030057>-1<005200030046>4<0055>-12<0048>-10<0044>-3<0057>-3<00480003004C>-5<005700030048>-10<0044>-9<0046>4<004B00030057>-2<004C0050>-9<00480003005C>1<0052>-10<005800030055>-17<0058>1<00510003>]TJ
Windows PowerShell.
[<002C00030055>-10<0048>-14<0046>3<0052>-5<0050>-1<0050>-7<0048>-8<0051>-9<004700030055>-10<0048>-6<0059>-10<004C>-3<0048>-7<005A>-6<004C>2<0051>-9<004A00030057004B>-7<00480003004F>2<004C>-3<0056>-14<0057004C>2<0051>-9<004A00030052>3<004900030044>-2<004F>3<004F00030057004B>-7<004800030044>-2<004F>2<004C0044>-8<0056>-10<0048>-10<005600030047>-5<0048>-7<00C00051>-7<0048>-14<00470003005A>-6<004C>-3<0057004B004C>2<00510003003A>-14<004C>2<0051>-9<0047>-3<0052005A>-9<005600030033>8<0052005A>1<0048>-8<0055>-21<0036>3<004B>-7<0048>-9<004F>3<004F0003>]TJ
before creating very many new aliases. The reason is that it will be easy, early on, to create 
duplicate settings with slight variations.
[<0032>-19<0049000300460052>-9<0058>1<0055>-26<0056>-12<0048>-9<000F0003005C>1<0052>-9<0058000300460052>-9<0058>1<004F>-8<004700030046>4<0055>-12<0048>-10<0044>-3<0057>-3<00480003005C>1<0052>-9<0058>1<005500030052>-3<005A>-9<005100030056>-12<0046>4<0055>-12<004C0053>-5<005700030057>-2<004B>-7<0044>-3<00570003005A>-2<0052>-9<0058>1<004F>-8<004700030053>-13<0048>-10<0055>-38<0049>-7<0052>-7<0055>-12<00500003005C>1<0052>-9<0058>1<0055000300460052>-7<005100C0>-7<004A>-3<0058>1<0055>-8<0044>-3<0057>-2<004C>-5<0052>-7<00510003004C>-3<00490003005C>1<0052>-9<005800030055>-12<0048>-10<0050>-9<0048>-10<0050>]TJ
ber to run it; however, what if you wish to have a more standardized method of working with your 
[<0053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>25<002200030037>55<005200030047>-5<005200030057>-2<004B>-2<004C>-5<0056>-20<000F0003005C>1<0052>-10<005800030051>-9<0048>-16<0048>-16<004700030057005200030046>4<0055>-12<0048>-10<0044>-3<0057>-3<00480003004400030046>-1<0058>-6<0056>-16<0057>-1<0052>-7<005000030053>-6<0055>-12<0052>-1<00C0>-2<004F>-7<004800030057>-2<004B>-7<0044>-3<00570003005A>-9<004C004F>1<004F0003004B>-9<0052>-6<004F>-8<00470003005C>1<0052>-9<0058>1<005500030056>-12<0048>-10<0057>-31<0057>-2<004C0051>-11<004A>-6<0056>-19<001100030037>-7<004B>-9<004800030055>-12<0048>-10<0044>-4<004F>1<004F>-12<005C00030058>-6<0056>-12<0048>-8<0049>-18<0058>1<004F0003>]TJ
[<0049>-7<0048>-10<0044>-3<0057>-8<0058>1<0055>-12<004800030052004900030046>4<0055>-12<0048>-10<0044>-3<0057>-2<004C0051>-11<004A000300440003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<00480003004C>-5<005600030057>-2<004B>-7<0044>-3<0057000300440049>-41<0057>-3<0048>-10<005500030057>-2<004B>-9<004800030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<00480003004C>-5<005600030046>4<0055>-12<0048>-10<0044>-3<0057>-3<0048>-16<0047>-9<000F0003004C>-5<00570003004F>-7<0052>-10<0044>-11<0047>-6<005600030044>-6<0058>-5<0057>-1<0052>-7<0050>-7<0044>-3<0057>-2<004C>]TJ
cally when PowerShell is launched. 
ote
[<00240003003A>-14<004C>2<0051>-9<0047>-3<0052005A>-9<005600030033>8<0052005A>1<0048>-8<0055>-21<0036>3<004B>-7<0048>-9<004F>3<004F00030053>-5<0055>-10<0052>1<00C0004F>-5<00480003004C>-3<0056000300440003003A>-14<004C>2<0051>-9<0047>-3<0052005A>-9<005600030033>8<0052005A>1<0048>-8<0055>-21<0036>3<004B>-7<0048>-9<004F>3<004F00030056>-10<0046>6<0055>-9<004C>2<0053>-3<005700030057>1<004B>-5<0044>-1<005700030055>-15<0058>3<0051>-7<005600030048>-8<0044>-7<0046>6<004B00030057004C>2<0050>-7<00480003>]TJ
Windows PowerShell starts. Windows PowerShell does not enable script support by default. 
In a network situation, the Windows PowerShell script execution policy may be determined 
by your network administrator via group policy. In a workgroup, or at home, the execu
tion policy is not determined via group policy. For information about enabling Windows 
PowerShell script execution, see Chapter 5, 23Using PowerShell Scripts.24
[<0037>-7<004B>-9<004800030056>-16<0057>-3<0048>-10<0053>-8<005600030049>-7<0052>-7<005500030046>4<0055>-12<0048>-10<0044>-3<0057>-2<004C0051>-11<004A000300440003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<004800030044>-4<0053>-7<0053>-13<0048>-10<0044>-4<005500030051>-9<0048>-6<005B>-37<0057>-20<0011>]TJ
[<0026>7<0055>-12<0048>-11<0044>-6<0057>4<004C>4<0051>-7<004A0003004400030053>-10<0048>-7<0055>-22<0056>-10<0052>-2<0051>-7<0044>-7<004F0003003A>-12<004C>4<0051>-7<0047>-3<0052>1<005A>-7<005600030033>6<0052>1<005A0048>-7<0055>-21<0036004B>-8<0048>-8<004F>4<004F00030053>-4<0055>-12<0052>-2<00C0>2<004F>-4<0048>]TJ
1.
In a Windows PowerShell console, check your 
script execution policy:
2.
If the script execution policy is 
restricted
, change it to 
remotesigned
, but only for the current 
user:
3.
Review the description about Windows PowerShell execution policies, and enter 
 to agree to 
make the change.
4.
[<002C>-1<0051000300440003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030053>-7<0055>-12<0052>-7<0050>-4<0053>-5<0057>-20<000F00030047>-6<0048>-10<0057>-3<0048>-10<0055>-12<0050>-2<004C0051>-9<00480003005A>-9<004B>-9<0048>-10<0057>-2<004B>-9<0048>-10<00550003004400030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<004800030048>-6<005B>-8<004C>-5<0056>-16<0057>-19<005600030045>-3<005C00030058>-6<0056>-3<004C0051>-11<004A00030057>-2<004B>-9<004800030049>-7<0052>-6<004F>1<004F>-7<0052>-3<005A>-9<004C0051>-11<004A0003>]TJ
[<00460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<00470003000B>-11<0045>-2<005C00030047>-7<0048>-8<0049>-9<0044>-6<0058>1<004F>-6<0057>-20<000F00030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<004800030047>-5<0052>-13<0048>-12<005600030051>-9<0052>-2<005700030048>-6<005B>-8<004C>-5<0056>-16<0057>8<000C>10<001D>]TJ
5.
[<0057>-20<0048>-25<0056>-31<0057>-36<00560010>-33<0053>-26<0055>-30<0052>-32<00C0>-28<004F>-23<0048>]TJ
 returns 
false
[<000F00030046>4<0055>-12<0048>-10<0044>-3<0057>-3<00480003004400030051>-9<0048>-9<005A00030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048000300C0>-2<004F>-7<004800030045>-3<005C00030058>-6<0056>-3<004C0051>-11<004A00030057>-2<004B>-9<004800030049>-7<0052>-6<004F>1<004F>-7<0052>-3<005A>-9<004C0051>-11<004A000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<0047>8<001D0003>]TJ
6.
[<0032>-11<0053>-13<0048>-10<005100030057>-2<004B>-9<004800030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048000300C0>-2<004F>-7<00480003004C005100030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F0003002C>-8<0036002800030045>-2<005C00030058>-6<0056>-3<004C0051>-11<004A00030057>-2<004B>-9<004800030049>-7<0052>-6<004F>1<004F>-7<0052>-3<005A>-9<004C0051>-11<004A000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<0047>8<001D0003>]TJ
[<0026>8<0055>-12<0048>-10<0044>-3<0057>-3<004800030044>-4<005100030044>-4<004F004C>-2<0044>-10<00560003004C005100030057>-2<004B>-9<004800030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<004800030051>-7<0044>-4<0050>-9<0048>-16<00470003>]TJ
gh 
that resolves to the 
Get-Help
 cmdlet. This command 
appears here:
8.
[<0026>8<0055>-12<0048>-10<0044>-3<0057>-3<00480003004400030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<005100030057>-2<004B>-7<0044>-3<005700030048>-16<0047004C>-5<0057>-19<00560003005C>1<0052>-9<0058>1<00550003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F000300460052>-7<0051>-9<0056>-12<0052>-6<004F>-7<004800030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-7<001100030037>-7<004B>-2<004C>-5<005600030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<005100030044>-4<0053>-7<0053>-13<0048>-10<0044>-4<0055>-26<00560003>]TJ
here:
Start the Windows PowerShell 
Transcript
[<000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<004700030059>-12<004C>-2<004400030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-7<001100030037>55<005200030047>-5<00520003>]TJ
this, add the 
Start-Transcript
 cmdlet as it appears here the 
Start-Transcript
 cmdlet creates a 
record of all Windows PowerShell commands, as well as the output from those commands.
10.
[<0036>-13<0044>1<0059>1<004800030057>-2<004B>-9<004800030050>-9<0052>-13<0047004C>-5<00C0>-5<0046>-14<0044>-3<0057>-2<004C>-5<0052>-7<0051>-9<005600030057>-1<005200030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F000300460052>-7<0051>-9<0056>-12<0052>-6<004F>-7<004800030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<004800030045>-3<005C00030053>-7<0055>-12<0048>-12<0056>-14<0056>-4<004C0051>-11<004A00030057>-2<004B>-9<004800030036>-13<0044>1<0059>1<00480003004C>-3<00460052>-7<00510003004C00510003>]TJ
the tool bar, or by choosing Save from the File menu. 
11.
Close the Windows PowerShell ISE and close the Windows PowerShell console.
12.
Open the Windows PowerShell console. You should now see the output in the console from 
starting the Windows PowerShell transcript utility. 
13.
Test the newly created 
gh 
alias. 
14.
[<0032>-11<0053>-13<0048>-10<005100030057>-2<004B>-9<004800030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<00480003004C005100030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F0003002C>-8<0036002800030045>-2<005C00030058>-6<0056>-3<004C0051>-11<004A00030057>-2<004B>-9<004800030051>-9<0048>-9<005A>-9<004F>-12<005C00030046>4<0055>-12<0048>-10<0044>-3<0057>-3<0048>-16<00470003>]TJ
[<0036>-36<0048>-46<00570010>-54<0033>-28<0055>-42<0052>-44<00C0>-40<004F>-35<0048>]TJ
function. 
15.
[<0035>-2<0048>-8<0059>-12<004C>-5<0048>-9<005A00030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<004800030044>-4<0051>-11<004700030046>4<004F>-7<0052>-7<0056>-12<004800030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F0003002C>-8<00360028>-17<0011>]TJ
[<0037>-7<004B>-2<004C>-5<0056000300460052>-7<0051>-9<0046>4<004F>-4<0058>-7<0047>-7<0048>-12<005600030057>-2<004B>-9<004800030048>-6<005B>2<0048>-10<0055>-10<0046>4<004C>-5<0056>-12<004800030052>-7<005100030046>4<0055>-12<0048>-10<0044>-3<0057>-2<004C0051>-11<004A000300440003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-7<0011>]TJ
Finding all aliases for a particular object
If you
 know the name of an object and you would like to retrieve all aliases for that object, you can 
use the 
Get-Alias
 cmdlet to retrieve the list of all aliases. Then you need to pipe the results to the 
Where-Object
 cmdlet and specify the value for the 
[<0047>5<0048>-12<00C0>-1<0051>4<004C0057>4<004C>2<00520051>]TJ
 property. An example of doing this for 
the 
Get-ChildItem
 cmdlet is as follows:
Working with cmdlets: step-by-step exercises
In the following exercise, you22ll explore the use of the 
Get-ChildItem
 and 
Get-Member 
cmdlets in 
Windows PowerShell. You22ll see that it is easy to use these cmdlets to automate routine administrative 
tasks. You22ll also continue to experiment with the pipelining feature of Windows PowerShell.
Working with the 
Get-ChildItem
 and 
Get-Member
 cmdlets
1.
Open 
the Windows PowerShell console.
2.
Use the 
Get-Alias
[<00030046>4<0050>-11<0047>1<004F>-7<0048>-10<005700030057005200030055>-12<0048>-10<0057>-2<0055>-12<004C>-5<0048>-8<0059>1<0048000300440003004F004C>-5<0056>-16<0057>-2<004C0051>-11<004A00030052004900030044>-4<004F>1<004F00030057>-2<004B>-9<004800030044>-4<004F004C>-2<0044>-10<0056>-12<0048>-12<005600030047>-7<0048>-9<00C0>-2<0051>-9<0048>-16<004700030052>-7<005100030057>-2<004B>-9<0048000300460052>-7<0050>-4<0053>-9<0058>-5<0057>-3<0048>-10<0055>44<001100030033>3<004C0053>-13<00480003>]TJ
this output to a 
Where-Object
 cmdlet. Specify a 
-match
 argument against the 
[<0047>5<0048>-12<00C0>-1<0051>4<004C0057>4<004C>2<00520051>]TJ
property that matches the name of the 
Get-ChildItem
 cmdlet. The code is as follows:
[<0037>-7<004B>-9<004800030055>-12<0048>-12<0056>-5<0058>1<004F>-6<0057>-19<005600030049>-13<0055>-12<0052>-7<005000030057>-2<004B>-9<004800030053>-7<0055>-12<0048>-8<0059>-12<004C>-5<0052>-9<0058>-6<0056000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<004700030056>-3<004B>-9<0052>-3<005A00030057>-2<004B>-4<0055>-12<0048>-16<004800030044>-4<004F004C>-2<0044>-10<0056>-12<0048>-12<005600030047>-7<0048>-9<00C0>-2<0051>-9<0048>-16<004700030049>-7<0052>-7<005500030057>-2<004B>-9<00480003>]TJ
Get-ChildItem
cmdlet:
3.
Using the 
gci
 alias for the 
Get-ChildItem
[<00030046>4<0050>-11<0047>1<004F>-7<0048>-10<0057>-20<000F00030052>-7<0045>-5<0057>-19<0044>-2<004C0051000300440003004F004C>-5<0056>-16<0057>-2<004C0051>-11<004A000300520049000300C0>-2<004F>-7<0048>-12<005600030044>-4<0051>-11<004700030049>-7<0052>-6<004F>-8<0047>-7<0048>-10<0055>-26<0056000300460052>-7<00510057>-19<0044>-2<004C0051>-9<0048>-16<00470003>]TJ
in the root directory. Type 
gci
 at the prompt. 
4.
[<0037>55<00520003004C>-5<0047>-7<0048>-10<00510057>-2<004C>-3<0049>-48<005C0003004F>-5<0044>-4<0055>-13<004A>-7<0048000300C0>-2<004F>-7<0048>-12<005600030050>-9<0052>-7<0055>-12<004800030054>-3<0058004C>-3<0046>4<004E>-14<004F>-12<005C>34<000F00030053>-6<004C0053>-13<004800030057>-2<004B>-9<004800030052>-10<0058>-5<0057>-2<0053>-9<0058>-5<0057000300570052000300440003>]TJ
Where-Object
 cmdlet, and specify the 
-gt
 argument with a value of 1000 to evaluate the 
length
 property. This is shown here:
5.
To remove the data cluttering your Windows PowerShell window, use 
cls
 to clear the screen. 
6.
Use the 
Get-Alias
 cmdlet to resolve the cmdlet to which the 
cls 
alias points. You can use the 
gal
 alias to avoid typing 
Get-Alias
 if you wish. This is shown here:
Use the 
Get-Alias
 cmdlet to resolve the cmdlet to which the 
mred
 alias points. This is shown 
here:
8.
It is likely that no 
mred 
[<0044>-4<004F004C>-2<0044>-10<00560003004C>-5<005600030047>-7<0048>-9<00C0>-2<0051>-9<0048>-16<004700030052>-7<00510003005C>1<0052>-10<0058>1<005500030050>-7<0044>-9<0046>4<004B>-2<004C0051>-9<0048>-7<00110003002C>-1<005100030057>-2<004B>-2<004C>-5<005600030046>-14<0044>-10<0056>-12<0048>-9<000F0003005C>1<0052>-9<00580003005A>-9<004C004F>1<004F00030056>-12<0048>-16<004800030057>-2<004B>-9<004800030049>-7<0052>-6<004F>1<004F>-7<0052>-3<005A>-9<004C0051>-11<004A0003>]TJ
error message:
Use the 
Clear-Host
 cmdlet to clear the screen. This is shown here:
10.
Use the 
Get-Member
 cmdlet to retrieve a list of properties and methods from the 
Get-ChildItem
 cmdlet. This is shown here:
11.
The output from the preceding command is shown following. Examine the output, and 
identify a property that could be used with a 
Where-Object
[<00030046>4<0050>-11<0047>1<004F>-7<0048>-10<0057000300570052000300C0>-2<0051>-11<004700030057>-2<004B>-9<004800030047>-3<0044>-3<0057>-3<00480003005A>-9<004B>-9<0048>-10<0051000300C0>-2<004F>-7<0048>-12<00560003>]TJ
[<005A>-2<0048>-10<0055>-12<004800030050>-9<0052>-13<0047004C>-5<00C0>-7<0048>-16<0047>-8<0011>]TJ
12.
Use the 
Where-Object
 cmdlet and include the 
LastWriteTime
 property, as follows:
13.
Use the up arrow in the Windows PowerShell console and bring the previous command back 
up on the command line. Now specify the 
-gt
 argument and choose a recent date from your 
[<0053>-7<0055>-12<0048>-8<0059>-12<004C>-5<0052>-9<0058>-6<00560003004F004C>-5<0056>-16<005700030052>1<0049000300C0>-2<004F>-7<0048>-12<0056>-20<000F00030056>-12<00520003005C>1<0052>-10<005800030046>-14<0044>-4<005100030048>-10<0051>-9<0056>-5<0058>1<0055>-12<004800030057>-2<004B>-9<004800030054>-3<0058>-7<0048>-10<0055>-47<005C0003005A>-9<004C004F>1<004F00030055>-12<0048>-10<0057>-8<0058>1<0055>-12<00510003004400030055>-12<0048>-12<0056>-5<0058>1<004F>-6<0057>-20<001100030030>-8<005C000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<00470003004F>-7<0052>-13<0052>-7<004E>-31<00560003004F004C004E>12<00480003>]TJ
the following:
14.
Use the up arrow and retrieve the previous command. Now direct the 
Get-ChildItem
 cmdlet to 
[<004400030056>-3<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<004600030049>-7<0052>-6<004F>-8<0047>-7<0048>-10<005500030052>-7<00510003005C>1<0052>-9<0058>1<00550003004B>-7<0044>-4<0055>-13<004700030047>1<0055>-12<004C>-12<0059>1<0048>-9<000F00030056>-5<0058>-5<0046>4<004B00030044>-10<005600030026>-6<001D>3<003F>11<0049>-23<0056>-12<0052000F0003005A>-9<004B>-2<004C>-3<0046>4<004B00030050>-7<0044>2<005C0003004B>-7<0044>1<0059>1<004800030045>-13<0048>-16<0048>-10<005100030046>4<0055>-12<0048>-10<0044>-3<0057>-3<0048>-16<00470003004C005100030057>-2<004B>-9<004800030056>-16<0057>-3<0048>-10<0053>-16<0010>]TJ
by-step exercise in Chapter 1. You can, of course, use any folder that exists on your machine. 
This command will look like the following:
15.
Once again, use the up arrow and retrieve the previous command. Add the 
-recurse 
argu
ment to the 
Get-ChildItem
 cmdlet. If your previous folder was not nested, then you may want 
to change to a different folder. You can, of course, use your Windows folder, which is rather 
deeply nested. I used my VBScript workshop folder, and the command is shown here:
This concludes this step-by-step exercise. 
In the following exercise, you22ll create a couple of COM-based objects.
One step further: working with 
New-Object
1.
Open the
 Windows PowerShell console.
2.
Create an instance of the 
wshNetwork
 object by using the 
New-Object
 cmdlet. Use the 
-comobject
 parameter and give it the program ID for the 
wshNetwork
 object, which is 
wscript.
network
. Store the results in a variable called 
$wshnetwork
. The code looks like the following:
3.
Use the 
EnumPrinterConnections
 method from the 
wshNetwork
 object to print out a list of 
[<0053>-7<0055>-12<004C00510057>-3<0048>-10<0055000300460052>-7<0051>-4<0051>-9<0048>-16<0046>-25<0057>-2<004C>-5<0052>-7<0051>-9<005600030057>-2<004B>-7<0044>-3<005700030044>-3<0055>-12<004800030047>-7<0048>-9<00C0>-2<0051>-9<0048>-16<004700030052>-7<00510003005C>1<0052>-9<0058>1<00550003004F>-7<0052>-13<0046>-14<0044>-4<004F000300460052>-7<0050>-4<0053>-9<0058>-5<0057>-3<0048>-10<0055>43<001100030037>55<005200030047>-5<005200030057>-2<004B>-2<004C>-5<0056>-20<000F00030058>-6<0056>-12<004800030057>-2<004B>-9<00480003>]TJ
wshNetwork
object that is contained in the 
$wshnetwork
 variable. The command for this is as follows:
4.
Use the 
EnumNetworkDrives
 method from the 
wshNetwork
 object to print out a list of net
[<005A>-2<0052>-7<0055>-12<004E000300460052>-7<0051>-4<0051>-9<0048>-16<0046>-25<0057>-2<004C>-5<0052>-7<0051>-9<005600030057>-2<004B>-7<0044>-3<005700030044>-3<0055>-12<004800030047>-7<0048>-9<00C0>-2<0051>-9<0048>-16<004700030052>-7<00510003005C>1<0052>-9<0058>1<00550003004F>-7<0052>-13<0046>-14<0044>-4<004F000300460052>-7<0050>-4<0053>-9<0058>-5<0057>-3<0048>-10<0055>43<001100030037>55<005200030047>-5<005200030057>-2<004B>-2<004C>-5<0056>-20<000F00030058>-6<0056>-12<004800030057>-2<004B>-9<00480003>]TJ
wshNetwork
object that is contained in the 
$wshnetwork
 variable. The command for this is as follows:
5.
Press the up arrow twice and retrieve the
$wshnetwork.EnumPrinterConnections
 command. 
Use the 
$colPrinters
 variable to hold the collection of printers that is returned by the com
mand. The code looks as follows:
6.
Use the up arrow and retrieve the 
$wshnetwork.EnumNetworkDrives
 command. Use the 
Home key to move the insertion point to the beginning of the line. Modify the command so 
that it holds the collection of drives returned by the command in a variable called 
$colDrives
This is shown here:
Use the 
$userName
 variable to hold the name that is returned by querying the 
username
property from the 
wshNetwork
 object. This is shown here:
8.
Use the 
$userDomain
 variable to hold the name that is returned by querying the 
UserDomain
property from the 
wshNetwork
 object. This is shown here:
Use the 
$computerName
 variable to hold the name that is returned by querying the 
ComputerName
 property from the 
wshNetwork
 object. This is shown here:
10.
Create an instance of the 
wshShell
 object by using the 
New-Object
 cmdlet. Use the 
-comobject
argument and give it the program ID for the 
wshShell
 object, which is 
wscript.shell
. Store the 
results in a variable called 
$wshShell
. The code for this follows: 
11.
Use the 
Popup
 method from the 
wshShell
 object to produce a pop-up box that displays the 
domain name, user name, and computer name. The code for this follows:
12.
Use the 
Popup
 method from the 
wshShell
 object to produce a pop-up box that displays the 
collection of printers held in the 
$colPrinters
 variable. The code is as follows:
13.
Use the 
Popup
 method from the 
wshShell
 object to produce a pop-up box that displays the 
collection of drives held in the 
$colDrives
 variable. The code is as follows:
This concludes this exercise. 
Chapter 2 quick reference
Do This
[<0033>-5<0055>-19<0052>-20<0047>-10<0058>-12<0046>-9<0048000300440003004F>-7<004C>-12<0056>-23<005700030052>-7<004900030044>-11<004F>-6<004F00030057>-9<004B>-16<0048000300C0>-10<004F>-14<0048>-19<00560003004C>-7<00510003004400030049>-14<0052>-13<004F>-15<0047>-14<0048>-17<00550003>]TJ
Use the 
Get-ChildItem
 cmdlet and supply a value for the 
folder.
[<0033>-5<0055>-19<0052>-20<0047>-10<0058>-12<0046>-9<0048000300440003004F>-7<004C>-12<0056>-23<005700030052>-7<004900030044>-11<004F>-6<004F00030057>-9<004B>-16<0048000300C0>-10<004F>-14<0048>-19<00560003004C>-7<00510003004400030049>-14<0052>-13<004F>-15<0047>-14<0048>-17<005500030044>-11<0051>-18<00470003004C>-7<005100030057>-9<004B>-16<00480003>]TJ
subfolders
Use the 
Get-ChildItem
 cmdlet, supply a value for the 
folder, and specify the 
-recurse
 argument.
Produce a wide output of the results of a previous cmdlet
Use the appropriate cmdlet and pipe the resulting object 
to the 
Format-Wide
 cmdlet.
Produce a listing of all the methods available from the 
Get-ChildItem
 cmdlet
Use the cmdlet and pipe the results into the 
Get-Member
cmdlet. Use the 
-membertype
 argument and supply the 
Noun method.
Produce a pop-up box 
Create an instance of the 
wshShell
 object by using the 
New-Object
 cmdlet. Use the Popup method.
Retrieve the name of the currently logged-on user 
Create an instance of the 
wshNetwork
 object by using the 
New-Object
 cmdlet. Query the 
username
 property.
Retrieve a listing of all currently mapped drives
Create an instance of the 
wshNetwork
 object by using 
the 
New-Object
 cmdlet. Use the EnumNetworkDrives 
method.
CHAPTER 3
Understanding and Using 
PowerShell Providers
fter completing this chapter, you will be able to:
Understand the role of providers in Windows PowerShell.
Use the 
Get-PSProvider
 cmdlet.
Use the 
Get-PSDrive
 cmdlet.
Use the 
New-PSDrive 
cmdlet.
Use the 
Get-Item
 cmdlet.
Use the 
Set-Location
 cmdlet.
[<0038>-3<0056>-12<004800030057>-2<004B>-9<0048000300C0>-2<004F>-7<004800030056>-21<005C>-12<0056>-16<0057>-3<0048>-10<005000030050>-9<0052>-13<0047>-7<0048>-11<004F00030057>-1<005200030044>-9<00460046>-2<0048>-12<0056>-14<005600030047>-3<0044>-3<0057>-19<004400030049>-12<0055>-12<0052>-7<005000030048>-9<0044>-9<0046>4<004B00030052004900030057>-2<004B>-9<004800030045>-9<0058004C004F>-6<0057>33<0010>-2<004C005100030053>-7<0055>-12<0052>-1<0059>-12<004C>-5<0047>-7<0048>-10<0055>-26<0056>-19<0011>]TJ
Microsoft Windows PowerShell provides a consistent way to access information external to the shell 
environment. To do this, it uses 
providers
. These providers are actually .NET programs that hide all 
the ugly details to provide an easy way to access information. The beautiful thing about the way the 
provider model works is that all the different sources of information are accessed in exactly the same 
manner using a common set of cmdlets27
Get-ChildItem
, for example27to work with different types of 
data. This chapter demonstrates how to leverage the PowerShell providers. 
ote
[<0024>-8<004F>3<004F00030056>-11<0046>6<0055>-9<004C>2<0053>-3<0057>-17<005600030044>-2<0051>-9<0047000300C0004F>-5<0048>-10<005600030050>-7<0048>-8<0051>2<0057004C>-3<0052>-5<0051>-7<0048>-14<00470003004C>2<005100030057004B004C>-3<005600030046>6<004B>-5<0044>-2<0053>-3<0057>-1<0048>-8<005500030044>-2<0055>-10<004800030044>4<0059>-3<0044004C>2<004F>-2<0044>-2<0045>-5<004F>-5<004800030059>-10<004C004400030057004B>-7<00480003>]TJ
Microsoft TechNet 
Script Center 
http://aka.ms/powershellsbs_book
Understanding PowerShell providers
By 
identifying the providers installed with Windows PowerShell, you can begin to understand the 
capabilities intrinsic to a default installation. Providers expose information contained in differ
[<0048>-10<0051>-1<005700030047>-3<0044>-3<0057>-19<004400030056>-16<0057>-1<0052>-7<0055>-12<0048>-12<005600030045>-3<005C00030058>-6<0056>-3<004C0051>-11<004A0003004400030047>1<0055>-12<004C>-12<0059>1<0048>-18<0010>2<0044>-4<0051>-11<0047>-2<0010>4<00C0>-2<004F>-7<0048>-18<0010>-4<0056>-21<005C>-12<0056>-16<0057>-3<0048>-10<005000030044>-3<0051>-7<0044>-4<004F>-7<0052>-13<004A>-12<005C>35<001100030024>-10<005100030048>-6<005B>-6<0044>-4<0050>-4<0053>-8<004F>-7<004800030052004900030057>-2<004B>-2<004C>-5<00560003004C>-5<005600030052>-7<0045>-5<0057>-19<0044>-2<004C0051>-2<004C0051>-11<004A000300440003004F004C>-5<0056>-16<0057>-2<004C0051>-11<004A0003>]TJ
registry keys27to do this, you would connect to the registry 23drive24 and use the 
Get-ChildItem
[<0046>4<0050>-11<0047>1<004F>-7<0048>-10<0057>-20<000F0003005A>-9<004B>-2<004C>-3<0046>4<004B0003004C>-5<005600030048>-6<005B>-6<0044>-9<0046>-25<0057>-2<004F>-12<005C00030057>-2<004B>-9<004800030056>-17<0044>-4<0050>-9<004800030050>-9<0048>-10<0057>-2<004B>-9<0052>-13<00470003005C>1<0052>-9<00580003005A>-2<0052>-9<0058>1<004F>-8<004700030058>-6<0056>-12<004800030057>-1<005200030052>-7<0045>-5<0057>-19<0044>-2<004C0051000300440003004F004C>-5<0056>-16<0057>-2<004C0051>-11<004A000300520049000300C0>-2<004F>-7<0048>-12<005600030052>-7<005100030057>-2<004B>-9<00480003004B>-7<0044>-4<0055>-13<00470003>]TJ
[<0047>1<0055>-12<004C>-12<0059>1<0048>-7<001100030037>-7<004B>-9<004800030052>-7<0051>-4<004F>-12<005C00030047004C>-3<0049>-39<0049>-7<0048>-10<0055>-12<0048>-10<0051>-9<0046>-2<00480003004C>-5<005600030057>-2<004B>-9<004800030056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<004600030051>-7<0044>-4<0050>-9<004800030044>-11<0056>-14<0056>-12<0052>-13<0046>4<004C>-2<0044>-3<0057>-3<0048>-16<00470003005A>-9<004C>-5<0057>-2<004B00030048>-10<0044>-9<0046>4<004B00030047>1<0055>-12<004C>-12<0059>1<0048>-7<001100030027>-11<0048>-8<0059>1<0048>-11<004F>-7<0052>-7<0053>-13<0048>-10<0055>-26<005600030049>-9<0044>-4<0050>-2<004C004F004C>-2<0044>-4<00550003005A>-9<004C>-5<0057>-2<004B0003>]TJ
Windows .NET programming can create new providers, but writing a provider can be complex. See 
http://msdn.microsoft.com/en-us/library/windows/desktop/ee126192v=vs.85.aspx
 for more informa
tion. When a new provider is created, it might ship in a 
snap-in. A 
snap-in
 is a 
dynamic-link library 
DLL
[<000300C0>-2<004F>-7<004800030057>-2<004B>-7<0044>-3<005700030050>-6<0058>-6<0056>-16<005700030045>-13<00480003004C0051>-9<0056>-16<0057>-19<0044>-4<004F>1<004F>-7<0048>-16<00470003004C00510057>-1<00520003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F>-9<001100030024>3<0049>-41<0057>-3<0048>-10<0055000300440003>]TJ
snap-in has been installed, it cannot 
be uninstalled unless the developer provides removal logic27however, the 
snap-in can be removed 
from the current Windows PowerShell console. The preferred way to ship a provider is via a 
Windows 
PowerShell module. Modules are installable via an Xcopy deployment, and therefore do not necessar
ily require admin rights.
To obtain a listing of all the 
providers, use the 
Get-PSProvider
 cmdlet. This command produces 
the following list on a default installation of Windows PowerShell Windows 8 does not include the 
WSMan
 provider:
Understanding the alias provider
In 
Chapter 1, 23Overview of Windows PowerShell 3.0,24 I presented the various help utilities available 
[<0057>-2<004B>-7<0044>-3<005700030056>-3<004B>-9<0052>-3<005A0003004B>-9<0052>-3<005A00030057>-1<005200030058>-6<0056>-12<004800030046>4<0050>-11<0047>1<004F>-7<0048>-10<0057>-19<0056>-19<001100030037>-7<004B>-9<004800030044>-4<004F004C>-2<0044>-10<005600030053>-7<0055>-12<0052>-1<0059>-12<004C>-5<0047>-7<0048>-10<005500030053>-7<0055>-12<0052>-1<0059>-12<004C>-5<0047>-7<0048>-12<005600030048>-10<0044>-10<0056>-21<005C>4<0010>8<0057>-1<0052>-16<0010>-10<0058>-6<0056>-12<004800030044>-9<00460046>-2<0048>-12<0056>-14<005600030057>-1<005200030044>-4<004F>1<004F00030044>-4<004F004C>-2<0044>-10<0056>-12<0048>-12<005600030047>-7<0048>-9<00C0>-2<0051>-9<0048>-16<00470003>]TJ
in Windows PowerShell. To work with the aliases on your machine, use the 
Set-Location
 cmdlet and 
[<0056>-4<0053>-13<0048>-16<0046>4<004C>-3<0049>-48<005C00030057>-2<004B>-9<004800030024>-11<004F004C>-2<0044>-10<0056>-5<001D>3<003F00030047>1<0055>-12<004C>-12<0059>1<0048>-7<00110003003C>49<0052>-10<005800030046>-14<0044>-4<005100030057>-2<004B>-9<0048>-10<005100030058>-6<0056>-12<004800030057>-2<004B>-9<004800030056>-17<0044>-4<0050>-9<004800030046>4<0050>-11<0047>1<004F>-7<0048>-10<0057>-19<00560003005C>1<0052>-10<00580003005A>-1<0052>-10<0058>1<004F>-8<004700030058>-6<0056>-12<004800030057>-1<00520003005A>-2<0052>-7<0055>-12<004E0003005A>-9<004C>-5<0057>-2<004B00030057>-2<004B>-9<0048000300C0>-2<004F>-7<00480003>]TJ
system.
With the alias provider, you can use a 
[<00030046>7<0050>-9<0047>4<004F>-5<0048>-8<005700030044>-1<0051>-9<0047000300C0004F>-3<0057>-1<0048>-8<005500030057>2<005200030056>-10<0048>-8<0044>-1<0055>-8<0046>6<004B00030049>-4<0052>-5<005500030044>-2<00510003>]TJ
alias by name or description.
Working with the alias provider
1.
Open the Windows PowerShell console.
2.
Obtain a listing of all the providers by using the 
Get-PSProvider
 cmdlet. 
3.
The PowerShell drive PS drive associated with the alias provider is called Alias. This is shown 
in the listing produced by the
Get-PSProvider
 cmdlet. Use the 
Set-Location
 cmdlet to change 
to the Alias drive. Use the 
 alias to reduce typing. This command is shown here:
4.
Use the 
Get-ChildItem
[<00030046>4<0050>-11<0047>1<004F>-7<0048>-10<005700030057005200030053>-7<0055>-12<0052>-13<0047>-3<0058>-5<0046>-2<0048000300440003004F004C>-5<0056>-16<0057>-2<004C0051>-11<004A00030052004900030044>-4<004F>1<004F00030057>-2<004B>-9<004800030044>-4<004F004C>-2<0044>-10<0056>-12<0048>-12<005600030057>-2<004B>-7<0044>-3<005700030044>-3<0055>-12<004800030047>-7<0048>-9<00C0>-2<0051>-9<0048>-16<004700030052>-7<005100030057>-2<004B>-9<00480003>]TJ
system. To reduce typing, use the alias 
gci
 in place of 
Get-ChildItem
. This is shown here:
5.
Use a 
Where-Object
[<00030046>4<0050>-11<0047>1<004F>-7<0048>-10<0057000300C0>-2<004F>-6<0057>-3<0048>-10<005500030057>-1<005200030055>-12<0048>-16<0047>-3<0058>-5<0046>-2<004800030057>-2<004B>-9<004800030044>-4<0050>-9<0052>-9<0058>1<0051>-1<005700030052>1<00490003004C0051>2<0049>-7<0052>-7<0055>-12<0050>-7<0044>-3<0057>-2<004C>-5<0052>-7<005100030057>-2<004B>-7<0044>-3<00570003004C>-5<005600030055>-12<0048>-10<0057>-8<0058>1<0055>-12<0051>-9<0048>-16<004700030045>-2<005C0003>]TJ
using the 
Get-ChildItem
 cmdlet. Produce a listing of all the aliases that begin with the letter s. 
This is shown here:
6.
[<0037>55<00520003004C>-5<0047>-7<0048>-10<00510057>-2<004C>-3<0049>-48<005C00030052>-2<0057>-2<004B>-9<0048>-10<005500030053>-7<0055>-12<0052>-7<0053>-13<0048>-10<0055>-41<0057>-2<004C>-5<0048>-12<005600030057>-2<004B>-7<0044>-3<005700030046>1<0052>-9<0058>1<004F>-8<004700030045>-13<004800030058>-6<0056>-12<0048>-16<00470003004C005100030057>-2<004B>-9<0048000300C0>-2<004F>-6<0057>-3<0048>-10<0055>39<000F00030053>-6<004C0053>-13<0048>-11<004F004C0051>-9<004800030057>-2<004B>-9<004800030055>-12<0048>-12<0056>-6<0058>1<004F>-6<0057>-19<005600030052004900030057>-2<004B>-9<00480003>]TJ
Get-
ChildItem
 cmdlet into the 
Get-Member
 cmdlet. This is shown here keep in mind that different 
providers expose different objects that will have different properties:
[<0033>3<0055>-12<0048>-12<0056>-14<005600030057>-2<004B>-9<004800030058>1<005300030044>-4<0055>-12<0055>-12<0052>-3<005A0003004E>12<0048>-7<005C00030057>-35<005A>-9<004C>-3<0046>-2<0048>-9<000F00030044>-3<0051>-11<004700030048>-16<0047004C>-5<005700030057>-2<004B>-9<004800030053>-7<0055>-12<0048>-8<0059>-13<004C>-5<0052>-10<0058>-6<0056000300C0>-2<004F>-6<0057>-3<0048>-10<005500030057>-1<00520003004C0051>-9<0046>4<004F>-4<0058>-7<0047>-7<004800030052>-7<0051>-4<004F>-12<005C00030047>-6<0048>-9<00C0>-2<0051>-2<004C>-5<0057>-2<004C>-5<0052>-7<0051>-9<005600030057>-2<004B>-7<0044>-3<005700030046>1<0052>-7<0051>]TJ
tain the word 
set
[<001100030037>-7<004B>-9<004800030050>-9<0052>-13<0047004C>-4<00C0>-7<0048>-16<0047000300C0>-2<004F>-6<0057>-3<0048>-10<00550003004C>-5<005600030056>-4<004B>-9<0052>-3<005A>-9<00510003004B>-9<0048>-10<0055>-12<0048>5<001D>]TJ
8.
The results of this command are shown here:
[<0033>3<0055>-12<0048>-12<0056>-14<005600030057>-2<004B>-9<004800030058>1<005300030044>-4<0055>-12<0055>-12<0052>-3<005A0003004E>12<0048>-7<005C00030057>-2<004B>-4<0055>-12<0048>-16<004800030057>-2<004C0050>-9<0048>-12<0056>-20<000F00030044>-3<0051>-11<004700030048>-16<0047004C>-5<005700030057>-2<004B>-9<004800030053>-7<0055>-12<0048>-8<0059>-12<004C>-5<0052>-9<0058>-6<0056000300C0>-2<004F>-6<0057>-3<0048>-10<005500030057>-1<00520003004C0051>-9<0046>4<004F>-4<0058>-7<0047>-7<004800030052>-7<0051>-4<004F>-12<005C00030051>-7<0044>-4<0050>-9<0048>-12<005600030052004900030044>-4<004F004C>-2<0044>-10<0056>-12<0048>-12<00560003>]TJ
that are like the letter 
. This revised command is shown here:
The results from this command will be similar to those shown here:
10.
In the preceding list, note that 
where
 is an alias for the 
Where-Object
 cmdlet. Press the up 
arrow key one time to retrieve the previous command. Edit it to use the 
where
 alias instead of 
spelling out the entire 
Where-Object
 cmdlet name. This revised command is shown here:
Caution
When using the 
 cmdlet to switch to a different PS drive, you must 
follow the name of the PS drive with a colon. A trailing forward slash or backward slash is 
optional. An error will be generated if the colon is left out, as shown in Figure 3-1. I pre
fer to use the 
[<0045>-7<0044>-7<0046>7<004E>-37<005A0044>-1<0055>-10<004700030056>-3<004F>-3<0044>-8<0056>-1<004B0003000B>-56<003F>-40<000C00030045>-11<0048>-14<0046>-12<0044>-4<0058>-4<0056>-10<00480003004C>-3<00570003004C>-3<005600030046>3<0052>-5<0051>-7<0056>-1<004C>-3<0056>-14<0057>-1<0048>-8<0051>2<00570003005A>-6<004C>-3<0057004B00030051>-7<0052>-5<0055>-9<0050>-5<0044>-2<004F0003003A>-14<004C>2<0051>-9<0047>-3<0052005A>-9<0056000300C0004F>-5<004800030056>-19<005C>-10<0056>-14<0057>-1<0048>-8<00500003>]TJ
operations.
FIGURE 3-1
Using 
 without a colon results in an error.
[<0038>13<0051>1<0047>6<0048>1<0055>-15<00560057>-9<0044>1<0051>1<0047>12<004C>12<0051>1<004A>-1<0003>-1<0057>6<004B0048>-1<0003>-1<0046>4<0048>1<0055>-27<0057>12<004C>11<00C0>9<0046>-4<0044>2<0057>6<0048>-1<0003>-1<0053>4<0055>-4<0052>11<0059004C>6<0047>6<0048>1<0055>]TJ
The 
[<0053>-7<0055>-12<0048>-16<0046>-2<0048>-16<0047004C0051>-11<004A00030056>-12<0048>-16<0046>-25<0057>-2<004C>-5<0052>-7<005100030048>-6<005B>-8<0053>-8<004F>-7<0052>-7<0055>-12<0048>-16<00470003005A>-2<0052>-7<0055>-12<004E>-14<004C0051>-11<004A0003005A>-9<004C>-5<0057>-2<004B00030057>-2<004B>-9<004800030044>-4<004F004C>-2<0044>-10<005600030053>-7<0055>-12<0052>-1<0059>-12<004C>-5<0047>-7<0048>-10<0055>44<001100030025>-12<0048>-16<0046>-14<0044>-6<0058>-6<0056>-12<004800030057>-2<004B>-9<0048000300C0>-2<004F>-7<004800030056>-21<005C>-12<0056>-16<0057>-3<0048>-10<005000030050>-9<0052>-13<0047>-7<0048>-11<004F00030044>-4<0053>-7<0053>-8<004F004C>-5<0048>-12<00560003>]TJ
[<0057>-1<005200030057>-2<004B>-9<004800030046>-2<0048>-10<0055>-41<0057>-2<004C>-5<00C0>-5<0046>-14<0044>-3<0057>-3<004800030053>-7<0055>-12<0052>-1<0059>-12<004C>-5<0047>-7<0048>-10<00550003004C005100030050>-6<0058>-5<0046>4<004B00030057>-2<004B>-9<004800030056>-17<0044>-4<0050>-9<00480003005A>-3<0044>2<005C00030044>-10<00560003004C>-6<005700030047>-5<0052>-13<0048>-12<005600030057>-2<004B>-9<004800030044>-4<004F004C>-2<0044>-10<005600030053>-7<0055>-12<0052>-1<0059>-12<004C>-5<0047>-7<0048>-10<0055>39<000F00030050>-7<0044>-4<0051>4<005C00030052>1<004900030057>-2<004B>-9<004800030056>-17<0044>-4<0050>-9<00480003>]TJ
[<0046>4<0050>-11<0047>1<004F>-7<0048>-10<0057>-19<005600030046>-15<0044>-4<005100030045>-13<004800030058>-6<0056>-12<0048>-16<0047>-8<001100030037>55<0052000300C0>-2<0051>-11<00470003004C0051>2<0049>-7<0052>-7<0055>-12<0050>-7<0044>-3<0057>-2<004C>-5<0052>-7<005100030044>-4<0045>-13<0052>-9<0058>-5<005700030057>-2<004B>-9<004800030046>-2<0048>-10<0055>-41<0057>-2<004C>-5<00C0>-5<0046>-14<0044>-3<0057>-3<004800030053>-7<0055>-12<0052>-1<0059>-12<004C>-5<0047>-7<0048>-10<0055>39<000F00030058>-6<0056>-12<004800030057>-2<004B>-9<00480003>]TJ
Get-Help
 cmdlet and 
search for 
about_Providers
[<00110003002C>1<00490003005C>1<0052>-10<005800030044>-4<0055>-12<004800030058>1<0051>-9<0056>-6<0058>1<0055>-12<00480003005A>-9<004B>-7<0044>-3<005700030044>-4<0055>-41<0057>-2<004C>-3<0046>4<004F>-7<0048>-12<00560003004C00510003004B>-9<0048>-11<004F>1<005300030050>-7<0044>2<005C00030045>-13<004800030055>-12<0048>-11<004F>-5<0044>-3<0057>-3<0048>-16<004700030057>-1<005200030046>-2<0048>-10<0055>-41<0057>-2<004C>-5<00C0>-5<0046>-14<0044>-3<0057>-3<0048>-12<0056>-20<000F0003005C>1<0052>-9<00580003>]TJ
can use the wildcard 
asterisk * parameter. This command is shown here:
[<002C>-1<005100030044>-11<0047>-7<0047004C>-5<0057>-2<004C>-5<0052>-7<005100030057005200030044>-4<004F>1<004F>-7<0052>-3<005A>-9<004C0051>-11<004A0003005C>1<0052>-9<005800030057005200030058>-6<0056>-12<004800030057>-2<004B>-9<004800030046>-2<0048>-10<0055>-41<0057>-2<004C>-5<00C0>-5<0046>-14<0044>-3<0057>-3<004800030053>-7<0055>-12<0052>-1<0059>-12<004C>-5<0047>-7<0048>-10<0055>39<000F0003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F0003004A004C>-12<0059>1<0048>-12<00560003005C>1<0052>-9<005800030057>-2<004B>-9<004800030044>-4<0045>-6<004C004F>]TJ
[<004C>-5<0057>-38<005C00030057>-1<005200030056>-4<004C>-5<004A>1<005100030056>-12<0046>4<0055>-12<004C0053>-5<0057>-19<0056>-4<001E0003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030046>-15<0044>-4<00510003005A>-2<0052>-7<0055>-12<004E0003005A>-9<004C>-5<0057>-2<004B00030056>-3<004C>-5<004A>1<0051>-9<0048>-16<004700030044>-4<0051>-11<004700030058>1<0051>-9<0056>-3<004C>-5<004A>1<0051>-9<0048>-16<004700030056>-12<0046>4<0055>-12<004C0053>-5<0057>-19<005600030044>-11<00560003005A>-2<0048>-11<004F>1<004F>-9<001100030037>-7<004B>-9<004800030046>-2<0048>-10<0055>-41<0057>-2<004C>-4<00C0>]TJ
[<0046>-14<0044>-3<0057>-3<004800030053>-7<0055>-12<0052>-1<0059>-12<004C>-5<0047>-7<0048>-10<00550003004A004C>-12<0059>1<0048>-12<00560003005C>1<0052>-9<005800030057>-2<004B>-9<004800030044>-4<0045>-6<004C004F004C>-5<0057>-38<005C00030056>-12<0048>-10<0044>-4<0055>-10<0046>4<004B00030049>-7<0052>-7<0055>39<000F00030046>1<0052>-7<0053>-2<005C>34<000F00030050>-9<0052>-1<0059>1<0048>-9<000F00030044>-3<0051>-11<004700030047>-7<0048>-11<004F>-7<0048>-10<0057>-3<004800030046>-2<0048>-10<0055>-41<0057>-2<004C>-5<00C0>-5<0046>-14<0044>-3<0057>-3<0048>-12<0056>-19<001100030038>-3<0056>-4<004C0051>-11<004A00030057>-2<004B>-9<004800030046>-2<0048>-10<0055>-41<0057>-2<004C>-5<00C0>-5<0046>-14<0044>-3<0057>-3<00480003>]TJ
provider, you can open the 
[<00260048>-10<0055>-41<0057>-2<004C>-5<00C0>-5<0046>-15<0044>-3<0057>-3<0048>-12<005600030030>-2<004C>-3<0046>4<0055>-12<0052>-7<0056>-12<00520049>-41<005700030030>-5<0044>-4<0051>-7<0044>-11<004A>-7<0048>-10<0050>-9<0048>-10<0051005700030026>2<0052>-7<0051>-9<0056>-12<0052>-6<004F>-7<00480003000B>-8<0030>-4<0030>-9<0026>-27<000C>14<001100030037>-7<004B>-9<0048000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<0047>-6<005600030058>-6<0056>-12<0048>-16<00470003>]TJ
[<004C005100030057>-2<004B>-9<004800030049>-7<0052>-6<004F>1<004F>-7<0052>-3<005A>-9<004C0051>-11<004A00030053>-7<0055>-12<0052>-13<0046>-2<0048>-16<0047>-3<0058>1<0055>-12<004800030058>-6<0056>-12<004800030057>-2<004B>-9<004800030046>-2<0048>-10<0055>-41<0057>-2<004C>-5<00C0>-5<0046>-14<0044>-3<0057>-3<004800030053>-7<0055>-12<0052>-1<0059>-12<004C>-5<0047>-7<0048>-10<005500030057>-1<005200030052>-7<0045>-5<0057>-19<0044>-2<004C0051000300440003004F004C>-5<0056>-16<0057>-2<004C0051>-11<004A00030052004900030057>-2<004B>-9<004800030046>-2<0048>-10<0055>-41<0057>-2<004C>-5<00C0>-5<0046>-14<0044>-3<0057>-3<0048>-12<00560003004C0051>-9<0056>-16<0057>-19<0044>-4<004F>1<004F>-7<0048>-16<00470003>]TJ
on the local computer.
[<0032>-8<0045>-6<0057>-17<0044>-6<004C>4<0051004C>4<0051>-7<004A000300440003004F>4<004C>-4<0056>-8<0057>3<004C>4<0051>-7<004A00030052>-1<004900030046>-4<0048>-7<0055>-34<0057>4<004C>2<00C00046>-12<0044>-6<0057>-2<0048>-13<0056>]TJ
1.
Open
 the Windows PowerShell console.
2.
Set your location to the cert PS drive. To do this, use the 
Set-Location
 cmdlet, as shown here:
3.
Use the 
Get-ChildItem
[<00030046>4<0050>-11<0047>1<004F>-7<0048>-10<005700030057005200030053>-7<0055>-12<0052>-13<0047>-3<0058>-5<0046>-2<0048000300440003004F004C>-5<0056>-16<005700030052>1<004900030057>-2<004B>-9<004800030046>-2<0048>-10<0055>-41<0057>-2<004C>-5<00C0>-5<0046>-14<0044>-3<0057>-3<0048>-12<0056>-20<000F00030044>-10<005600030056>-4<004B>-9<0052>-3<005A>-9<00510003004B>-9<0048>-10<0055>-12<0048>5<001D>]TJ
The list produced is shown here:
4.
Use the 
recurse
 argument to cause the 
Get-ChildItem
 cmdlet to produce a list of all the cer
[<0057>-2<004C>-5<00C0>-5<0046>-14<0044>-3<0057>-3<004800030056>-16<0057>-1<0052>-7<0055>-12<0048>-12<005600030044>-4<0051>-11<004700030057>-2<004B>-9<004800030046>-2<0048>-10<0055>-41<0057>-2<004C>-5<00C0>-5<0046>-14<0044>-3<0057>-3<0048>-12<00560003004C005100030057>-2<004B>-9<0052>-7<0056>-12<004800030056>-16<0057>-1<0052>-7<0055>-12<0048>-12<0056>-19<001100030037>55<005200030047>-5<005200030057>-2<004B>-2<004C>-5<0056>-20<000F00030053>-6<0055>-12<0048>-12<0056>-14<005600030057>-2<004B>-9<004800030058>1<005300030044>-4<0055>-12<0055>-12<0052>-3<005A0003004E>12<0048>-7<005C00030052>-7<0051>-9<004800030057>-2<004C0050>-9<00480003>]TJ
and add the 
-recurse
 argument to the previous command. This is shown here:
5.
Use the 
path
 argument for 
Get-ChildItem
[<00030057>-1<005200030053>-7<0055>-12<0052>-13<0047>-3<0058>-5<0046>-2<0048000300440003004F004C>-5<0056>-16<0057>-2<004C0051>-11<004A00030052004900030046>-2<0048>-10<0055>-41<0057>-2<004C>-5<00C0>-5<0046>-14<0044>-3<0057>-3<0048>-12<00560003004C005100030044>-4<0051>-9<0052>-2<0057>-2<004B>-9<0048>-10<005500030056>-16<0057>-1<0052>-7<0055>-12<0048>-9<000F0003>]TJ
without using the 
Set-Location
 cmdlet to change your current location. Use the 
gci
 alias, as 
shown here:
[<003C>49<0052>-9<0058>1<00550003004F004C>-5<0056>-16<0057>-2<004C0051>-11<004A00030052004900030046>-1<0048>-10<0055>-41<0057>-2<004C>-5<00C0>-5<0046>-14<0044>-3<0057>-3<004800030056>-16<0057>-1<0052>-7<0055>-12<0048>-12<00560003005A>-9<004C004F>1<004F0003004F>-7<0052>-13<0052>-7<004E00030056>-4<004C0050>-2<004C004F>-5<0044>-4<005500030057>-1<005200030057>-2<004B>-9<004800030052>-7<0051>-9<004800030056>-4<004B>-9<0052>-3<005A>-9<00510003004B>-9<0048>-10<0055>-12<0048>5<001D>]TJ
6.
[<0026>8<004B>-7<0044>-4<0051>-11<004A>-7<00480003005C>1<0052>-9<0058>1<00550003005A>-2<0052>-7<0055>-12<004E>-14<004C0051>-11<004A0003004F>-7<0052>-13<0046>-14<0044>-3<0057>-2<004C>-5<0052>-7<005100030057>-1<005200030057>-2<004B>-9<004800030046>-2<0058>1<0055>-12<0055>-12<0048>-10<00510057>-8<0058>-6<0056>-12<0048>-10<0055>-22<003F>-3<0044>-6<0058>-5<0057>-2<004B>-4<0055>-12<0052>-13<0052>-2<005700030046>-1<0048>-10<0055>-41<0057>-2<004C>-4<00C0>-5<0046>-14<0044>-3<0057>-3<004800030056>-16<0057>-1<0052>-7<0055>-12<0048>-7<001100030037>55<005200030047>-5<005200030057>-2<004B>-2<004C>-5<0056>-20<000F00030058>-6<0056>-12<004800030057>-2<004B>-9<00480003>]TJ
[<00030044>-4<004F004C>-2<0044>-10<005600030049>-7<0052>-6<004F>1<004F>-7<0052>-3<005A>-2<0048>-16<004700030045>-3<005C00030057>-2<004B>-9<004800030053>-9<0044>-3<0057>-2<004B00030057005200030057>-2<004B>-9<004800030046>-2<0048>-10<0055>-41<0057>-2<004C>-4<00C0>-5<0046>-14<0044>-3<0057>-3<004800030056>-16<0057>-1<0052>-7<0055>-12<00480003000B>]TJ
sl 
is an alias for the 
Set-Location
 cmdlet. 
This command is shown here:
Use the 
Get-ChildItem
[<00030046>4<0050>-11<0047>1<004F>-7<0048>-10<005700030057005200030053>-7<0055>-12<0052>-13<0047>-3<0058>-5<0046>-2<0048000300440003004F004C>-5<0056>-16<0057>-2<004C0051>-11<004A00030052004900030046>-1<0048>-10<0055>-41<0057>-2<004C>-4<00C0>-5<0046>-14<0044>-3<0057>-3<0048>-12<00560003004C005100030057>-2<004B>-9<004800030046>-2<0058>1<0055>-12<0055>-12<0048>-10<00510057>-8<0058>-6<0056>-12<0048>-10<0055>-22<003F>-3<0044>-6<0058>-5<0057>-2<004B>-4<0055>-12<0052>-13<0052>-2<00570003>]TJ
[<0046>-2<0048>-10<0055>-41<0057>-2<004C>-4<00C0>-5<0046>-14<0044>-3<0057>-3<004800030056>-16<0057>-1<0052>-7<0055>-12<004800030057>-2<004B>-7<0044>-3<005700030046>1<0052>-7<00510057>-19<0044>-2<004C005100030057>-2<004B>-9<004800030051>-7<0044>-4<0050>-9<00480003>]TJ
C&W
[<0003004C005100030057>-2<004B>-9<004800030056>-6<0058>1<0045>-6<004D>-5<0048>-16<0046>-25<0057000300C0>-7<0048>-11<004F>-8<0047>-8<001100030038>-3<0056>-12<004800030057>-2<004B>-9<00480003>]TJ
gci
 alias to reduce the 
amount of typing. Pipeline the resulting object to a 
Where-Object
 cmdlet, but use the 
where
alias instead of typing 
Where-Object
. The code to do this is shown here:
[<0032>-11<005100030050>3<005C00030050>-7<0044>-9<0046>4<004B>-2<004C0051>-9<0048>-9<000F00030057>-2<004B>-9<0048>-10<0055>-12<004800030044>-4<0055>-12<004800030049>-7<0052>-9<0058>1<005500030046>-2<0048>-10<0055>-41<0057>-2<004C>-5<00C0>-5<0046>-14<0044>-3<0057>-3<0048>-12<00560003004F004C>-5<0056>-16<0057>-3<0048>-16<0047>-8<001100030037>-7<004B>-9<0048>-12<0056>-12<004800030044>-4<0055>-12<004800030056>-4<004B>-9<0052>-3<005A>-9<00510003004B>-9<0048>-10<0055>-12<0048>5<001D>]TJ
8.
[<0038>-3<0056>-12<004800030057>-2<004B>-9<004800030058>1<005300030044>-4<0055>-12<0055>-12<0052>-3<005A0003004E>12<0048>-7<005C>34<000F00030044>-3<0051>-11<004700030048>-16<0047004C>-5<005700030057>-2<004B>-9<004800030053>-7<0055>-12<0048>-8<0059>-12<004C>-5<0052>-10<0058>-6<0056000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<004700030056>-12<005200030057>-2<004B>-7<0044>-3<00570003004C>-5<00570003005A>-9<004C004F>1<004F00030055>-12<0048>-10<0057>-8<0058>1<0055>-12<005100030052>-7<0051>-4<004F>-12<005C00030046>-1<0048>-10<0055>-41<0057>-2<004C>-4<00C0>-5<0046>-14<0044>-3<0057>-3<0048>-12<00560003>]TJ
that contain the phrase 
SGC Root
 in the subject property. The revised command is shown 
here:
[<0037>-7<004B>-9<004800030055>-12<0048>-12<0056>-5<0058>1<004F>-6<0057>-2<004C0051>-11<004A00030052>-9<0058>-5<0057>-2<0053>-9<0058>-5<005700030052>-7<005100030050>3<005C00030050>-7<0044>-9<0046>4<004B>-2<004C0051>-9<0048000300460052>-7<00510057>-19<0044>-2<004C0051>-9<005600030044>-4<005100030044>-11<0047>-7<0047004C>-5<0057>-2<004C>-5<0052>-7<0051>-7<0044>-4<004F00030046>-2<0048>-10<0055>-41<0057>-2<004C>-4<00C0>-5<0046>-14<0044>-3<0057>-3<0048>-7<001100030037>-7<004B>-2<004C>-5<00560003004C>-5<005600030056>-4<004B>-9<0052>-3<005A>-9<00510003004B>-9<0048>-10<0055>-12<0048>5<001D>]TJ
10.
Use the up arrow key and edit the previous command. This time, change the 
Where-Object
[<00030046>4<0050>-11<0047>1<004F>-7<0048>-10<005700030056>-12<005200030057>-2<004B>-7<0044>-3<00570003004C>-5<0057000300C0>-2<004F>-5<0057>-3<0048>-10<0055>-26<005600030052>-7<005100030057>-2<004B>-9<00480003>]TJ
thumbprint attribute that is equal to 
F88015D3F98479E1DA553D24FD42BA3F43886AEF
. You do not have to type that, however; 
to copy the thumbprint, you can highlight it and press
 Enter in Windows PowerShell, as 
shown in Figure 3-2. The revised command is shown here:
FIGURE 3-2
Highlight items to copy using the mouse.
roubleshooting
If 
copying from inside the Windows PowerShell console window does not 
work, then you may need to enable 
QuickEdit mode. To do this, right-click the PowerShell 
icon in the upper-left corner of the Windows PowerShell window. Choose Properties, click 
the Options tab, and then select QuickEdit Mode. This is shown in Figure 3-3.
FIGURE 3-3
Enable QuickEdit mode to enable clipboard support.
11.
To see all 
[<0057>-2<004B>-9<004800030053>-7<0055>-12<0052>-7<0053>-13<0048>-10<0055>-41<0057>-2<004C>-5<0048>-12<005600030052004900030057>-2<004B>-9<004800030046>-2<0048>-10<0055>-41<0057>-2<004C>-5<00C0>-5<0046>-14<0044>-3<0057>-3<0048>-9<000F00030053>-6<004C0053>-13<0048>-11<004F004C0051>-9<004800030057>-2<004B>-9<004800030046>-2<0048>-10<0055>-41<0057>-2<004C>-5<00C0>-5<0046>-14<0044>-3<0057>-3<004800030052>-7<0045>-6<004D>-5<0048>-16<0046>-25<005700030057005200030044>]TJ
Format-List
cmdlet and choose all the properties. The revised command is shown here:
[<0037>-7<004B>-9<004800030052>-10<0058>-5<0057>-2<0053>-9<0058>-5<005700030046>1<0052>-7<00510057>-19<0044>-2<004C0051>-9<005600030044>-4<004F>1<004F00030057>-2<004B>-9<004800030053>-7<0055>-12<0052>-7<0053>-13<0048>-10<0055>-41<0057>-2<004C>-5<0048>-12<005600030052004900030057>-2<004B>-9<004800030046>-2<0048>-10<0055>-41<0057>-2<004C>-5<00C0>-5<0046>-14<0044>-3<0057>-3<004800030052>-7<0045>-6<004D>-5<0048>-16<0046>-25<005700030044>-3<0051>-11<00470003004C>-5<005600030056>-4<004B>-9<0052>-3<005A>-9<00510003004B>-9<0048>-10<0055>-12<0048>5<001D>]TJ
12.
[<0032>-11<0053>-13<0048>-10<005100030057>-2<004B>-9<0048000300260048>-10<0055>-41<0057>-2<004C>-5<00C0>-5<0046>-14<0044>-3<0057>-3<0048>-12<005600030030>-4<0030>-9<0026000300C0>-2<004F>-7<0048>-7<001100030037>-7<004B>-2<004C>-5<005600030030>-4<0030>-9<0026000300C0>-2<004F>-7<00480003004C>-5<005600030046>-15<0044>-4<004F>1<004F>-7<0048>-16<00470003>]TJ
Certmgr.msc; you can launch it by 
simply typing the name inside Windows PowerShell, as shown here:
13.
But it is more fun to use the 
Invoke-Item
[<00030046>4<0050>-11<0047>1<004F>-7<0048>-10<00570003005700520003004F>-5<0044>-6<0058>1<0051>-9<0046>4<004B00030057>-2<004B>-9<0048000300260048>-10<0055>-41<0057>-2<004C>-5<00C0>-5<0046>-14<0044>-3<0057>-3<0048>-12<005600030030>-4<0030>-9<0026>-29<001100030037>55<005200030047>-5<005200030057>-2<004B>-2<004C>-5<0056>-20<000F0003>]TJ
supply the PS drive name of cert: to the 
Invoke-Item
 cmdlet. This is shown here:
14.
Compare the information obtained from Windows PowerShell with the information displayed 
[<004C005100030057>-2<004B>-9<0048000300260048>-10<0055>-41<0057>-2<004C>-5<00C0>-5<0046>-14<0044>-3<0057>-3<0048>-12<005600030030>-4<0030>-9<0026>-29<00110003002C>-1<005700030056>-3<004B>-9<0052>-9<0058>1<004F>-8<004700030045>-13<004800030057>-2<004B>-9<004800030056>-17<0044>-4<0050>-9<0048>-7<001100030037>-7<004B>-9<004800030046>-2<0048>-10<0055>-41<0057>-2<004C>-5<00C0>-5<0046>-14<0044>-3<0057>-3<00480003004C>-5<005600030056>-4<004B>-9<0052>-3<005A>-9<00510003004C005100030029>-2<004C>-5<004A>-3<0058>1<0055>-12<004800030016>-6<0010>-34<0017>-8<0011>]TJ
FIGURE 3-4
[<0026>-5<0048>-15<0055>-45<0057>-7<0050>-15<004A>-4<0055>38<0011>-13<0050>-14<0056>-17<004600030046>-19<0044>-8<005100030045>-17<004800030058>-11<0056>-17<0048>-21<004700030057>-5<005200030048>-11<005B>-10<0044>-8<0050>-7<004C>-5<0051>-14<004800030046>-6<0048>-15<0055>-45<0057>-7<004C>-9<00C0>-10<0046>-19<0044>-7<0057>-8<004800030053>-11<0055>-17<0052>-11<0053>-17<0048>-15<0055>-45<0057>-7<004C>-10<0048>-17<0056>-24<0011>]TJ
This concludes this procedure.
[<0036>-2<0048>-5<0044>-1<0055>-4<0046>-2<004B>7<004C>10<0051>-1<004A000300490052>5<005500030056>3<0053>-4<0048>-7<0046>2<004C>9<00C0>7<004600030046>2<0048>-1<0055>-28<0057>10<004C>9<00C0>7<0046>-6<00440057>5<0048>-7<0056>]TJ
[<0037>55<005200030056>-12<0048>-10<0044>-4<0055>-10<0046>4<004B00030049>-7<0052>-7<005500030056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<004600030046>-2<0048>-10<0055>-41<0057>-2<004C>-5<00C0>-5<0046>-14<0044>-3<0057>-3<0048>-12<0056>-20<000F0003005C>1<0052>-10<005800030050>-7<0044>2<005C0003005A>-2<0044>-4<0051005700030057005200030048>-6<005B>-6<0044>-4<0050>-2<004C0051>-9<004800030057>-2<004B>-9<00480003>]TJ
subject
 property. For example, the 
following code examines the 
subject 
[<0053>-7<0055>-12<0052>-7<0053>-13<0048>-10<0055>-41<0057>-38<005C00030052>1<004900030048>-8<0059>1<0048>-10<0055>-47<005C00030046>-1<0048>-10<0055>-41<0057>-2<004C>-5<00C0>-5<0046>-14<0044>-3<0057>-3<00480003004C005100030057>-2<004B>-9<004800030046>-2<0058>1<0055>-12<0055>-12<0048>-10<0051>-1<0057>-8<0058>-6<0056>-12<0048>-10<0055>]TJ
store beginning 
at the root
[<004F>-7<0048>-8<0059>1<0048>-11<004F>-9<00110003002C>-1<005700030047>-5<0052>-13<0048>-12<00560003004400030055>-12<0048>-16<0046>-2<0058>1<0055>-26<0056>-4<004C>-12<0059>1<004800030056>-12<0048>-10<0044>-4<0055>-10<0046>4<004B>-14<000F00030044>-3<0051>-11<004700030055>-12<0048>-10<0057>-8<0058>1<0055>-12<0051>-9<005600030052>-7<0051>-4<004F>-12<005C00030057>-2<004B>-9<004800030046>-2<0048>-10<0055>-41<0057>-2<004C>-5<00C0>-5<0046>-14<0044>-3<0057>-3<0048>-12<005600030057>-2<004B>-7<0044>-3<005700030046>1<0052>-7<00510057>-19<0044>-2<004C005100030057>-2<004B>-9<00480003005A>-2<0052>-7<0055>-13<00470003>]TJ
test 
in some form in the 
subject
 property. This command and associated output appear here:
To delete these 
test 
[<0046>-2<0048>-10<0055>-41<0057>-2<004C>-4<00C0>-5<0046>-14<0044>-3<0057>-3<0048>-12<005600030056>-4<004C0050>-4<0053>-8<004F>-12<005C00030055>-12<0048>-16<0054>-3<0058004C0055>-12<0048>-12<005600030053>-6<004C0053>-13<0048>-11<004F004C0051>-2<004C0051>-11<004A00030057>-2<004B>-9<004800030055>-12<0048>-12<0056>-6<0058>1<004F>-6<0057>-19<005600030052004900030057>-2<004B>-9<004800030053>-7<0055>-12<0048>-8<0059>-12<004C>-5<0052>-10<0058>-6<0056000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<00470003005700520003>]TJ
the 
Remove-Item
 cmdlet. 
ote
When performing any operation that may alter system state, it is a good idea to use 
the 
 parameter to prototype the command prior to actually executing it.
The following command uses the 
-whatif 
parameter from 
Remove-Item
 to prototype the command 
[<0057>-1<005200030055>-12<0048>-10<0050>-9<0052>-1<0059>1<004800030044>-4<004F>1<004F00030052004900030057>-2<004B>-9<004800030046>-2<0048>-10<0055>-41<0057>-2<004C>-4<00C0>-5<0046>-14<0044>-3<0057>-3<0048>-12<005600030049>-13<0055>-12<0052>-7<005000030057>-2<004B>-9<004800030046>-2<0058>1<0055>-12<0055>-12<0048>-10<00510057>-8<0058>-6<0056>-12<0048>-10<005500030056>-16<0057>-1<0052>-7<0055>-12<004800030057>-2<004B>-7<0044>-3<005700030046>1<0052>-7<00510057>-19<0044>-2<004C005100030057>-2<004B>-9<00480003005A>-2<0052>-7<0055>-12<00470003>]TJ
test 
in the 
subject 
property. Once completed, retrieve the command via the up arrow key and remove the 
-whatif 
switched parameter from the command prior to actual execution. This technique appears here:
[<0029>-1<004C0051>-11<0047004C0051>-11<004A>-10<0003>-10<0048>-9<005B>-9<0053>-5<004C0055>-11<004C0051>-11<004A>-10<0003>-10<0046>-8<0048>-11<0055>-38<0057004C>-1<00C0>-3<0046>-16<0044>-10<0057>-5<0048>-17<0056>]TJ
[<000300460052>-7<0050>-4<0050>-9<0052>-7<005100030057>-19<0044>-10<0056>-4<004E0003004C005100030046>1<0052>-7<0050>-4<0053>-9<0044>-4<0051>-2<004C>-5<0048>-12<005600030058>-6<0056>-3<004C0051>-11<004A00030046>-1<0048>-10<0055>-41<0057>-2<004C>-5<00C0>-5<0046>-14<0044>-3<0057>-3<0048>-12<00560003004C>-5<005600030057>-1<00520003004C>-5<0047>-7<0048>-10<0051>-1<0057>-2<004C>-3<0049>-48<005C00030046>-1<0048>-10<0055>-41<0057>-2<004C>-5<00C0>-5<0046>-14<0044>-3<0057>-3<0048>-12<005600030057>-2<004B>-7<0044>-3<005700030048>-9<004C>-5<0057>-2<004B>-9<0048>-10<00550003004B>-7<0044>1<0059>1<004800030048>-6<005B>-8<0053>-6<004C0055>-12<0048>-16<004700030052>-7<00550003>]TJ
[<0044>-4<0055>-12<004800030044>-4<0045>-13<0052>-9<0058>-5<005700030057005200030048>-6<005B>-8<0053>-6<004C0055>-12<0048>-7<001100030038>-3<0056>-4<004C0051>-11<004A00030057>-2<004B>-9<004800030046>-2<0048>-10<0055>-41<0057>-2<004C>-4<00C0>-5<0046>-14<0044>-3<0057>-3<004800030053>-7<0055>-12<0052>-1<0059>-12<004C>-5<0047>-7<0048>-10<0055>39<000F0003004C>-5<00570003004C>-5<005600030056>-4<004C0050>-4<0053>-8<004F>-7<004800030057>-1<00520003004C>-5<0047>-7<0048>-10<00510057>-2<004C>-3<0049>-48<005C00030048>-6<005B>-8<0053>-6<004C0055>-12<0048>-16<004700030046>-1<0048>-10<0055>-41<0057>-2<004C>-5<00C0>-5<0046>-14<0044>-3<0057>-3<0048>-12<0056>-19<001100030037>55<005200030047>-5<00520003>]TJ
this, use the 
notafter 
[<0053>-7<0055>-12<0052>-7<0053>-13<0048>-10<0055>-41<0057>-38<005C00030049>-12<0055>-12<0052>-7<005000030057>-2<004B>-9<004800030046>-2<0048>-10<0055>-41<0057>-2<004C>-5<00C0>-5<0046>-14<0044>-3<0057>-3<004800030052>-7<0045>-6<004D>-5<0048>-16<0046>-25<0057>-19<005600030055>-12<0048>-10<0057>-8<0058>1<0055>-12<0051>-9<0048>-16<004700030049>-12<0055>-12<0052>-7<005000030057>-2<004B>-9<004800030046>-2<0048>-10<0055>-41<0057>-2<004C>-5<00C0>-5<0046>-14<0044>-3<0057>-3<004800030047>1<0055>-12<004C>-12<0059>1<0048>-12<0056>-19<001100030032>-11<0051>-9<00480003>]TJ
[<0044>-4<0053>-7<0053>-7<0055>-12<0052>-10<0044>-9<0046>4<004B0003004C>-5<005600030057>-1<00520003004F>-7<0052>-13<0052>-7<004E00030049>-7<0052>-7<005500030046>-2<0048>-10<0055>-41<0057>-2<004C>-5<00C0>-5<0046>-14<0044>-3<0057>-3<0048>-12<005600030057>-2<004B>-7<0044>-3<005700030048>-6<005B>-8<0053>-6<004C0055>-12<004800030053>-7<0055>-12<004C>-5<0052>-7<005500030057>-1<00520003004400030056>-3<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<004600030047>-3<0044>-3<0057>-3<0048>-7<001100030037>-7<004B>-2<004C>-5<005600030057>-3<0048>-16<0046>4<004B>-4<0051>-2<004C>-5<0054>-3<0058>-7<004800030044>-4<0053>-7<0053>-13<0048>-10<0044>-4<0055>-26<00560003004B>-9<0048>-10<0055>-12<0048>5<001D>]TJ
[<002400030050>-9<0052>-7<0055>-12<0048000300C1>-10<0048>-6<005B>-8<004C0045>-8<004F>-7<004800030044>-4<0053>-7<0053>-7<0055>-12<0052>-10<0044>-9<0046>4<004B0003004C>-5<005600030057>-1<005200030058>-6<0056>-12<004800030057>-2<004B>-9<00480003>]TJ
current date27therefore, each time the command runs, it 
[<0055>-12<0048>-10<0057>-2<0055>-12<004C>-5<0048>-8<0059>1<0048>-12<005600030048>-6<005B>-8<0053>-6<004C0055>-12<0048>-16<004700030046>-1<0048>-10<0055>-41<0057>-2<004C>-5<00C0>-5<0046>-14<0044>-3<0057>-3<0048>-12<0056>-19<001100030037>-7<004B>-2<004C>-5<005600030057>-3<0048>-16<0046>4<004B>-4<0051>-2<004C>-5<0054>-3<0058>-7<004800030044>-4<0053>-7<0053>-13<0048>-10<0044>-4<0055>-26<00560003004B>-9<0048>-10<0055>-12<0048>5<001D>]TJ
One problem with simply using the 
Get-ChildItem
 cmdlet on the currentuser
store is that it returns 
[<0046>-2<0048>-10<0055>-41<0057>-2<004C>-4<00C0>-5<0046>-14<0044>-3<0057>-3<004800030056>-16<0057>-1<0052>-7<0055>-12<0048>-12<005600030044>-10<00560003005A>-2<0048>-11<004F>1<004F00030044>-11<005600030046>-2<0048>-10<0055>-41<0057>-2<004C>-5<00C0>-5<0046>-14<0044>-3<0057>-3<0048>-12<0056>-19<001100030037>55<005200030052>-7<0045>-5<0057>-19<0044>-2<004C005100030052>-7<0051>-4<004F>-12<005C00030046>-1<0048>-10<0055>-41<0057>-2<004C>-5<00C0>-5<0046>-14<0044>-3<0057>-3<0048>-12<0056>-20<000F0003005C>1<0052>-10<005800030050>-6<0058>-6<0056>-16<0057000300C0>-2<004F>-5<0057>-3<0048>-10<005500030052>-10<0058>-5<005700030057>-2<004B>-9<00480003>]TJ
psiscontainer 
[<0053>-7<0055>-12<0052>-7<0053>-13<0048>-10<0055>-41<0057>-38<005C>35<001100030025>-12<0048>-16<0046>-14<0044>-6<0058>-6<0056>-12<00480003005C>1<0052>-9<00580003005A>-9<004C004F>1<004F00030044>-4<004F>-8<0056>-12<005200030051>-9<0048>-16<0048>-16<004700030057>-1<0052000300C0>-2<004F>-6<0057>-3<0048>-10<005500030045>-9<0044>-10<0056>-12<0048>-16<004700030058>1<0053>-13<0052>-7<005100030047>-3<0044>-3<0057>-3<0048>-9<000F0003005C>1<0052>-9<005800030046>-14<0044>-4<005100030051>-9<00520003004F>-7<0052>-7<0051>-11<004A>-7<0048>-10<005500030058>-6<0056>-12<004800030057>-2<004B>-9<004800030056>-4<004C0050>-4<0053>-8<004F>-7<00480003>]TJ
Where-Object
 syntax. The 
[<00030046>4<004B>-7<0044>-4<0055>-8<0044>-9<0046>-25<0057>-3<0048>-10<005500030055>-12<0048>-10<0053>-7<0055>-12<0048>-12<0056>-12<0048>-10<00510057>-19<005600030057>-2<004B>-9<004800030046>-2<0058>1<0055>-12<0055>-12<0048>-10<0051005700030046>-1<0048>-10<0055>-41<0057>-2<004C>-5<00C0>-5<0046>-14<0044>-3<0057>-3<004800030044>-10<00560003004C>-6<005700030046>1<0052>-7<0050>-9<0048>-12<005600030044>-9<0046>4<0055>-12<0052>-7<0056>-14<005600030057>-2<004B>-9<004800030053>-6<004C0053>-13<0048>]TJ
line. Because you22re comparing two properties, you must repeat the 
 character for each property. 
The following command retrieves the expiration dates, thumbprints, and subjects of all expired cer
[<0057>-2<004C>-5<00C0>-5<0046>-14<0044>-3<0057>-3<0048>-12<0056>-19<00110003002C>-1<005700030044>-4<004F>-8<0056>-12<005200030046>4<0055>-12<0048>-10<0044>-3<0057>-3<0048>-12<00560003004400030057>-19<0044>-4<0045>-8<004F>-7<004800030047004C>-5<0056>-4<0053>-8<004F>-5<0044>2<005C>-12<004C0051>-11<004A00030057>-2<004B>-9<00480003004C0051>2<0049>-7<0052>-7<0055>-12<0050>-7<0044>-3<0057>-2<004C>-5<0052>-7<0051>-14<00110003000B>-41<0037>-7<004B>-9<0048000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<00470003004C>-5<00560003004400030056>-3<004C0051>-11<004A>1<004F>-7<00480003004F>-7<0052>-13<004A004C>-3<0046>-14<0044>-4<004F000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<0047>-9<000F0003>]TJ
but it is broken at the 
pipe character to permit better display in the book. 
Caution
All versions of Microsoft Windows ship with 
[<0048>-4<005B>-6<0053>-4<004C>2<0055>-10<0048>-14<004700030046>1<0048>-8<0055>-39<0057004C>-2<00C0>-3<0046>-12<0044>-1<0057>-1<0048>-10<005600030057>2<005200030053>-11<0048>-8<0055>-9<0050004C>-3<005700030059>3<0048>-8<0055>-9<004C>-2<00C0>-3<0046>-12<0044>]TJ
[<0057004C>-3<0052>-5<005100030052>3<004900030052>-4<004F>-6<004700030048>-4<005B>4<0048>-14<0046>1<0058>-3<0057>-17<0044>-2<0045>-5<004F>-5<0048>-10<005600030057004B>-5<0044>-1<00570003005A>1<0048>-8<0055>-10<004800030056>-1<004C>-3<004A>3<0051>-7<0048>-14<00470003005A>-6<004C>-3<0057004B00030057004B>-7<0052>-5<0056>-10<004800030046>1<0048>-8<0055>-39<0057004C>-2<00C0>-3<0046>-12<0044>-1<0057>-1<0048>-10<0056>-17<001100030027>-9<005200030051>-7<0052005700030044>-1<0055>-9<0045>-4<004C>-3<00570055>-6<0044>-2<0055>-9<004C>2<004F>-10<005C00030047>-4<0048>-9<004F>-5<0048>-8<0057>-1<004800030044>-2<00510003>]TJ
[<0048>-4<005B>-6<0053>-4<004C>2<0055>-10<0048>-14<004700030046>1<0048>-8<0055>-39<0057004C>-2<00C0>-3<0046>-12<0044>-1<0057>-1<0048>-49<00B3>-30<004C>-1<00490003005C>3<0052>-7<005800030047>-3<0052>3<000F0003005C>3<0052>-7<005800030046>3<0052>-7<0058>3<004F>-6<004700030046>-12<0044>-4<0058>-4<0056>-10<004800030056>-10<0048>-8<0055>-9<004C>-3<0052>-7<0058>-4<005600030047>-1<0044>-2<0050>-5<0044>-9<004A>-5<004800030057>2<00520003005C>3<0052>-7<0058>3<005500030056>-19<005C>-10<0056>-14<0057>-1<0048>-8<0050>-11<0011>]TJ
[<002C00490003005C>1<0052>-9<00580003005A>-2<0044>-4<005100570003005700520003004C>-5<0047>-7<0048>-10<00510057>-2<004C>-3<0049>-48<005C00030046>-1<0048>-10<0055>-41<0057>-2<004C>-4<00C0>-5<0046>-14<0044>-3<0057>-3<0048>-12<005600030057>-2<004B>-7<0044>-3<00570003005A>-9<004C004F>1<004F00030048>-7<005B>-8<0053>-6<004C0055>-12<00480003004C005100030057>-2<004B>-9<004800030051>-9<0048>-6<005B>-37<005700030016>-8<001300030047>-3<0044>2<005C>-12<0056>-20<000F0003005C>1<0052>-9<005800030058>-6<0056>-12<004800030057>-2<004B>-9<004800030056>-17<0044>-4<0050>-9<004800030057>-3<0048>-16<0046>4<004B>-4<0051>-2<004C>-5<0054>-3<0058>-7<00480003>]TJ
involving a compound 
Where-Object
[<000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<0047>-8<001100030037>-7<004B>-9<0048000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<004700030044>-4<0053>-7<0053>-13<0048>-10<0044>-4<0055>-12<004C0051>-11<004A0003004B>-9<0048>-10<0055>-12<00480003004C>-5<0047>-7<0048>-10<00510057>-2<004C>-5<00C0>-7<0048>-12<005600030046>-2<0048>-10<0055>-41<0057>-2<004C>-5<00C0>-5<0046>-14<0044>-3<0057>-3<0048>-12<00560003>]TJ
expiring in the next 30 days:
Understanding the environment provider
The 
environment provider in Windows PowerShell is used to provide access to the system environ
ment variables. If you open a 
CMD command shell and type 
set
, you will obtain a listing of all the 
[<0048>-10<0051>4<0059>-12<004C0055>-12<0052>-7<0051>-4<0050>-9<0048>-10<0051005700030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<0048>-12<005600030047>-7<0048>-9<00C0>-2<0051>-9<0048>-16<004700030052>-7<005100030057>-2<004B>-9<004800030056>-21<005C>-12<0056>-16<0057>-3<0048>-10<0050>-14<00110003000B>-47<003C>49<0052>-10<005800030046>-14<0044>-4<005100030055>-17<0058>1<005100030057>-2<004B>-9<004800030052>-6<004F>-8<0047>-2<0010>11<0049>-9<0044>-10<0056>-4<004B>-2<004C>-5<0052>-7<0051>-9<0048>-16<004700030046>1<0052>-7<0050>-4<0050>-7<0044>-4<0051>-11<004700030053>-7<0055>-12<0052>-7<0050>-4<0053>-5<00570003>]TJ
inside Windows PowerShell. 
ote
It is easy to forget you are running the CMD prompt when you are inside of the 
Windows PowerShell console. Typing 
returns you to Windows PowerShell. The best 
way to determine whether you are running the command shell or Windows PowerShell is to 
examine the prompt. The default Windows PowerShell prompt is 
PS C:>, assuming that you 
are working on drive C.
If you use the 
echo
 command in the CMD interpreter to print out the value of 
%windir%
, you will 
obtain the results shown in Figure 3-5.
FIGURE 3-5
Use 
set
 at a CMD prompt to see environment variables.
Various applications and other utilities use environment variables as a shortcut to provide easy 
[<0044>-9<00460046>-2<0048>-12<0056>-14<005600030057>-1<005200030056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<0046000300C0>-2<004F>-7<0048>-12<0056>-20<000F00030049>-7<0052>-6<004F>-8<0047>-7<0048>-10<0055>-26<0056>-20<000F00030044>-3<0051>-11<0047000300460052>-7<005100C0>-7<004A>-3<0058>1<0055>-8<0044>-3<0057>-2<004C>-5<0052>-7<005100030047>-3<0044>-3<0057>-19<0044>-14<001100030025>-9<005C00030058>-6<0056>-4<004C0051>-11<004A00030057>-2<004B>-9<004800030048>-10<0051>4<0059>-12<004C0055>-12<0052>-7<0051>-4<0050>-9<0048>-10<0051005700030053>-7<0055>-12<0052>-1<0059>-12<004C>-5<0047>-7<0048>-10<00550003004C00510003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<00560003>]TJ
PowerShell, you can obtain a listing of the environment variables. You can also add, change, clear, and 
delete these variables.
Obtaining a listing of environment variables
1.
Open the Windows PowerShell console.
2.
Obtain a listing of the PS drives by using the 
Get-PSDrive
 cmdlet. This is shown here:
3.
Note that the 
Environment PS drive is called 
Env
. Use the 
Env
 name with the 
Set-Location
cmdlet and change to the Environment PS drive. This is shown here:
4.
Use the 
Get-Item
 cmdlet to obtain a listing of all the environment variables on the system. This 
is shown here:
5.
Use the 
Sort-Object
 cmdlet to produce an alphabetical listing of all the environment variables 
by name. Use the up arrow key to retrieve the previous command, and pipeline the returned 
object into the 
Sort-Object
 cmdlet. Use the 
-property
 argument, and supply 
name
 as the value. 
This command is shown here:
6.
Use the 
Get-Item
 cmdlet to retrieve the value associated with the environment variable 
windir
This is shown here: 
Use the up arrow key and retrieve the previous command. Pipeline the object returned to the 
Format-List
 cmdlet and use the wildcard character to print out all the properties of the object. 
[<0037>-7<004B>-9<004800030050>-9<0052>-13<0047004C>-5<00C0>-7<0048>-16<0047000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<00470003004C>-5<005600030056>-4<004B>-9<0052>-3<005A>-9<00510003004B>-9<0048>-10<0055>-12<0048>5<001D0003>]TJ
8.
The properties and their associated values are shown here:
This concludes this procedure. Do not close Windows PowerShell. Leave it open for the next 
procedure.
Creating a temporary new environment variable
1.
You should still be in the Environment PS drive from the previous procedure. If not, use the 
Set-
Location env:
 command.
2.
Use the 
Get-Item
 cmdlet to produce a listing of all the environment variables. Pipeline the 
returned object to the 
Sort-Object
 cmdlet using the property 
name
. To reduce typing, use the 
 alias and the 
sort
 alias. This is shown here:
3.
Use the 
New-Item
 cmdlet to create a new environment variable. The 
-path
 argument will be 
dot 
 because you are already on the env: PS drive. The 
-Name
 argument will be 
admin
, and 
the 
-value
 argument will be your given name. The completed command is shown here: 
4.
Use the 
Get-Item
 cmdlet to ensure the 
admin
 environment variable was properly created. This 
command is shown here:
The results of the previous command are shown here:
5.
Use the up arrow key to retrieve the previous command. Pipeline the results to the 
Format-List
cmdlet and choose All Properties. This command is shown here: 
The results of the previous command include the PS path, PS drive, and additional information 
about the newly created environment variable. These results are shown here: 
The new environment variable exists until you close the Windows PowerShell console. 
This concludes this procedure. Leave PowerShell open for the next procedure. 
enaming an environment variable
1.
Use
 the 
Get-ChildItem
 cmdlet to obtain a listing of all the environment variables. Pipeline the 
returned object to the 
Sort-Object
 cmdlet and sort the list on the 
name
 property. Use the 
gci
and 
sort
 aliases to reduce typing. The code to do this is shown here: 
2.
The 
admin
 environment variable should be near the top of the list of system variables. If it is 
not, then create it by using the 
New-Item
 cmdlet. The 
-path
 argument has a value of dot 
; 
the 
-name
 argument has the value of 
admin
, and the 
-value
 argument should be the user22s 
given name. If this environment variable was created in the previous exercise, then PowerShell 
will report that it already exists. The command appearing here allows you to re-create the 
admin 
environment variable: 
3.
Use the
Rename-Item
 cmdlet to rename the 
admin
 environment variable to 
super
. The 
-path
argument combines the PS drive name with the environment variable name. The
-NewName
[<0044>-4<0055>-12<004A>-3<0058>1<0050>-9<0048>-10<005100570003004C>-5<005600030057>-2<004B>-9<004800030047>-7<0048>-12<0056>-3<004C0055>-12<0048>-16<004700030051>-9<0048>-9<005A00030051>-7<0044>-4<0050>-9<00480003005A>-9<004C>-5<0057>-2<004B>-9<0052>-10<0058>-5<005700030057>-2<004B>-9<004800030033>-9<003600030047>1<0055>-12<004C>-12<0059>1<004800030056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<0046>-14<0044>-3<0057>-2<004C>-5<0052>-7<0051>-14<001100030037>-7<004B>-2<004C>-5<0056000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<00470003004C>-5<005600030056>-4<004B>-9<0052>-3<005A>-9<00510003>]TJ
here: 
4.
To verify that the old environment variable 
admin
 has been renamed 
super
, press the up arrow 
key two or three times to retrieve the 
gci 
sort -property name
 command. This command is 
shown here: 
This concludes this procedure. Do not close Windows PowerShell. Leave it open for the next 
procedure.
emoving an environment variable
1.
Use the 
Get-ChildItem
 cmdlet to obtain a listing of all the environment variables. Pipeline the 
returned object to the 
Sort-Object
 cmdlet and sort the list on the 
name
 property. Use the 
gci
and 
sort
 aliases to reduce typing. The code to do this is shown here:
2.
The 
super
 environment variable should be in the list of system variables. If it is not, then create 
it by using the 
New-Item
 cmdlet. The 
-path
 argument has a value of dot 
, the 
-name
 argu
ment has a value of 
super
, and the
 -value
 argument should be the user22s given name. If this 
environment variable was created in the previous exercise, then PowerShell will report that it 
already exists. If you have deleted the 
admin
 environment variable, the command appearing 
here creates it:
3.
Use the 
Remove-Item
 cmdlet to remove the 
super
 environment variable. The name of the item 
to be removed is typed following the name of the cmdlet. If you are still in the env: PS drive, 
you will not need to supply a 
-path
 argument. The command is shown here:
4.
Use the 
Get-ChildItem
 cmdlet to verify that the environment variable 
super
 has been removed. 
To do this, press the up arrow key two or three times to retrieve the 
gci
sort -property name
command. This command is shown here:
This concludes this procedure.
[<0038>13<0051>1<0047>6<0048>1<0055>-15<00560057>-9<0044>1<0051>1<0047>12<004C>12<0051>1<004A>-1<0003>-1<0057>6<004B0048>-1<0003>-1<00C0>11<004F>4<0048>-5<0056>-10<005C>1<00560057>6<0048>1<0050>-1<0003>-1<0053>4<0055>-4<0052>12<0059004C>6<0047>6<0048>1<0055>]TJ
The 
[<00C0>-2<004F>-7<0048>-12<0056>-21<005C>-12<0056>-16<0057>-3<0048>-10<005000030053>-6<0055>-12<0052>-1<0059>-12<004C>-5<0047>-7<0048>-10<00550003004C>-5<005600030057>-2<004B>-9<004800030048>-10<0044>-10<0056>-3<004C>-5<0048>-12<0056>-16<00570003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030053>-7<0055>-12<0052>-1<0059>-12<004C>-5<0047>-7<0048>-10<005500030057>-1<005200030058>1<0051>-11<0047>-7<0048>-10<0055>-26<0056>-16<0057>-19<0044>-4<0051>-11<0047>-34<00B3>-32<004C>-5<005700030053>-7<0055>-12<0052>-1<0059>-12<004C>-5<0047>-7<0048>-12<00560003>]TJ
[<0044>-9<00460046>-2<0048>-12<0056>-14<005600030057>-1<005200030057>-2<004B>-9<0048000300C0>-2<004F>-7<004800030056>-21<005C>-12<0056>-16<0057>-3<0048>-10<0050>-14<00110003003A>-10<004B>-9<0048>-10<00510003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F0003004C>-5<00560003004F>-5<0044>-6<0058>1<0051>-9<0046>4<004B>-9<0048>-16<0047>-9<000F0003004C>-5<005700030044>-6<0058>-5<0057>-1<0052>-7<0050>-7<0044>-3<0057>-2<004C>-3<0046>-14<0044>-4<004F>1<004F>-12<005C00030052>-7<0053>-13<0048>-10<0051>-9<005600030052>-7<005100030057>-2<004B>-9<00480003>]TJ
[<0058>-6<0056>-12<0048>-10<005500030047>-5<0052>-13<0046>-2<0058>1<0050>-9<0048>-10<00510057>-19<005600030049>-7<0052>-6<004F>-8<0047>-7<0048>-10<0055>44<001100030038>-3<0056>-3<004C0051>-11<004A00030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F000300C0>-2<004F>-7<0048>-12<0056>-21<005C>-12<0056>-16<0057>-3<0048>-10<005000030053>-7<0055>-12<0052>-1<0059>-13<004C>-5<0047>-7<0048>-10<0055>39<000F0003005C>1<0052>-9<005800030046>-14<0044>-4<005100030046>4<0055>-12<0048>-10<0044>-3<0057>-3<004800030045>-13<0052>-2<0057>-2<004B0003>]TJ
[<0047004C0055>-12<0048>-16<0046>-25<0057>-1<0052>-7<0055>-12<004C>-5<0048>-12<005600030044>-4<0051>-11<0047000300C0>-2<004F>-7<0048>-12<0056>-19<00110003003C>49<0052>-9<005800030046>-14<0044>-4<005100030055>-12<0048>-10<0057>-2<0055>-12<004C>-5<0048>-8<0059>1<004800030053>-7<0055>-12<0052>-7<0053>-13<0048>-10<0055>-41<0057>-2<004C>-5<0048>-12<0056000300520049000300C0>-2<004F>-7<0048>-12<005600030044>-4<0051>-11<004700030047004C0055>-12<0048>-16<0046>-25<0057>-1<0052>-7<0055>-12<004C>-5<0048>-12<0056>-20<000F00030044>-3<0051>-11<00470003005C>1<0052>-9<005800030046>-14<0044>-4<005100030047>-7<0048>-11<004F>-7<0048>-10<0057>-3<004800030057>-2<004B>-9<0048>-10<00500003>]TJ
[<0044>-10<00560003005A>-2<0048>-11<004F>1<004F>-9<00110003002C>-1<005100030044>-11<0047>-7<0047004C>-5<0057>-2<004C>-5<0052>-7<0051>-14<000F0003005C>1<0052>-9<005800030046>-14<0044>-4<005100030052>-7<0053>-13<0048>-10<0051000300C0>-2<004F>-7<0048>-12<005600030044>-4<0051>-11<004700030044>-4<0053>-7<0053>-13<0048>-10<0051>-11<004700030052>-7<005500030052>-1<0059>1<0048>-10<0055>-44<005A>-9<0055>-12<004C>-5<0057>-3<004800030047>-3<0044>-3<0057>-19<004400030057005200030057>-2<004B>-9<0048000300C0>-2<004F>-7<0048>-12<0056>-19<001100030037>-7<004B>-2<004C>-5<005600030046>-15<0044>-4<005100030045>-13<004800030047>-5<0052>-7<0051>-9<00480003>]TJ
with inline code, or by using the pipelining feature of Windows PowerShell. The commands used 
in the procedure are in the 
IdentifyingPropertiesOfDirectories.txt, 
CreatingFoldersAndFiles.txt, 
and 
[<0035>-2<0048>-10<0044>-11<0047004C0051>-11<004A>-11<0024>-11<0051>-11<0047>-10<003A>15<0055>-12<004C>-5<0057>-2<004C0051>-11<004A>-1<0029>-3<0052>-7<0055>-8<0029>-2<004C004F>-7<0048>-12<0056>-19<0011>12<0057>-34<005B>-37<0057000300C0>-2<004F>-7<0048>-12<005600030044>-4<0051>-11<004700030044>-4<0055>-12<004800030044>1<0059>-5<0044>-2<004C004F>-5<0044>-4<0045>-8<004F>-7<004800030049>-12<0055>-12<0052>-7<005000030057>-2<004B>-9<00480003>]TJ
Technet Script Repository, at 
http://aka.ms/powershellSBS_book
Working with directory listings
1.
Open the Windows PowerShell console.
2.
Use the 
Get-ChildItem
 cmdlet to obtain a directory listing of drive C. Use the 
gci
 alias to 
reduce typing. This is shown here:
3.
Use the up arrow key to retrieve the 
gci
C:
 command. Pipeline the object created into a 
Where-Object
 cmdlet and look for containers. This will reduce the output to only directories. 
[<0037>-7<004B>-9<004800030050>-9<0052>-13<0047004C>-5<00C0>-7<0048>-16<0047000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<00470003004C>-5<005600030056>-4<004B>-9<0052>-3<005A>-9<00510003004B>-9<0048>-10<0055>-12<0048>5<001D>]TJ
4.
Use the up arrow key to retrieve the 
gci C: | where psiscontainer
 command, and use the 
exclamation point ! meaning 
not
 to retrieve only items in the PS drive that are not direc
[<0057>-1<0052>-7<0055>-12<004C>-5<0048>-12<0056>-19<001100030037>-7<004B>-9<004800030050>-9<0052>-13<0047004C>-4<00C0>-7<0048>-16<0047000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<00470003004C>-5<005600030056>-4<004B>-9<0052>-3<005A>-9<00510003004B>-9<0048>-10<0055>-12<0048>-7<00110003000B>-41<0037>-7<004B>-9<004800030056>-4<004C0050>-4<0053>-8<004F004C>-5<00C0>-7<0048>-16<00470003>]TJ
Where-Object
 syntax does not 
support using the 
not
 operator directly on the input property.
This concludes this procedure. Do not close Windows PowerShell. Leave it open for the next 
procedure.
Identifying properties of directories
1.
Use
 the 
Get-ChildItem
 cmdlet and supply a value of 
C:
 for the 
-path
 argument. Pipeline the 
resulting object into the 
Get-Member
 cmdlet. Use the 
gci
 and 
gm 
aliases to reduce typing. This 
command is shown here: 
2.
The resulting output contains methods, properties, and more. Filter the output by pipelining 
it into a 
Where-Object
 cmdlet and specifying the 
membertype
 attribute as equal to 
property
To do this, use the up arrow key to retrieve the previous 
gci
-path C: | gm
 command. Pipeline 
the resulting object into the 
Where-Object
[<00030046>4<0050>-11<0047>1<004F>-7<0048>-10<005700030044>-3<0051>-11<0047000300C0>-2<004F>-6<0057>-3<0048>-10<005500030052>-7<005100030057>-2<004B>-9<00480003>]TJ
membertype
 attribute. The 
resulting command is shown here: 
3.
 Windows 8, you need to use the 
force 
[<0053>-9<0044>-4<0055>-8<0044>-4<0050>-9<0048>-10<0057>-3<0048>-10<005500030057>-1<005200030056>-12<0048>-16<00480003004B>-2<004C>-5<0047>-7<0047>-7<0048>-10<0051000300C0>-2<004F>-7<0048>-12<0056>-19<00110003002B>-9<0048>-10<0055>-12<00480003004C>-5<005600030057>-2<004B>-9<00480003>]TJ
command:
4.
The preceding 
gci -path C: | gm | where {$_.membertype -eq "property"}
 command 
returns information on both the 
System.IO.DirectoryInfo
 and 
System.IO.FileInfo
 objects on 
Windows 8, you need to use the 
-force 
[<0056>-18<005A>-9<004C>-5<0057>-1<0046>4<004B00030057>-1<005200030056>-12<0048>-16<00480003004B>-2<004C>-5<0047>-7<0047>-7<0048>-10<0051000300C0>-2<004F>-7<0048>-12<0056>28<000C>14<001100030037>55<005200030055>-12<0048>-16<0047>-3<0058>-5<0046>-2<004800030057>-2<004B>-9<004800030052>-10<0058>-5<0057>-2<0053>-9<0058>-5<00570003005700520003>]TJ
only the properties associated with the 
System.IO.FileInfo
 object, you need to use a com
pound 
Where-Object
 cmdlet. Use the up arrow key to retrieve the
 gci -path C: | gm | where 
{$_.membertype -eq "property"}
 command. Add the 
And
 conjunction and retrieve objects that 
have a type name that is like 
[<000D>-25<00C0>-15<004F>-11<0048000D>]TJ
[<001100030037>-7<004B>-9<004800030050>-9<0052>-13<0047004C>-4<00C0>-7<0048>-16<0047000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<00470003004C>-5<005600030056>-4<004B>-9<0052>-3<005A>-9<00510003004B>-9<0048>-10<0055>-12<0048>5<001D>]TJ
5.
On 
Windows 8, you need to use the 
-force 
parameter. Here is the command to do that:
6.
The resulting output contains only the properties for a 
System.IO.FileInfo
 object. These prop
erties are shown here:
This concludes this procedure. Do not close Windows PowerShell. Leave it open for the next 
procedure.
[<0026>7<0055>-12<0048>-11<0044>-6<0057>4<004C>4<0051>-7<004A00030049>-7<0052>-3<004F>-5<0047>-3<0048>-7<0055>-22<005600030044>-8<0051>-7<0047000300C0>2<004F>-4<0048>-13<0056>]TJ
1.
Use 
the 
Get-Item
[<00030046>4<0050>-11<0047>1<004F>-7<0048>-10<005700030057005200030052>-7<0045>-5<0057>-19<0044>-2<004C0051000300440003004F004C>-5<0056>-16<0057>-2<004C0051>-11<004A000300520049000300C0>-2<004F>-7<0048>-12<005600030044>-4<0051>-11<004700030049>-7<0052>-6<004F>-8<0047>-7<0048>-10<0055>-26<0056>-19<001100030033>3<004C0053>-13<0048>-11<004F004C0051>-9<004800030057>-2<004B>-9<004800030055>-12<0048>-12<0056>-5<0058>1<004F>-6<0057>-2<004C0051>-11<004A00030052>-7<0045>-6<004D>-5<0048>-16<0046>-25<00570003>]TJ
into the 
Where-Object
 cmdlet and use the 
PsisContainer
 property to look for folders. Use the 
[<0051>-7<0044>-4<0050>-9<004800030053>-7<0055>-12<0052>-7<0053>-13<0048>-10<0055>-41<0057>-38<005C00030057>-1<0052000300C0>-2<0051>-11<004700030051>-7<0044>-4<0050>-9<0048>-12<005600030057>-2<004B>-7<0044>-3<00570003>1<00460052>-7<00510057>-19<0044>-2<004C005100030057>-2<004B>-9<00480003005A>-2<0052>-7<0055>-13<00470003>]TJ
my 
in them. Use the 
 alias and the 
where
alias to reduce typing. The command is shown here: 
2.
If you were following along in the previous chapters, you will have a folder called 
Mytest off 
the root of drive C. Use the 
Remove-Item
 cmdlet to remove the Mytest folder. Specify the 
-recurse
[<00030044>-4<0055>-13<004A>-3<0058>1<0050>-9<0048>-10<0051005700030057005200030044>-4<004F>-8<0056>-12<005200030047>-7<0048>-11<004F>-7<0048>-10<0057>-3<0048000300C0>-2<004F>-7<0048>-12<0056000300460052>-7<0051>-1<0057>-19<0044>-2<004C0051>-9<0048>-16<00470003004C005100030057>-2<004B>-9<004800030026>-6<001D>3<003F0030>-8<005C>-41<0057>-3<0048>-12<0056>-16<005700030049>-7<0052>-6<004F>-8<0047>-7<0048>-10<0055>43<00110003002C>1<00490003005C>1<0052>-9<0058>1<00550003004F>-7<0052>-13<0046>-14<0044>-3<0057>-2<004C>-5<0052>-7<00510003004C>-5<005600030056>-16<0057>-2<004C004F>1<004F0003>]TJ
set to Env, then change it to C or search for C:Mytest. The command is shown here:
3.
Press the up arrow key twice and retrieve the 
gi * | where {$_.PsisContainer -AND $_.name 
-Like "*my*"}
[<000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<004700030057>-1<0052000300460052>-7<005100C0>-2<0055>-12<005000030057>-2<004B>-9<004800030049>-7<0052>-6<004F>-8<0047>-7<0048>-10<00550003005A>-3<0044>-10<005600030044>-9<0046>-25<0057>-8<0058>-3<0044>-4<004F>1<004F>-12<005C00030047>-7<0048>-11<004F>-7<0048>-10<0057>-3<0048>-16<0047>-8<001100030037>-7<004B>-2<004C>-5<0056000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<00470003004C>-5<005600030056>-4<004B>-9<0052>-3<005A>-9<00510003>]TJ
here:
4.
Use the 
New-Item
 cmdlet to create a folder named Mytest. Use the 
-path
 argument to specify 
the path of C:. Use the 
-name
 argument to specify the name of Mytest, and use the 
-type 
argument
 to tell Windows PowerShell the new item will be a directory. This command is shown 
here: 
[<0037>-7<004B>-9<004800030055>-12<0048>-12<0056>-5<0058>1<004F>-6<0057>-2<004C0051>-11<004A00030052>-9<0058>-5<0057>-2<0053>-9<0058>-5<0057>-20<000F00030056>-3<004B>-9<0052>-3<005A>-9<00510003004B>-9<0048>-10<0055>-12<0048>-9<000F00030046>1<0052>-7<005100C0>-2<0055>-12<0050>-9<005600030057>-2<004B>-9<004800030052>-7<0053>-13<0048>-10<0055>-8<0044>-3<0057>-2<004C>-5<0052>-7<0051>5<001D0003>]TJ
5.
Use the 
New-Item
[<00030046>4<0050>-11<0047>1<004F>-7<0048>-10<005700030057005200030046>4<0055>-12<0048>-10<0044>-3<0057>-3<004800030044>-4<005100030048>-10<0050>-4<0053>-5<0057>-38<005C00030057>-3<0048>-6<005B>-37<0057000300C0>-2<004F>-7<0048>-7<001100030037>55<005200030047>-5<005200030057>-2<004B>-2<004C>-5<0056>-20<000F00030058>-6<0056>-12<004800030057>-2<004B>-9<004800030058>1<005300030044>-4<0055>-12<0055>-12<0052>-3<005A0003004E>12<0048>-7<005C00030044>-4<0051>-11<00470003>]TJ
retrieve the previous 
New-Item -path C: -name Mytest -type directory
 command. Edit the 
-path
 argument so that it is pointing to the C:Mytest directory. Edit the 
-name
 argument to 
[<0056>-4<0053>-13<0048>-16<0046>4<004C>-3<0049>-48<005C0003004400030057>-3<0048>-6<005B>-37<0057000300C0>-2<004F>-7<004800030051>-7<0044>-4<0050>-9<0048>-16<004700030030>-8<005C>-41<00C0>-2<004F>-7<0048>-9<000F00030044>-3<0051>-11<004700030056>-3<0053>-13<0048>-16<0046>4<004C>-3<0049>-48<005C00030057>-2<004B>-9<00480003>]TJ
-type
 argument as 
[<00C0>-5<004F0048>]TJ
. The resulting com
mand is shown here: 
[<0037>-7<004B>-9<004800030055>-12<0048>-12<0056>-5<0058>1<004F>-6<0057>-2<004C0051>-11<004A00030050>-9<0048>-12<0056>-14<0056>-17<0044>-11<004A>-7<0048>-9<000F00030056>-3<004B>-9<0052>-3<005A>-9<00510003004B>-9<0048>-10<0055>-12<0048>-9<000F00030046>1<0052>-7<005100C0>-2<0055>-12<0050>-9<005600030057>-2<004B>-9<004800030046>4<0055>-12<0048>-10<0044>-3<0057>-2<004C>-5<0052>-7<005100030052004900030057>-2<004B>-9<0048000300C0>-2<004F>-7<0048>5<001D>]TJ
This concludes this procedure. Do not close Windows PowerShell. Leave it open for the next 
procedure.
[<0035>4<0048>-11<0044>-14<0047>3<004C>4<0051>-7<004A00030044>-7<0051>-7<00470003005A>-5<0055>-8<004C>1<0057>3<004C>4<0051>-7<004A00030049>-7<0052>-2<0055000300C0>2<004F>-4<0048>-13<0056>]TJ
1.
Delete 
[<0030>-8<005C>-41<00C0>-2<004F>-7<0048>-7<0011>12<0057>-34<005B>-37<00570003000B>28<0046>4<0055>-12<0048>-10<0044>-3<0057>-3<0048>-16<00470003004C005100030057>-2<004B>-9<004800030053>-7<0055>-12<0048>-8<0059>-13<004C>-5<0052>-10<0058>-6<005600030053>-7<0055>-12<0052>-13<0046>-2<0048>-16<0047>-3<0058>1<0055>-12<0048>21<000C>14<001100030037>55<005200030047>-5<005200030057>-2<004B>-2<004C>-5<0056>-20<000F00030058>-6<0056>-12<004800030057>-2<004B>-9<00480003>]TJ
Remove-Item
 cmdlet 
and specify the 
-path
[<00030044>-4<0055>-13<004A>-3<0058>1<0050>-9<0048>-10<0051005700030044>-10<005600030026>-6<001D>3<003F0030>-8<005C>-41<0057>-3<0048>-12<0056>-16<0057>-12<003F0030>-8<005C>-41<00C0>-2<004F>-7<0048>-7<0011>12<0057>-34<005B>-37<0057>-20<001100030037>-7<004B>-2<004C>-5<0056000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<00470003004C>-5<005600030056>-4<004B>-9<0052>-3<005A>-9<00510003004B>-9<0048>-10<0055>-12<0048>5<001D>]TJ
2.
Use the up arrow key twice to retrieve the 
[<0031>-9<0048>-8<005A>-2<0010>-22<002C>-7<00570048>-7<005000030010>-13<0053>-10<0044>-7<0057>-3<004B00030026>-14<001D>6<003F>2<0030>-6<005C>-45<00570048>-5<0056>-11<005700030010>-9<0051>-3<0044>-5<0050>-6<004800030030>-5<005C>-49<00C0>-8<004F>-3<0048>-14<0011>6<0057>-33<005B>-41<005700030010>-2<0057>-34<005C>-20<0053>-10<00480003>]TJ
command. Add the 
-value
 argument to the end of the command line and supply a value of 
[<0030>-6<005C000300C0>-7<004F>-3<0048>]TJ
. This command is shown here: 
3.
Use the 
Get-Content
[<00030046>4<0050>-11<0047>1<004F>-7<0048>-10<005700030057005200030055>-12<0048>-10<0044>-11<004700030057>-2<004B>-9<0048000300460052>-7<00510057>-3<0048>-10<00510057>-19<005600030052004900030050>3<005C>-40<00C0>-2<004F>-7<0048>-7<0011>12<0057>-34<005B>-37<0057>-20<001100030037>-7<004B>-2<004C>-5<0056000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<00470003004C>-5<005600030056>-4<004B>-9<0052>-3<005A>-9<00510003004B>-9<0048>-10<0055>-12<0048>5<001D0003>]TJ
4.
Use the 
Add-Content
 cmdlet to add additional information to the 
[<0050>3<005C>-41<00C0>-2<004F>-7<0048>-7<0011>12<0057>-34<005B>-37<0057000300C0>-2<004F>-7<0048>-7<001100030037>-7<004B>-2<004C>-5<0056000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<00470003>]TJ
is shown here:
5.
Press the up arrow key twice and retrieve the 
[<002A>-13<0048>-14<0057>32<0010>-32<0026>2<0052>-7<005100570048>-7<0051005700030026>-14<001D>6<003F0050>11<005C>-45<00570048>-5<0056>-11<0057>-12<003F0050>11<005C>-49<00C0>-7<004F>-3<0048>-14<0011>6<0057>-33<005B>-41<0057>]TJ
 command, 
which is shown here:
6.
The output from the 
[<002A>-13<0048>-14<0057>32<0010>-32<0026>2<0052>-7<005100570048>-7<0051005700030026>-14<001D>6<003F0050>11<005C>-45<00570048>-5<0056>-11<0057>-12<003F0050>11<005C>-49<00C0>-7<004F>-3<0048>-14<0011>6<0057>-33<005B>-41<0057>]TJ
 command is shown here:
Press the up arrow key twice, and retrieve the 
[<0024>-9<0047>-2<0047>-2<0010>-32<0026>2<0052>-7<005100570048>-7<0051005700030026>-14<001D>6<003F0050>11<005C>-45<00570048>-5<0056>-11<0057>-12<003F0050>11<005C>-49<00C0>-7<004F>-3<0048>-14<0011>6<0057>-34<005B>-41<005700030010>-2<0059>5<0044>-5<004F>-3<0058>-5<00480003>]TJ
"ADDITIONAL INFORMATION"
[<000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<004700030057>-1<005200030044>-11<0047>-7<004700030044>-11<0047>-7<0047004C>-5<0057>-2<004C>-5<0052>-7<0051>-7<0044>-4<004F0003004C0051>2<0049>-7<0052>-7<0055>-12<0050>-7<0044>-3<0057>-2<004C>-5<0052>-7<005100030057005200030057>-2<004B>-9<0048000300C0>-2<004F>-7<0048>-7<001100030037>-7<004B>-2<004C>-5<00560003>]TJ
command is shown here:
8.
Use the up arrow key to retrieve the 
[<002A>-13<0048>-14<0057>32<0010>-32<0026>2<0052>-7<005100570048>-7<0051005700030026>-14<001D>6<003F0050>11<005C>-45<00570048>-5<0056>-11<0057>-12<003F0050>11<005C>-49<00C0>-7<004F>-3<0048>-14<0011>6<0057>-33<005B>-41<0057>]TJ
 command, which is 
shown here:
The output produced is shown here. Notice that the second time the command runs, the 
"ADDITIONAL INFORMATION"
[<00030056>-16<0057>-2<0055>-12<004C0051>-11<004A0003004C>-5<005600030044>-11<0047>-7<0047>-7<0048>-16<00470003005700520003004400030051>-9<0048>-9<005A0003004F004C0051>-9<00480003004C005100030057>-2<004B>-9<004800030052>-7<0055>-12<004C>-5<004A004C0051>-7<0044>-4<004F000300C0>-2<004F>-7<0048>-7<0011>]TJ
10.
Use the 
Set-Content
[<00030046>4<0050>-11<0047>1<004F>-7<0048>-10<005700030057005200030052>-1<0059>1<0048>-10<0055>-44<005A>-9<0055>-12<004C>-5<0057>-3<004800030057>-2<004B>-9<0048000300460052>-7<00510057>-3<0048>-10<00510057>-19<005600030052004900030057>-2<004B>-9<004800030030>-8<005C>-41<00C0>-2<004F>-7<0048>-7<0011>12<0057>-34<005B>-37<0057000300C0>-2<004F>-7<0048>-7<001100030036>1<0053>-13<0048>-16<0046>4<004C>-3<0049>-48<005C00030057>-2<004B>-9<00480003>]TJ
-value
argument as 
Setting information.
 This command is shown here:
11.
Use the up arrow key to retrieve the 
[<002A>-13<0048>-14<0057>32<0010>-32<0026>2<0052>-7<005100570048>-7<0051005700030026>-14<001D>6<003F>2<0030>-6<005C>-45<00570048>-5<0056>-11<0057>-12<003F>2<0030>-6<005C>-49<00C0>-8<004F>-3<0048>-14<0011>6<0057>-34<005B>-41<0057>]TJ
 command, which is 
shown here:
The output from the 
Get-Content
 command is shown here:
This concludes this procedure. 
Understanding the function provider
The 
[<0049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<005100030053>-7<0055>-12<0052>-1<0059>-12<004C>-5<0047>-7<0048>-10<005500030053>-7<0055>-12<0052>-1<0059>-12<004C>-5<0047>-7<0048>-12<005600030044>-9<00460046>-2<0048>-12<0056>-14<005600030057>-1<005200030057>-2<004B>-9<004800030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051>-9<005600030047>-7<0048>-9<00C0>-2<0051>-9<0048>-16<00470003004C00510003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F>-9<001100030025>-9<005C00030058>-6<0056>-3<004C0051>-11<004A0003>]TJ
the function provider, you can obtain a listing of all the functions on your system. You can also add, 
[<0050>-9<0052>-13<0047004C>-3<0049>-48<005C>34<000F00030044>-4<0051>-11<004700030047>-7<0048>-11<004F>-7<0048>-10<0057>-3<004800030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051>-9<0056>-19<001100030037>-7<004B>-9<004800030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<005100030053>-7<0055>-12<0052>-1<0059>-12<004C>-5<0047>-7<0048>-10<005500030058>-6<0056>-12<0048>-12<005600030044000300C0>-2<004F>-7<004800030056>-21<005C>-12<0056>-16<0057>-3<0048>-10<0050>-39<00B2>-34<0045>-9<0044>-10<0056>-12<0048>-16<004700030050>-9<0052>-13<0047>-7<0048>-11<004F>-9<000F00030044>-3<0051>-11<004700030057>-2<004B>-9<004800030046>4<0050>-11<0047>1<004F>-7<0048>-10<0057>-19<00560003>]TJ
described earlier apply to working with functions. The commands used in the following procedure are 
[<004C005100030057>-2<004B>-9<00480003002F>-9<004C>-5<0056>-16<0057>-2<004C0051>-11<004A>-11<0024>-11<004F>1<004F>-2<0029>7<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051>-9<0056>-8<0032>-11<0051>55<0037>-7<004B>-9<0048>-4<0036>18<005C>-12<0056>-16<0057>-3<0048>-10<0050>-14<0011>12<0057>-34<005B>-37<0057000300C0>-2<004F>-7<0048>-7<0011>]TJ
Listing all functions on the system
1.
Open 
the Windows PowerShell console.
2.
Use the 
Set-Location
 cmdlet to change the working location to the Function PS drive. This 
command is shown here:
3.
Use the 
Get-ChildItem
 cmdlet to enumerate all the functions. Do this by using the 
gci
 alias, as 
shown here:
4.
The resulting list contains many functions that use 
Set-Location
 to change the current location 
to different drive letters. A partial view of this output is shown here:
5.
To return only the functions that are used for drives, use the 
Get-ChildItem
 cmdlet and pipe 
the object returned into a 
Where-Object
 cmdlet. Use the default 
[<00030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<004800030057>-1<0052000300C0>-2<004F>-5<0057>-3<0048>-10<005500030052>-7<005100030057>-2<004B>-9<00480003>]TJ
[<0047>5<0048>-12<00C0>-1<0051>4<004C0057>4<004C>2<00520051>]TJ
 attribute. Use the
-like
[<00030044>-4<0055>-13<004A>-3<0058>1<0050>-9<0048>-10<0051005700030057005200030056>-12<0048>-10<0044>-4<0055>-10<0046>4<004B00030049>-7<0052>-7<005500030047>-7<0048>-9<00C0>-2<0051>-2<004C>-5<0057>-2<004C>-5<0052>-7<0051>-9<005600030057>-2<004B>-7<0044>-3<005700030046>1<0052>-7<00510057>-19<0044>-2<004C005100030057>-2<004B>-9<00480003005A>-2<0052>-7<0055>-13<00470003>]TJ
set
The resulting command is shown here:
6.
If you are more interested in functions that are not related to drive mappings, then you can 
use the 
-notlike
 argument instead of 
-like
. The easiest way to make this change is to use the up 
arrow key and retrieve the 
[<004A>-3<0046>4<004C0003005F0003005A>-6<004B>-6<0048>-6<0055>-9<00480003005E>-6<0007>-45<0042>-19<00110047>-2<0048>-19<00C0>-8<0051>-3<004C>-7<0057>-3<004C>-5<0052>-7<005100030010>-9<004F>-3<004C>-2<004E>16<004800030005>-11<0056>1<0048>-14<0057>-12<000D>1<0005>2<0060>]TJ
 command, and then change 
[<0057>-2<004B>-9<0048000300C0>-2<004F>-6<0057>-3<0048>-10<005500030049>-12<0055>-12<0052>-7<00500003>]TJ
-like
 to 
-notlike
. The resulting command is shown here:
The resulting listing of functions is shown here:
Use the 
Get-Content
 cmdlet to retrieve the text of the 
pause
 function. This is shown here 
gc 
is 
an alias for the 
Get-Content
 cmdlet:
The content of the 
pause
 function is shown here:
This concludes this procedure. 
Using the registry provider to manage the Windows registry
In 
Windows PowerShell 1.0, the registry provider made it easy to work with the registry on the local 
system. Unfortunately, without remoting, you were limited to working with the local computer or 
using some other remoting mechanism perhaps a log-on script to make changes on remote systems. 
Beginning with Windows PowerShell 2.0, the inclusion of remoting makes it possible to make remote 
registry changes as easily as changing the local registry. 
[<0037>-7<004B>-9<004800030055>-12<0048>-16<004A004C>-5<0056>-16<0057>-2<0055>-47<005C00030053>-7<0055>-12<0052>-1<0059>-12<004C>-5<0047>-7<0048>-10<005500030053>-13<0048>-10<0055>-12<0050>-2<004C>-5<0057>-19<005600030044>-9<00460046>-2<0048>-12<0056>-14<005600030057>-1<005200030057>-2<004B>-9<004800030055>-12<0048>-16<004A004C>-5<0056>-16<0057>-2<0055>-47<005C0003004C005100030057>-2<004B>-9<004800030056>-17<0044>-4<0050>-9<004800030050>-7<0044>-4<0051>-4<0051>-9<0048>-10<005500030057>-2<004B>-7<0044>-3<005700030057>-2<004B>-9<0048000300C0>-2<004F>-7<0048>-12<0056>-21<005C>-12<0056>-16<0057>-3<0048>-10<005000030053>-6<0055>-12<0052>]TJ
[<0059>-12<004C>-5<0047>-7<0048>-10<005500030053>-13<0048>-10<0055>-12<0050>-2<004C>-5<0057>-19<005600030044>-9<00460046>-2<0048>-12<0056>-14<005600030057>-1<0052000300440003004F>-7<0052>-13<0046>-14<0044>-4<004F00030047004C>-5<0056>-4<004E00030047>1<0055>-12<004C>-12<0059>1<0048>-7<001100030037>-7<004B>-9<004800030056>-17<0044>-4<0050>-9<004800030046>4<0050>-11<0047>1<004F>-7<0048>-10<0057>-19<005600030058>-6<0056>-12<0048>-16<004700030057>-1<005200030044>-9<00460046>-2<0048>-12<0056>-14<005600030057>-2<004B>-9<0048000300C0>-2<004F>-7<004800030056>-21<005C>-12<0056>-16<0057>-3<0048>-10<0050>-39<00B3>]TJ
New-Item
Get-ChildItem
Set-Item
Remove-Item
, and so on27also work with the registry. 
he two registry drives
[<0025>-9<005C00030047>-7<0048>-8<0049>-9<0044>-6<0058>1<004F>-6<0057>-20<000F00030057>-2<004B>-9<004800030055>-12<0048>-16<004A004C>-5<0056>-16<0057>-2<0055>-47<005C00030053>-7<0055>-12<0052>-1<0059>-12<004C>-5<0047>-7<0048>-10<005500030046>4<0055>-12<0048>-10<0044>-3<0057>-3<0048>-12<005600030057>-35<005A>-2<005200030055>-12<0048>-16<004A004C>-5<0056>-16<0057>-2<0055>-47<005C00030047>1<0055>-12<004C>-12<0059>1<0048>-12<0056>-19<001100030037>55<0052000300C0>-2<0051>-11<004700030044>-4<004F>1<004F00030052004900030057>-2<004B>-9<004800030047>1<0055>-12<004C>-12<0059>1<0048>-12<005600030048>-6<005B>-8<0053>-13<0052>-7<0056>-12<0048>-16<004700030045>-2<005C00030057>-2<004B>-9<00480003>]TJ
registry 
provider, use the 
Get-PSDrive
 cmdlet. These drives appear here:
You can create additional registry drives by using the 
New-PSDrive
 cmdlet. For example, it is 
common to create a registry drive for the 
HKEY_CLASSES_ROOT registry hive. The code to do this 
appears here:
Once created, the new HKCR drive is accessible in the same way as any other drive. For example, to 
change the working location to the HKCR drive, use either the 
Set-Location
 cmdlet or one of its aliases 
such as 
. This technique appears here:
To determine the current location, use the 
Get-Location
 cmdlet. This technique appears here:
Once you22ve set the new working location, explore it by using the 
Get-ChildItem
 cmdlet or one of 
the aliases for that cmdlet, such as 
dir
. This technique appears in Figure 3-6.
FIGURE 3-6
Creating a new registry drive for the HKEY_CLASSES_ROOT registry hive enables easy access to class 
registration information.
etrieving registry values
To 
view the values stored in a registry key, use either the 
Get-Item
 or the 
Get-ItemProperty
 cmdlet. 
Using the 
Get-Item
 cmdlet reveals there is one property named 
default
. This appears here:
To access the value of the 
default 
property, you must use the 
Get-ItemProperty
 cmdlet, as shown 
here:
The technique for accessing registry keys and the values associated with them appears in 
Figure 3-7.
FIGURE 3-7
Use the 
Get-ItemProperty
 cmdlet to access registry property values.
Returning only the value of the 
default 
property requires a bit of manipulation. The 
default 
prop
erty requires using literal quotation marks to force the evaluation of the parentheses in the name. 
This appears here:
The 
registry provider provides a consistent and easy way to work with the registry from within 
Windows PowerShell. Using the registry provider, you can search the registry, create new registry 
keys, delete existing registry keys, and modify values and 
access control lists ACLs from within 
Windows PowerShell. 
The commands used in the following procedure are in the 
UnderstandingTheRegistryProvider.txt 
[<00C0>-2<004F>-7<0048>-7<001100030037>55<005A>-2<005200030033>-9<003600030047>1<0055>-12<004C>-12<0059>1<0048>-12<005600030044>-4<0055>-12<004800030046>4<0055>-12<0048>-10<0044>-3<0057>-3<0048>-16<004700030045>-2<005C00030047>-7<0048>-8<0049>-9<0044>-6<0058>1<004F>-6<0057>-20<001100030037>55<00520003004C>-5<0047>-7<0048>-10<00510057>-2<004C>-3<0049>-48<005C00030057>-2<004B>-9<004800030033>-9<003600030047>1<0055>-12<004C>-12<0059>1<0048>-12<005600030057>-2<004B>-7<0044>-3<005700030044>-4<0055>-12<004800030056>-6<0058>1<0053>-7<0053>-8<004F004C>-5<0048>-16<004700030045>-2<005C00030057>-2<004B>-9<004800030055>-12<0048>-16<004A004C>-5<0056>-16<0057>-2<0055>-47<005C0003>]TJ
provider, you can use the 
Get-PSDrive
 cmdlet, pipeline the resulting objects into the 
Where-Object
[<0046>4<0050>-11<0047>1<004F>-7<0048>-10<0057>-20<000F00030044>-3<0051>-11<0047000300C0>-2<004F>-6<0057>-3<0048>-10<005500030052>-7<005100030057>-2<004B>-9<00480003>]TJ
provider
 property while supplying a value that is like the word 
registry
. This 
command is shown here:
Obtaining a listing of registry keys
1.
Open the Windows PowerShell console.
2.
Use the 
Get-ChildItem
 cmdlet and supply 
HKLM: PSDrive
 as the value for the 
-path
 argument. 
Specify the software key to retrieve a listing of software applications on the local machine. The 
resulting command is shown here:
A partial listing of similar output is shown here. The corresponding keys, as displayed in 
Regedit.exe, are shown in Figure 3-8.
This concludes this procedure. Do not close Windows PowerShell. Leave it open for the next 
procedure.
FIGURE 3-8
A Regedit.exe view of HKEY_LOCAL_MACHINESOFTWARE.
Searching for software
1.
Use 
the 
Get-ChildItem
 cmdlet and supply a value for the 
-path
 argument. Use the HKLM: PS 
drive and supply a path of 
SOFTWAREMicrosoftWindowsCurrentVersionUninstall
. To make 
the command easier to read, use a 
single quote 
 to encase the string. You can use tab 
completion to assist with the typing. The completed command is shown here:
The resulting listing of software is shown in the output here, in abbreviated fashion:
2.
To retrieve information on a single software package, you will need to add a 
Where-Object
cmdlet. You can do this by using the up arrow key to retrieve the previous 
gci -path 
'HKLM:SOFTWAREMicrosoftWindowsCurrentVersionUninstall'
 command and pipelining 
the resulting object into the 
Where-Object
 cmdlet. Supply a value for the
name
 property, as 
shown in the code listed here. Alternatively, supply a name from the previous output.
This concludes this procedure.
Creating new registry keys
Creating 
[<004400030051>-9<0048>-9<005A00030055>-12<0048>-16<004A004C>-5<0056>-16<0057>-2<0055>-47<005C0003004E>12<0048>-7<005C00030045>-2<005C00030058>-6<0056>-3<004C0051>-11<004A0003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F0003004C>-5<005600030057>-2<004B>-9<004800030056>-17<0044>-4<0050>-9<004800030044>-10<005600030046>4<0055>-12<0048>-10<0044>-3<0057>-2<004C0051>-11<004A0003004400030051>-9<0048>-9<005A000300C0>-2<004F>-7<004800030052>-7<00550003004400030051>-9<0048>-9<005A0003>]TJ
folder27all three processes use the 
New-Item
 cmdlet. In addition to using the 
New-Item 
cmdlet, you 
might use the 
Test-Path
 cmdlet to determine if the registry key already exists. You may also wish to 
change your working location to one of the registry drives. If you do this, you might use the 
Push-
Location
 cmdlet, 
Set-Location
 and the 
Pop-Location
 cmdlets. This is, of course, the long way of doing 
things. These steps appear next. 
ote
[<0037>-5<004B>-7<004800030055>-10<0048>-14<004A>2<004C>-3<0056>-14<00570055>-45<005C00030046>3<0052>-5<0051>2<0057>-17<0044004C>2<0051>-7<00560003004C>2<0051>4<0049>-5<0052>-5<0055>-9<0050>-5<0044>-1<0057004C>-3<0052>-5<005100030059>-10<004C>-3<0057>-17<0044>-2<004F00030057>2<005200030057004B>-7<004800030052>-5<0053>-11<0048>-8<0055>-6<0044>-1<0057004C>-3<0052>-5<005100030044>-1<0051>-9<004700030046>3<0052>-5<0051>2<00C0>-5<004A>-1<0058>3<0055>-6<0044>-1<0057004C>-3<0052>-5<005100030052>3<00490003005C>3<0052>-7<0058>3<00550003>]TJ
computer. Serious problems could arise if you edit the registry incorrectly. Therefore, it is 
important to back up your system prior to attempting to make any changes. For informa
tion about backing up your registry, see 
Microsoft TechNet article KB322756. For general 
information about working with the registry, see 
Microsoft TechNet article KB310516.
1.
Store the current working location by using the 
Push-Location
 cmdlet. 
2.
Change the current working location to the appropriate registry drive by using the 
Set-
Location
 cmdlet.
3.
Use the 
Test-Path
 cmdlet to determine if the registry key already exists.
4.
Use the 
New-Item
 cmdlet to create the new registry key.
5.
Use the 
Pop-Location
 cmdlet to return to the starting working location.
The following example creates a new registry key named 
HSG off the HKEY_CURRENT_USERS soft
[<005A>-3<0044>-4<0055>-12<004800030055>-12<0048>-16<004A004C>-5<0056>-16<0057>-2<0055>-47<005C0003004B>-2<004C>-12<0059>1<0048>-7<00110003002C>-1<00570003004C004F>1<004F>-4<0058>-6<0056>-16<0057>-2<0055>-8<0044>-3<0057>-3<0048>-12<005600030048>-10<0044>-9<0046>4<004B00030052004900030057>-2<004B>-9<0048000300C0>-14<0059>1<004800030056>-16<0057>-3<0048>-10<0053>-8<005600030047>-7<0048>-10<0057>-19<0044>-2<004C004F>-7<0048>-16<004700030053>-7<0055>-12<0048>-8<0059>-12<004C>-5<0052>-9<0058>-6<0056>-5<004F>-12<005C>35<0011>]TJ
The commands and the associated output from the commands appear in Figure 3-9.
FIGURE 3-9
Creating a new registry key by using the 
New-Item
 cmdlet.
he short way to create a new registry key
It is 
not always necessary to change the working location to a registry drive when creating a new 
registry key. In fact, it is not even necessary to use the 
Test-Path
 cmdlet to determine if the registry 
key exists. If the registry key already exists, an error is generated. If you want to 
overwrite the registry 
key, use the 
-force 
parameter. This technique works for all the Windows PowerShell providers, not just 
for the registry provider. 
ote
How to deal with an already existing registry key is one of those 
design decisions 
that 
confront IT professionals who venture far into the world of scripting. Software developers 
are very familiar with these types of decisions and usually deal with them in the analyzing-
requirements portion of the development life cycle. IT professionals who open the 
[<003A>-14<004C>2<0051>-9<0047>-3<0052005A>-9<005600030033>8<0052005A>1<0048>-8<0055>-21<0036>3<004B>-7<0048>-9<004F>3<004F0003002C>-6<0036>2<0028000300C0>1<0055>-24<0056>-14<005700030044>-1<0051>-9<004700030057004B004C>2<0051>-2<004E00030044>-2<0045>-11<0052>-7<0058>-3<005700030057004B>-7<004800030047>-5<0048>-10<0056>-1<004C>-3<004A>3<005100030055>-10<0048>-14<0054>-1<0058>2<004C>2<0055>-10<0048>-8<0050>-7<0048>-8<0051>2<0057>-17<005600030056>-10<0048>-14<0046>3<0052>-5<0051>-9<004700030046>-12<0044>-1<005100030045>-11<0048>-14<0046>3<0052>-5<0050>-7<00480003>]TJ
easily stymied, and possibly write in problems. For more information about this, see my 
book 
 Microsoft Press, 2010
The following example creates a new registry key named 
test
 in the HKCU:SOFTWARE loca
tion. Because the command includes the full path, it does not need to execute from the HKCU 
drive. Because the command uses the 
-force 
switched parameter, the command overwrites the 
HKCU:SOFTWARETEST registry key if it already exists. 
ote
To see the 
 cmdlet in action when using the 
 parameter, use 
the 
1.
Include the full path to the registry key to create.
2.
Use the 
-force
 parameter to overwrite any existing registry key of the same name.
[<002C>-1<005100030029>-2<004C>-5<004A>-3<0058>1<0055>-12<004800030016>-6<0010>59<0014>18<0013>-8<000F00030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030044>-3<0057>-31<0057>-3<0048>-10<0050>-4<0053>-5<005700030057005200030046>4<0055>-12<0048>-10<0044>-3<0057>-3<00480003004400030057>-3<0048>-12<0056>-16<005700030055>-12<0048>-16<004A004C>-5<0056>-16<0057>-2<0055>-47<005C0003004E>12<0048>-7<005C00030049>-9<0044>-2<004C004F>-8<005600030045>-13<0048>-16<0046>-14<0044>-6<0058>-6<0056>-12<004800030057>-2<004B>-9<00480003004E>12<0048>-7<005C00030044>-4<004F>1<0055>-12<0048>-10<0044>-11<0047>-12<005C00030048>-6<005B>-8<004C>-5<0056>-16<0057>-19<0056>-19<001100030037>-7<004B>-9<00480003>]TJ
second command uses the 
-force
 parameter, causing the command to overwrite the existing registry 
key, and therefore it succeeds without creating an error. 
FIGURE 3-10
Use the 
-force
 parameter when creating a new registry key to overwrite the key if it already exists.
Setting the default value for the key
The 
previous examples do not set the default value for the newly created registry key. If the registry 
[<004E>12<0048>-7<005C00030044>-4<004F>1<0055>-12<0048>-10<0044>-11<0047>-11<005C00030048>-6<005B>-8<004C>-5<0056>-16<0057>-19<00560003000B>30<0044>-10<00560003004C>-6<005700030047>-5<0052>-13<0048>-12<00560003004C005100030057>-2<004B>-2<004C>-5<005600030056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<004600030046>-14<0044>-10<0056>-12<0048>20<000C>2<000F0003005C>1<0052>-10<005800030046>-14<0044>-4<005100030058>-6<0056>-12<004800030057>-2<004B>-9<00480003>]TJ
Set-Item
 cmdlet to assign a default 
value to the registry key. The steps to accomplish this appear here:
1.
Use the 
Set-Item
 cmdlet and supply the complete path to the existing registry key.
2.
Supply the default value in the 
value 
parameter of the 
Set-Item
 cmdlet. 
The following command assigns the value 
test key
 to the default property value of the HSG 
registry key contained in the HKCU:SOFTWARE location:
Using 
New-Item
 to create and assign a value
It is 
not necessary to use the 
New-Item
 cmdlet to create a registry key and then to use the 
Set-Item
cmdlet to assign a default value. You can combine these steps into a single command. The following 
command creates a new registry key with the name of HSG1 and assigns a default value of 
default 
value
 to the registry key:
Modifying the value of a registry property value
Modifying
 the value of a registry property value requires using the 
Set-PropertyItem
 cmdlet.
1.
Use the 
Push-Location
 cmdlet to save the current working location.
2.
Use the 
Set-Location
 cmdlet to change to the appropriate registry drive.
3.
Use the 
Set-ItemProperty
 cmdlet to assign a new value to the registry property.
4.
Use the 
Pop-Location
 cmdlet to return to the original working location.
When you know that a registry property value exists, the solution is simple: you use the 
Set-ItemProperty
 cmdlet and assign a new value. The code that follows saves the current working 
location, changes the new working location to the registry key, uses the 
Set-ItemProperty
 cmdlet to 
assign new values, and then uses the 
Pop-Location
 cmdlet to return to the original working location. 
ote
The code that follows relies upon 
positional parameters for the 
[<0046>6<0050>-9<0047>4<004F>-5<0048>-8<0057>-18<001100030037>-5<004B>-7<0048000300C00055>-24<0056>-14<005700030053>-7<0044>-1<0055>-6<0044>-2<0050>-7<0048>-8<0057>-1<0048>-8<00550003004C>-3<00560003>]TJ
-path
. Because the 
 cmdlet set the work
[<004C>2<0051>-9<004A0003004F>-5<0052>-11<0046>-12<0044>-1<0057004C>-3<0052>-5<005100030057>2<005200030057004B>-7<004800030055>-10<0048>-14<004A>2<004C>-3<0056>-14<00570055>-45<005C0003004E>14<0048>-5<005C>37<000F0003004400030053>-10<0048>-8<0055>-9<004C>-3<0052>-11<00470003004C>-3<0047>-5<0048>-8<0051>2<0057004C>-2<00C0>-5<0048>-10<005600030057004B>-7<004800030053>-7<0044>-1<0057004B00030044>-8<005600030057004B>-7<004800030046>1<0058>3<0055>-9<0055>-10<0048>-8<0051>2<005700030047>3<004C>2<0055>-10<0048>-14<0046>-23<0057>2<0052>-5<0055>-45<005C>37<001100030037>-5<004B>-7<00480003>]TJ
second parameter is the name
of the registry property to change27in this example, it 
is 
. The last parameter is 
-value
[<000F00030044>-1<0051>-9<004700030057004B>-5<0044>-1<005700030047>-4<0048>-7<00C00051>-7<0048>-10<005600030057004B>-7<004800030059>-3<0044>-2<004F>-2<0058>-4<004800030057>2<005200030044>-8<0056>-12<0056>-1<004C>-3<004A>3<005100030057>2<005200030057004B>-7<00480003>]TJ
registry
 property. In this example, it is 
. The command with complete parameter 
names would thus be 
-name newproperty -value mynewvalue
. The 
quotation marks in the following code are not required, but do not harm anything either. 
Of course, all the pushing, popping, and setting of locations is not really required. It is entirely 
possible to change the registry property value from any location within the Windows PowerShell 
provider subsystem. 
he short way to change a registry property value 
To 
change a registry property value simply, use the 
Set-ItemProperty
 cmdlet to assign a new 
value. Ensure you specify the complete path to the registry key. Here is an example of using the 
Set-ItemProperty
[<00030046>4<0050>-11<0047>1<004F>-7<0048>-10<005700030057005200030046>4<004B>-7<0044>-4<0051>-11<004A>-7<00480003004400030055>-12<0048>-16<004A004C>-5<0056>-16<0057>-2<0055>-47<005C00030053>-7<0055>-12<0052>-7<0053>-13<0048>-10<0055>-41<0057>-38<005C00030059>-5<0044>-4<004F>-4<0058>-7<00480003005A>-9<004C>-5<0057>-2<004B>-9<0052>-9<0058>-5<0057000300C0>-2<0055>-26<0056>-16<005700030051>-7<0044>1<0059>-12<004C>-5<004A>-3<0044>-3<0057>-2<004C0051>-11<004A00030057005200030057>-2<004B>-9<004800030055>-12<0048>-16<004A004C>-5<0056>-16<0057>-2<0055>-47<005C0003>]TJ
drive.
Dealing with a missing registry property
you need to set a registry property value, you can set the value of that property easily by using the 
Set-ItemProperty
 cmdlet. But what if the registry property does not exist? How do you set the prop
erty value then? You can still use the
Set-ItemProperty
 cmdlet to set a registry property value, even if 
the registry property does not exist, as follows: 
To determine if a registry key exists, you can simply use the 
Test-Path
 cmdlet. It returns 
true
 if the 
key exists and 
false
 if it does not exist. This technique appears here:
Unfortunately, this technique does not work for a registry key property. It always returns 
false
even if the registry property exists. This appears here:
Therefore, if you do not want to overwrite a registry key property if it already exists, you need a 
way to determine if the registry key property exists27and using the 
Test-Path
 cmdlet does not work. 
The following procedure shows how to handle this.
esting for a registry key property prior to writing a new value
1.
Use 
the 
if 
statement and the 
Get-ItemProperty
 cmdlet to retrieve the value of the registry key 
property. Specify the 
erroraction 
ea 
is an alias of 
silentlycontinue 
0 is the enumeration value 
associated with 
silentlycontinue
2.
In the script block for the 
if 
statement, display a message that the registry property exists, or 
simply exit.
3.
In the
else 
statement, call 
Set-ItemProperty
 to create and set the value of the registry key 
property.
This technique appears here:
Understanding the variable provider
The 
[<0059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<004800030053>-7<0055>-12<0052>-1<0059>-12<004C>-5<0047>-7<0048>-10<005500030053>-7<0055>-12<0052>-1<0059>-12<004C>-5<0047>-7<0048>-12<005600030044>-9<00460046>-2<0048>-12<0056>-14<005600030057>-1<005200030057>-2<004B>-9<004800030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<0048>-12<005600030057>-2<004B>-7<0044>-3<005700030044>-4<0055>-12<004800030047>-7<0048>-9<00C0>-2<0051>-9<0048>-16<00470003005A>-9<004C>-5<0057>-2<004B>-2<004C00510003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F>-9<00110003>]TJ
[<0037>-7<004B>-9<0048>-12<0056>-12<004800030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<0048>-12<00560003004C0051>-9<0046>4<004F>-4<0058>-7<0047>-7<004800030045>-13<0052>-2<0057>-2<004B00030058>-6<0056>-12<0048>-10<0055>-10<0010>-18<0047>-7<0048>-9<00C0>-2<0051>-9<0048>-16<004700030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<0048>-12<0056>-20<000F00030056>-5<0058>-5<0046>4<004B00030044>-10<00560003>]TJ
$mred
[<000F00030044>-3<0051>-11<004700030056>-21<005C>-12<0056>-16<0057>-3<0048>-10<0050>-6<0010>-18<0047>-7<0048>-9<00C0>-2<0051>-9<0048>-16<004700030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<0048>-12<0056>-20<000F0003>]TJ
such as
$host
[<00110003003C>49<0052>-10<005800030046>-14<0044>-4<005100030052>-7<0045>-5<0057>-19<0044>-2<004C0051000300440003004F004C>-5<0056>-16<0057>-2<004C0051>-11<004A00030052004900030057>-2<004B>-9<004800030046>4<0050>-11<0047>1<004F>-7<0048>-10<0057>-19<005600030047>-7<0048>-12<0056>-3<004C>-5<004A>1<0051>-9<0048>-16<004700030057>-1<00520003005A>-2<0052>-7<0055>-12<004E00030056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<0046>-14<0044>-4<004F>1<004F>-12<005C0003005A>-9<004C>-5<0057>-2<004B00030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<0048>-12<005600030045>-3<005C0003>]TJ
using the 
Get-Help
 cmdlet and specifying the asterisk 
 variable. The commands used in the proce
dure are in the 
UnderstandingTheVariableProvider.txt and 
[<003A>15<0052>-7<0055>-12<004E>-14<004C0051>-11<004A>16<003A>-16<004C>-5<0057>-2<004B>33<0039>30<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<0048>-12<0056>-19<0011>12<0057>-34<005B>-37<0057000300C0>-2<004F>-7<0048>-12<0056>-19<001100030037>55<005200030055>-12<0048>-10<0057>-8<0058>1<0055>-12<00510003>]TJ
only cmdlets, you use the 
Where-Object
[<00030046>4<0050>-11<0047>1<004F>-7<0048>-10<005700030044>-3<0051>-11<0047000300C0>-2<004F>-6<0057>-3<0048>-10<005500030052>-7<005100030057>-2<004B>-9<004800030046>-15<0044>-3<0057>-3<0048>-16<004A>-5<0052>-7<0055>-47<005C00030057>-2<004B>-7<0044>-3<00570003004C>-5<005600030048>-16<0054>-3<0058>-3<0044>-4<004F00030057>-1<005200030046>4<0050>-11<0047>1<004F>-7<0048>-10<0057>-20<001100030037>-7<004B>-2<004C>-5<00560003>]TJ
command is shown here:
[<0037>-7<004B>-9<004800030055>-12<0048>-12<0056>-5<0058>1<004F>-6<0057>-2<004C0051>-11<004A0003004F004C>-5<0056>-16<0057000300460052>-7<00510057>-19<0044>-2<004C0051>-9<0056000300C0>-14<0059>1<004800030046>4<0050>-11<0047>1<004F>-7<0048>-10<0057>-19<0056>-20<000F00030045>-9<0058>-5<00570003004C>-5<0056000300440003004F004C>-5<0057>-31<0057>-2<004F>-7<00480003004D>-2<0058>1<0050>-4<0045>-8<004F>-7<0048>-16<004700030044>-4<0051>-11<004700030047004C>-3<0049>-40<00C0>-5<0046>-2<0058>1<004F>-6<005700030057005200030055>-12<0048>-10<0044>-11<0047>-8<001100030036>-10<00520003004F>-7<0048>-10<0057>-32<00B7>26<005600030050>-9<0052>-13<0047004C>-3<0049>-48<005C0003>]TJ
the preceding command and specify the properties to return. To do this, use the up arrow key and 
pipeline the returned object into the 
Format-List
 cmdlet. Add the three properties you are interested 
in: 
name
category
, and 
synopsis
. The revised command is shown here:
ote
You will not get this output from Windows PowerShell 3.0 if you have not run the
Update-Help
 cmdlet. 
The resulting output is much easier to read and understand; it is shown here:
Working with variables
1.
Open 
the Windows PowerShell console.
2.
Use the 
Set-Location
 cmdlet to set the working location to the Variable PS drive. Use the 
alias to reduce typing needs. This command is shown here:
3.
[<0033>3<0055>-12<0052>-13<0047>-3<0058>-5<0046>-2<004800030044000300460052>-7<0050>-4<0053>-8<004F>-7<0048>-10<0057>-3<00480003004F004C>-5<0056>-16<0057>-2<004C0051>-11<004A00030052004900030044>-4<004F>1<004F00030057>-2<004B>-9<004800030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<0048>-12<005600030046>-2<0058>1<0055>-12<0055>-12<0048>-10<00510057>-2<004F>-12<005C00030047>-7<0048>-9<00C0>-2<0051>-9<0048>-16<00470003004C00510003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F>-9<001100030037>55<005200030047>-5<00520003>]TJ
this, use the 
Get-ChildItem
 cmdlet. You can use the alias 
gci
 to produce this list. The command 
is shown here:
4.
The resulting list is jumbled. Press the up arrow key to retrieve the 
Get-ChildItem
 command, 
and pipeline the resulting object into the 
Sort-Object
 cmdlet. Sort on the 
name
 property. This 
command is shown here:
The output from the previous command is shown here:
  
5.
Use the 
Get-Variable
[<00030046>4<0050>-11<0047>1<004F>-7<0048>-10<005700030057005200030055>-12<0048>-10<0057>-2<0055>-12<004C>-5<0048>-8<0059>1<00480003004400030056>-3<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<004600030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<0048>-7<001100030038>-3<0056>-12<004800030057>-2<004B>-9<00480003>]TJ
ShellId
 variable. You can use 
tab completion to speed up typing. The command is shown here:
6.
Press the up arrow key to retrieve the previous 
Get-Variable ShellId
 command. Pipeline the 
object returned into a 
Format-List
 cmdlet and return all properties. This is shown here:
The resulting output includes the description of the variable, value, and other information 
shown here:
Create 
a new variable called 
administrator
. To do this, use the 
New-Variable
 cmdlet. This com
mand is shown here:
8.
Use the 
Get-Variable
 cmdlet to retrieve the new 
administrator
 variable. This command is 
shown here:
The resulting output is shown here. Notice that there is no value for the variable.
Assign a value to the new administrator variable. To do this, use the 
Set-Variable
 cmdlet. 
Specify the 
administrator
 variable name, and supply your given name as the value for the 
variable. This command is shown here:
10.
Press the up arrow key one time to retrieve the previous
Get-Variable administrator
 command. 
This command is shown here:
The output displays both the variable name and the value associated with the variable. This is 
shown here:
11.
Use 
the 
Remove-Variable
 cmdlet to remove the administrator variable you previously created. 
This command is shown here:
You could also use the 
Del
 alias, as follows:
12.
Press the up arrow key one time to retrieve the previous 
Get-Variable administrator
 command. 
This command is shown here:
The variable is deleted. The resulting output is shown here:
This concludes this procedure.
Exploring PowerShell providers: step-by-step exercises
[<002C>-1<005100030057>-2<004B>-2<004C>-5<005600030048>-6<005B>2<0048>-10<0055>-10<0046>4<004C>-5<0056>-12<0048>-9<000F0003005C>1<0052>-9<0058>4<00B7>7<004F>1<004F00030048>-7<005B>-8<0053>-8<004F>-7<0052>-7<0055>-12<004800030057>-2<004B>-9<004800030058>-6<0056>-12<004800030052004900030057>-2<004B>-9<004800030046>-2<0048>-10<0055>-41<0057>-2<004C>-5<00C0>-5<0046>-14<0044>-3<0057>-3<004800030053>-7<0055>-12<0052>-1<0059>-12<004C>-5<0047>-7<0048>-10<00550003004C00510003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F>-9<00110003003C>49<0052>-9<00580003005A>-9<004C004F>1<004F>]TJ
 navi
[<004A>-3<0044>-3<0057>-3<004800030057>-2<004B>-9<004800030046>-1<0048>-10<0055>-41<0057>-2<004C>-5<00C0>-5<0046>-14<0044>-3<0057>-3<004800030053>-7<0055>-12<0052>-1<0059>-12<004C>-5<0047>-7<0048>-10<005500030045>-3<005C00030058>-6<0056>-3<004C0051>-11<004A00030057>-2<004B>-9<004800030056>-17<0044>-4<0050>-9<004800030057>-38<005C>-12<0053>-13<0048>-12<0056000300520049000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<0047>-6<005600030058>-6<0056>-12<0048>-16<00470003005A>-9<004C>-5<0057>-2<004B00030057>-2<004B>-9<0048000300C0>-2<004F>-7<004800030056>-21<005C>-12<0056>-16<0057>-3<0048>-10<0050>-14<00110003003C>49<0052>-10<00580003005A>-9<004C004F>1<004F0003>]TJ
then explore the environment provider by using the same methodology. 
  
[<0028>-27<005B>-6<0053>-5<004F>-4<0052>-2<0055>-8<004C>4<0051>-7<004A00030057>-2<004B>-8<004800030046>-4<0048>-7<0055>-34<0057>3<004C>2<00C00046>-12<0044>-6<0057>-2<004800030053>-4<0055>-12<0052>3<0059>-8<004C>-2<0047>-3<0048>-7<0055>]TJ
1.
Open the Windows PowerShell console.
2.
Obtain a listing of all the properties available for use with the 
Get-ChildItem
 cmdlet by piping 
the results into the 
Get-Member
[<00030046>4<0050>-11<0047>1<004F>-7<0048>-10<0057>-20<001100030037>55<0052000300C0>-2<004F>-6<0057>-3<0048>-10<005500030052>-10<0058>-5<005700030052>-7<0051>-4<004F>-12<005C00030057>-2<004B>-9<004800030053>-7<0055>-12<0052>-7<0053>-13<0048>-10<0055>-41<0057>-2<004C>-5<0048>-12<0056>-20<000F00030053>-6<004C0053>-13<0048>-11<004F004C0051>-9<004800030057>-2<004B>-9<004800030055>-12<0048>-12<0056>-6<0058>1<004F>-6<0057>-19<00560003>]TJ
into a 
Where-Object
 cmdlet and specify the 
membertype
 to be equal to 
property
. This com
mand is shown here:
3.
[<0036>-11<0048>-10<00570003005C>1<0052>-9<0058>1<00550003004F>-7<0052>-13<0046>-14<0044>-3<0057>-2<004C>-5<0052>-7<005100030057005200030057>-2<004B>-9<0048000300260048>-10<0055>-41<0057>-2<004C>-5<00C0>-5<0046>-14<0044>-3<0057>-3<004800030047>1<0055>-12<004C>-12<0059>1<0048>-7<001100030037>55<00520003004C>-5<0047>-7<0048>-10<00510057>-2<004C>-3<0049>-48<005C00030057>-2<004B>-9<00480003>]TJ
[<00260048>-10<0055>-41<0057>-2<004C>-5<00C0>-5<0046>-15<0044>-3<0057>-3<004800030047>1<0055>-12<004C>-12<0059>1<0048>-9<000F00030058>-6<0056>-12<004800030057>-2<004B>-9<00480003>]TJ
Get-PSDrive
cmdlet. Use the 
Where-Object
[<00030046>4<0050>-11<0047>1<004F>-7<0048>-10<005700030044>-3<0051>-11<0047000300C0>-2<004F>-6<0057>-3<0048>-10<005500030052>-7<005100030051>-7<0044>-4<0050>-9<0048>-12<005600030057>-2<004B>-7<0044>-3<005700030045>-13<0048>-16<004A004C00510003005A>-9<004C>-5<0057>-2<004B00030057>-2<004B>-9<00480003004F>-7<0048>-10<0057>-31<0057>-3<0048>-10<00550003>]TJ
. This is 
shown here:
The results of this command are shown here:
4.
Use the 
Set-Location
[<00030046>4<0050>-11<0047>1<004F>-7<0048>-10<005700030057005200030046>4<004B>-7<0044>-4<0051>-11<004A>-7<004800030057>-1<005200030057>-2<004B>-9<0048000300260048>-10<0055>-41<0057>-2<004C>-5<00C0>-5<0046>-14<0044>-3<0057>-3<004800030047>1<0055>-12<004C>-12<0059>1<0048>5<001D>]TJ
5.
Use the 
Get-ChildItem
[<00030046>4<0050>-11<0047>1<004F>-7<0048>-10<005700030057005200030053>-7<0055>-12<0052>-13<0047>-3<0058>-5<0046>-2<0048000300440003004F004C>-5<0056>-16<0057>-2<004C0051>-11<004A00030052004900030044>-4<004F>1<004F00030057>-2<004B>-9<004800030046>-2<0048>-10<0055>-41<0057>-2<004C>-5<00C0>-5<0046>-14<0044>-3<0057>-3<0048>-12<005600030052>-7<005100030057>-2<004B>-9<004800030050>-7<0044>-9<0046>4<004B>-2<004C0051>-9<0048>5<001D>]TJ
The output from the previous command is shown here:
6.
[<0037>-7<004B>-9<00480003004F004C>-5<0056>-16<0057>-2<004C0051>-11<004A00030056>-12<0048>-16<0048>-10<0050>-9<005600030056>-12<0052>-7<0050>-9<0048>-9<005A>-9<004B>-7<0044>-3<00570003004C0051>-9<00460052>-7<0050>-4<0053>-8<004F>-7<0048>-10<0057>-3<0048>-7<001100030037>55<005200030047>-7<0048>-10<0057>-3<0048>-10<0055>-12<0050>-2<004C0051>-9<00480003005A>-9<004B>-9<0048>-10<0057>-2<004B>-9<0048>-10<005500030057>-2<004B>-9<0048>-10<0055>-12<004800030044>-4<0055>-12<004800030044>-11<0047>-7<0047004C>-5<0057>-2<004C>-5<0052>-7<0051>-7<0044>-4<004F00030046>-2<0048>-10<0055>-41<0057>-2<004C>-5<00C0>]TJ
cates installed on the machine, use the 
Get-ChildItem
 cmdlet again, but this time specify the 
-recurse
 argument. Modify the previous command by using the up arrow key. The command is 
shown here:
The output from the previous command seems to take a long time to run and produces hun
[<0047>1<0055>-12<0048>-16<0047>-6<00560003005200490003004F004C0051>-9<0048>-12<005600030052004900030052>-9<0058>-5<0057>-2<0053>-9<0058>-5<0057>-20<001100030037>55<005200030050>-7<0044>-4<004E>12<004800030057>-2<004B>-9<00480003004F004C>-5<0056>-16<0057>-2<004C0051>-11<004A00030050>-9<0052>-7<0055>-12<004800030055>-12<0048>-10<0044>-11<0047>-3<0044>-4<0045>-8<004F>-7<0048>-9<000F00030053>-6<004C0053>-13<004800030057>-2<004B>-9<004800030052>-10<0058>-5<0057>-2<0053>-9<0058>-5<00570003005700520003004400030057>-3<0048>-6<005B>-37<0057000300C0>-2<004F>-7<0048>-9<000F00030044>-3<0051>-11<00470003>]TJ
[<0057>-2<004B>-9<0048>-10<005100030052>-7<0053>-13<0048>-10<005100030057>-2<004B>-9<0048000300C0>-2<004F>-7<00480003004C005100030031>-7<0052>-2<0057>-3<0048>-10<0053>-9<0044>-11<0047>-8<001100030037>-7<004B>-9<0048000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<004700030057>-1<005200030047>-5<005200030057>-2<004B>-2<004C>-5<00560003004C>-5<005600030056>-4<004B>-9<0052>-3<005A>-9<00510003004B>-9<0048>-10<0055>-12<0048>5<001D>]TJ
This concludes this step-by-step exercise.
In the following exercise, you22ll work with the Windows PowerShell environment provider.
Examining the environment provider
1.
Open the Windows PowerShell console.
2.
Use the 
New-PSDrive
 cmdlet to create a drive mapping to the alias provider. The name of the 
new PS drive will be 
. The 
-PSProvider
 parameter is 
alias
, and the root will be dot 
. This 
command is shown here: 
3.
Change your working location to the new PS drive you called 
. To do this, use the 
 alias for 
the 
Set-Location
 cmdlet. This is shown here:
4.
Use the 
gci
 alias for the 
Get-ChildItem
 cmdlet, and pipeline the resulting object into the 
Sort-Object
 cmdlet by using the 
sort
 alias. Supply 
name
 as the property to sort on. This com
mand is shown here:
5.
Press the up arrow key to retrieve the previous 
gci | sort -property name
 command, and mod
ify it to use a 
Where-Object
 cmdlet to return aliases only when the name begins with a letter 
after 
in the alphabet. Use the 
where
 alias to avoid typing the entire name of the cmdlet. The 
resulting command is shown here:
6.
Change your location back to drive C. To do this, use the 
 alias and supply the C: argument. 
This is shown here:
Remove the PS drive mapping for al. To do this, use the 
Remove-PSDrive
 cmdlet and supply 
the name of the PS drive to remove. Note that this command does not take a trailing colon 
or colon with backslash 
. The command is shown here:
  
8.
Use the
 Get-PSDrive
 cmdlet to ensure the al drive has been removed. This is shown here:
Use the 
Get-Item
 cmdlet to obtain a listing of all the environment variables. Use the 
-path
argument and supply 
env:
 as the value. This is shown here:
10.
Press the up arrow key to retrieve the previous command and pipeline the resulting object 
into the 
Get-Member
 cmdlet. This is shown here:
The results from the previous command are shown here:
11.
Press the up arrow key twice to return to the 
Get-Item -path env:
 command. Use the Home 
key to move your insertion point to the beginning of the line. Add a variable called 
$objEnv
and use it to hold the object returned by the 
Get-Item -path env:
 command. The completed 
command is shown here:
12.
[<0029>13<0055>-12<0052>-7<005000030057>-2<004B>-9<00480003004F004C>-5<0056>-16<0057>-2<004C0051>-11<004A00030052004900030050>-9<0048>-10<0050>-4<0045>-13<0048>-10<0055>-26<005600030052004900030057>-2<004B>-9<004800030048>-10<0051>4<0059>-12<004C0055>-12<0052>-7<0051>-4<0050>-9<0048>-10<0051>-1<005700030052>-7<0045>-6<004D>-5<0048>-16<0046>-25<0057>-20<000F000300C0>-2<0051>-11<004700030057>-2<004B>-9<00480003>]TJ
count property. Use this 
property to print out the total number of environment variables. As you type 
, try to use 
tab completion to avoid typing. Also try to use 
tab completion as you type the 
count
. The 
completed command is shown here:
13.
Examine the methods of the object returned by 
Get-Item -path env:
. Notice there is a 
Get_Count
 method. Let22s use that method. The code is shown here:
[<003A>-10<004B>-9<0048>-10<005100030057>-2<004B>-2<004C>-5<0056000300460052>-13<0047>-7<00480003004C>-5<005600030048>-6<005B>2<0048>-16<0046>-2<0058>-5<0057>-3<0048>-16<0047>-9<000F0003004B>-9<0052>-3<005A>-2<0048>-8<0059>1<0048>-10<0055>39<000F00030057>-2<004B>-9<004800030055>-12<0048>-12<0056>-5<0058>1<004F>-6<0057>-19<005600030047>-7<0048>-9<00C0>-2<0051>-9<004800030057>-2<004B>-9<004800030050>-9<0048>-10<0057>-2<004B>-9<0052>-13<004700030055>-8<0044>-3<0057>-2<004B>-9<0048>-10<005500030057>-2<004B>-7<0044>-4<005100030048>-6<005B>2<0048>-16<0046>-2<0058>-5<0057>-3<004800030057>-2<004B>-9<00480003>]TJ
Get_Count
 method. These results are shown here:
14.
To retrieve the actual number of environment variables, you need to use 
empty parentheses 
at the end of the method. This is shown here:
15.
If you want to know exactly what type of object is contained in the 
$objEnv
 variable, you can 
use the 
GetType
 method, as shown here:
This command returns the results shown here:
This concludes this exercise.
  
Chapter 3 quick reference
Do this
[<0033>-5<0055>-19<0052>-20<0047>-10<0058>-12<0046>-9<0048000300440003004F>-7<004C>-12<0056>-23<0057>-9<004C>-7<0051>-18<004A00030052>-7<004900030044>-11<004F>-6<004F00030059>-12<0044>-11<0055>-18<004C>-9<0044>-11<0045>-15<004F>-14<0048>-19<005600030047>-14<0048>-16<00C0>-9<0051>-16<0048>-23<00470003004C>-7<0051000300440003003A>-22<004C>-7<0051>-18<0047>-12<0052>-10<005A>-18<00560003>]TJ
PowerShell session
Use the 
Set-Location
 cmdlet to change location to the 
Variable PS drive, and then use the 
Get-ChildItem
 cmdlet.
Obtain a listing of all the aliases 
Use the 
Set-Location
 cmdlet to change location to the 
Alias PS drive, and then use the 
Get-ChildItem
 cmdlet to 
produce a listing of aliases. Pipeline the resulting object 
into the 
Where-Object
[<00030046>-3<0050>-18<0047>-6<004F>-14<0048>-17<005700030044>-11<0051>-18<0047000300C0>-9<004F>-13<0057>-10<0048>-17<005500030052>-14<005100030057>-9<004B>-16<00480003>]TJ
name
property for the appropriate value.
Delete a directory that is empty
Use the 
Remove-Item
 cmdlet and supply the name of the 
directory.
Delete a directory that contains other items
Use the 
Remove-Item
 cmdlet and supply the name of the 
directory and specify the 
-recurse
 argument.
[<0026>1<0055>-19<0048>-17<0044>-10<0057>-10<00480003004400030051>-16<0048>-16<005A00030057>-10<0048>-13<005B>-43<0057000300C0>-9<004F>-14<0048>]TJ
Use the 
New-Item
 cmdlet and specify the 
-path
 argument 
for the directory location. Supply the 
-name
 argument 
and specify the 
-type
 argument as 
[<00C0>-4<004F0048>]TJ
Example: 
[<0031>-16<0048>-14<005A>-9<0010>-29<002C>-14<0057>-7<0048>-13<005000030010>-19<0053>-16<0044>-14<0057>-10<004B00030026>-21<001D>-2<003F>-6<0030>-13<005C>-50<0057>-7<0048>-12<0056>-18<005700030010>-16<0051>-10<0044>-11<0050>-13<004800030030>-12<005C>-55<00C0>-14<004F>-10<0048>-21<0011>-1<0057>-40<005B>-47<00570003>]TJ
[<0010>-9<0057>-40<005C>-27<0053>-16<0048000300C0>-14<004F>-10<0048>]TJ
Obtain a listing of registry keys from a registry hive
Use the 
Get-ChildItem
 cmdlet and specify the appropriate 
PS drive name for the 
-path
 argument. Complete the path 
with the appropriate registry path. 
Example: 
gci -path HKLM:software
Obtain a listing of all functions on the system
Use the 
Get-ChildItem
 cmdlet and supply the PS drive 
name of 
function:
 to the 
-path
 argument. 
Example: 
gci -path function:
CHAPTER 4
Using PowerShell 
emoting and Jobs
fter completing this chapter, you will be able to:
Use Windows PowerShell remoting to connect to a remote system.
Use Windows PowerShell remoting to run commands on a remote system.
Use Windows PowerShell jobs to run commands in the background.
Receive the results of background jobs.
Keep the results from background jobs.
Understanding Windows PowerShell remoting
One of the great improvements in Microsoft Windows PowerShell 3.0 is the change surrounding 
[<0055>-12<0048>-10<0050>-9<0052>-2<0057>-2<004C0051>-11<004A>-8<001100030037>-7<004B>-9<0048000300460052>-7<0051>-1<00C0>-7<004A>-3<0058>1<0055>-8<0044>-3<0057>-2<004C>-5<0052>-7<00510003004C>-5<005600030048>-10<0044>-10<0056>-4<004C>-5<0048>-10<005500030057>-2<004B>-7<0044>-4<00510003004C>-5<00570003005A>-2<0044>-10<00560003004C00510003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F000300150011>-9<0013>-8<000F00030044>-3<0051>-11<00470003004C005100030050>-9<0052>-7<0056>-16<005700030046>-14<0044>-10<0056>-12<0048>-12<0056>-20<000F0003>]TJ
Windows PowerShell remoting just works. When talking about Windows PowerShell remoting, a 
bit of confusion can arise because there are several different ways of running commands against 
[<0055>-12<0048>-10<0050>-9<0052>-2<0057>-3<004800030056>-12<0048>-10<0055>-47<0059>1<0048>-10<0055>-26<0056>-19<001100030027>-11<0048>-10<0053>-13<0048>-10<0051>-11<0047004C0051>-11<004A00030052>-7<00510003005C>1<0052>-9<0058>1<005500030053>-9<0044>-4<0055>-41<0057>-2<004C>-3<0046>-2<0058>1<004F>-5<0044>-4<005500030051>-9<0048>-10<0057>-35<005A>-2<0052>-7<0055>-12<004E000300460052>-7<005100C0>-7<004A>-3<0058>1<0055>-8<0044>-3<0057>-2<004C>-5<0052>-7<005100030044>-4<0051>-11<004700030056>-12<0048>-16<0046>-2<0058>1<0055>-12<004C>-5<0057>-38<005C00030051>-9<0048>-16<0048>-16<0047>-6<0056>-20<000F00030052>-7<0051>-9<004800030052>-7<005500030050>-9<0052>-7<0055>-12<00480003>]TJ
methods of remoting may not be appropriate. 
Classic remoting
Classic 
remoting in Windows PowerShell relies on protocols such as DCOM and RPC to make connec
[<0057>-2<004C>-5<0052>-7<0051>-9<005600030057>-1<005200030055>-12<0048>-10<0050>-9<0052>-2<0057>-3<004800030050>-7<0044>-9<0046>4<004B>-2<004C0051>-9<0048>-12<0056>-19<001100030037>56<0055>-8<0044>-11<0047004C>-5<0057>-2<004C>-5<0052>-7<0051>-7<0044>-4<004F>1<004F>-12<005C>34<000F00030057>-2<004B>-9<0048>-12<0056>-12<004800030053>-7<0055>-12<0052>-2<0057>-1<0052>-13<00460052>-6<004F>-8<005600030055>-12<0048>-16<0054>-3<0058004C0055>-12<004800030052>-7<0053>-13<0048>-10<0051>-2<004C0051>-11<004A00030050>-7<0044>-4<0051>4<005C00030053>-13<0052>-7<0055>-41<0057>-19<00560003004C005100030057>-2<004B>-9<0048000300C0>-2<0055>-12<0048>-9<005A>-3<0044>-4<004F>1<004F0003>]TJ
[<0044>-4<0051>-11<004700030056>-16<0057>-19<0044>-4<0055>-41<0057>-2<004C0051>-11<004A00030059>-5<0044>-4<0055>-12<004C>-5<0052>-9<0058>-6<005600030056>-12<0048>-10<0055>-47<0059>-12<004C>-3<0046>-2<0048>-12<005600030057>-2<004B>-7<0044>-3<005700030057>-2<004B>-9<004800030047004C>-3<0049>-39<0049>-7<0048>-10<0055>-12<0048>-10<0051005700030046>4<0050>-11<0047>1<004F>-7<0048>-10<0057>-19<005600030058>-5<0057>-2<004C004F004C>-7<005D>-1<0048>-7<001100030037>55<0052000300C0>-2<0051>-11<004700030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F0003>]TJ
cmdlets that natively support remoting, use the 
Get-Help
 cmdlet. Specify a value of 
computername 
for the 
-parameter 
parameter of the 
Get-Help
 cmdlet. This command produces a nice list of all 
cmdlets that have native support for remoting. The command and associated output appear here:
  
As you can see, many of the Windows PowerShell cmdlets that have the 
-computername 
param
eter relate to 
Web Services Management WSMAN, 
Common Information Model CIM, or sessions. 
To remove these cmdlets from the list, modify the command a bit to use 
Where-Object
 Is an alias 
for 
Where-Object
. The revised command and associated output appear here:
Some of the cmdlets provide the ability to specify credentials. This allows you to use a different 
user account to make the connection and to retrieve the data. Figure 4-1 displays the 
credential dia
log box that appears when the cmdlet runs. 
  
FIGURE 4-1
Cmdlets that support the 
-credential 
parameter prompt for credentials when supplied with 
a user name.
This technique of using the 
-computername 
and 
-credential 
parameters in a cmdlet appears here:
[<002B>-8<0052>-3<005A>-2<0048>-8<0059>1<0048>-10<0055>39<000F00030044>-10<005600030050>-9<0048>-10<00510057>-2<004C>-5<0052>-7<0051>-9<0048>-16<004700030048>-10<0044>-4<0055>-12<004F004C>-5<0048>-10<0055>39<000F00030058>-6<0056>-12<004800030052004900030057>-2<004B>-9<0048>-12<0056>-12<004800030046>4<0050>-11<0047>1<004F>-7<0048>-10<0057>-19<0056000300520049>-41<0057>-3<0048>-10<005100030055>-12<0048>-16<0054>-3<0058004C0055>-12<0048>-12<005600030052>-7<0053>-13<0048>-10<0051>-2<004C0051>-11<004A0003004B>-9<0052>-6<004F>-7<0048>-12<00560003004C005100030057>-2<004B>-9<0048000300C0>-2<0055>-12<0048>-9<005A>-3<0044>-4<004F>1<004F0003>]TJ
[<0052>-7<005500030056>-16<0057>-19<0044>-4<0055>-41<0057>-2<004C0051>-11<004A00030056>-3<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<004600030056>-12<0048>-10<0055>-47<0059>-12<004C>-3<0046>-2<0048>-12<0056>-19<001100030025>-9<005C00030047>-7<0048>-8<0049>-9<0044>-6<0058>1<004F>-6<0057>-20<000F00030057>-2<004B>-9<0048>-12<0056>-12<004800030057>-38<005C>-12<0053>-13<0048>-12<005600030052004900030046>4<0050>-11<0047>1<004F>-7<0048>-10<0057>-19<005600030049>-9<0044>-2<004C004F0003005A>-9<004B>-9<0048>-10<005100030055>-17<0058>1<005100030044>-11<004A>-3<0044>-2<004C0051>-9<0056>-16<005700030055>-12<0048>-10<0050>-9<0052>-2<0057>-3<004800030050>-7<0044>-9<0046>4<004B>-2<004C0051>-9<0048>-12<00560003>]TJ
that don22t have relaxed access rules. An example of this type of error appears here:
Other
 cmdlets, such as
 Get-Service
 and 
Get-Process
, do not have a 
-credential
 parameter, and 
therefore the commands associated with cmdlets such as 
Get-Service
 or 
Get-Process
 impersonate the 
logged-on user. Such a command appears here:
Just because the cmdlet does not support alternate credentials does not mean that the cmdlet 
must impersonate the logged-on user. Holding down the Shift key and right-clicking the Windows 
PowerShell icon from the taskbar brings up an action menu that allows you to run the program as a 
different user. This menu appears in Figure 4-2.
FIGURE 4-2
The menu from the Windows PowerShell console permits running with different security credentials.
The 
Run As Different User dialog box appears in Figure 4-3.
FIGURE 4-3
The Run As Different User dialog box permits entering a different user context.
Using the Run As Different User dialog box makes alternative credentials available for Windows 
PowerShell cmdlets that do not support the 
-credential
 parameter.
  
Win
M 
Windows 
[<0036>-11<0048>-10<0055>-47<0059>1<0048>-10<0055000300150013>13<0014>-7<00150003004C0051>-9<0056>-16<0057>-19<0044>-4<004F>1<004F>-8<00560003005A>-9<004C>-5<0057>-2<004B0003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030035>-2<0048>-10<0050>-9<0052>-2<0057>-3<004800030030>-6<0044>-4<0051>-7<0044>-11<004A>-7<0048>-10<0050>-9<0048>-10<005100570003000B>-45<003A>-16<004C0051>-6<0035>-7<0030>-7<000C00030046>1<0052>-7<0051>-1<00C0>-7<004A>-3<0058>1<0055>-12<0048>-16<004700030044>-4<0051>-11<004700030055>-17<0058>1<0051>-4<0051>-2<004C0051>-11<004A0003>]TJ
to support remote Windows PowerShell commands. WinRM is Microsoft22s implementation of the 
industry standard 
[<003A>-5<0036>-8<0010>-13<0030>-5<0044>-4<0051>-7<0044>-11<004A>-7<0048>-10<0050>-9<0048>-10<0051005700030053>-7<0055>-12<0052>-2<0057>-1<0052>-13<00460052>-6<004F>-9<001100030024>-27<005600030056>-6<0058>-5<0046>4<004B>-14<000F0003003A>-16<004C0051>-6<0035>-7<003000030053>-7<0055>-12<0052>-1<0059>-12<004C>-5<0047>-7<0048>-12<005600030044000300C0>-2<0055>-12<0048>-9<005A>-3<0044>-4<004F>1<004F>-3<0010>11<0049>-12<0055>-12<004C>-5<0048>-10<0051>-11<0047>1<004F>-12<005C00030050>-9<0048>-10<0057>-2<004B>-9<0052>-13<00470003005200490003>]TJ
accessing remote systems in an interoperable manner. It is the remoting mechanism used by the new 
CIM cmdlets. As soon as 
Windows Server 2012 is up and running, you can make a remote connection 
and run commands, or open an interactive Windows PowerShell console. 
Windows 8 Client, on the 
[<0052>-2<0057>-2<004B>-9<0048>-10<00550003004B>-7<0044>-4<0051>-11<0047>-9<000F00030056>-3<004B>-2<004C0053>-8<00560003005A>-9<004C>-5<0057>-2<004B0003003A>-16<004C0051>-6<0035>-7<00300003004F>-7<0052>-13<0046>4<004E>12<0048>-16<004700030047>-5<0052>-3<005A>-9<0051>-14<001100030037>-7<004B>-9<0048>-10<0055>-12<0048>-8<0049>-7<0052>-7<0055>-12<0048>-9<000F00030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030056>-16<0057>-3<0048>-10<00530003004C>-5<005600030057>-1<005200030058>-6<0056>-12<004800030057>-2<004B>-9<0048>]TJ
Enable-PSRemoting
[<0049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051000300570052000300460052>-7<005100C0>-7<004A>-3<0058>1<0055>-12<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030055>-12<0048>-10<0050>-9<0052>-2<0057>-2<004C0051>-11<004A>]TJ
 on the client machine. When running the 
Enable-PSRemoting
 function, the function performs the following steps:
1.
Starts or restarts the WinRM service
2.
Sets the WinRM service startup type to Automatic
3.
Creates a listener to accept requests from 
any
 Internet Protocol IP address
4.
[<0028>3<0051>-7<0044>-4<0045>-8<004F>-7<0048>-12<00560003004C0051>-4<0045>-13<0052>-9<0058>1<0051>-11<0047000300C0>-2<0055>-12<0048>-9<005A>-3<0044>-4<004F>1<004F00030048>-7<005B>5<0046>-2<0048>-10<0053>-5<0057>-2<004C>-5<0052>-7<0051>-9<005600030049>-7<0052>-7<00550003003A>-5<00360030>-7<0024>-7<003100030057>-2<0055>-8<00440049>-41<00C0>-5<0046>]TJ
5.
Sets a target listener named 
Microsoft.powershell
6.
Sets a target listener named 
[<0030>-2<004C>4<0046>11<0055>-4<0052>6<0056>7<0052>2<0049>-40<0057>-12<0011>-6<0053>-4<0052005A>6<00480055>-15<0056>10<004B0048>-1<004F>3<004F>-4<0011>24<005A>4<0052>-1<0055004E>-34<00C1>-3<0052005A>]TJ
Sets a target listener named 
Microsoft.powershell32
[<0027>-15<0058>1<0055>-12<004C0051>-11<004A00030048>-10<0044>-9<0046>4<004B00030056>-16<0057>-3<0048>-10<005300030052004900030057>-2<004B>-2<004C>-5<005600030053>-7<0055>-12<0052>-13<0046>-2<0048>-12<0056>-14<0056>-20<000F00030057>-2<004B>-9<004800030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<005100030053>-7<0055>-12<0052>-7<0050>-4<0053>-5<0057>-19<00560003005C>1<0052>-9<005800030057>-1<005200030044>-11<004A>1<0055>-12<0048>-16<004800030057>-1<005200030053>-13<0048>-10<0055>-38<0049>-7<0052>-7<0055>-12<0050>-2<004C0051>-11<004A00030057>-2<004B>-9<004800030056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-7<0048>-16<00470003>]TJ
action. If you are familiar with the steps the function performs and you do not make any changes 
from the defaults, you can run the command with the 
-force
 switched parameter, and it will not 
prompt prior to making the changes. The syntax of this command appears here:
The use of the 
Enable-PSRemoting
 function in interactive mode appears here, along with all associ
ated output from the command:
Once 
[<003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030055>-12<0048>-10<0050>-9<0052>-2<0057>-2<004C0051>-11<004A0003004C>-5<0056000300460052>-7<005100C0>-7<004A>-3<0058>1<0055>-12<0048>-16<0047>-9<000F00030058>-6<0056>-12<004800030057>-2<004B>-9<00480003>]TJ
Test-WSMan
 cmdlet to ensure that 
[<0057>-2<004B>-9<00480003003A>-16<004C0051>-6<0035>-7<003000030055>-12<0048>-10<0050>-9<0052>-2<0057>-2<004C0051>-11<004A0003004C>-5<005600030053>-7<0055>-12<0052>-7<0053>-13<0048>-10<0055>-12<004F>-12<005C000300460052>-7<005100C0>-7<004A>-3<0058>1<0055>-12<0048>-16<004700030044>-4<0051>-11<00470003004C>-5<005600030044>-9<00460046>-2<0048>-10<0053>-5<0057>-2<004C0051>-11<004A00030055>-12<0048>-16<0054>-3<0058>-7<0048>-12<0056>-16<0057>-19<0056>-19<00110003002400030053>-6<0055>-12<0052>-7<0053>-13<0048>-10<0055>-12<004F>-12<005C00030046>1<0052>-7<0051>-1<00C0>-7<004A>-3<0058>1<0055>-12<0048>-16<004700030056>-21<005C>-12<0056>-16<0057>-3<0048>-10<00500003>]TJ
replies with the information appearing here:
  
This cmdlet works with Windows PowerShell 2.0 remoting as well. The output appearing here is 
from a domain controller running Windows 2008 with Windows PowerShell 2.0 installed and WinRM 
[<00460052>-7<0051>-1<00C0>-7<004A>-3<0058>1<0055>-12<0048>-16<004700030049>-7<0052>-7<005500030055>-12<0048>-10<0050>-9<0052>-2<0057>-3<004800030044>-9<00460046>-2<0048>-12<0056>-14<0056>-5<001D>]TJ
[<002C00490003003A>-16<004C0051>-6<0035>-7<00300003004C>-5<005600030051>-9<0052>-2<005700030046>1<0052>-7<005100C0>-7<004A>-3<0058>1<0055>-12<0048>-16<0047>-9<000F00030044>-3<005100030048>-10<0055>-12<0055>-12<0052>-7<005500030055>-12<0048>-10<0057>-8<0058>1<0055>-12<0051>-9<005600030049>-13<0055>-12<0052>-7<005000030057>-2<004B>-9<004800030056>-21<005C>-12<0056>-16<0057>-3<0048>-10<0050>-14<0011000300360058>-5<0046>4<004B00030044>-4<005100030048>-10<0055>-12<0055>-12<0052>-7<005500030049>-13<0055>-12<0052>-7<0050000300440003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<00560003001B0003>]TJ
client appears here:
Keep 
[<004C005100030050>-2<004C0051>-11<004700030057>-2<004B>-7<0044>-3<005700030046>1<0052>-7<005100C0>-7<004A>-3<0058>1<0055>-12<004C0051>-11<004A0003003A>-16<004C0051>-6<0035>-7<003000030059>-12<004C>-2<004400030057>-2<004B>-9<00480003>]TJ
Enable-PSRemoting
 function does not enable the 
Remote
Management
[<000300C0>-2<0055>-12<0048>-9<005A>-3<0044>-4<004F>1<004F00030048>-6<005B>5<0046>-2<0048>-10<0053>-5<0057>-2<004C>-5<0052>-7<0051>-15<000F00030044>-3<0051>-11<004700030057>-2<004B>-9<0048>-10<0055>-12<0048>-8<0049>-7<0052>-7<0055>-12<00480003>]TJ
PING
 commands will not work by default when 
pinging to a Windows 8 client system. This appears here:
Pings to a Windows 2012 server, do however, work. This appears here:
Creating a remote Windows PowerShell session
For simple 
[<00460052>-7<0051>-1<00C0>-7<004A>-3<0058>1<0055>-8<0044>-3<0057>-2<004C>-5<0052>-7<005100030052>-7<00510003004400030056>-3<004C0051>-11<004A>1<004F>-7<004800030055>-12<0048>-10<0050>-9<0052>-2<0057>-3<004800030050>-7<0044>-9<0046>4<004B>-2<004C0051>-9<0048>-9<000F00030048>-10<00510057>-3<0048>-10<0055>-12<004C0051>-11<004A0003004400030055>-12<0048>-10<0050>-9<0052>-2<0057>-3<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030056>-12<0048>-12<0056>-14<0056>-3<004C>-5<0052>-7<00510003>]TJ
is the answer. To enter a remote Windows PowerShell session, use the 
Enter-PSSession
 cmdlet. This 
creates an interactive remote Windows PowerShell session on a target machine and uses the default 
remote endpoint. 
If you do not supply credentials, the remote session impersonates the currently 
logged on user The output appearing here illustrates connecting to a remote computer named dc1
Once the connection is established, the Windows PowerShell prompt changes to include the name 
of the remote system. 
Set-Location
 which has an alias of 
 changes the working directory on the 
remote system to C:. Next, the 
Get-WmiObject
 cmdlet retrieves the 
BIOS information on the remote 
system. The
exit 
command exits the remote session, and the Windows PowerShell prompt returns to 
[<0057>-2<004B>-9<004800030053>-7<0055>-12<0052>-7<0050>-4<0053>-5<005700030046>1<0052>-7<005100C0>-7<004A>-3<0058>1<0055>-12<0048>-16<004700030053>-7<0055>-12<0048>-8<0059>-12<004C>-5<0052>-9<0058>-6<0056>-5<004F>-12<005C>35<0011>]TJ
The good thing is that when using the Windows PowerShell transcript tool via 
Start-Transcript
the 
transcript tool captures output from the remote Windows PowerShell session, as well as output 
from the local session. Indeed, all commands typed appear in the transcript. The following commands 
illustrate beginning a transcript, entering a remote Windows PowerShell session, typing a command, 
exiting the session, and stopping the transcript:
  
Figure 4-4 displays a copy of the transcript from the previous session. 
FIGURE 4-4
The Windows PowerShell transcript tool records commands and output received from a remote 
Windows PowerShell session.
If you 
anticipate making multiple connections to a remote system, use the 
New-PSSession
 cmdlet 
to create a remote Windows PowerShell session. 
New-PSSession
 permits you to store the remote ses
sion in a 
variable and provides you with the ability to enter and to leave the remote session as often 
as required27without the additional overhead of creating and destroying remote sessions. In the 
commands that follow, a new Windows PowerShell session is created via the 
New-PSSession
 cmdlet. 
The newly created session is stored in the 
$dc1
 variable. Next, the 
Enter-PSSession
 cmdlet is used to 
enter the remote session by using the stored session. A command retrieves the remote hostname, and 
the remote session is exited via the 
exit 
command. Next, the session is reentered, and the last process 
is retrieved. The session is exited once again. Finally, the 
Get-PSSession
 cmdlet retrieves Windows 
PowerShell sessions on the system, and all sessions are removed via the 
Remove-PSSession
 cmdlet.
unning a single Windows PowerShell command
If you
have a single command to run, it does not make sense to go through all the trouble of build
ing and entering an interactive remote Windows PowerShell session. Instead of creating a remote 
Windows PowerShell console session, you can run a single command by using the 
Invoke-Command
cmdlet. If you have a single command to run, use the cmdlet directly and specify the computer name 
as well as any credentials required for the connection. You are still creating a remote session, but you 
are also removing the session. Therefore, if you have a lot of commands to run against the remote 
machine, a performance problem could arise. But for single commands, this technique works well. The 
technique is shown here, where the last process running on the Ex1 remote server appears:
If you have several commands, or if you anticipate making multiple connections, the 
Invoke-
Command
 cmdlet accepts a session name or a session object in the same manner as the 
Enter-
PSSession
 cmdlet. In the output appearing here, a new PSSession is created to a remote computer 
named dc1. The remote session is used to retrieve two different pieces of information. Once the 
Windows PowerShell remote session is completed, the session stored in the 
$dc1
 variable is explicitly 
removed. 
  
Using
Invoke-Command
, you can run the same command against a large number of remote sys
tems. The secret behind this power is that the 
-computername 
parameter from the 
Invoke-Command
cmdlet accepts an array of computer names. In the output appearing here, an array of computer 
names is stored in the variable 
$cn
. Next, the 
$cred
 variable holds the 
PSCredential
 object for the 
remote connections. Finally, the 
Invoke-Command
 cmdlet is used to make connections to all of 
the remote machines and to return the BIOS information from the systems. The nice thing about this 
technique is that an additional parameter, 
PSComputerName, 
is added to the returning object, per
[<0050>-2<004C>-5<0057>-31<0057>-2<004C0051>-11<004A00030048>-10<0044>-10<0056>-21<005C0003004C>-5<0047>-7<0048>-10<00510057>-2<004C>-5<00C0>-5<0046>-14<0044>-3<0057>-2<004C>-5<0052>-7<00510003005200490003005A>-9<004B>-2<004C>-3<0046>4<004B00030025>-7<002C>-10<0032>-1<00360003004C>-5<005600030044>-10<0056>-14<0056>-12<0052>-13<0046>4<004C>-2<0044>-3<0057>-3<0048>-16<00470003005A>-9<004C>-5<0057>-2<004B0003005A>-9<004B>-2<004C>-3<0046>4<004B000300460052>-7<0050>-4<0053>-9<0058>-5<0057>-3<0048>-10<005500030056>-21<005C>-12<0056>-16<0057>-3<0048>-10<0050>-14<001100030037>-7<004B>-9<0048000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<0047>-6<00560003>]TJ
and associated output appear here:
Using Windows PowerShell jobs
Windows 
PowerShell jobs permit you to run one or more commands in the background. Once you 
start the Windows PowerShell job, the Windows PowerShell console returns immediately for further 
use. This permits you to accomplish multiple tasks at the same time. You can begin a new Windows 
  
PowerShell job by using the 
Start-Job
 cmdlet. The command to run as a job is placed in a script block, 
and the jobs are sequentially named 
Job1
Job2
, and so on. This is shown here:
The 
[<004D>-5<0052>-7<0045>-8<005600030055>-12<0048>-16<0046>-2<0048>-9<004C>-12<0059>1<00480003004D>-5<0052>-7<00450003002C>-3<0027>-12<005600030057>-2<004B>-7<0044>-3<005700030044>-4<0055>-12<004800030044>-4<004F>-8<0056>-12<005200030056>-12<0048>-16<0054>-3<0058>-7<0048>-10<00510057>-2<004C>-2<0044>-4<004F>1<004F>-12<005C00030051>-6<0058>1<0050>-4<0045>-13<0048>-10<0055>-12<0048>-16<0047>-8<001100030037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<00570003004D>-5<0052>-7<004500030046>4<0055>-12<0048>-10<0044>-3<0057>-3<0048>-16<00470003004C0051000300440003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<00560003>]TJ
PowerShell console always has a job ID of 1. You can use either the job ID or the job name to obtain 
information about the job. This is shown here:
Once 
you see that the job has completed, you can receive the job. The 
Receive-Job
 cmdlet returns 
the same information that returns if a job is not used. The Job1 output is shown here truncated to 
save space:
Once a job has been received, that is it27the data is gone, unless you saved it to a variable or 
you call the 
Receive-Job
 cmdlet with the 
-keep 
switched parameter. The following code attempts to 
retrieve the information stored from job10, but as appears here, no data returns:
What can be confusing about this is that the job still exists, and the 
Get-Job
 cmdlet continues to 
retrieve information about the job. This is shown here:
As a 
best practice, use the 
Remove-Job
 cmdlet to delete remnants of completed jobs when you are 
[<00C0>-2<0051>-2<004C>-5<0056>-4<004B>-9<0048>-16<004700030058>-6<0056>-3<004C0051>-11<004A00030057>-2<004B>-9<00480003004D>-5<0052>-7<004500030052>-7<0045>-6<004D>-5<0048>-16<0046>-25<0057>-20<001100030037>-7<004B>-2<004C>-5<00560003005A>-9<004C004F>1<004F00030044>1<0059>1<0052>-4<004C>-5<0047000300460052>-7<0051>2<0049>-18<0058>-6<0056>-3<004C>-5<0052>-7<005100030055>-12<0048>-16<004A>-3<0044>-4<0055>-12<0047004C0051>-11<004A00030044>-9<0046>-25<0057>-2<004C>-12<0059>1<00480003004D>-5<0052>-7<0045>-8<0056>-20<000F00030046>1<0052>-7<0050>-4<0053>-8<004F>-7<0048>-10<0057>-3<0048>-16<00470003004D>-5<0052>-7<0045>-8<0056>-20<000F00030044>-3<0051>-11<00470003004D>-5<0052>-7<0045>-8<00560003>]TJ
waiting to be processed. Once a job has been removed, the 
Get-Job
 cmdlet returns an error if you 
attempt to retrieve information about the job27because it no longer exists. This is illustrated here:
When 
working with the job cmdlets, I like to give the jobs their own name. A job that returns 
process objects via the 
Get-Process
 cmdlet might be called 
getProc
. A contextual naming scheme 
works better than trying to keep track of names such as 
Job1
 and 
Job2
. Do not worry about making 
your job names too long, because you can use 
wildcard characters to simplify the typing requirement. 
When you receive a job, make sure you store the returned objects in a variable. This is shown here:
  
Once you have the returned objects in a variable, you can use the objects with other Windows 
PowerShell cmdlets. One thing to keep in mind is that the object is deserialized. This is shown here, 
where I use 
 as an alias for the 
Get-Member
 cmdlet:
This means that not all the standard members from the 
System.Diagnostics.Process
 .NET 
Framework object are available. The default methods are shown here 
gps
 is an alias for the 
Get-Process
 cmdlet, 
gm 
is an alias for 
Get-Member
, and 
 is enough of the 
-membertype
 parameter 
to distinguish it on the Windows PowerShell console line:
Methods from the deserialized object are shown here, where I use the same command I used 
previously:
A listing of the cmdlets that use the noun 
job
 is shown here:
When 
starting a Windows PowerShell job via the 
Start-Job
 cmdlet, you can specify a name to hold 
the returned job object. You can also assign the returned job object in a variable by using a straight
forward value assignment. If you do both, you end up with two copies of the returned job object. This 
is shown here:
Retrieving
 the job via the 
Receive-Job
 cmdlet consumes the data. You cannot come back and 
retrieve the returned data again. This code shown here illustrates this concept:
  
The next example illustrates examining the command and cleaning up the job. When you use 
Receive-Job
[<000F00030044>-3<005100030048>-10<0055>-12<0055>-12<0052>-7<005500030050>-9<0048>-12<0056>-14<0056>-17<0044>-11<004A>-7<00480003004C>-5<005600030047004C>-5<0056>-4<0053>-8<004F>-5<0044>2<005C>1<0048>-16<0047>-8<001100030037>55<0052000300C0>-2<0051>-11<004700030044>-11<0047>-7<0047004C>-5<0057>-2<004C>-5<0052>-7<0051>-7<0044>-4<004F0003004C0051>2<0049>-7<0052>-7<0055>-12<0050>-7<0044>-3<0057>-2<004C>-5<0052>-7<005100030044>-4<0045>-13<0052>-10<0058>-5<005700030057>-2<004B>-9<0048000300460052>-13<0047>-7<004800030057>-2<004B>-7<0044>-3<005700030057>-2<0055>-12<004C>-5<004A>]TJ
gered the error, use the job object stored in the 
$rtn
 variable or the 
[<002A>-6<0048>-7<0057>39<0010>-15<0031>-2<0048>-7<0057>-14<0019>-1<0057>6<0052>-21<0017>-7<0026>9<00520051>-1<00C0004A>5<0058>4<0055>2<00440057>4<004C>2<00520051>]TJ
 job. 
You may prefer using the job object stored in the 
$rtn
 variable, as shown here:
[<0037>55<005200030046>4<004F>-7<0048>-10<0044>-4<005100030058>1<0053000300C0>-2<0055>-26<0056>-16<0057>-20<000F00030055>-12<0048>-10<0050>-9<0052>-1<0059>1<004800030057>-2<004B>-9<00480003004F>-7<0048>-8<0049>-41<0057>-1<0052>-1<0059>1<0048>-10<00550003004D>-5<0052>-7<004500030052>-7<0045>-6<004D>-5<0048>-16<0046>-25<0057>-19<005600030045>-3<005C0003004A>-6<0048>-10<0057>-31<0057>-2<004C0051>-11<004A00030057>-2<004B>-9<00480003004D>-5<0052>-7<0045>-8<005600030044>-4<0051>-11<004700030055>-12<0048>-10<0050>-9<0052>-1<0059>-12<004C0051>-11<004A00030057>-2<004B>-9<00480003004D>-5<0052>-7<0045>-8<0056>-19<001100030037>-7<004B>-2<004C>-5<00560003004C>-5<00560003>]TJ
shown here:
When 
you create a new Windows PowerShell job, it runs in the background. There is no indica
tion as the job runs whether it ends in an error or it22s successful. Indeed, you do not have any way 
to tell when the job even completes, other than to use the 
Get-Job
 cmdlet several times to see when 
the job state changes from 
running
 to 
completed
. For many jobs, this may be perfectly acceptable. In 
fact, it may even be preferable, if you wish to regain control of the Windows PowerShell console as 
[<0056>-12<0052>-13<0052>-7<005100030044>-10<005600030057>-2<004B>-9<00480003004D>-5<0052>-7<004500030045>-13<0048>-16<004A004C0051>-9<005600030048>-6<005B>2<0048>-16<0046>-2<0058>-5<0057>-2<004C0051>-11<004A>-8<001100030032>-11<005100030052>-2<0057>-2<004B>-9<0048>-10<005500030052>-13<00460046>-14<0044>-10<0056>-4<004C>-5<0052>-7<0051>-9<0056>-20<000F0003005C>1<0052>-10<005800030050>-7<0044>2<005C0003005A>-9<004C>-5<0056>-4<004B00030057005200030045>-13<004800030051>-9<0052>-2<0057>-2<004C>-5<00C0>-7<0048>-16<00470003005A>-9<004B>-9<0048>-10<005100030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<00560003>]TJ
PowerShell job completes. To accomplish this, you can use the 
Wait-Job
 cmdlet. You need to give the 
Wait-Job
 cmdlet either a job name or a job ID. Once you have done this, the Windows PowerShell 
console will pause until the job completes. The job, with its 
completed
 status, displays on the console. 
You can then use the 
Receive-Job
 cmdlet to receive the deserialized objects and store them in a vari
able 
 is a parameter alias for the
-computername 
parameter used in the 
Get-WmiObject
 command
The command appearing here starts a job to receive software products installed on a remote server 
named hyperv1. It impersonates the currently logged-on user and stores the returned object in a 
variable named 
$rtn
In a newly open Windows PowerShell console, the 
Start-Job
 cmdlet is used to start a new job. The 
returned job object is stored in the 
$rtn
 variable. You can pipeline the job object contained in the 
$rtn
variable to the 
Stop-Job
 cmdlet to stop the execution of the job. If you try to use the job object in the 
$rtn
 variable directly to get job information, an error will be generated. This is shown here:
You can pipeline the job object to the 
Get-Job
 cmdlet and see that the job is in a stopped state. 
Use the 
Receive-Job
 cmdlet to receive the job information and the 
count
 property to see how many 
software products are included in the variable, as shown here:
  
In the preceding list you can see that no software packages were enumerated. This is because the 
Get-WmiObject
 command to retrieve information from the 
Win32_Product
 class did not have time 
[<0057>-1<0052000300C0>-2<0051>-2<004C>-5<0056>-4<004B>-14<00110003>]TJ
If you want to keep the data from your job so that you can use it again later, and you do not want 
to bother storing it in an intermediate variable, use the 
-keep 
parameter. In the command that fol
lows, the 
Get-NetAdapter
 cmdlet is used to return network adapter information.
When checking on the status of a background job, and you are monitoring a job you just created, 
use the
-newest 
parameter instead of typing a job number, as it is easier to remember. This technique 
appears here:
Now, to retrieve the information from the job and to keep the information available, use the 
-keep 
switched parameter as illustrated here:
You can continue to work directly with the output in a normal Windows PowerShell fashion, like so:
Using Windows PowerShell remoting: step-by-step exercises
In this exercise, you will practice using Windows PowerShell remoting to run remote commands. 
For the purpose of this exercise, you can use your local computer. First, you will open the Windows 
PowerShell console, supply alternate credentials, create a Windows PowerShell remote session, and 
run various commands. Next, you will create and receive Windows PowerShell jobs.
Supplying alternate credentials for remote Windows PowerShell sessions
1.
Log on to your computer with a user account that does not have administrator rights. 
2.
Open the Windows PowerShell console.
3.
Notice the Windows PowerShell console prompt. An example of such a prompt appears here:
4.
Use a variable named 
$cred
 to store the results of using the 
Get-Credential
 cmdlet. Specify 
administrator credentials to store in the 
$cred
 variable. An example of such a command 
appears here:
5.
Use the 
Enter-PSSession
 cmdlet to open a remote Windows PowerShell console session. Use 
the credentials stored in the 
$cred
 variable, and use 
localhost 
as the name of the remote com
puter. Such a command appears here:
6.
Notice how the Windows PowerShell console prompt changes to include the name of the 
remote computer, and also changes the working directory. Such a changed prompt appears 
here:
  
Use the 
whoami 
command to verify the current context. The results of the command appear 
here:
8.
Use the 
exit 
command to exit the remote session. Use the 
whoami
 command to verify that the 
user context has changed. 
Use WMI to retrieve the BIOS information on the local computer. Use the alternate credentials 
stored in the 
$cred
 variable. This command appears here:
The previous command fails and produces the following error. This error comes from WMI and 
states that you are not permitted to use alternate credentials for a local WMI connection. 
10.
Put the WMI command into the
-scriptblock 
parameter for 
Invoke-Command
. Specify the local 
computer as the value for 
computername 
and use the credentials stored in the 
$cred
 variable. 
The command appears here using 
-script
 as a shortened version of 
-scriptblock
11.
Press the up arrow key to retrieve the previous command and erase the 
credential 
parameter. 
The revised command appears here:
When you run the command, it generates the error appearing here because a normal user 
does not have remote access by default if you have admin rights, then the command works:
12.
Create an array of computer names. Store the computer names in a variable named 
$cn
. Use 
the array appearing here:
13.
Use 
Invoke-Command
 to run the WMI command against all three computers at once. The 
command appears here:
This concludes this step-by-step exercise.
In the following exercise, you will create and receive Windows PowerShell jobs.
Creating and receiving jobs
1.
Open the Windows PowerShell console as a non-elevated user.
2.
Start a job named 
Get-Process
 that uses a 
-scriptblock 
parameter
that calls the 
Get-Process
cmdlet 
gps
 is an alias for 
Get-Process
. The command appears here:
3.
Examine the output from starting the job. It lists the name, state, and other information about 
the job. Sample output appears here:
4.
Use the 
Get-Process
 cmdlet to determine if the job has completed. The command appears 
here:
5.
Examine the output from the previous command. The 
state 
reports 
completed
 when the job 
has completed. If data is available, the 
hasmoredata 
property reports 
true
. Sample output 
appears here:
6.
Receive the results from the job. To do this, use the 
Receive-Job
 cmdlet as shown here:
  
Press the up arrow key to retrieve the 
Get-Job
 command. Run it. Note that the 
hasmoredata 
property now reports 
false
, as shown here:
8.
Create a new job with the same name as the previous job: 
gps
. This time, change the 
-script
block 
parameter value to 
gsv
 the alias for 
Get-Service
. The command appears here:
Now use the 
Get-Job
 cmdlet to retrieve the job with the name 
gps. 
Note that the command 
retrieves both jobs, as shown here:
10.
Use the 
Receive-Job
 cmdlet to retrieve the job ID associated with your new job. This time, use 
the 
-keep 
switch, as shown here:
11.
Use the 
Get-Job
 cmdlet to retrieve your job. Note that the 
hasmoredata 
property still reports 
true
 because you22re using the 
-keep
 switch.
This concludes this exercise.
Chapter 4 quick reference
Do this
Work interactively on a remote system 
Use the 
Enter-PSSession
 cmdlet to create a remote 
session.
[<0026>-6<0052>-14<0051>-8<00C0>-14<004A>-10<0058>-6<0055>-19<00480003003A>-23<004C>-7<0051>-18<0047>-12<0052>-10<005A>-19<005600030033>-2<0052>-10<005A>-9<0048>-17<0055>-30<0036>-7<004B>-16<0048>-18<004F>-6<004F00030055>-19<0048>-17<0050>-16<0052>-9<0057>-9<004C>-7<0051>-18<004A>]TJ
Use the 
Enable-PSRemoting
 function.
Run a command on a remote system
Use the 
Invoke-Command
 cmdlet and specify the com
mand in a 
-scriptblock 
parameter.
Run a command as a job
Use the 
Start-Job
 cmdlet to execute the command.
Check on the progress of a job 
Use the 
Get-Job
 cmdlet and specify either the job ID or 
the job name.
Check on the progress of the newest job
Use the 
Get-Job
 cmdlet and specify the 
-newest 
param
eter, and supply the number of new jobs to monitor.
Retrieve the results from a job
Use the 
Receive-Job
 cmdlet and specify the job ID.
CHAPTER 5
Using PowerShell Scripts
fter completing this chapter, you will be able to:
Understand the reasons for writing Windows PowerShell scripts.
[<0030>-5<0044>-4<004E>12<004800030057>-2<004B>-9<0048000300460052>-7<0051>-1<00C0>-7<004A>-3<0058>1<0055>-8<0044>-3<0057>-2<004C>-5<0052>-7<005100030046>4<004B>-7<0044>-4<0051>-11<004A>-7<0048>-12<005600030055>-12<0048>-16<0054>-3<0058004C0055>-12<0048>-16<004700030057005200030055>-17<0058>1<00510003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030056>-13<0046>4<0055>-12<004C0053>-5<0057>-19<0056>-19<0011>]TJ
Understand how to run Windows PowerShell scripts.
Understand how to break lines in a script.
Understand the use of variables and constants in a script.
Create objects in a Windows PowerShell script.
Call methods in a Windows PowerShell script.
With the ability to perform so many actions from inside Microsoft Windows PowerShell in an inter-
active fashion, you may wonder, 23Why do I need to write scripts?24 For many network administrators, 
one-line PowerShell commands will indeed solve many routine problems. This can become extremely 
[<0053>-13<0052>-3<005A>-2<0048>-10<0055>-38<0049>-18<0058>1<004F0003005A>-9<004B>-9<0048>-10<005100030057>-2<004B>-9<0048000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<0047>-6<005600030044>-4<0055>-12<0048000300460052>-7<0050>-4<0045>-6<004C0051>-9<0048>-16<00470003004C0051>-1<0057>-1<005200030045>-9<0044>-3<0057>-1<0046>4<004B000300C0>-2<004F>-7<0048>-12<005600030044>-4<0051>-11<004700030053>-13<0048>-10<0055>-12<004B>-7<0044>-4<0053>-8<005600030046>-14<0044>-4<004F>1<004F>-7<0048>-16<004700030049>-12<0055>-12<0052>-7<0050000300440003004F>-6<0052>-13<004A004C005100030056>-12<0046>4<0055>-12<004C0053>-5<0057>-20<00110003>]TJ
However, there are some very good reasons to write Windows PowerShell scripts. We will examine 
them as we move into this chapter. 
Why write Windows PowerShell scripts?
Perhaps
 the number-one reason to write a Windows PowerShell script is to address recurring needs. 
As an example, consider the activity of producing a directory listing. The simple 
Get-ChildItem
 cmdlet 
[<0047>-5<0052>-13<0048>-12<0056000300440003004A>-5<0052>-13<0052>-13<00470003004D>-5<0052>-7<0045>-3<000F00030045>-9<0058>-5<0057000300440049>-41<0057>-3<0048>-10<00550003005C>1<0052>-10<005800030047>-7<0048>-16<0046>4<004C>-5<0047>-7<004800030057>-1<005200030056>-12<0052>-7<0055>-41<005700030057>-2<004B>-9<00480003004F004C>-5<0056>-16<0057>-2<004C0051>-11<004A00030044>-4<0051>-11<0047000300C0>-2<004F>-6<0057>-3<0048>-10<005500030052>-10<0058>-5<005700030052>-7<0051>-4<004F>-12<005C000300C0>-2<004F>-7<0048>-12<00560003005200490003004400030046>-1<0048>-10<0055>-41<0057>-19<0044>-2<004C005100030056>-3<004C>-7<005D>-1<0048>-9<000F0003005C>1<0052>-9<00580003>]TJ
end up with the command shown here:
Even using tab completion, the previous command requires a bit of typing. One way to shorten 
[<004C>-5<00570003005A>-2<0052>-10<0058>1<004F>-8<004700030045>-13<004800030057>-1<005200030046>4<0055>-12<0048>-10<0044>-3<0057>-3<00480003004400030058>-6<0056>-12<0048>-10<0055>-10<0010>-18<0047>-7<0048>-9<00C0>-2<0051>-9<0048>-16<004700030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<00510003000B>30<004400030057>-3<0048>-16<0046>4<004B>-4<0051>-2<004C>-5<0054>-3<0058>-7<004800030057>-2<004B>-7<0044>-3<00570003002C>-13<00B7>7<004F>1<004F00030047004C>-5<0056>-13<0046>-2<0058>-6<0056>-14<00560003004F>-5<0044>-3<0057>-3<0048>-10<0055>6<000C>14<001100030029>-3<0052>-7<005500030051>-9<0052>-3<005A>17<000F00030057>-2<004B>-9<004800030048>-10<0044>-10<0056>-3<004C>]TJ
est solution is to write a Windows PowerShell script. The 
DirectoryListWithArguments.ps1 script is 
shown here:
  
The DirectoryListWithArguments.ps1 script takes a single, unnamed argument that allows the 
[<0056>-13<0046>4<0055>-12<004C0053>-5<005700030057005200030045>-13<004800030050>-9<0052>-13<0047004C>-5<00C0>-7<0048>-16<00470003005A>-9<004B>-9<0048>-10<00510003004C>-5<00570003004C>-5<005600030055>-17<0058>1<0051>-14<001100030037>-7<004B>-2<004C>-5<005600030050>-7<0044>-4<004E>12<0048>-12<005600030057>-2<004B>-9<004800030056>-13<0046>4<0055>-12<004C0053>-5<005700030050>-6<0058>-5<0046>4<004B00030048>-9<0044>-10<0056>-4<004C>-5<0048>-10<005500030057>-1<00520003005A>-2<0052>-7<0055>-12<004E0003005A>-9<004C>-5<0057>-2<004B00030044>-4<0051>-11<004700030044>-11<0047>-7<0047>-6<00560003>]TJ
[<00C1>-10<0048>-6<005B>-8<004C0045>-6<004C004F004C>-5<0057>-38<005C>35<0011>]TJ
An 
additional reason that network administrators write Windows PowerShell scripts is to run the 
scripts as scheduled tasks. In the Windows world, there are multiple task-scheduler engines. Using the 
WIN32_ScheduledJob
 Windows Management Instrumentation WMI class, you can create, monitor, 
and delete scheduled jobs. This WMI class has been available since the Windows NT 4 days. 
The 
ListProcessesSortResults.ps1 script, shown following, is a script that a network administrator 
may want to schedule to run several times a day. It produces a list of currently running processes and 
[<005A>-9<0055>-12<004C>-5<0057>-3<0048>-12<005600030057>-2<004B>-9<004800030055>-12<0048>-12<0056>-5<0058>1<004F>-6<0057>-19<005600030052>-10<0058>-5<00570003005700520003004400030057>-3<0048>-6<005B>-37<0057000300C0>-2<004F>-7<004800030044>-10<00560003004400030049>-7<0052>-7<0055>-12<0050>-7<0044>-3<0057>-31<0057>-3<0048>-16<004700030044>-4<0051>-11<004700030056>-12<0052>-7<0055>-41<0057>-3<0048>-16<004700030057>-19<0044>-4<0045>-8<004F>-7<0048>-7<0011>]TJ
One 
other reason for writing Windows PowerShell scripts is that it makes it easy to store and share 
both the 23
secret commands24 and the ideas behind the scripts. For example, suppose you develop a 
script that will connect remotely to workstations on your network and search for user accounts that 
do not require a password. Obviously, an account without a password is a security risk! After some 
searching around, you discover the 
WIN32_UserAccount
 WMI class and develop a script that performs 
to your expectation. Because this is likely a script you would want to use on a regular basis, and per
haps share with other network administrators in your company, it makes sense to save it as a script. A 
sample of such a script is 
AccountsWithNoRequiredPassword.ps1, which is shown here:
Scripting fundamentals
In 
its most basic form, a Windows PowerShell script is a collection of PowerShell commands. Here22s an 
example:
You can put a command into a Windows PowerShell script and run it directly as it written. 
[<0037>55<005200030046>4<0055>-12<0048>-10<0044>-3<0057>-3<0048000300440003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030056>-12<0046>4<0055>-12<004C0053>-5<0057>-20<000F0003005C>1<0052>-10<005800030056>-3<004C0050>-4<0053>-8<004F>-12<005C0003004B>-7<0044>1<0059>1<004800030057>-1<0052000300460052>-7<0053>-3<005C00030057>-2<004B>-9<0048000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<00470003004C00510003004400030057>-3<0048>-6<005B>-37<0057000300C0>-2<004F>-7<004800030044>-4<0051>-11<00470003>]TJ
[<0056>-17<0044>1<0059>1<004800030057>-2<004B>-9<0048000300C0>-2<004F>-7<004800030045>-3<005C00030058>-6<0056>-3<004C0051>-11<004A0003004400030011>-8<0053>-8<0056>8<001400030048>-6<005B>-37<0057>-3<0048>-10<0051>-9<0056>-3<004C>-5<0052>-7<0051>-14<00110003002C00490003005C>1<0052>-9<005800030046>4<0055>-12<0048>-10<0044>-3<0057>-3<004800030057>-2<004B>-9<0048000300C0>-2<004F>-7<00480003004C005100030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F0003002C>-8<0036002800030044>-4<0051>-11<004700030056>-17<0044>1<0059>1<00480003>]TJ
[<0057>-2<004B>-9<0048000300C0>-2<004F>-7<0048>-9<000F00030057>-2<004B>-9<0048>]TJ
[<00030011>-8<0053>-8<0056>8<001400030048>-6<005B>-37<0057>-3<0048>-10<0051>-9<0056>-3<004C>-5<0052>-7<00510003005A>-9<004C004F>1<004F00030045>-13<004800030044>-11<0047>-7<0047>-7<0048>-16<004700030044>-6<0058>-5<0057>-1<0052>-7<0050>-7<0044>-3<0057>-2<004C>-3<0046>-14<0044>-4<004F>1<004F>-12<005C>35<00110003002C>1<00490003005C>1<0052>-10<005800030047>-5<0052>-9<0058>1<0045>-8<004F>-7<0048>-18<0010>-18<0046>4<004F004C>-3<0046>4<004E00030057>-2<004B>-9<0048000300C0>-2<004F>-7<0048>-9<000F0003004C>-5<00570003005A>-9<004C004F>1<004F00030052>-7<0053>-13<0048>-10<00510003004C00510003>]TJ
Notepad by default. 
unning Windows PowerShell scripts
To run
[<00030057>-2<004B>-9<004800030056>-13<0046>4<0055>-12<004C0053>-5<0057>-20<000F0003005C>1<0052>-9<005800030046>-14<0044>-4<005100030052>-7<0053>-13<0048>-10<005100030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F000300460052>-7<0051>-9<0056>-12<0052>-6<004F>-7<004800030044>-4<0051>-11<004700030047>1<0055>-8<0044>-11<004A00030057>-2<004B>-9<0048000300C0>-2<004F>-7<004800030057>-1<005200030057>-2<004B>-9<0048000300460052>-7<0051>-9<0056>-12<0052>-6<004F>-7<0048>-7<00110003002C>1<00490003>]TJ
[<005C>1<0052>-9<0058000300C0>-2<0055>-26<0056>-16<0057000300460052>-7<0053>-3<005C00030057>-2<004B>-9<004800030053>-9<0044>-3<0057>-2<004B00030052004900030057>-2<004B>-9<004800030056>-13<0046>4<0055>-12<004C0053>-5<0057>-20<000F00030044>-3<0051>-11<00470003004F>-5<0044>-3<0057>-3<0048>-10<005500030055>-12<004C>-5<004A>1<004B>-1<0057>33<0010>-18<0046>4<004F004C>-3<0046>4<004E0003004C0051>-9<0056>-3<004C>-5<0047>-7<004800030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F000300460052>-7<0051>-9<0056>-12<0052>-6<004F>-7<004800030057>-1<00520003>]TJ
paste the path of your script there, and then press Enter, you will print out a string that represents the 
path of the script, as shown here:
In Windows PowerShell, when you want to print a string in the console, you put it inside 
quotation 
marks. You do not have to use 
Wscript.Echo
 or similar commands such as those used in VBScript. This 
[<0050>-9<0048>-10<0057>-2<004B>-9<0052>-13<00470003004C>-5<005600030048>-10<0044>-10<0056>-4<004C>-5<0048>-10<005500030044>-4<0051>-11<004700030056>-3<004C0050>-4<0053>-8<004F>-7<0048>-10<0055>39<000F00030045>-9<0058>-5<005700030057>-19<0044>-4<004E>12<0048>-12<005600030056>-12<0052>-7<0050>-9<00480003004A>-7<0048>-10<0057>-31<0057>-2<004C0051>-11<004A00030058>-6<0056>-12<0048>-16<004700030057>-1<0052>1<001100030029>-3<0052>-7<005500030048>-6<005B>-6<0044>-4<0050>-4<0053>-8<004F>-7<0048>-9<000F00030056>-17<0044>2<005C0003005C>1<0052>-9<0058000300C0>-7<004A>-3<0058>1<0055>-12<004800030052>-10<0058>-5<005700030057>-2<004B>-7<0044>-3<00570003>]TJ
your previous attempts to run a Windows PowerShell script just displayed a string27the path to the 
script27instead of running the script. Therefore, you remove the quotation marks and press Enter, and 
this time, you receive a real error message. "What now?" you may ask. The error message shown in 
Figure 5-1 relates to the script execution policy that disallows the running of scripts. 
FIGURE 5-1
By default, an attempt to run a Windows PowerShell script generates an error message.
  
Enabling Windows PowerShell scripting support
By 
default, Windows PowerShell disallows the execution of scripts. Script support can be controlled by 
using group policy, but if it is not, and if you have administrator rights on your computer, you can use 
the 
Set-ExecutionPolicy
 Windows PowerShell cmdlet to turn on script support. There are six levels that 
can be enabled by using the 
Set-ExecutionPolicy
 cmdlet. These options are displayed here: 
Restricted
[<0027>-12<0052>-13<0048>-12<005600030051>-9<0052>-2<00570003004F>-7<0052>-10<0044>-11<0047000300460052>-7<005100C0>-7<004A>-3<0058>1<0055>-8<0044>-3<0057>-2<004C>-5<0052>-7<0051000300C0>-2<004F>-7<0048>-12<005600030056>-5<0058>-5<0046>4<004B00030044>-10<005600030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<004800030052>-7<005500030055>-17<0058>1<00510003>]TJ
other scripts. 
Restricted
 is the default.
AllSigned
[<0035>-2<0048>-16<0054>-3<0058004C0055>-12<0048>-12<005600030057>-2<004B>-7<0044>-3<005700030044>-4<004F>1<004F00030056>-13<0046>4<0055>-12<004C0053>-5<0057>-19<005600030044>-4<0051>-11<0047000300460052>-7<005100C0>-7<004A>-3<0058>1<0055>-8<0044>-3<0057>-2<004C>-5<0052>-7<0051000300C0>-2<004F>-7<0048>-12<005600030045>-13<004800030056>-4<004C>-5<004A>1<0051>-9<0048>-16<004700030045>-2<005C0003004400030057>-2<0055>-17<0058>-6<0056>-16<0057>-3<0048>-16<004700030053>-9<0058>1<0045>-8<004F004C>-5<0056>-4<004B>-9<0048>-10<0055>39<000F0003>]TJ
including scripts that you write on the local computer.
RemoteSigned
[<0035>-2<0048>-16<0054>-3<0058004C0055>-12<0048>-12<005600030057>-2<004B>-7<0044>-3<005700030044>-4<004F>1<004F00030056>-12<0046>4<0055>-12<004C0053>-5<0057>-19<005600030044>-4<0051>-11<0047000300460052>-7<005100C0>-7<004A>-3<0058>1<0055>-8<0044>-3<0057>-2<004C>-5<0052>-7<0051000300C0>-2<004F>-7<0048>-12<005600030047>-5<0052>-3<005A>-9<0051>-4<004F>-7<0052>-10<0044>-11<0047>-7<0048>-16<004700030049>-12<0055>-12<0052>-7<005000030057>-2<004B>-9<00480003>]TJ
Internet zone be signed by a trusted publisher.
Unrestricted
[<002F>-8<0052>-10<0044>-11<0047>-6<005600030044>-4<004F>1<004F000300460052>-7<0051>-1<00C0>-7<004A>-3<0058>1<0055>-8<0044>-3<0057>-2<004C>-5<0052>-7<0051000300C0>-2<004F>-7<0048>-12<005600030044>-4<0051>-11<004700030055>-17<0058>1<0051>-9<005600030044>-4<004F>1<004F00030056>-13<0046>4<0055>-12<004C0053>-5<0057>-19<0056>-19<00110003002C>1<00490003005C>1<0052>-10<005800030055>-17<0058>1<005100030044>-4<005100030058>1<0051>-9<0056>-3<004C>-5<004A>1<0051>-9<0048>-16<004700030056>-12<0046>4<0055>-12<004C0053>-5<00570003>]TJ
that was downloaded from the Internet, you are prompted for permission before it runs.
Bypass
Blocks nothing and issues no warnings or prompts.
[<0038>-2<00510047>1<0048>-16<00C0>-6<00510048>-3<0047>]TJ
Removes the currently assigned execution policy from the current scope. This 
parameter will not remove an execution policy that is set in a group policy scope.
In addition to six levels of execution policy, there are three different scopes:
Process
The execution policy affects only the current Windows PowerShell process.
CurrentUser
The execution policy affects only the current user.
LocalMachine
The execution policy affects all users of the computer. Setting the 
LocalMachine 
execution policy requires administrator rights on the local computer. By default, 
a non-elevated user has rights to set the script execution policy for the 
CurrentUser 
user scope 
that affects their own execution policy. 
With so many choices available to you for script execution policy, you may be wondering which 
one is appropriate for you. The Windows PowerShell team recommends the 
RemoteSigned
 setting, 
stating that it is 23appropriate for most circumstances.24 Remember that, even though descriptions of 
the various policy settings use the term 
Internet
, this may not always refer to the World Wide Web, 
[<0052>-7<005500030048>-8<0059>1<0048>-10<005100030057>-1<00520003004F>-7<0052>-13<0046>-14<0044>-3<0057>-2<004C>-5<0052>-7<0051>-9<005600030052>-10<0058>-5<0057>-19<0056>-3<004C>-5<0047>-7<00480003005C>1<0052>-10<0058>1<005500030052>-3<005A>-9<0051000300C0>-2<0055>-12<0048>-9<005A>-3<0044>-4<004F>1<004F>-9<001100030037>-7<004B>-2<004C>-5<00560003004C>-5<005600030045>-13<0048>-16<0046>-14<0044>-6<0058>-6<0056>-12<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030052>-7<0045>-5<0057>-19<0044>-2<004C0051>-9<00560003004C>-5<0057>-19<005600030056>-13<0046>4<0055>-12<004C0053>-5<00570003>]TJ
origin information by using the Internet Explorer zone settings. This basically means anything that 
comes from a computer other than your own is in the Internet zone. You can change the Internet 
Explorer zone settings by using Internet Explorer, the registry, or group policy. 
[<002C00490003005C>1<0052>-9<005800030047>-5<005200030051>-9<0052>-2<00570003005A>-2<0044>-4<0051005700030057005200030056>-12<0048>-16<004800030057>-2<004B>-9<0048000300460052>-7<005100C0>-2<0055>-12<0050>-7<0044>-3<0057>-2<004C>-5<0052>-7<005100030050>-9<0048>-12<0056>-14<0056>-17<0044>-11<004A>-7<00480003005A>-9<004B>-9<0048>-10<00510003005C>1<0052>-9<005800030046>4<004B>-7<0044>-4<0051>-11<004A>-7<004800030057>-2<004B>-9<004800030056>-13<0046>4<0055>-12<004C0053>-5<005700030048>-6<005B>2<0048>-16<0046>-2<0058>-5<0057>-2<004C>-5<0052>-7<005100030053>-13<0052>-6<004F004C>-3<0046>-30<005C0003>]TJ
on Windows PowerShell 3.0, use the 
-force
 parameter.
To view the execution policy for all scopes, use the 
-list 
parameter when calling the 
Get-ExecutionPolicy
 cmdlet. This technique appears here:
etrieving script execution policy
1.
Open Windows PowerShell.
2.
Use the 
Get-ExecutionPolicy
 cmdlet to retrieve the effective script execution policy. This is 
shown here:
This concludes this procedure. Leave Windows PowerShell open for the next procedure.
Quick check
Q.
Do Windows PowerShell scripts work by default?
No. Windows PowerShell scripts must be explicitly enabled.
Q.
What cmdlet can be used to retrieve the resultant execution policy?
The 
 cmdlet can retrieve the resultant execution policy.
Q.
What cmdlet can be used to set the script execution policy?
The 
 cmdlet can be used to set the script execution policy.
Setting script execution policy
1.
Use 
the 
Set-ExecutionPolicy
 cmdlet to change the script execution policy to 
unrestricted
. This 
command is shown here:
  
2.
Use the 
Get-ExecutionPolicy
 cmdlet to retrieve the current effective script execution policy. 
This command is shown here:
3.
The result prints out to the Windows PowerShell console, as shown here:
This concludes this procedure. 
If the execution policy on Windows PowerShell is set to 
, how can you use a 
script to determine the execution policy? One method is to use the 
calling Windows PowerShell to run the script. The 
execution policy for the duration of the script when it is called.
ransitioning from command line to script
Now that you have everything set up to enable script execution, you can run your StopNotepad.ps1 
script
. This is shown here:
If an instance of the Notepad process is running, everything is successful. However, if there is no 
instance of Notepad running, the error shown here is generated:
It is 
[<004C0050>-4<0053>-13<0052>-7<0055>-41<0057>-19<0044>-4<0051>-1<00570003005700520003004A>-7<0048>-10<00570003004C0051>-1<0057>-1<005200030057>-2<004B>-9<00480003004B>-7<0044>-4<0045>-6<004C>-5<005700030052>1<004900030055>-12<0048>-10<0044>-11<0047004C0051>-11<004A00030057>-2<004B>-9<004800030048>-10<0055>-12<0055>-12<0052>-7<005500030050>-9<0048>-12<0056>-14<0056>-17<0044>-11<004A>-7<0048>-12<0056>-19<001100030037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030053>-9<0044>-4<0055>-41<005700030052>1<004900030057>-2<004B>-9<004800030048>-10<0055>-12<0055>-12<0052>-7<005500030050>-9<0048>-12<0056>]TJ
[<0056>-17<0044>-11<004A>-7<00480003004A004C>-12<0059>1<0048>-12<00560003004400030047>-7<0048>-12<0056>-13<0046>4<0055>-12<004C0053>-5<0057>-2<004C>-5<0052>-7<005100030052004900030057>-2<004B>-9<004800030053>-7<0055>-12<0052>-7<0045>-8<004F>-7<0048>-10<0050>-14<00110003002C>-1<005100030057>-2<004B>-2<004C>-5<005600030048>-6<005B>-6<0044>-4<0050>-4<0053>-8<004F>-7<0048>-9<000F0003004C>-5<005700030046>1<0052>-10<0058>1<004F>-8<004700030051>-9<0052>-2<0057000300C0>-2<0051>-11<00470003004400030053>-6<0055>-12<0052>-13<0046>-2<0048>-12<0056>-14<00560003005A>-9<004C>-5<0057>-2<004B00030057>-2<004B>-9<004800030051>-7<0044>-4<0050>-9<00480003>]TJ
Notepad
. The second part of the error message shows the position in the code where the error 
occurred. This is known as the 
position message
[<001100030037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<00570003004F004C0051>-9<004800030052004900030057>-2<004B>-9<004800030053>-13<0052>-7<0056>-4<004C>-5<0057>-2<004C>-5<0052>-7<005100030050>-9<0048>-12<0056>-14<0056>-17<0044>-11<004A>-7<004800030056>-16<0057>-19<0044>-3<0057>-3<0048>-12<005600030057>-2<004B>-9<004800030048>-10<0055>-12<0055>-12<0052>-7<00550003>]TJ
occurred on line 14. The second portion has a series of arrows that point to the command that failed. 
The 
Get-Process
 cmdlet command is the one that failed. This is shown here:
The easiest way to eliminate this error message is to use the
-erroraction
 parameter and specify the 
silentlycontinue
 value. You can also use the 
-ea
 alias and avoid having to type out 
-erroraction
. This is 
basically the same as using the
On Error Resume Next
 command from VBScript but not exactly the 
same, as it only handles nonterminating errors. The really useful feature of the 
-erroraction
 parameter 
[<004C>-5<005600030057>-2<004B>-7<0044>-3<00570003004C>-5<005700030046>-14<0044>-4<005100030045>-13<004800030056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-7<0048>-16<004700030052>-7<00510003004400030046>4<0050>-11<0047>1<004F>-7<0048>-10<0057>33<0010>-4<0045>-3<005C>4<0010>-18<0046>4<0050>-11<0047>1<004F>-7<0048>-10<005700030045>-9<0044>-10<0056>-3<004C>-5<0056>-19<00110003002C>-1<005100030044>-11<0047>-7<0047004C>-5<0057>-2<004C>-5<0052>-7<0051>-14<000F00030057>-2<004B>-9<0048>-10<0055>-12<004800030044>-4<0055>-12<0048000300C0>-14<0059>1<004800030048>-10<0051>-6<0058>1<0050>-9<0048>-10<0055>-8<0044>-3<0057>-2<004C>-5<0052>-7<005100030051>-7<0044>-4<0050>-9<0048>-12<00560003>]TJ
or values that can be used. The allowed names and values for the 
-erroraction
 parameter are shown in 
Table 5-1.
TABLE 5-1
Names and values for 
-erroraction
Enumeration
Value
Ignore
Inquire
Continue
Stop
SilentlyContinue
In the StopNotepadSilentlyContinue.ps1 script, you add the 
-erroraction
 parameter to the 
Get-Process
 cmdlet to skip past any error that may arise if the Notepad process does not exist. To 
make the script easier to read, you break the code at the pipe character. The pipe character is not 
the line-continuation character. The 
backtick ` character, also known as the 
grave character, is used 
when a line of code is too long and must be broken into two physical lines of code. The key thing to 
be aware of is that the two physical lines form a single logical line of code. An example of how to use 
line continuation is shown here: 
The StopNotepadSilentlyContinue.ps1 script is shown here: 
Stop
otepadSilentlyContinue.ps1
Because you are writing a script, you can take advantage of some features of a script. One of the 
[<00C0>-2<0055>-26<0056>-16<005700030057>-2<004B>-2<004C0051>-11<004A>-6<00560003005C>1<0052>-10<005800030046>-14<0044>-4<005100030047>-5<00520003004C>-5<005600030058>-6<0056>-12<00480003004400030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<004800030057>-1<00520003004B>-9<0052>-6<004F>-8<004700030057>-2<004B>-9<004800030051>-7<0044>-4<0050>-9<004800030052004900030057>-2<004B>-9<004800030053>-7<0055>-12<0052>-13<0046>-2<0048>-12<0056>-14<005600030057>-1<005200030045>-13<004800030056>-16<0057>-1<0052>-7<0053>-7<0053>-13<0048>-16<0047>-8<001100030037>-7<004B>-2<004C>-5<00560003004B>-7<0044>-10<005600030057>-2<004B>-9<00480003>]TJ
advantage of enabling you to easily change the script to allow for stopping of processes other than 
Notepad. All variables begin with the dollar sign. The line that holds the name of the process in a vari
able is shown here:
Another 
improvement to the script is one that provides information about the process that is 
stopped. The 
Stop-Process
 cmdlet returns no information when it is used. But by using the
-passthru
parameter of the 
Stop-Process 
cmdlet, the process object is passed along in the pipeline. You use 
this parameter and pipeline the process object to the 
ForEach-Object
 cmdlet. You use the 
 auto
matic variable to refer to the current object on the pipeline and select the name and the process ID 
of the process that is stopped. The concatenation operator in Windows PowerShell is the 
plus sign +, 
and you use it to display the values of the selected properties in addition to the strings completing 
you sentence. This line of code is shown here:
  
The complete StopNotepadSilentlyContinuePassThru.ps1 script is shown here:
Stop
otepadSilentlyContinuePass
hru.ps1
When you run the script with two instances of Notepad running, the following output is shown:
An 
additional advantage of the 
StopNotepadSilentlyContinuePassThru.ps1 script is that you can 
use it to stop different processes. You can assign multiple process names an array to the
$process
variable, and when you run the script, each process will be stopped. In this example, you assign the 
Notepad the Calc processes to the
$process
 variable. This is shown here:
When you run the script, both processes are stopped, as shown here:
You could continue changing your script. You could put the code in a function, write command-
line help, and change the script so that it accepts command-line input or even reads a list of processes 
[<0049>-12<0055>-12<0052>-7<00500003004400030057>-2<0048>-6<005B>-37<0057000300C0>-2<004F>-7<0048>-7<001100030024>-27<005600030056>-12<0052>-13<0052>-7<005100030044>-10<00560003005C>1<0052>-9<005800030050>-9<0052>-1<0059>1<004800030049>-13<0055>-12<0052>-7<005000030057>-2<004B>-9<0048000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<00470003004F004C0051>-9<004800030057>-1<005200030056>-13<0046>4<0055>-12<004C0053>-5<0057>-20<000F00030056>-5<0058>-5<0046>4<004B00030052>-7<0053>-5<0057>-2<004C>-5<0052>-7<0051>-9<005600030056>-6<0058>-7<0047>-7<0047>-7<0048>-10<0051>-4<004F>-12<005C00030045>-13<0048>-16<00460052>-7<0050>-9<00480003>]TJ
possible. These topics are covered in Chapter 6, 23Working with Functions,24 and Chapter 7, 23Creating 
Advanced Functions and Modules.24
unning Windows PowerShell scripts
You cannot 
simply double-click a Windows PowerShell script and have it run unless you change the 
[<00C0>-2<004F>-7<004800030044>-10<0056>-14<0056>-12<0052>-13<0046>4<004C>-2<0044>-3<0057>-2<004C>-5<0052>-7<0051>-14<000F00030045>-9<0058>-5<005700030057>-2<004B>-7<0044>-3<00570003004C>-5<005600030051>-9<0052>-2<005700030056>-5<0058>1<0053>-7<0053>-13<0052>-7<0055>-41<0057>-3<0048>-16<004700030052>-7<005500030055>-12<0048>-16<00460052>-7<0050>-4<0050>-9<0048>-10<0051>-11<0047>-7<0048>-16<0047>-11<000C>14<00110003003C>49<0052>-10<005800030046>-14<0044>-4<0051>-4<0051>-9<0052>-2<005700030057>-37<005C>-12<0053>-13<004800030057>-2<004B>-9<004800030051>-7<0044>-4<0050>-9<00480003004C005100030057>-2<004B>-9<0048>]TJ
Run
dialog box either. If you are inside Windows PowerShell, you can run scripts if you have enabled the 
execution policy, but you need to type the entire path to the script you wish to run and make sure 
you include the ps1 extension. 
To run a Windows PowerShell script from inside the Windows PowerShell console, type the full 
path to the script. Include the name of the script. Ensure you include the ps1 extension.
If you need to run a script from outside Windows PowerShell, you need to type the full path to the 
script, but you must feed it as an argument to the PowerShell.exe program. In addition, you probably 
want to specify the 
-noexit
 argument so that you can read the output from the script. This is shown in 
Figure 5-2.
FIGURE 5-2
Use the 
-noexit
 argument for the PowerShell.exe program to keep the console open after a 
script runs.
To run a Windows PowerShell script from outside PowerShell, type the full path to the script. 
Include the name of the script. Ensure you include the ps1 extension. Feed this to the PowerShell.exe 
program. Use the 
-noexit
 argument to keep the PowerShell console after script execution.
The 
RetrieveAndSortServiceState.ps1 script uses the 
Get-WmiObject
 cmdlet to make a connec
tion and retrieve service information. Chapter 10, 23Using WMI,24 and Chapter 11, 23Querying WMI,24 
examine WMI as it relates to Windows PowerShell, but because of the way Windows PowerShell 
uses cmdlets, you do not need to know everything about the technology to use it in your script. The 
[<0035>-2<0048>-10<0057>-2<0055>-12<004C>-5<0048>-8<0059>1<0048>-12<0024>-11<0051>-11<0047>-1<0036>-11<0052>-7<0055>-41<0057>-14<0036>-11<0048>-10<0055>-47<0059>-12<004C>-3<0046>-2<0048>-4<0036>14<0057>-19<0044>-3<0057>-3<0048>-7<0011>-8<0053>-8<0056>8<001400030056>-13<0046>4<0055>-12<004C0053>-5<005700030046>4<0055>-12<0048>-10<0044>-3<0057>-3<0048>-12<0056000300440003004F004C>-5<0056>-16<005700030052>1<004900030044>-4<004F>1<004F00030057>-2<004B>-9<004800030056>-12<0048>-10<0055>-47<0059>-12<004C>-3<0046>-2<0048>-12<005600030057>-2<004B>-7<0044>-3<005700030044>-4<0055>-12<004800030047>-7<0048>-9<00C0>-2<0051>-9<0048>-16<004700030052>-7<00510003004400030050>-6<0044>-9<0046>4<004B>-2<004C0051>-9<0048>-7<00110003>]TJ
It then checks to see if they are running, stopped, or disabled, and reports the status of the service. 
The script also collects the service account that the service is running under.
In this script, the 
Sort-Object
[<00030046>4<0050>-11<0047>1<004F>-7<0048>-10<00570003004C>-5<005600030058>-6<0056>-12<0048>-16<004700030057005200030053>-13<0048>-10<0055>-38<0049>-7<0052>-7<0055>-12<005000030057>-2<004B>-4<0055>-12<0048>-16<004800030056>-12<0052>-7<0055>-41<0057>-19<005600030052>-7<005100030057>-2<004B>-9<004800030047>-3<0044>-3<0057>-19<0044>5<001D0003004C>-5<005700030056>-12<0052>-7<0055>-41<0057>-19<0056000300C0>-2<0055>-26<0056>-16<005700030045>-2<005C00030057>-2<004B>-9<00480003>]TJ
start mode of the service that is, automatic, manual, disabled; it sorts next by the state of the service 
that is, running, stopped, and so forth; and it then alphabetizes the list by the name of each service 
in the two previous categories. After the sorting process, the script uses a 
Format-Table
 cmdlet and 
produces table output in the console window. The RetrieveAndSortServiceState.ps1 script is shown 
following, and the 23Running scripts inside Windows PowerShell24 procedure, which examines running 
this script, follows that.
The script is designed to run against multiple remote machines, and it holds the names of the 
destination machines in the system variable 
$args
. As written, it uses two computer names that always 
refer to the local machine: 
localhost
 and 
loopback
. By using these two names, you can simulate the 
behavior of connecting to networked computers.
etrieve
ndSortServiceState.ps1
  
ote
For the following procedure, I copied the RetrieveAndSortServiceState.ps1 script 
to the C:Mytest directory created in Chapter 3, 23Understanding and Using PowerShell 
[<0033>5<0055>-10<0052>1<0059>-10<004C>-3<0047>-5<0048>-8<0055>-24<0056>-17<0011>39<00B500030037>-5<004B004C>-3<005600030050>-5<0044>-2<004E>14<0048>-10<00560003004C>-3<005700030050>-4<0058>-3<0046>6<004B00030048>-7<0044>-8<0056>-1<004C>-3<0048>-8<005500030057>2<005200030057>-36<005C>-10<0053>-11<004800030057004B>-7<004800030053>-7<0044>-1<0057004B00030044>-1<0051>-9<00470003004B>-5<0044>-8<005600030057004B>-7<004800030044>-9<0047>-5<0047>2<004C>-3<0057004C>-3<0052>-5<0051>-5<0044>-2<004F00030045>-11<0048>-8<0051>-7<0048>-7<00C0>-5<005700030052>3<00490003>]TJ
making the examples clearer. To follow the procedures, you will need to either modify 
the path to the script or copy the RetrieveAndSortServiceState.ps1 script to the C:Mytest 
directory.
unning scripts inside Windows PowerShell
1.
Open the Windows PowerShell console.
2.
Type the full path to the script you wish to run for example, C:Mytest. You can use tab 
completion. On my system, I only had to type C:My and then press Tab. Add a backslash 
, and type the script name. You can use 
tab completion for this as well. If you copied the 
RetrieveAndSortServiceState.ps1 into the C:Mytest directory, then simply typing 
 and press
ing Tab should retrieve the script name. The completed command is shown here:
Partial output from the script is shown here:
This concludes this procedure. Please close Windows PowerShell.
Add a shortcut to Windows PowerShell in your 
SendTo folder. This folder is located 
in the 
%username%
 folder. When you create the shortcut, 
make sure you specify the 
 switch for 
PowerShell.exe, or else the output will 
scroll by so fast that you will not be able to read it. You can do this by hand, or modify 
the 
CreateShortCutToPowerShell.vbs script from Chapter 1, 23Overview of Windows 
PowerShell 3.0.24
unning scripts outside Windows PowerShell
1.
Open 
[<0057>-2<004B>-9<0048000300350058>1<005100030047004C>-2<0044>-4<004F>-7<0052>-13<004A00030045>-13<0052>5<005B0003000B>12<0026>8<004B>-9<0052>-13<0052>-7<0056>-12<004800030036>14<0057>-19<0044>-4<0055>-41<00570003005F000300350058>1<0051>-14<000F00030052>-7<005500030053>-7<0055>-12<0048>-12<0056>-14<005600030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<0056000300C1>-6<0044>-11<004A0003004E>12<0048>-7<005C0003000E00030035>-28<000F00030052>-6<005500030053>-7<0055>-12<0048>-12<0056>-14<00560003>]TJ
Ctrl+Esc and then R.
2.
Type 
PowerShell
 and use the 
-noexit
 switch. Type the full path to the script. The command for 
this is shown here:
This concludes this procedure.
Quick check
Q.
Which command can you use to sort a list?
The 
 cmdlet can be used to sort a list.
Q.
How do you use the 
 cmdlet to sort a list?
To use the 
argument.
Understanding variables and constants
Understanding the use of variables and constants in Windows PowerShell is fundamental to much 
[<0052004900030057>-2<004B>-9<0048000300C1>-10<0048>-6<005B>-8<004C0045>-6<004C004F004C>-5<0057>-38<005C00030052004900030057>-2<004B>-9<004800030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030056>-13<0046>4<0055>-12<004C0053>-5<0057>-2<004C0051>-11<004A0003004F>-5<0044>-4<0051>-11<004A>-3<0058>-3<0044>-11<004A>-7<0048>-7<001100030039>30<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<0048>-12<005600030044>-4<0055>-12<004800030058>-6<0056>-12<0048>-16<004700030057>-1<00520003004B>-9<0052>-6<004F>-8<00470003004C0051>2<0049>-7<0052>-7<0055>-12<0050>-7<0044>-3<0057>-2<004C>-5<0052>-7<005100030049>-7<0052>-7<005500030058>-6<0056>-12<00480003>]TJ
later in the script. Variables can hold any type of data, including text, numbers, and even objects.
Use of variables
By default, when working with Windows PowerShell, you do not need to declare variables before use. 
When you use a variable to hold data, it is declared. All variable names must be preceded with a 
dol
lar sign $ when they are referenced. There are a number of special variables in Windows PowerShell. 
These variables are created automatically and have a special meaning. A listing of the special variables 
and their associated meaning appears in Table 5-2.
  
TABLE 5-2
Use of special variables
Name
Use
$^ 
[<0037>-14<004B>-9<004C>-12<005600030046>-7<0052>-14<0051>-8<0057>-26<0044>-9<004C>-7<0051>-16<005600030057>-9<004B>-16<0048000300C0>-9<0055>-32<0056>-23<005700030057>-7<0052>-14<004E>4<0048>-17<005100030052>-7<004900030057>-9<004B>-16<00480003004F>-12<0044>-17<0056>-23<00570003004F>-7<004C>-7<0051>-16<00480003004C>-7<0051>-11<0053>-16<0058>-12<00570003004C>-7<0051>-8<0057>-8<005200030057>-9<004B>-16<004800030056>-11<004B>-16<0048>-18<004F>-6<004F>-16<0011>]TJ
$$ 
This contains the last token of the last line input into the shell.
[<0037>-14<004B>-9<004C>-12<00560003004C>-12<005600030057>-9<004B>-16<004800030046>-9<0058>-6<0055>-19<0055>-19<0048>-17<0051>-8<005700030053>-13<004C>-7<0053>-20<0048>-18<004F>-7<004C>-7<0051>-16<004800030052>-14<0045>-13<004D>-12<0048>-23<0046>-31<0057>-26<001E0003004C>-12<0057>-39<00B7>18<005600030058>-13<0056>-19<0048>-23<00470003004C>-7<005100030056>-19<0046>-3<0055>-19<004C>-7<0053>-12<005700030045>-14<004F>-14<0052>-20<0046>-3<004E>-37<0056>-26<000F000300C0>-9<004F>-13<0057>-10<0048>-17<0055>-32<0056>-26<000F0003>]TJ
Where-Object
ForEach-Object
, and 
Switch
$? 
This contains the success/fail status of the last statement.
$Args 
This is used with functions or scripts requiring parameters that do not have a 
param
block.
$Error 
This saves the error object in the 
$error
 variable if an error occurs.
$ExecutionContext
This contains the execution objects available to cmdlets.
$foreach
This refers to the enumerator in a 
foreach
 loop.
$HOME
This is the user21s home directory set to %HOMEDRIVE%%HOMEPATH%.
$Input
This is input that is piped to a function or code block.
$Match
This is a hash table consisting of items found by the 
-match
 operator.
$MyInvocation
This contains information about the currently executing script or command line.
$PSHome
This is the directory where PowerShell is installed.
$Host
This contains information about the currently executing host.
$LastExitCode
This contains the exit code of the last native application to run.
$true
This is used for Boolean 
TRUE
$false
This is used for Boolean 
FALSE
$null
This represents a null object.
$this
[<002C>-8<005100030057>-9<004B>-16<004800030037>44<005C>-19<0053>-20<0048>-19<0056>-26<0011>-15<0053>-15<00560014>-28<005B>-15<0050>-11<004F000300C0>-10<004F>-14<004800030044>-11<0051>-18<004700030056>-19<0052>-14<0050>-16<004800030056>-19<0046>-3<0055>-19<004C>-7<0053>-12<005700030045>-14<004F>-14<0052>-20<0046>-3<004E0003004C>-7<0051>-16<0056>-23<0057>-26<0044>-11<0051>-16<0046>-9<0048>-19<0056>-26<000F00030057>-9<004B>-9<004C>-12<005600030055>-19<0048>-17<0053>-14<0055>-19<0048>-19<0056>-19<0048>-17<0051>-8<0057>-25<005600030057>-9<004B>-16<004800030046>-9<0058>-6<0055>-19<0055>-19<0048>-17<0051>-8<00570003>]TJ
object.
$OFS
[<0037>-14<004B>-9<004C>-12<00560003004C>-12<005600030057>-9<004B>-16<004800030052>-16<0058>-12<0057>-9<0053>-16<0058>-12<0057000300C0>-14<0048>-18<004F>-15<004700030056>-19<0048>-17<0053>-16<0044>-11<0055>-15<0044>-10<0057>-8<0052>-14<005500030058>-13<0056>-19<0048>-23<00470003005A>-16<004B>-16<0048>-17<005100030046>-7<0052>-14<0051>-4<0059>-6<0048>-17<0055>-47<0057>-9<004C>-7<0051>-18<004A00030044>-11<005100030044>-11<0055>-19<0055>-15<0044>-5<005C00030057>-8<00520003004400030056>-23<0057>-9<0055>-18<004C>-7<0051>-18<004A>-15<0011>]TJ
$ShellID 
[<0037>-14<004B>-9<004C>-12<00560003004C>-12<005600030057>-9<004B>-16<00480003004C>-12<0047>-14<0048>-17<0051>-8<0057>-9<004C>-12<00C0>-14<0048>-17<005500030049>-14<0052>-14<005500030057>-9<004B>-16<004800030056>-11<004B>-16<0048>-18<004F>-6<004F>-2<001E00030057>-9<004B>-9<004C>-12<005600030059>-12<0044>-11<004F>-11<0058>-14<00480003004C>-12<005600030058>-13<0056>-19<0048>-23<004700030045>-10<005C00030057>-9<004B>-16<004800030056>-11<004B>-16<0048>-18<004F>-6<004F00030057>-8<005200030047>-14<0048>-17<0057>-10<0048>-17<0055>-19<0050>-9<004C>-7<0051>-16<004800030057>-9<004B>-16<004800030048>-13<005B>]TJ
[<0048>-23<0046>-9<0058>-12<0057>-9<004C>-12<0052>-14<005100030053>-20<0052>-13<004F>-7<004C>-10<0046>-36<005C00030044>-11<0051>-18<00470003005A>-16<004B>-14<0044>-10<005700030053>-14<0055>-19<0052>-8<00C0>-10<004F>-14<0048>-19<005600030044>-11<0055>-19<004800030055>-24<0058>-6<005100030044>-10<005700030056>-22<0057>-26<0044>-11<0055>-47<0057>-15<0058>-6<0053>-6<0011>]TJ
$StackTrace 
This contains detailed stack trace information about the last error.
In the 
[<0035>-2<0048>-10<0044>-11<0047>-2<0038>-3<0056>-12<0048>-10<0055>-8<002C>-1<0051>2<0049>-7<0052>-9<0029>13<0055>-12<0052>-7<0050>-6<0035>-2<0048>-16<004A>-8<0011>-8<0053>-8<0056>8<001400030056>-13<0046>4<0055>-12<004C0053>-5<005700030057>-2<004B>-7<0044>-3<005700030049>-7<0052>-6<004F>1<004F>-7<0052>-3<005A>-12<0056>-20<000F00030057>-2<004B>-9<0048>-10<0055>-12<004800030044>-4<0055>-12<0048000300C0>-14<0059>1<004800030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<0048>-12<005600030058>-6<0056>-12<0048>-16<0047>-8<001100030037>-7<004B>-9<0048>-12<0056>-12<004800030044>-4<0055>-12<00480003004F004C>-5<0056>-16<0057>-3<0048>-16<00470003>]TJ
in Table 5-3. 
TABLE 5-3
ReadUserInfoFromReg.ps1 variables
Name
Use
$strUserPath
This is for the path to registry subkey SOFTWAREMICROSOFTWINDOWS
CURRENTVERSIONEXPLORER.
$strUserName
This is for the registry value Logon User Name.
$strPath
This is for the path to registry subkey VOLATILE ENVIRONMENT.
$strName
This contains an array of registry values: LOGONSERVER, HOMEPATH, APPDATA, 
HOMEDRIVE.
This holds a single registry value name from the 
$strName
 array of registry values; 
gets assigned the value by using the 
ForEach
 alias.
The 
ReadUserInfoFromReg.ps1 script uses the 
Set-Location
 cmdlet to change to the HKCU PS 
drive. This makes it easier to work with the registry. After the location has been set to the HKCU 
drive, the script uses the 
Get-ItemProperty
[<00030046>4<0050>-11<0047>1<004F>-7<0048>-10<005700030057005200030055>-12<0048>-10<0057>-2<0055>-12<004C>-5<0048>-8<0059>1<004800030057>-2<004B>-9<004800030047>-3<0044>-3<0057>-19<004400030056>-16<0057>-1<0052>-7<0055>-12<0048>-16<00470003004C005100030057>-2<004B>-9<004800030056>-4<0053>-13<0048>-16<0046>4<004C>-4<00C0>-7<0048>-16<004700030055>-12<0048>-16<004A004C>-5<0056>-16<0057>-2<0055>-47<005C0003>]TJ
key. The 
Get-ItemProperty
 cmdlet needs two arguments to be supplied: 
-path
 and 
-name
. The 
-path
argument receives the registry path that is stored in the 
$strUserPath
 variable, whereas the 
-name
argument receives the string stored in the 
$strUserName
 variable.
Because the 
 registry subkey was rather long, I used the 
to continue the subkey on the next line. In addition, because I had to close out the string 
with quotation marks, I used the 
plus symbol + to concatenate glue the two pieces of the 
string back together.
After the value is retrieved from the registry, the object is pipelined to the 
Format-List
 cmdlet, 
which once again uses the string contained in the 
$strUserName
 variable as the property to display.
ote
The 
Format-List
 cmdlet is required in the ReadUserInfoFromReg.ps1 script because 
of the way the 
 cmdlet displays the results of its operation27it returns 
information about the object as well as the value contained in the registry key. The use of 
Format-List
 mitigates this behavior.
The really powerful aspect of the ReadUserInfoFromReg.ps1 script is that it uses the array of strings 
contained in the
$strName
 variable. To read the values out of the registry, you need to 
singularize
the strings contained within the 
$strName
 variable. To do this, you use the 
ForEach-Object
 cmdlet 
however, you reference it by the alias 
foreach
. After you have an individual value from the 
$strName
array, you store the string in a variable called 
. The 
Get-ItemProperty
 cmdlet is used in exactly the 
same manner as it was used earlier. However, this time, you use the string contained in the 
$strPath
variable, and the name of the registry key to read is contained in the 
 variable, whose value will 
change four times with the execution of each pass through the array.
[<003A>-10<004B>-9<0048>-10<005100030057>-2<004B>-9<004800030035>-2<0048>-10<0044>-11<0047>-2<0038>-3<0056>-12<0048>-10<0055>-8<002C>-1<0051>2<0049>-7<0052>-9<0029>13<0055>-12<0052>-7<0050>-6<0035>-2<0048>-16<004A>-8<0011>-8<0053>-8<0056>8<001400030056>-13<0046>4<0055>-12<004C0053>-5<00570003004C>-5<005600030055>-17<0058>1<0051>-15<000F0003004C>-5<005700030055>-12<0048>-10<0044>-11<0047>-6<0056000300C0>-14<0059>1<004800030053>-6<004C>-5<0048>-16<0046>-2<0048>-12<00560003005200490003004C0051>2<0049>-7<0052>-7<0055>-12<0050>-7<0044>-3<0057>-2<004C>-5<0052>-7<005100030049>-12<0055>-12<0052>-7<005000030057>-2<004B>-9<00480003>]TJ
registry: the logon user name, the logon server name, the user22s home path location, the user22s 
application data store, and the user22s home drive mapping. The 
ReadUserInfoFromReg.ps1 script is 
shown here:
  
Quick check
Q.
To read a value from the registry, which provider is used?
The registry provider is used to read from the registry.
Q.
Which cmdlet is used to retrieve a registry key value from the registry?
The 
 cmdlet is used to retrieve a registry key value from the registry.
Q.
How do you concatenate two string values?
You can use the plus symbol + to concatenate two string values.
Exploring strings
1.
Open Windows PowerShell.
2.
Create a variable called 
 and assign the value 
this is the beginning
 to it. The code for this is 
shown here:
3.
Create a variable called 
 and assign the number 22 to it. The code for this is shown here:
4.
Create a variable called 
 and make it equal to 
. The code for this is shown here:
5.
Print out the value of 
. The code for this is shown here:
6.
The results of printing out 
 are shown here:
Modify the value of 
. Assign the string 
this is a string
 to the variable 
. This is shown here:
8.
Press the up arrow key and retrieve the 
$c = $a + $b
 command:
Now print out the value of 
. The command to do this is shown here:
10.
Assign the string 
this is a number
 to the variable 
. The code to do this is shown here:
11.
Press the up arrow key to retrieve the 
$c = $a + $b
 command. This will cause Windows 
PowerShell to reevaluate the value of 
. This command is shown here:
12.
Print out the value of 
. This command is shown here:
13.
Change the 
 variable so that it can only contain an integer. Data type aliases are shown in 
Table 5-4. Use the 
 variable to hold the number 5. This command is shown here:
14.
Print out the value contained in the 
 variable, as shown here:
15.
Assign the string 
this is a string
 to the 
 variable. This command is shown here:
Attempting to assign a string to a variable that has an 
[int]
 constraint placed on it results in 
the error shown here these results are wrapped for readability:
This concludes this procedure.
  
TABLE 5-4
Data type aliases
Alias
Type
[int]
A 32-bit signed integer
[long]
A 64-bit signed integer
[string]
[<0024000300C0>-18<005B>-5<0048>-23<0047>-9<0010>-12<004F>-14<0048>-17<0051>-18<004A>-12<0057>-9<004B00030056>-23<0057>-9<0055>-19<004C>-7<0051>-18<004A00030052>-7<004900030038>-9<0051>-9<004C>-10<0046>-7<0052>-20<0047>-14<004800030046>-3<004B>-14<0044>-11<0055>-15<0044>-16<0046>-31<0057>-10<0048>-17<0055>-32<0056>]TJ
[char]
A Unicode 16-bit character, UTF-16 
[bool]
true
false
 value
[byte]
An 8-bit unsigned integer
[double]
[<002400030047>-12<0052>-16<0058>-6<0045>-15<004F>-14<0048>-25<0010>-12<0053>-14<0055>-19<0048>-23<0046>-3<004C>-12<0056>-11<004C>-12<0052>-14<005100030019>-41<0017>-27<0010>-12<0045>-13<004C>-13<0057000300C1>-15<0052>-17<0044>-10<0057>-9<004C>-7<0051>-18<004A>-9<0010>-12<0053>-20<0052>-11<004C>-7<0051>-8<005700030051>-13<0058>-6<0050>-11<0045>-20<0048>-17<0055>]TJ
[decimal]
An 128-bit decimal value
[single]
[<002400030056>-11<004C>-7<0051>-18<004A>-6<004F>-14<0048>-25<0010>-12<0053>-14<0055>-19<0048>-23<0046>-3<004C>-12<0056>-11<004C>-12<0052>-14<005100030016>6<0015>19<0010>-12<0045>-13<004C>-13<0057000300C1>-15<0052>-17<0044>-10<0057>-9<004C>-7<0051>-18<004A>-9<0010>-12<0053>-20<0052>-11<004C>-7<0051>-8<005700030051>-13<0058>-6<0050>-11<0045>-20<0048>-17<0055>]TJ
[array]
An array of values
[xml]
An XML document
[hashtable]
hashtable
 object similar to a 
dictionary
 object
Use of constants
Constants 
in Windows PowerShell are like variables, with two important exceptions: their value never 
changes, and they cannot be deleted. 
Constants are created by using the 
Set-Variable
 cmdlet and 
specifying the 
-option
 argument to be equal to 
constant
ote
[<003A>-8<004B>-7<0048>-8<005100030055>-10<0048>-6<0049>-5<0048>-8<0055>-9<0055>-9<004C>2<0051>-9<004A00030057>2<00520003004400030046>3<0052>-5<0051>-7<0056>-14<0057>-17<0044>-2<0051>2<00570003004C>3<005100030057004B>-7<004800030045>-11<0052>-11<0047>-9<005C00030052>3<004900030057004B>-7<004800030056>-10<0046>6<0055>-9<004C>2<0053>-3<0057>-17<000F0003005C>3<0052>-7<005800030050>-4<0058>-4<0056>-14<005700030053>-4<0055>-10<0048>-7<00C0>-9<005B0003004C>-3<00570003005A>-6<004C>-3<0057004B00030057004B>-7<00480003>]TJ
dollar sign $, just like any other variable. However, when creating the constant or variable 
for that matter by using the 
 cmdlet, when you specify the 
 argument, 
you do not use the dollar sign.
In the 
GetHardDiskDetails.ps1 script, you create a constant called 
$intDriveType
 and assign the 
value of 3 to it because the 
WIN32_LogicalDisk
 WMI class uses a value of 3 in the 
disktype
 property 
[<0057>-1<005200030047>-7<0048>-12<0056>-13<0046>4<0055>-12<004C0045>-13<0048000300440003004F>-7<0052>-13<0046>-14<0044>-4<004F000300C0>-11<005B>2<0048>-16<004700030047004C>-5<0056>-4<004E>-26<001100030025>-12<0048>-16<0046>-14<0044>-6<0058>-6<0056>-12<00480003005C>1<0052>-9<005800030044>-4<0055>-12<004800030051>-9<0052>-2<00570003004C00510057>-3<0048>-10<0055>-12<0048>-12<0056>-16<0057>-3<0048>-16<00470003004C005100030051>-9<0048>-10<0057>-35<005A>-2<0052>-7<0055>-12<004E00030047>1<0055>-12<004C>-12<0059>1<0048>-12<0056>-20<000F00030055>-12<0048>-10<0050>-9<0052>-1<0059>-5<0044>-4<0045>-8<004F>-7<004800030047>1<0055>-12<004C>-12<0059>1<0048>-12<0056>-20<000F00030052>-7<00550003>]TJ
RAM drives, you use the 
Where-Object
 to return only items that have a drive type of 3.
Quick check
Q.
How do you create a constant in a script?
You create a constant in a script by using 
 and specifying a value of 
 for 
the 
 argument.
Q.
How do you indicate that a variable will only hold integers?
To indicate that a variable will only contain integers, use 
 in front of the variable name 
when assigning a value to the variable.
In looking at the GetHardDiskDetails.ps1 script, the value of 
$intDriveType
 is never changed. It 
is assigned the value of 3 on the 
Set-Variable
 line. The 
$intDriveType
 constant is only used with the 
Where
[<000300C0>-2<004F>-6<0057>-3<0048>-10<00550003004F004C0051>-9<0048>-7<001100030037>-7<004B>-9<004800030059>-5<0044>-4<004F>-4<0058>-7<00480003005200490003>]TJ
$strComputer
, however, will change once for each computer name that 
[<004C>-5<005600030056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-7<0048>-16<00470003004C005100030057>-2<004B>-9<004800030044>-4<0055>-12<0055>-8<0044>2<005C0003>]TJ
$aryComputers
[<00110003002C>-1<005100030057>-2<004B>-2<004C>-5<005600030056>-13<0046>4<0055>-12<004C0053>-5<0057>-20<000F0003004C>-5<00570003005A>-9<004C004F>1<004F00030046>4<004B>-7<0044>-4<0051>-11<004A>-7<004800030057>-35<005A>-9<004C>-3<0046>-2<0048>-7<001100030037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030057>-2<004C0050>-9<004800030057>-2<004B>-4<0055>-12<0052>-10<0058>-7<004A>1<004B00030057>-2<004B>-9<00480003>]TJ
loop, it will be equal to 
loopback
, and the second time through the loop, it will be equal to 
localhost
However, if you added 250 different computer names, the effect would be the same27the value of 
$strComputer
 would change each time through the loop.
Using the 
While
 statement
In VBScript, you had the 
While...Wend
 loop. An example of using the 
While...Wend
 loop is the 
[<003A>-10<004B>-2<004C004F>-7<0048>-13<0035>-2<0048>-10<0044>-11<0047>-1<002F>-9<004C0051>-9<0048>12<003A>15<0048>-10<0051>-11<0047>-8<0011>30<0059>-12<0045>-8<005600030056>-13<0046>4<0055>-12<004C0053>-5<005700030057>-2<004B>-7<0044>-3<005700030049>-7<0052>-6<004F>1<004F>-7<0052>-3<005A>-12<0056>-19<001100030037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030057>-2<004B>-2<004C0051>-11<004A0003005C>1<0052>-10<005800030047>-5<00520003004C005100030057>-2<004B>-9<004800030056>-13<0046>4<0055>-12<004C0053>-5<00570003004C>-5<005600030046>4<0055>-12<0048>-10<0044>-3<0057>-3<004800030044>-4<00510003004C0051>-9<0056>-16<0057>-19<0044>-4<0051>-9<0046>-2<00480003>]TJ
of the 
FileSystemObject
 and store it in the 
objFSO
 variable. You then use the 
OpenTextFile
 method 
[<0057>-1<005200030052>-7<0053>-13<0048>-10<00510003004400030057>-3<0048>-12<0056>-16<0057000300C0>-2<004F>-7<0048>-9<000F00030044>-4<0051>-11<004700030056>-16<0057>-1<0052>-7<0055>-12<004800030057>-2<004B>-7<0044>-3<005700030052>-7<0045>-6<004D>-5<0048>-16<0046>-25<00570003004C005100030057>-2<004B>-9<00480003>]TJ
objFile
 variable. You then use the 
While...Not ...Wend
construction to read one line at a time from the text stream and display it on the screen. You continue 
to do this until you are at the end of the text stream object. A 
While...Wend
 loop continues to oper
ate as long as a condition is evaluated as 
true
. In this example, as long as you are not at the end of 
[<0057>-2<004B>-9<004800030056>-16<0057>-2<0055>-12<0048>-10<0044>-4<0050>-15<000F0003005C>1<0052>-9<00580003005A>-9<004C004F>1<004F000300460052>-7<00510057>-2<004C0051>-6<0058>-7<004800030057>-1<005200030055>-12<0048>-10<0044>-11<004700030057>-2<004B>-9<00480003004F004C0051>-9<004800030049>-12<0055>-12<0052>-7<005000030057>-2<004B>-9<004800030057>-3<0048>-6<005B>-37<0057000300C0>-2<004F>-7<0048>-7<001100030037>-7<004B>-9<00480003003A>-10<004B>-2<004C004F>-7<0048>-13<0035>-2<0048>-10<0044>-11<0047>-1<002F>-9<004C0051>-9<0048>12<003A>15<0048>-10<0051>-11<0047>-8<0011>30<0059>-12<0045>-8<005600030056>-13<0046>4<0055>-12<004C0053>-5<00570003004C>-5<00560003>]TJ
shown here: 
  
Constructing the 
While
 statement in PowerShell
As you probably have already guessed, you have the same kind of construction available to you in 
Windows PowerShell. The 
While
 statement in Windows PowerShell is used in the same way that the 
While...Wend 
statement is used in VBScript. In the 
DemoWhileLessThan.ps1 script that follows, you 
[<00C0>-2<0055>-26<0056>-16<00570003004C0051>-2<004C>-5<0057>-2<004C>-2<0044>-4<004F004C>-7<005D>-1<004800030057>-2<004B>-9<004800030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<00480003>]TJ
 to be equal to 0. You then use the 
while
 keyword to begin the 
while
 loop. 
In Windows PowerShell, you must include the condition that will be evaluated inside a set of paren
theses. For this example, you determine the value of the 
 variable with each pass through the loop. 
If the value of 
[<0003004C>-5<00560003004F>-7<0048>-12<0056>-14<005600030057>-2<004B>-7<0044>-4<005100030057>-2<004B>-9<004800030051>-6<0058>1<0050>-4<0045>-13<0048>-10<005500030018>-8<000F0003005C>1<0052>-9<00580003005A>-9<004C004F>1<004F00030053>-13<0048>-10<0055>-38<0049>-7<0052>-7<0055>-12<005000030057>-2<004B>-9<004800030044>-9<0046>-25<0057>-2<004C>-5<0052>-7<005100030057>-2<004B>-7<0044>-3<00570003004C>-5<005600030056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-7<0048>-16<00470003004C0051>-9<0056>-4<004C>-5<0047>-7<004800030057>-2<004B>-9<00480003>]TJ
braces curly brackets to delimit the script block. In VBScript, the condition that is evaluated is posi
tioned on the same line with the 
While
 statement, but no parentheses are required. Although this is 
convenient from a typing perspective, it actually makes the code a bit confusing to read. In Windows 
PowerShell, the statement is outside the parentheses and the condition is clearly delimited by the 
parentheses. In VBScript, the action that is performed is added between two words: 
While
 and 
Wend
In Windows PowerShell, there is no 
Wend
 statement, and the action to be performed is positioned 
[<004C0051>-9<0056>-3<004C>-5<0047>-7<00480003004400030053>-9<0044>-2<004C005500030052004900030045>-7<0055>-8<0044>-9<0046>-2<0048>-12<0056>-19<001100030024>-10<004F>-5<0057>-2<004B>-9<0052>-10<0058>-7<004A>1<004B00030056>-3<004B>-9<0052>-13<0046>4<004E>-14<004C0051>-11<004A00030044>-3<0057000300C0>-2<0055>-26<0056>-16<005700030057005200030058>-6<0056>-12<0048>-10<0055>-26<0056000300460052>-7<0050>-2<004C0051>-11<004A00030049>-12<0055>-12<0052>-7<00500003004400030039>-8<0025>-1<0036>-11<0046>4<0055>-12<004C0053>-5<005700030045>-9<0044>-9<0046>4<004E>9<004A>1<0055>-12<0052>-9<0058>1<0051>-11<0047>-9<000F00030057>-2<004B>-9<00480003>]TJ
braces are always used to contain code. This is what is called a 
script block
, and it is used everywhere. 
[<0024>-27<005600030056>-12<0052>-13<0052>-7<005100030044>-10<00560003005C>1<0052>-10<005800030044>-4<0055>-12<004800030058>-6<0056>-12<0048>-16<004700030057>-1<005200030056>-12<0048>-16<0048>-9<004C0051>-11<004A00030056>-12<0046>4<0055>-12<004C0053>-5<005700030045>-7<004F>-7<0052>-13<0046>4<004E>-31<00560003004B>-9<0048>-10<0055>-12<0048>-9<000F0003005C>1<0052>-10<00580003005A>-9<004C004F>1<004F000300C0>-2<0051>-11<004700030057>-2<004B>-9<0048>-10<00500003005A>-9<004C>-5<0057>-2<004B00030052>-2<0057>-2<004B>-9<0048>-10<00550003004F>-5<0044>-4<0051>-11<004A>-3<0058>-3<0044>-11<004A>-7<004800030056>-16<0057>-19<0044>-3<0057>-3<0048>]TJ
ments also. The good thing is that you do not have to look for items such as the keyword 
Wend
 or the 
keyword 
Loop
 of 
Do...Loop
 fame. 
Understanding expanding strings
In Windows PowerShell, there are two kinds of strings: literal strings and 
expanding strings. In the 
DemoWhileLessThan.ps1 script, you use the 
expanding string
[<000F00030056>-3<004C>-5<004A>1<0051>-2<004C>-5<00C0>-7<0048>-16<00470003005A>-9<004B>-9<0048>-10<00510003005C>1<0052>-10<005800030058>-6<0056>-12<004800030057>-2<004B>-9<004800030047>-5<0052>-10<0058>1<0045>-8<004F>-7<004800030054>-3<0058>-5<0052>]TJ
tation mark, 
 the literal string uses the single quotation mark, 
. You want to display the name of the 
variable, and you want to display the value that is contained in the variable. This is a perfect place to 
showcase the expanding string. In an expanding string, the value that is contained in a variable is dis
played to the screen when a line is evaluated. As an example, consider the following code. You assign 
the value 12 to the variable 
. You then put 
 inside a pair of double quotation marks, making an 
expanding string. When the line 
"$i
 is equal to 
$i"
 is evaluated, you obtain 2312 is equal to 12,24 which 
while true is barely illuminating. This is shown here: 
Understanding literal strings
What you probably want to do is display both the name of the variable and the value that is con
tained inside it. In VBScript, you would have to use concatenation. For this example to work, you have 
to use the literal string as shown here:
If you want to use the advantage of the expanding string, you have to suppress the expand
[<004C0051>-11<004A00030051>-7<0044>-3<0057>-8<0058>1<0055>-12<004800030052004900030057>-2<004B>-9<004800030048>-6<005B>-8<0053>-9<0044>-4<0051>-11<0047004C0051>-11<004A00030056>-16<0057>-2<0055>-12<004C0051>-11<004A00030049>-7<0052>-7<005500030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<00480003000B>]TJ
escape
 the variable. To do this, you use the 
escape character, which is the backtick or grave character. This is shown here:
In the DemoWhileLessThan.ps1 script, you use the expanding string to print the status message 
of the value of the 
 variable during each trip through the 
While
 loop. You suppress the expanding 
[<0051>-7<0044>-3<0057>-8<0058>1<0055>-12<004800030052004900030057>-2<004B>-9<004800030048>-6<005B>-8<0053>-9<0044>-4<0051>-11<0047004C0051>-11<004A00030056>-16<0057>-2<0055>-12<004C0051>-11<004A00030049>-7<0052>-7<005500030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<00570003>]TJ
 variable so you can see which variable you are talking 
about. As soon as you have done this, you increment the value of the 
 variable by one. To do this, 
you use the 
$i++
 syntax. This is identical to saying the following:
The advantage is that the 
++ syntax requires less typing. The 
DemoWhileLessThan.ps1 script is 
shown here:
DemoWhileLess
han.ps1
When you run the DemoWhileLessThan.ps1 script, you receive the following output:
  
 practical example of using the 
While
 statement
Now that you know how to use the 
While
 loop, let22s examine the 
[<003A>-10<004B>-2<004C004F>-7<0048>-13<0035>-2<0048>-10<0044>-11<0047>-1<002F>-9<004C0051>-9<0048>-7<0011>-8<0053>-8<0056>8<001400030056>-13<0046>4<0055>-12<004C0053>-5<0057>-20<001100030037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<00570003>]TJ
thing you do is initialize the 
 variable and set it equal to 0. You then use the 
Get-Content
 cmdlet to 
[<0055>-12<0048>-10<0044>-11<004700030057>-2<004B>-9<0048000300460052>-7<0051>-1<0057>-3<0048>-10<00510057>-19<005600030052004900030057>-3<0048>-12<0056>-16<0057>-30<00C0>-2<004F>-7<0048>-7<0011>12<0057>-34<005B>-37<005700030044>-4<0051>-11<004700030057005200030056>-16<0057>-1<0052>-7<0055>-12<004800030057>-2<004B>-9<0048000300460052>-7<00510057>-3<0048>-10<0051>-1<0057>-19<00560003004C00510057>-1<005200030057>-2<004B>-9<00480003>]TJ
[<0007>5<00C0>-7<004F>-3<0048>-14<0026>2<0052>-7<005100570048>-7<00510057>-16<0056>]TJ
 variable. 
Use the 
While
[<00030056>-16<0057>-19<0044>-3<0057>-3<0048>-10<0050>-9<0048>-10<005100570003005700520003004F>-7<0052>-13<0052>-7<005300030057>-2<004B>-4<0055>-12<0052>-9<0058>-7<004A>1<004B00030057>-2<004B>-9<0048000300460052>-7<0051>-1<0057>-3<0048>-10<0051>-1<0057>-19<005600030052004900030057>-2<004B>-9<004800030057>-3<0048>-6<005B>-37<0057000300C0>-2<004F>-7<0048>-7<00110003003C>49<0052>-9<005800030047>-5<005200030057>-2<004B>-2<004C>-5<005600030044>-10<00560003004F>-7<0052>-7<0051>-11<004A00030044>-10<005600030057>-2<004B>-9<00480003>]TJ
value of the 
[<00030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<00480003004C>-5<00560003004F>-7<0048>-12<0056>-14<005600030057>-2<004B>-7<0044>-4<005100030052>-7<005500030048>-16<0054>-3<0058>-3<0044>-4<004F00030057>-1<005200030057>-2<004B>-9<004800030051>-6<0058>1<0050>-4<0045>-13<0048>-10<00550003005200490003004F004C0051>-9<0048>-12<00560003004C005100030057>-2<004B>-9<004800030057>-3<0048>-6<005B>-37<0057000300C0>-2<004F>-7<0048>-7<001100030037>-7<004B>-9<004800030051>-6<0058>1<0050>-4<0045>-13<0048>-10<00550003005200490003004F004C0051>-9<0048>-12<00560003>]TJ
[<004C005100030057>-2<004B>-9<004800030057>-3<0048>-6<005B>-37<0057000300C0>-2<004F>-7<00480003004C>-5<005600030055>-12<0048>-10<0053>-7<0055>-12<0048>-12<0056>-12<0048>-10<00510057>-3<0048>-16<004700030045>-2<005C00030057>-2<004B>-9<00480003>]TJ
length
 property. Inside the script block, you treat the contents of 
the 
[<0007>5<00C0>-7<004F>-3<0048>-14<0026>2<0052>-7<005100570048>-7<00510057>-16<0056>]TJ
 variable like it is an array which it is, and you use the 
 variable to index into the 
array to print the value of each line in the 
[<0007>5<00C0>-7<004F>-3<0048>-14<0026>2<0052>-7<005100570048>-7<00510057>-16<0056>]TJ
 variable. You then increment the value of the 
 variable by one. The WhileReadLine.ps1 script is shown here:
While
eadLine.ps1
Using special features of Windows PowerShell
[<002C00490003005C>1<0052>-9<005800030044>-4<0055>-12<004800030057>-2<004B>-2<004C0051>-4<004E>-14<004C0051>-11<004A00030057>-2<004B>-9<00480003003A>15<0055>-12<004C>-5<0057>-3<0048>-13<0035>-2<0048>-10<0044>-11<0047>-1<002F>-9<004C0051>-9<0048>-7<0011>-8<0053>-8<0056>8<001400030056>-13<0046>4<0055>-12<004C0053>-5<00570003004C>-5<00560003004400030045>-6<004C>-5<005700030047004C>-3<0049>-41<00C0>-5<0046>-2<0058>1<004F>-6<0057>-20<000F00030051>-9<0052>-2<0057>-3<004800030057>-2<004B>-7<0044>-3<00570003004C>-5<00570003004C>-5<005600030051>-9<0052>-2<005700030055>-12<0048>-10<0044>-4<004F>1<004F>-12<005C00030044>-4<0051>4<005C00030050>-9<0052>-7<0055>-12<00480003>]TJ
[<0047004C>-3<0049>-41<00C0>-5<0046>-2<0058>1<004F>-6<005700030057>-2<004B>-7<0044>-4<005100030057>-2<004B>-9<004800030039>-8<0025>-1<0036>-11<0046>4<0055>-12<004C0053>-5<005700030059>1<0048>-10<0055>-26<0056>-3<004C>-5<0052>-7<0051>-14<001100030037>-7<004B>-9<004800030047004C>-3<0049>-39<0049>-7<0048>-10<0055>-12<0048>-10<0051>-9<0046>-2<00480003004C>-5<00560003005C>1<0052>-10<005800030055>-12<0048>-12<0056>-12<0052>-7<0055>-41<0057>-3<0048>-16<004700030057>-1<005200030058>-6<0056>-4<004C0051>-11<004A00030044>-4<0055>-12<0055>-8<0044>2<005C>-12<005600030057>-1<00520003005A>-2<0052>-7<0055>-12<004E0003005A>-9<004C>-5<0057>-2<004B00030057>-2<004B>-9<00480003>]TJ
content you received from the 
Get-Content
 cmdlet. The VBScript version uses a 
FileSystemObject
 and 
TextStreamObject
 to work with the data. In reality, you would not have to use a script exactly like the 
[<003A>-10<004B>-2<004C004F>-7<0048>-13<0035>-2<0048>-10<0044>-11<0047>-1<002F>-9<004C0051>-9<0048>-7<0011>-8<0053>-8<0056>8<001400030056>-13<0046>4<0055>-12<004C0053>-5<005700030057005200030055>-12<0048>-10<0044>-11<004700030057>-2<004B>-9<0048000300460052>-7<0051>-1<0057>-3<0048>-10<0051>-1<0057>-19<005600030052004900030057>-2<004B>-9<004800030057>-3<0048>-6<005B>-37<0057000300C0>-2<004F>-7<0048>-7<001100030037>-7<004B>-2<004C>-5<00560003004C>-5<005600030045>-13<0048>-16<0046>-14<0044>-6<0058>-6<0056>-12<004800030057>-2<004B>-9<00480003>]TJ
Get-Content
 cmdlet 
does this for you automatically. All you really have to do to display the contents of TestFile.txt is use 
Get-Content
. This command is shown here:
Because the results of the command are not stored in a variable, the contents are automatically 
emitted to the screen. You can further shorten the 
Get-Content
 command by using the 
 alias and 
by omitting the name of the 
-path
 parameter which is the default parameter. When you do this, you 
create a command that resembles the following:
[<0037>55<0052000300C0>-2<0051>-11<004700030057>-2<004B>-9<004800030044>1<0059>-5<0044>-2<004C004F>-5<0044>-4<0045>-8<004F>-7<004800030044>-4<004F004C>-2<0044>-10<0056>-12<0048>-12<005600030049>-7<0052>-7<005500030057>-2<004B>-9<00480003>]TJ
Get-Content
 cmdlet, you use the 
Get-Alias
 cmdlet with the 
[<0010>-14<0047>5<0048>-12<00C0>-1<0051>4<004C0057>4<004C>2<00520051>]TJ
 parameter. The 
Get-Alias
[<00030046>4<0050>-11<0047>1<004F>-7<0048>-10<005700030056>-12<0048>-10<0044>-4<0055>-10<0046>4<004B>-9<0048>-12<005600030049>-7<0052>-7<005500030044>-4<004F004C>-2<0044>-10<0056>-12<0048>-12<005600030057>-2<004B>-7<0044>-3<00570003004B>-7<0044>1<0059>1<00480003004400030047>-7<0048>-9<00C0>-2<0051>-2<004C>-5<0057>-2<004C>-5<0052>-7<005100030057>-2<004B>-7<0044>-3<005700030050>-7<0044>-3<0057>-1<0046>4<004B>-9<0048>-12<00560003>]TJ
Get-Content
. Here is the command, including the output you receive:
This section showed that you can use the 
While
 statement in Windows PowerShell to perform 
looping. It also showed that activities in VBScript that require looping do not always require you to 
use the looping behavior in Windows PowerShell because some cmdlets automatically display infor
[<0050>-7<0044>-3<0057>-2<004C>-5<0052>-7<0051>-14<001100030029>-2<004C0051>-7<0044>-4<004F>1<004F>-12<005C>34<000F0003004C>-5<005700030047004C>-5<0056>-13<0046>-2<0058>-6<0056>-14<0056>-12<0048>-16<00470003004B>-9<0052>-3<005A00030057>-1<0052000300C0>-2<0051>-11<004700030044>-4<004F004C>-2<0044>-10<0056>-12<0048>-12<005600030049>-7<0052>-7<005500030046>4<0050>-11<0047>1<004F>-7<0048>-10<0057>-19<00560003005C>1<0052>-9<005800030049>-12<0055>-12<0048>-16<0054>-3<0058>-7<0048>-10<00510057>-2<004F>-12<005C00030058>-6<0056>-12<0048>-7<0011>]TJ
Using the 
While
 statement
The 
Do While...Loop
 statement was often used when working with VBScript. This section covers some 
of the advantages of the similar 
Do...While
 statement in Windows PowerShell. 
The DemoDoWhile.vbs script illustrates using the 
Do...While
[<00030056>-16<0057>-19<0044>-3<0057>-3<0048>-10<0050>-9<0048>-10<005100570003004C005100030039>-8<0025>-2<0036>-11<0046>4<0055>-12<004C0053>-5<0057>-20<001100030037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030057>-2<004B>-2<004C0051>-11<004A0003>]TJ
you do is assign a value of 0 to the variable 
. You then create an array. To do this, you use the 
Array
function, and assign the numbers 1 through 5 to the variable 
ary
. You then use the 
Do While...Loop
construction to walk through the array of numbers. As long as the value of the variable 
 is less than 
the number 5, you display the value of the variable 
. You then increment the value of the variable and 
loop back around. The 
DemoDoWhile.vbs script is shown here:
DemoDoWhile.vbs
When you run the DemoDoWhile.vbs script in Cscript at the command prompt, you see the num
bers 1 through 5 displayed at the command prompt. 
You can achieve the same thing by using Windows PowerShell. The 
DemoDoWhile.ps1 and 
DemoDoWhile.vbs scripts are essentially the same. The differences between the two scripts are due to 
syntax differences between Windows PowerShell and VBScript. With the Windows PowerShell script, 
[<0057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030057>-2<004B>-2<004C0051>-11<004A0003005C>1<0052>-9<005800030047>-5<00520003004C>-5<005600030044>-11<0056>-14<0056>-4<004C>-5<004A>1<00510003004400030059>-5<0044>-4<004F>-4<0058>-7<00480003005200490003001400030057>-1<005200030057>-2<004B>-9<004800030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<00480003>]TJ
. You then create an array of the numbers 
1 through 5 and store that array in the 
$ary
 variable. You use a shortcut in Windows PowerShell to 
make this a bit easier. Actually, arrays in Windows PowerShell are fairly easy anyway. If you want to 
create an array, you just have to assign multiple pieces of data to the variable. To do this, you separate 
each piece of data by a comma. This is shown here:
  
Using the range operator
If you needed to create an array with 32,000 numbers in it, it would be impractical to type each 
number and separate it with a comma. In VBScript, you would have to use a 
For...Next
 loop to add the 
numbers to the array. You can write a loop in Windows PowerShell as well, but it is easier to use the 
range operator. To do this, you use a variable to hold the array of numbers that is created, and type 
the beginning and the ending number separated by two periods. This is shown here:
Unfortunately, the range operator does not work for letters. But there is nothing to prevent you 
from creating a range of numbers that represent the ASCII value of each letter, and then casting it to 
a string later. 
Operating over an array
You are now ready for the 
Do...While
 loop in Windows PowerShell. You use the 
 statement and 
[<0052>-7<0053>-13<0048>-10<00510003004400030056>-12<0048>-10<005700030052>1<004900030045>-7<0055>-8<0044>-9<0046>-2<0048>-12<00560003000B>27<0046>-2<0058>1<0055>-12<004F>-12<005C00030045>-7<0055>-8<0044>-9<0046>4<004E>12<0048>-10<0057>-19<0056>28<000C>14<00110003002C>-1<0051>-9<0056>-3<004C>-5<0047>-7<004800030057>-2<004B>-9<0048>-12<0056>-12<004800030046>-2<0058>1<0055>-12<004F>-12<005C00030045>-7<0055>-8<0044>-9<0046>4<004E>12<0048>-10<0057>-19<00560003005C>1<0052>-9<00580003004B>-7<0044>1<0059>1<00480003004400030056>-12<0046>4<0055>-12<004C0053>-5<005700030045>-7<004F>-7<0052>-13<0046>4<004E>-26<001100030037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030057>-2<004B>-2<004C0051>-11<004A0003>]TJ
[<005C>1<0052>-9<005800030047>-5<00520003004C>-5<00560003004C0051>-11<0047>-7<0048>-6<005B0003004C00510057>-1<005200030057>-2<004B>-9<004800030044>-4<0055>-12<0055>-8<0044>2<005C>35<001100030032>-11<00510003005C>1<0052>-9<0058>1<0055000300C0>-2<0055>-26<0056>-16<005700030053>-9<0044>-10<0056>-14<005600030057>-2<004B>-4<0055>-12<0052>-9<0058>-7<004A>1<004B00030057>-2<004B>-9<004800030044>-4<0055>-12<0055>-8<0044>2<005C>34<000F00030057>-2<004B>-9<004800030059>-5<0044>-4<004F>-4<0058>-7<00480003005200490003>]TJ
 is equal to 0. You 
[<0057>-2<004B>-9<0048>-10<0055>-12<0048>-8<0049>-7<0052>-7<0055>-12<004800030047004C>-5<0056>-4<0053>-8<004F>-5<0044>2<005C00030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030048>-11<004F>-7<0048>-10<0050>-9<0048>-10<005100570003004C005100030057>-2<004B>-9<00480003>]TJ
$ary
 array. You next increment the value of the 
 variable 
by one. You are now done with the script block, so you look at the 
While
 statement. The condition 
you are examining is the value of the 
 variable. As long as it is less than 5, you will continue to loop 
around. As soon as the value of 
 is no longer less than 5, you stop looping. This is shown here:
DemoDoWhile.ps1
One thing to be aware of, because it can be a bit confusing, is that you are evaluating the value 
. You initialized 
[<00030044>-3<005700030013>-8<001100030037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030051>-6<0058>1<0050>-4<0045>-13<0048>-10<00550003004C00510003005C>1<0052>-10<0058>1<005500030044>-4<0055>-12<0055>-8<0044>2<005C0003005A>-2<0044>-10<005600030014>-10<001100030025>-9<0058>-5<005700030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030048>-11<004F>-7<0048>-10<0050>-9<0048>-10<0051005700030051>-6<0058>1<0050>-4<0045>-13<0048>-10<00550003004C005100030057>-2<004B>-9<00480003>]TJ
array is always 0 in Windows PowerShell unlike VBScript, in which arrays can start with 0 or 1. The 
While
 statement evaluates the value contained in the 
 variable, not the value that is contained in the 
array. That is why you see the number 5 displayed. 
Casting to 
SCII values
You can change the DemoDoWhile.ps1 script to display uppercase letters from 
 to 
. To do this, you 
[<00C0>-2<0055>-26<0056>-16<00570003004C0051>-2<004C>-5<0057>-2<004C>-2<0044>-4<004F004C>-7<005D>-1<004800030057>-2<004B>-9<00480003>]TJ
 variable and set it to 0. You then create a range of numbers from 65 through 91. 
These are the ASCII values for the capital letter 
 through the capital letter 
. Then you begin the 
 statement and open your script block. To this point, the script is identical to the previous one. To 
obtain letters from numbers, cast the integer to a char. To do this, you use the 
char
 data type and put 
it inside square brackets. You then use this to convert an integer to an uppercase letter. The code to 
display the uppercase letter 
 from the ASCII value 66 would resemble the following:
Because you know that the 
$caps
 variable contains an array of numbers from 65 through 91, and 
that the variable 
 will hold numbers from 0 through 26, you index into the 
$caps
 array, cast the inte
ger to a char, and display the results, as follows:
You then increment the value of 
 by one, close the script block, and enter the 
While
 statement, 
where you check the value of 
 to make sure it is less than 26. As long as 
 is less than 26, you con
tinue to loop around. The complete 
DisplayCapitalLetters.ps1 script is shown here:
DisplayCapitalLetters.ps1
This section explored the 
While
 construction from Windows PowerShell by comparing it to 
the similar construction from VBScript. In addition, the use of the range operator and casting was also 
examined.
Using the 
Until
 statement
Looping technology is something that is essential to master. It occurs everywhere, and should be a 
tool that you can use without thought. When you are confronted with a collection of items, an array, 
or another bundle of items, you have to know how to easily walk through the mess without resorting 
to research, panic, or hours searching the Internet. This section examines the 
Do...Until
 construction. 
Most of the scripts that do looping at the 
Microsoft Technet Script Center seem to use 
Do...While.
 The 
scripts that use 
Do...Until...Loop
[<00030044>-4<0055>-12<004800030057>-38<005C>-12<0053>-6<004C>-3<0046>-14<0044>-4<004F>1<004F>-12<005C00030058>-6<0056>-12<0048>-16<004700030057>-1<005200030055>-12<0048>-10<0044>-11<004700030057>-2<004B>-4<0055>-12<0052>-9<0058>-7<004A>1<004B0003004400030057>-3<0048>-6<005B>-37<0057000300C0>-2<004F>-7<00480003000B>27<0047>-5<005200030056>-12<0052>-7<0050>-9<0048>-10<0057>-2<004B>-2<004C0051>-11<004A00030058>1<00510057>-2<004C004F00030057>-2<004B>-9<00480003>]TJ
end of the stream or to read through an 
ActiveX Data Object ADO recordset do something until 
[<0057>-2<004B>-9<004800030048>-10<0051>-11<004700030052004900030057>-2<004B>-9<0048000300C0>-2<004F>-7<0048>20<000C>14<001100030024>-27<00560003005C>1<0052>-10<00580003005A>-9<004C004F>1<004F00030056>-12<0048>-16<00480003004B>-9<0048>-10<0055>-12<0048>-9<000F00030057>-2<004B>-9<0048>-12<0056>-12<004800030044>-4<0055>-12<004800030051>-9<0052>-2<005700030055>-12<0048>-16<0054>-3<0058004C0055>-12<0048>-16<0047000300460052>-13<0047004C0051>-11<004A000300460052>-7<0051>4<0059>1<0048>-10<00510057>-2<004C>-5<0052>-7<0051>-9<005600030044>-4<0051>-11<004700030044>-4<0055>-12<004800030051>-9<0052>-2<005700030050>-9<0048>-10<0044>-4<005100570003>]TJ
to be limitations. You can frequently perform the same thing by using any of the different looping 
constructions. 
  
Comparing the PowerShell 
Do...Until
 statement with VBScript
[<0025>-12<0048>-8<0049>-7<0052>-7<0055>-12<00480003005C>1<0052>-9<00580003004A>-7<0048>-10<0057000300570052>-13<005200030049>-9<0044>-4<00550003004C00510057>-1<005200030057>-2<004B>-2<004C>-5<005600030057>-1<0052>-7<0053>-6<004C>-3<0046>-15<000F00030046>1<0052>-7<0051>-9<0056>-4<004C>-5<0047>-7<0048>-10<005500030057>-2<004B>-9<004800030027>-12<0048>-10<0050>-9<0052>-9<0027>-12<0052>-7<0038>-2<00510057>-2<004C004F>-9<0011>30<0059>-12<0045>-8<005600030056>-13<0046>4<0055>-12<004C0053>-5<0057>-20<00110003002C>-1<005100030057>-2<004B>-2<004C>-5<005600030056>-13<0046>4<0055>-12<004C0053>-5<0057>-20<000F0003005C>1<0052>-9<0058000300C0>-2<0055>-26<0056>-16<00570003>]TJ
assign a value of 0 to the variable 
. You then create an array with the numbers 1 through 5 contained 
in it. You use the 
Do...Until 
construction to walk through the array until the value of the variable 
is equal to 5. The script will continue to run until the value of the variable 
 is equal to 5. This is what 
Do...Until
 construction does27it runs until a condition is met. The difference between 
Do...Until
and 
Do...While
, examined in the previous section, is that 
Do...While
 runs while a condition is true and 
Do...Until
 runs until a condition becomes true. In VBScript, this means that 
Do...Until 
will always run at 
least once, because the condition is evaluated at the bottom of the loop, whereas 
Do...While 
is evalu
ated at the top of the loop, and therefore will never run if the condition is not true. This is not true for 
Windows PowerShell, however, as will be shown later in this section. 
[<002C>-1<0051>-9<0056>-4<004C>-5<0047>-7<004800030057>-2<004B>-9<00480003004F>-7<0052>-13<0052>-7<0053>3<000F0003005C>1<0052>-9<0058000300C0>-2<0055>-26<0056>-16<005700030047004C>-5<0056>-4<0053>-8<004F>-5<0044>2<005C00030057>-2<004B>-9<004800030059>-5<0044>-4<004F>-4<0058>-7<004800030057>-2<004B>-7<0044>-3<00570003004C>-5<0056000300460052>-7<00510057>-19<0044>-2<004C0051>-9<0048>-16<00470003004C005100030057>-2<004B>-9<004800030044>-4<0055>-12<0055>-8<0044>2<005C00030048>-11<004F>-7<0048>-10<0050>-9<0048>-10<005100570003001300030052>-7<005100030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<00570003>]TJ
[<0053>-9<0044>-10<0056>-14<005600030057>-2<004B>-4<0055>-12<0052>-9<0058>-7<004A>1<004B00030057>-2<004B>-9<00480003004F>-7<0052>-13<0052>-7<0053>1<001100030037>-7<004B>-2<004C>-5<00560003004C>-5<005600030045>-13<0048>-16<0046>-14<0044>-6<0058>-6<0056>-12<00480003005C>1<0052>-9<0058000300C0>-2<0055>-26<0056>-16<005700030056>-12<0048>-10<005700030057>-2<004B>-9<004800030059>-5<0044>-4<004F>-4<0058>-7<004800030052004900030057>-2<004B>-9<004800030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<00480003>]TJ
 equal to 0. You next 
increment the value of the variable 
 by one and loop around until the value of 
 is equal to 5. The 
DemoDoUntil.vbs script is shown here:
DemoDoUntil.vbs
Using the Windows PowerShell 
 statement
[<003C>49<0052>-9<005800030046>-14<0044>-4<00510003005A>-9<0055>-12<004C>-5<0057>-3<004800030057>-2<004B>-9<004800030056>-17<0044>-4<0050>-9<004800030056>-13<0046>4<0055>-12<004C0053>-5<005700030058>-6<0056>-3<004C0051>-11<004A0003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F>-9<00110003002C>-1<005100030057>-2<004B>-9<004800030027>-12<0048>-10<0050>-9<0052>-9<0027>-12<0052>-7<0038>-2<00510057>-2<004C004F>-9<0011>-8<0053>-8<0056>8<001400030056>-13<0046>4<0055>-12<004C0053>-5<0057>-20<000F0003005C>1<0052>-9<0058000300C0>-2<0055>-26<0056>-16<00570003>]TJ
set the value of the 
 variable to 0. You then create an array with the numbers 1 through 5 in it. You 
store that array in the 
$ary
 variable. You then arrive at the 
 do-until construction. After the 
keyword, you open a set of curly brackets. Inside the curly brackets, you use the 
 variable to index 
into the 
$ary
[<00030044>-4<0055>-12<0055>-8<0044>2<005C00030044>-4<0051>-11<004700030057005200030055>-12<0048>-10<0057>-2<0055>-12<004C>-5<0048>-8<0059>1<004800030057>-2<004B>-9<004800030059>-5<0044>-4<004F>-4<0058>-7<004800030057>-2<004B>-7<0044>-3<00570003004C>-5<005600030056>-16<0057>-1<0052>-7<0055>-12<0048>-16<00470003004C005100030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030048>-11<004F>-7<0048>-10<0050>-9<0048>-10<005100570003000B>27<0048>-11<004F>-7<0048>-10<0050>-9<0048>-10<0051005700030013>3<000C00030052>1<004900030057>-2<004B>-9<004800030044>-4<0055>-12<0055>-8<0044>2<005C>35<00110003>]TJ
You then increment the value of the 
 variable by one. You continue to loop through the elements 
in the array until the value of the 
 variable is equal to 5. At that time, you end the script. This script 
resembles the DemoDoWhile.ps1 script examined in the previous section. 
DemoDoUntil.ps1
he 
Do...While 
and 
Do...Until
 statements always run once
In VBScript, if a 
Do...While...Loop
 condition was never true, the code inside the loop would never 
execute. In Windows PowerShell, the 
Do...While
 and 
Do...Until
 constructions always run at least once. 
This can be unexpected behavior, and is something that you should focus on. This is illustrated in 
the DoWhileAlwaysRuns.ps1 script. The script assigns a value of 1 to the variable 
. Inside the script 
block for the 
Do...While
 loop, you print out a message that states you are inside the 
 loop. The 
loop condition is 23while the variable 
 is equal to 5.24 As you can see, the value of the 
 variable is 1. 
Therefore, the value of the 
 variable will never reach 5, because you are not incrementing it. The 
DoWhileAlwaysRuns.ps1 script is shown here:
DoWhile
lways
uns.ps1
When you run the script, the text 23inside the do loop24 is printed out once. 
What about a similar script that uses the 
Do...Until
 construction? The 
EndlessDoUntil.ps1 script 
is the same as the DoWhileAlwaysRuns.ps1 script, except for one small detail. Instead of using 
Do...While
, you are using 
Do...Until
. The rest of the script is the same. The value of the 
 variable is 
equal to 1, and in the script block for the 
Do...Until
 loop, you print the string 
inside the do loop
. This 
line of code should execute once for each 
 loop until the value of 
 is equal to 5. Because the 
value of 
 is never increased to 5, the script will continue to run. The EndlessDoUntil.ps1 script is 
shown here:
EndlessDoUntil.ps1
Before you run the EndlessDoUntil.ps1 script, you should know how to interrupt the running of 
the script. You hold down the Ctrl key and press C Ctrl+C. This is the same keystroke sequence that 
would break a runaway VBScript that was run in Cscript. 
he 
While
 statement is used to prevent unwanted execution
If you have a situation where the script block must not execute if the condition is not true, you 
should use the 
While
 statement. The use of the 
While
 statement was examined in an earlier section. 
Again, you have the same kind of script. You assign the value of 0 to the variable 
, and instead 
of using a 
Do... 
kind of construction, you use the 
While
 statement. The condition you are looking 
  
at is the same condition you used for the other scripts do something 
while
 the value of 
 is equal 
to 5. Inside the script block, you display a string that states you are inside the 
While
 loop. The 
WhileDoesNotRun.ps1 script is shown here:
WhileDoes
un.ps1
It is perhaps a bit anticlimactic, but go ahead and run the WhileDoesNotRun.ps1 script. There 
should be no output displayed to the console. 
The 
For
 statement
In VBScript, a 
For...Next
 loop was somewhat easy to create. An example of a simple 
For...Next
 loop is 
shown in 
DemoForLoop.vbs. You use the 
For
[<0003004E>12<0048>-7<005C>-45<005A>-2<0052>-7<0055>-12<0047>-9<000F00030047>-6<0048>-9<00C0>-2<0051>-9<00480003004400030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<004800030057>-1<00520003004E>12<0048>-16<0048>-10<005300030057>-2<0055>-8<0044>-9<0046>4<004E00030052004900030057>-2<004B>-9<0048000300460052>-9<0058>1<00510057>-20<000F0003>]TJ
[<004C0051>-11<0047004C>-3<0046>-15<0044>-3<0057>-3<00480003004B>-9<0052>-3<005A00030049>-9<0044>-4<00550003005C>1<0052>-9<00580003005A>-9<004C004F>1<004F0003004A>-5<0052000F00030047>-6<0048>-9<00C0>-2<0051>-9<00480003005C>1<0052>-9<0058>1<005500030044>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051>-14<000F00030044>-3<0051>-11<004700030048>-10<0051>-9<0056>-6<0058>1<0055>-12<004800030057>-2<004B>-7<0044>-3<00570003005C>1<0052>-10<005800030056>-3<0053>-13<0048>-16<0046>4<004C>-3<0049>-48<005C00030057>-2<004B>-9<00480003>]TJ
Next
 keyword. That 
is about all there is to it. The DemoForLoop.vbs is shown here:
DemoForLoop.vbs
Using the 
For
 statement 
You can achieve the same thing in Windows PowerShell. The structure of the 
For
 loop in Windows 
PowerShell resembles the structure for VBScript. They both begin with the keyword 
For
, they both 
initialize the variable, and they both specify how far the loop will progress. One thing that is differ
ent is that a 
For...Next
 loop in VBScript automatically increments the counter variable. In Windows 
PowerShell, the variable is not automatically incremented; instead, you add 
++ to increment the 
variable by one. Inside the script block curly brackets, you display the value of the 
 variable. The 
DemoForLoop.ps1 script is shown here:
DemoForLoop.ps1
The Windows PowerShell 
For
[<00030056>-16<0057>-19<0044>-3<0057>-3<0048>-10<0050>-9<0048>-10<005100570003004C>-5<005600030059>1<0048>-10<0055>-47<005C000300C1>-10<0048>-6<005B>-8<004C0045>-8<004F>-7<0048>-9<000F00030044>-4<0051>-11<00470003005C>1<0052>-10<005800030046>-14<0044>-4<00510003004F>-7<0048>-10<0044>1<0059>1<004800030052>-7<0051>-9<004800030052>-7<005500030050>-9<0052>-7<0055>-12<004800030048>-11<004F>-7<0048>-10<0050>-9<0048>-10<0051>-1<0057>-19<00560003>]TJ
of it out. In the 
[<0027>-12<0048>-10<0050>-9<0052>-9<0029>-3<0052>-7<0055>-19<003A>-16<004C>-5<0057>-2<004B>-9<0052>-9<0058>-5<0057>-4<002C>-1<0051>-2<004C>-5<0057>-18<0032>-11<0055>-8<0035>-2<0048>-10<0053>-13<0048>-10<0044>-3<0057>-20<0011>-8<0053>-8<0056>8<001400030056>-13<0046>4<0055>-12<004C0053>-5<0057>-20<000F0003005C>1<0052>-9<005800030048>-6<005B>5<0046>4<004F>-4<0058>-7<0047>-7<004800030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030044>-4<0051>-11<004700030057>-2<004B>-9<00480003004F>-5<0044>-10<0056>-16<005700030056>-12<0048>-16<0046>-25<0057>-2<004C>-5<0052>-7<0051>-9<00560003005200490003>]TJ
the 
For
 statement. You set the 
[<00030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<004800030048>-16<0054>-3<0058>-3<0044>-4<004F00030057>-1<00520003001300030052>-7<005100030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<00570003004F004C0051>-9<004800030052004900030057>-2<004B>-9<004800030056>-13<0046>4<0055>-12<004C0053>-5<0057>-20<00110003003C>49<0052>-9<005800030051>-9<0048>-6<005B>-37<005700030046>1<0052>-7<0050>-9<004800030057>-1<00520003>]TJ
the 
For
 statement. In the DemoForLoop.ps1 script, the 
$i = 0
 was moved from inside the 
For
 state
[<0050>-9<0048>-10<0051005700030057005200030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<00570003004F004C0051>-9<004800030052004900030057>-2<004B>-9<004800030056>-13<0046>4<0055>-12<004C0053>-5<0057>-20<001100030037>-7<004B>-9<004800030056>-12<0048>-10<0050>-2<004C>-3<00460052>-6<004F>-7<0052>-7<00510003004C>-5<005600030056>-16<0057>-2<004C004F>1<004F00030055>-12<0048>-16<0054>-3<0058004C0055>-12<0048>-16<004700030045>-13<0048>-16<0046>-14<0044>-6<0058>-6<0056>-12<00480003004C>-6<00570003004C>-5<005600030058>-6<0056>-12<0048>-16<004700030057>-1<005200030056>-12<0048>-10<0053>-9<0044>-4<0055>-8<0044>-3<0057>-3<004800030057>-2<004B>-9<00480003>]TJ
three sections of the statement. The condition portion, 
-le 5
, is the same as in the previous script. 
The repeat section, 
 ++, is not used. 
In the script section of the 
For
 statement, you display the value of the 
 variable, and you also 
increment the value of 
 by one. There are two kinds of Windows PowerShell strings: expanding and 
literal. These two types of strings were examined earlier in this chapter. The DemoForLoop.ps1 script 
demonstrates an example of a literal string27what is entered is what is displayed. This is shown here: 
In the
 DemoForWithoutInitOrRepeat.ps1 script is an example of an expanding string. The value 
of the variable is displayed27not the variable name itself. To suppress the expanding nature of the 
expanding string, 
escape the variable by using the backtick character. When you use the expanding 
string in this manner, it enables you to avoid concatenating the string and the variable, as you did in 
the 
DemoForLoop.ps1 script. This is shown here: 
The value of 
 must be incremented somewhere. Because it was not incremented in the repeat 
section of the 
For
 statement, you have to be able to increment it inside the script block. The 
DemoForWithoutInitOrRepeat.ps1 script is shown here:
DemoForWithoutInitOr
epeat.ps1
When you run the DemoForWithoutInitOrRepeat.ps1 script, the output that is displayed resembles 
the output produced by DemoForLoop.ps1. You would never be able to tell it was missing two-thirds 
of the parameters.
You can make your 
For
[<00030056>-16<0057>-19<0044>-3<0057>-3<0048>-10<0050>-9<0048>-10<005100570003004C00510057>-1<005200030044>-4<00510003004C0051>-1<00C0>-2<0051>-2<004C>-5<0057>-3<00480003004F>-7<0052>-13<0052>-7<005300030045>-2<005C00030052>-7<0050>-2<004C>-5<0057>-31<0057>-2<004C0051>-11<004A00030044>-4<004F>1<004F00030057>-2<004B>-4<0055>-12<0048>-16<004800030056>-12<0048>-16<0046>-25<0057>-2<004C>-5<0052>-7<0051>-9<005600030052004900030057>-2<004B>-9<00480003>]TJ
For
statement. You must leave the semicolons as position holders. When you omit the three parts of the 
For
 statement, it will resemble the following:
While you can create an endless loop with the 
ForEndlessLoop.ps1 script, you do not have to do 
this if this is not your desire. You could use an 
 statement to evaluate a condition and take action 
when the condition is met. 
 statements will be covered in the section 23The 
 statement24 later in this 
chapter. In the ForEndlessLoop.ps1 script, you display the value of the 
 variable and increment it by 
one. The semicolon is used to represent a new line. You could therefore write the 
For
 statement on 
three lines if you wanted to. This would be useful if you had a very complex 
For
 statement, as it would 
  
make the code easier to read. The script block for the ForEndlessLoop.ps1 script could be written on 
different lines and exclude the semicolon. This is shown here:
When you run the ForEndlessLoop.ps1 script, you are greeted with a long line of numbers. To 
break out of the endless loop, press Ctrl+C inside the Windows PowerShell prompt. 
You can see that working with Windows PowerShell is all about choices: how you want to work and 
the things that you want to try to achieve. The 
For
[<00030056>-16<0057>-19<0044>-3<0057>-3<0048>-10<0050>-9<0048>-10<005100570003004C00510003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F0003004C>-5<005600030059>1<0048>-10<0055>-47<005C000300C1>-10<0048>-6<005B>-8<004C0045>-8<004F>-7<0048>-9<000F0003>]TJ
[<0044>-4<0051>-11<004700030050>-7<0044>2<005C>-12<0045>-13<004800030052>-7<0051>-9<004800030047>-3<0044>2<005C>34<000F0003005C>1<0052>-9<00580003005A>-9<004C004F>1<004F000300C0>-2<0051>-11<00470003004D>-2<0058>-6<0056>-16<005700030057>-2<004B>-9<004800030053>-7<0055>-12<0052>-7<0045>-8<004F>-7<0048>-10<00500003005A>-2<0044>-2<004C>-5<0057>-2<004C0051>-11<004A00030049>-7<0052>-7<005500030057>-2<004B>-9<004800030056>-12<0052>-6<004F>-4<0058>-5<0057>-2<004C>-5<0052>-7<005100030057>-2<004B>-7<0044>-3<00570003005C>1<0052>-10<00580003004B>-7<0044>1<0059>1<0048>-7<0011>]TJ
Using the 
Foreach 
statement
The 
Foreach
 statement resembles the 
For...Each...Next
 construction from VBScript. In the 
[<0027>-12<0048>-10<0050>-9<0052>-9<0029>-3<0052>-7<0055>-8<0028>-12<0044>-9<0046>4<004B>-6<0031>-9<0048>-6<005B>-37<0057>-20<0011>30<0059>-12<0045>-8<005600030056>-13<0046>4<0055>-12<004C0053>-5<00570003005C>1<0052>-10<005800030046>4<0055>-12<0048>-10<0044>-3<0057>-3<004800030044>-4<005100030044>-4<0055>-12<0055>-8<0044>2<005C00030052>1<0049000300C0>-14<0059>1<004800030051>-6<0058>1<0050>-4<0045>-13<0048>-10<0055>-26<0056>-20<000F0003001400030057>-2<004B>-4<0055>-12<0052>-9<0058>-7<004A>1<004B00030018>-6<00110003003C>49<0052>-10<005800030057>-2<004B>-9<0048>-10<005100030058>-6<0056>-12<004800030057>-2<004B>-9<00480003>]TJ
For...Each...Next 
statement to walk your way through the array that is contained in the variable 
ary
The variable 
 is used iterate through the elements of the array. The 
For...Each
 block is entered as long 
as there is at least one item in the collection or array. When the loop is entered, all statements inside 
[<0057>-2<004B>-9<00480003004F>-7<0052>-13<0052>-7<005300030044>-4<0055>-12<004800030048>-6<005B>2<0048>-16<0046>-2<0058>-5<0057>-3<0048>-16<004700030049>-7<0052>-7<005500030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030048>-11<004F>-7<0048>-10<0050>-9<0048>-10<00510057>-20<00110003002C>-1<005100030057>-2<004B>-9<004800030027>-12<0048>-10<0050>-9<0052>-9<0029>-3<0052>-7<0055>-8<0028>-12<0044>-9<0046>4<004B>-6<0031>-9<0048>-6<005B>-37<0057>-20<0011>30<0059>-12<0045>-8<005600030056>-13<0046>4<0055>-12<004C0053>-5<0057>-20<000F00030057>-2<004B>-2<004C>-5<005600030050>-9<0048>-10<0044>-4<0051>-9<005600030057>-2<004B>-7<0044>-3<005700030057>-2<004B>-9<00480003>]TJ
following command is executed for each element in the array:
As long as there are more elements in the collection or array, the statements inside the loop 
continue to execute for each element. When there are no more elements in the collection or array, 
the loop is exited, and execution continues with the statement following the 
Next
 statement. This is 
shown in DemoForEachNext.vbs:
DemoForEach
ext.vbs
The DemoForEachNext.vbs script works exactly like the 
DemoForEach.ps1 script. In the 
[<0027>-12<0048>-10<0050>-9<0052>-9<0029>-3<0052>-7<0055>-8<0028>-12<0044>-9<0046>4<004B>-14<0011>-8<0053>-8<0056>8<001400030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030056>-13<0046>4<0055>-12<004C0053>-5<0057>-20<000F0003005C>1<0052>-9<0058000300C0>-2<0055>-26<0056>-16<005700030046>4<0055>-12<0048>-10<0044>-3<0057>-3<004800030044>-4<005100030044>-4<0055>-12<0055>-8<0044>2<005C00030057>-2<004B>-7<0044>-3<0057000300460052>-7<00510057>-19<0044>-2<004C0051>-9<005600030057>-2<004B>-9<004800030051>-6<0058>1<0050>-4<0045>-13<0048>-10<0055>-26<00560003001400030057>-2<004B>-4<0055>-12<0052>-9<0058>-7<004A>1<004B00030018>-8<000F0003>]TJ
and then store that array in the 
$ary
 variable. This is shown here:
Then you use the 
Foreach
 statement to walk through the array contained in the 
$ary
 variable. Use 
the 
 variable to keep track of your progress through the array. Inside the script block, you display 
the value of each variable. The DemoForEach.ps1 script is shown here:
DemoForEach.ps1
Using the 
Foreach
 statement from the Windows PowerShell console
The great thing about Windows PowerShell is that you can also use the 
Foreach
 statement from inside 
the Windows PowerShell console. This is shown here:
The ability to use the 
Foreach
 statement from inside the Windows PowerShell console can give 
[<005C>1<0052>-9<005800030048>-6<005B>5<0046>-2<0048>-11<004F>1<004F>-7<0048>-10<0051>-1<0057000300C1>-9<0048>-6<005B>-8<004C0045>-6<004C004F004C>-5<0057>-38<005C0003005A>-9<004B>-9<0048>-10<00510003005C>1<0052>-9<005800030044>-4<0055>-12<00480003005A>-2<0052>-7<0055>-12<004E>-14<004C0051>-11<004A0003004C00510057>-3<0048>-10<0055>-8<0044>-9<0046>-25<0057>-2<004C>-12<0059>1<0048>-11<004F>-12<005C>35<00110003002B>-7<0052>-3<005A>-2<0048>-8<0059>1<0048>-10<0055>39<000F00030050>-6<0058>-5<0046>4<004B00030052004900030057>-2<004B>-9<00480003005A>-2<0052>-7<0055>-12<004E00030047>-5<0052>-7<0051>-9<004800030044>-3<005700030057>-2<004B>-9<00480003>]TJ
Windows PowerShell console consists of using pipelining. When you are working with the pipeline, 
you can use the 
ForEach-Object
 cmdlet. This cmdlet behaves in a similar manner to the 
Foreach
statement but is designed to handle pipelined input. The difference is that you do not have to use an 
intermediate variable to hold the contents of the array. You can create the array and send it across the 
pipeline. The other difference is that you do not have to create a variable to use for the enumerator. 
You use the 
 automatic variable which represents the current item on the pipeline instead. This is 
shown here:
Exiting the 
Foreach
 statement early
Suppose that you do not want to work with all the numbers in the array. In VBScript terms, leaving a 
For...Each...Loop
 early is done with an 
Exit
For
 statement. You have to use an 
 statement to perform 
the evaluation of the condition. When the condition is met, you call 
Exit
For
. In the DemoExitFor.vbs 
script, you use an inline 
[<00030056>-16<0057>-19<0044>-3<0057>-3<0048>-10<0050>-9<0048>-10<0051005700030057005200030050>-7<0044>-4<004E>12<004800030057>-2<004B>-2<004C>-5<005600030047>-7<0048>-10<0057>-3<0048>-10<0055>-12<0050>-2<004C0051>-7<0044>-3<0057>-2<004C>-5<0052>-7<0051>-14<001100030037>-7<004B>-9<00480003004C0051>-4<004F004C0051>-9<004800030056>-21<005C>-12<00510057>-19<0044>-14<005B0003004C>-5<005600030050>-9<0052>-7<0055>-12<004800030048>-8<0049>-41<00C0>-5<0046>4<004C>-5<0048>-10<005100570003>]TJ
for these kinds of things than spreading the statement across three different lines. The key thing to 
  
remember about the inline 
[<00030056>-16<0057>-19<0044>-3<0057>-3<0048>-10<0050>-9<0048>-10<005100570003004C>-5<00560003004C>-5<005700030047>-5<0052>-13<0048>-12<005600030051>-9<0052>-2<005700030046>1<0052>-7<0051>-9<0046>4<004F>-4<0058>-7<0047>-7<00480003005A>-9<004C>-5<0057>-2<004B00030057>-2<004B>-9<0048000300C0>-2<0051>-7<0044>-4<004F0003>]TJ
End
 statement. The
DemoExitFor.vbs script is shown here:
DemoExitFor.vbs
Using the 
Break 
statement
In Windows PowerShell terms, you use the 
Break
 statement to leave the loop early. Inside the script 
block, you use an 
 statement to evaluate the value of the 
 variable. If it is equal to 3, you call the 
Break
 statement and leave the loop. This line of code is shown here:
The complete 
DemoBreakFor.ps1 script is shown here:
DemoBreakFor.ps1
When the DemoBreakFor.ps1 script runs, it displays the numbers 1 and 2. Then it leaves the 
Foreach
 loop and runs the line of code following the 
Foreach
 loop. This is shown here:
Using the 
Exit
 statement
If you did not want to run the line of code after the loop statement, you would use the 
exit
 statement 
instead of the 
Break
 statement. This is shown in the 
DemoExitFor.ps1 script. 
DemoExitFor.ps1
When the DemoExitFor.ps1 script runs, the line of code following the 
Foreach
 loop never exe
cutes. This is because the 
exit
 statement ends the script In the Windows PowerShell ISE, discussed 
in Chapter 8, 23Using the Windows PowerShell ISE,24 the 
exit
 command attempts to close the ISE. The 
results of running the DemoExitF0r.ps1 script are shown here: 
You could achieve the same thing in VBScript by using the 
Wscript.Quit
 statement instead of 
Exit For
. As with the DemoExitFor.ps1 script, the 
DemoQuitFor.vbs script never comes to the line 
of code following the 
For...Each
 loop. This is shown in DemoQuitFor.vbs here:
DemoQuitFor.vbs
In this section, the use of the 
Foreach
 statement was examined. It is used when you do not know 
how many items are contained within a collection. It allows you to walk through the collection and to 
work with items from that collection on an individual basis. In addition, two techniques for exiting a 
Foreach
 statement were also examined.
The 
If
 statement
In VBScript, the 
If...Then...End If
 statement was somewhat straightforward. There were several things to 
be aware of:
The 
 and the 
Then
 statements must be on the same line.
The 
If...Then...End If 
statement must conclude with 
End If.
End If
 is two words, not one. 
The VBScript 
If...Then...End If
 statement is shown in the DemoIf.vbs script:
DemoIf.vbs
In the Windows PowerShell version of the
 If...Then...End
 If statement, there is no 
Then
 keyword, 
nor is there an 
End
 statement. The PowerShell 
 statement is easier to type. This simplicity, how
ever, comes with a bit of complexity. The condition that is evaluated in the 
 statement is positioned 
between a set of parentheses. In the 
DemoIf.ps1 script, you are checking whether the variable 
 is 
equal to 5. This is shown here:
  
The code that is executed when the condition is 
true
 is positioned inside a script block. The script 
block for the DemoIf.ps1 script is shown here:
The Windows PowerShell version of the 
DemoIf.vbs script is the DemoIf.ps1 script: 
The one thing that is different about the Windows PowerShell 
 statement is the 
comparison 
operators. In VBScript, the 
equal sign = is used as an assignment operator. It is also used as an equal
[<004C>-5<0057>-38<005C00030052>-7<0053>-13<0048>-10<0055>-8<0044>-3<0057>-1<0052>-7<005500030049>-7<0052>-7<0055000300460052>-7<0050>-4<0053>-9<0044>-4<0055>-12<004C>-5<0056>-12<0052>-7<0051>-14<001100030032>-11<005100030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<00570003004F004C0051>-9<0048000300520049000300460052>-13<0047>-7<0048>-9<000F00030057>-2<004B>-9<004800030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<00480003>]TJ
 is assigned the value 5. This uses 
the equal sign as an assignment. On the next line of code, the 
 statement is used to see whether the 
value of 
 is equal to 5. On this line of code, the equal sign is used as the equality operator. This is 
shown here:
In simple examples such as this, it is fairly easy to tell the difference between an equality operator 
and an assignment operator. In more complex scripts, however, things could be confusing. Windows 
PowerShell removes that confusion by having special comparison operators. One thing that might 
help is to realize that the main operators are two letters long. Common comparison operators are 
shown in Table 5-5. 
TABLE 5-5
Common comparison operators
Operator
Description
Example
Result
-eq   
Equals
$a = 5 ; $a -eq 4
False
-ne   
Not equal
$a = 5 ; $a -ne 4 
True
-gt   
Greater than
$a = 5 ; $a -gt 4
True
-ge   
Greater than or equal to
$a = 5 ; $a -ge 5
True
-lt 
Less than
$a = 5 ; $a -lt 5
False
-le  
Less than or equal to
$a = 5 ; $a -le 5
True
-like  
Wildcard comparison
$a = "This is Text" ; $a -like "Text"
False
-notlike 
Wildcard comparison
$a = "This is Text" ; $a -notlike "Text"
True
-match  
Regular expression comparison
$a = "Text is Text" ; $a -match "Text"
True
-notmatch  
Regular expression comparison
$a = "This is Text" ; $a -notmatch "Text$"
False
Using assignment and comparison operators
Any value assignment in a condition block will evaluate to 
true
, and therefore the script block is 
executed. In this example, you assign the value 1 to the variable 
. In the condition for the 
 state
ment, you assign the value of 12 to the variable 
. Any assignment evaluates to 
true
, and the script 
block executes. 
Rarely do you test a condition and perform an action. Sometimes, you have to perform one 
action if the condition is 
true
 and another action if the condition is 
false
. In VBScript, you used the 
If...Else...End If 
construction. The 
Else
[<00030046>4<004F>-5<0044>-6<0058>-6<0056>-12<00480003005A>-2<0048>-10<005100570003004C0050>-4<0050>-9<0048>-16<0047004C>-2<0044>-3<0057>-3<0048>-11<004F>-12<005C000300440049>-41<0057>-3<0048>-10<005500030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030044>-9<0046>-25<0057>-2<004C>-5<0052>-7<005100030057005200030045>-13<004800030053>-13<0048>-10<0055>-38<0049>-7<0052>-7<0055>-12<0050>-9<0048>-16<00470003004C>-3<00490003>]TJ
the condition was 
true
. This is shown in the 
DemoIfElse.vbs script. 
DemoIfElse.vbs
In Windows PowerShell, the syntax is not surprising. Following the closing curly bracket from the 
statement script block, you add the 
Else
 keyword and open a new script block to hold the alternative 
outcome. This is shown here:
DemoIfElse.ps1
Things become confusing with VBScript when you want to evaluate multiple conditions and have 
multiple outcomes. The 
Else If
 clause provides for the second outcome. You have to evaluate the 
second condition. The 
Else If
 clause receives its own condition, which is followed by the 
Then
 keyword. 
Following the 
Then
 keyword, you list the code that you want to execute. This is followed by the 
Else
keyword and a pair of 
End If
 statements. This is shown in the DemoIfElseIfElse.vbs script:
  
DemoIfElseIfElse.vbs
Evaluating multiple conditions
The Windows PowerShell 
demoIfElseIfElse.ps1 script is a bit easier to understand because it avoids the 
double26
End If 
kind of scenario. For each condition that you want to evaluate, you use 
ElseIf
 be aware 
that it is a single word. You put the condition inside a pair of parentheses and open your script block. 
Here is the demoIfElseIfElse.ps1 script:
demoIfElseIfElse.ps1
In this section, the use of the 
 statement was examined. Comparison operators and assignment 
operators were also covered. 
The 
Switch
 statement
As a best practice, you generally avoid using the 
ElseIf
 type of construction from either VBScript or 
Windows PowerShell because there is a better way to write the same code. 
In 
VBScript, you would use the 
Select Case 
statement to evaluate a condition and select one 
outcome from a group of potential statements. In the 
DemoSelectCase.vbs script, the value of the 
variable 
 is assigned the value of 2. The 
Select Case
 statement is used to evaluate the value of 
the variable 
. The syntax is shown here:
The test expression that is evaluated is the variable 
. Each of the different cases contains potential 
values for the test expression. If the value of the variable 
 is equal to 1, the code 
Wscript.Echo "a = 1"
is executed. This is shown here:
Each of the different cases is evaluated in the same manner. The 
Case Else
 expression is run if none 
of the previous expressions evaluate to 
true
. The complete DemoSelectCase.vbs script is shown here:
DemoSelectCase.vbs
Using the 
Switch 
statement
In Windows PowerShell, there is no 
Select Case
 statement. There is, however, the 
Switch
 statement. 
The 
Switch
 statement is the most powerful statement in the Windows PowerShell language. The basic 
Switch
 statement begins with the 
Switch
 keyword, followed by the condition to be evaluated posi
tioned inside a pair of parentheses. This is shown here:
Next, a script block is used to mark off the script block for the 
Switch
 statement. Inside this outer 
[<0056>-13<0046>4<0055>-12<004C0053>-5<005700030045>-7<004F>-7<0052>-13<0046>4<004E>-33<000F0003005C>1<0052>-10<00580003005A>-9<004C004F>1<004F000300C0>-2<0051>-11<004700030044>-4<00510003004C0051>-4<0051>-9<0048>-10<005500030056>-13<0046>4<0055>-12<004C0053>-5<005700030045>-7<004F>-7<0052>-13<0046>4<004E00030057>-1<005200030045>-13<004800030048>-6<005B>2<0048>-16<0046>-2<0058>-5<0057>-3<0048>-16<0047>-8<001100030028>-12<0044>-9<0046>4<004B000300460052>-7<0051>-11<0047004C>-5<0057>-2<004C>-5<0052>-7<005100030057005200030045>-13<004800030048>-8<0059>-5<0044>-4<004F>-4<0058>-3<0044>-3<0057>-3<0048>-16<004700030045>-13<0048>-16<004A004C0051>-9<00560003>]TJ
with a value, followed by the script block to be executed in the event the value matches the condition. 
This is shown here: 
[<00270048>-3<00C0>9<0051>7<004C>10<0051>-1<004A00030057>4<004B>-2<00480003>]TJ
default
 condition
If no match is found in the script block and the 
Default
 statement is not used, the 
Switch
 state
ment exits and the line of code that follows the 
Switch
 statement is executed. The 
Default
 statement 
performs a function similar to the 
Case Else 
statement from the 
Select Case 
statement. The 
Default
statement is shown here:
  
The complete DemoSwitchCase.ps1 script is shown here:
DemoSwitchCase.ps1
Understanding matching with the 
Switch 
statement
With the S
elect Case 
[<0056>-16<0057>-19<0044>-3<0057>-3<0048>-10<0050>-9<0048>-10<00510057>-20<000F00030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030050>-7<0044>-3<0057>-1<0046>4<004B>-2<004C0051>-11<004A00030046>-14<0044>-10<0056>-12<00480003004C>-5<005600030057>-2<004B>-9<004800030052>-7<0051>-9<004800030057>-2<004B>-7<0044>-3<00570003004C>-5<005600030048>-6<005B>2<0048>-16<0046>-2<0058>-5<0057>-3<0048>-16<0047>-8<001100030024>-27<005600030056>-12<0052>-13<0052>-7<005100030044>-10<005600030057>-2<004B>-7<0044>-3<00570003>]TJ
code executes, the line following the 
Select Case 
statement is executed. If the condition matches 
multiple cases in the 
Select Case 
[<0056>-16<0057>-19<0044>-3<0057>-3<0048>-10<0050>-9<0048>-10<00510057>-20<000F00030052>-7<0051>-4<004F>-12<005C00030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030050>-7<0044>-3<0057>-1<0046>4<004B0003004C005100030057>-2<004B>-9<00480003004F004C>-5<0056>-16<00570003004C>-5<005600030048>-6<005B>2<0048>-16<0046>-2<0058>-5<0057>-3<0048>-16<0047>-8<001100030030>-5<0044>-3<0057>-1<0046>4<004B>-9<0048>-12<005600030049>-13<0055>-12<0052>-7<00500003>]TJ
lower in the list are not executed. Therefore, make sure that the most desirable code to execute is 
positioned highest in the 
Select Case 
order. 
With the 
Switch
 statement in Windows PowerShell, order is not a major design concern. This is 
because every match from inside the 
Switch
 statement will be executed by default. An example of this 
is shown in the 
DemoSwitchMultiMatch.ps1 script. 
DemoSwitchMultiMatch.ps1
When the DemoSwitchMultiMatch.ps1 script runs, the second and third conditions will both be 
matched, and therefore their associated script blocks will be executed. The DemoSwitchMultiMatch.ps1 
script produces the output shown here:
Evaluating an array
If an array is stored in the variable 
 in the 
DemoSelectCase.vbs script, a type-mismatch error will be 
produced. This error is shown here:
The Windows PowerShell 
Switch
 statement can handle an array in the variable 
 without any 
[<0050>-9<0052>-13<0047004C>-5<00C0>-5<0046>-14<0044>-3<0057>-2<004C>-5<0052>-7<0051>-14<001100030037>-7<004B>-9<004800030044>-4<0055>-12<0055>-8<0044>2<005C0003004C>-5<005600030056>-4<004B>-9<0052>-3<005A>-9<00510003004B>-9<0048>-10<0055>-12<0048>5<001D>]TJ
The complete 
DemoSwitchArray.ps1 script is shown here:
DemoSwitch
rray.ps1
Controlling matching behavior
If you do not want the multimatch behavior of the 
Switch
 statement, you can use the 
Break
 statement 
to change the behavior. In the DemoSwitchArrayBreak.ps1 script, the 
Switch
 statement will be exited 
[<005A>-9<004B>-9<0048>-10<005100030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030050>-7<0044>-3<0057>-1<0046>4<004B00030052>-13<00460046>-2<0058>1<0055>-26<005600030045>-13<0048>-16<0046>-14<0044>-6<0058>-6<0056>-12<004800030048>-10<0044>-9<0046>4<004B00030052004900030057>-2<004B>-9<004800030050>-7<0044>-3<0057>-1<0046>4<004B000300460052>-7<0051>-11<0047004C>-5<0057>-2<004C>-5<0052>-7<005100030056>-12<0046>4<0055>-12<004C0053>-5<005700030045>-7<004F>-7<0052>-13<0046>4<004E>-31<0056000300460052>-7<00510057>-19<0044>-2<004C0051>-9<005600030057>-2<004B>-9<00480003>]TJ
Break
statement. This is shown here:
You are not required to include the 
Break
 statement with each condition; instead, you could use it to 
exit the switch only after a particular condition is matched. The complete 
DemoSwitchArrayBreak.ps1 
script is shown here:
DemoSwitch
rrayBreak.ps1
In this section, the use of Windows PowerShell 
Switch
 statement was examined. The matching 
behavior of the 
Switch
 statement and the use of 
Break
 was also discussed. 
  
Creating multiple folders: step-by-step exercises
In this exercise, you22ll explore the use of constants, variables, concatenation, decision-making, and 
looping as you create 10 folders in the C:Mytest directory. This directory was created earlier. If you 
do not have this folder on your machine, you can either create it manually or modify the following 
two exercises to use a folder that exists on your machine. In the second exercise in this section, you 
will modify the script to delete the 10 folders. 
Creating multiple folders via PowerShell scripting
1.
Open the Windows PowerShell ISE.
2.
Create a variable called 
$intFolders
 and have it hold the value 10. The code to do this is shown 
here:
3.
Create a variable called 
$intPad
. Do not put anything in the variable yet. This code is shown 
here:
4.
Create a variable called 
 and put the value 1 in it. The code to do this is shown here:
5.
Use the 
New-Variable
 cmdlet to create a variable named 
[<0056>-6<005700550033>9<0055>-4<0048>-14<00C0>-6<005B>]TJ
. Use the 
-value
 argument of 
the cmdlet to assign a value of 
testFolder
 to the variable. Use the 
-option
 argument to make 
[<0007>10<0056>-6<005700550033>9<0055>-4<0048>-14<00C0>-6<005B>]TJ
 into a constant. The code to do this is shown here:
6.
Begin a 
Do...Until
 statement. Include the opening curly bracket for the script block. This code 
is shown here:
Begin an 
If...Else
 statement. The condition to be evaluated is if the variable 
 is less than 10. 
The code that does this is shown here:
8.
Open the script block for the 
 statement. Assign the value 0 to the variable 
$intPad
. This is 
shown here:
Use the 
New-Item
 cmdlet to create a new folder. The new folder will be created in the 
C:Mytest directory. The name of the new folder will comprise the 
[<0007>10<0056>-6<005700550033>9<0055>-4<0048>-14<00C0>-6<005B>]TJ
 constant 
test
Folder
, the number 0 from the 
$intPad
 variable, and the number contained in the 
 variable. 
The code that does this is shown here:
10.
Add the 
Else
 clause. This code is shown here:
11.
The 
Else
 script block is the same as the 
 script block, except it does not include the 0 in the 
name that comes from the 
$intPad
 variable. Copy the 
New-Item
 line of code from the 
 state
ment and delete the 
$intPad
 variable from the 
-name
 argument. The revised line of code is 
shown here:
12.
Increment the value of the 
 variable by one. To do this, use the double26plus symbol operator 
++ . The code that does this is shown here:
13.
Close the script block for the 
Else
 clause and add the 
Until
 statement. The condition that 
Until
will evaluate is if the 
 variable is equal to the value contained in the 
$intFolders
 variable + 
1. The reason for adding 1 to 
$intFolders
 is so the script will actually create the same number 
of folders as are contained in the 
$intFolders
 variable. Because this script uses a 
Do...Until
loop and the value of 
 is incremented before entering the 
Until
 evaluation, the value of 
 is 
always 1 more than the number of folders created. This code is shown here:
14.
Save your script as 
<yourname>
CreateMultipleFolders.ps1. Run your script. You should see 10 
folders created in the C:Mytest directory. This concludes this step-by-step exercise.
The next exercise will show you how to delete multiple folders. 
Deleting multiple folders
1.
Open the 
<yourname>
CreateMultipleFolders.ps1 script created in the previous exercise in the 
Windows PowerShell ISE. 
2.
In the 
If...Else
 statement, the 
New-Item
 cmdlet is used twice to create folders in the C:Mytest 
directory. You want to delete these folders. To do this, you need to change the 
New-Item
cmdlet to the 
Remove-Item
 cmdlet. The two edited script blocks are shown here:
  
3.
The 
Remove-Item
 cmdlet does not have a 
-name
 argument. Therefore, you need to remove 
this argument but keep the code that creates the folder name. You can basically replace 
-name
 with a backslash, as shown here:
4.
The 
Remove-Item
 cmdlet does not take a 
-type
 argument. Because this argument is not 
needed, it can also be removed from both 
Remove-Item
 statements. The revised script block 
is shown here:
5.
This concludes this exercise. Save your script as 
<yourname>
DeleteMultipleFolders.ps1. Run 
your script. You should see the 10 previously created folders deleted. 
Chapter 5 quick reference
Do this
Retrieve the script execution policy 
Use the 
Get
ExecutionPolicy
 cmdlet.
Set the script execution policy
Use the 
Set-ExecutionPolicy
 cmdlet.
Create a 
variable
Type the variable name in the script.
Create a 
constant
Use the 
New-Variable
 cmdlet and specify 
constant
 for the 
-option
 argument.
Loop through a collection when you do not know how 
many items are in the collection
Use the 
ForEach-Object
 cmdlet.
[<0035>-9<0048>-17<0044>-18<004700030057>-9<004B>-16<004800030046>-7<0052>-14<0051>-8<0057>-10<0048>-17<0051>-8<0057>-25<005600030052>-7<00490003004400030057>-10<0048>-13<005B>-43<0057000300C0>-9<004F>-14<0048>]TJ
Use the 
Get-Content
 cmdlet and supply the path to the 
[<00C0>-10<004F>-14<004800030044>-17<005600030057>-9<004B>-16<004800030059>-12<0044>-11<004F>-11<0058>-14<004800030049>-14<0052>-14<005500030057>-9<004B>-16<004800030010>]TJ
path
 argument.
Delete a folder
Use the 
Remove-Item
 cmdlet and supply the path to the 
folder as the value for the 
-path
 argument.
CHAPTER 6
Working with Functions
fter completing this chapter, you will be able to:
Understand functions.
Use functions to encapsulate logic.
[<0038>-3<0056>-12<004800030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051>-9<005600030057>-1<005200030053>-7<0055>-12<0052>-1<0059>-12<004C>-5<0047>-7<004800030048>-10<0044>-10<0056>-12<004800030052004900030050>-9<0052>-13<0047004C>-5<00C0>-5<0046>-14<0044>-3<0057>-2<004C>-5<0052>-7<0051>-14<0011>]TJ
Use functions to provide ease of reuse.
There are clear-cut guidelines that can be used to design functions. These guidelines can be used to 
ensure that functions are easy to understand, easy to maintain, and easy to troubleshoot. This chapter 
will examine the reasons for the scripting guidelines and provide examples of both good and bad 
code design. 
Understanding functions
In Microsoft Windows PowerShell, functions have moved to the forefront as the primary program
ming element used when writing Windows PowerShell scripts. This is not necessarily due to improve
ments in functions per se, but rather a combination of factors, including the maturity of Windows 
PowerShell script writers. In Windows PowerShell 1.0, functions were not well understood, perhaps 
due to the lack of clear documentation as to their use, purpose, and application. 
VBScript included both 
[<0056>-5<0058>1<0045>-7<0055>-12<0052>-9<0058>-5<0057>-2<004C0051>-9<0048>-12<00560003>1<0044>-4<0051>-11<00470003>2<0049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051>-9<0056>-19<00110003>2<0024004600460052>-7<0055>-12<0047004C0051>-11<004A0003>1<0057>-1<00520003>1<0057>-2<004B>-9<00480003>1<0046>4<004F>-5<0044>-10<0056>-14<0056>-3<004C>-3<00460003>1<0047>-7<0048>-9<00C0>-2<0051>-2<004C>-5<0057>-2<004C>-5<0052>-7<0051>-9<0056>-20<000F0003>2<00440003>2<0056>-6<0058>1<0045>-7<0055>-12<0052>-10<0058>-5<0057>-2<004C0051>-9<00480003>]TJ
was used to encapsulate code that would do things like write to a database or create a Microsoft 
Word document. Functions, on the other hand, were used to return a value. An example of a classic 
VBScript function is one that converts a temperature from Fahrenheit to Celsius. The function receives 
the value in Fahrenheit and returns the value in Celsius. The classic function always returns a value27if 
it does not, a subroutine should be used instead. 
  
ote
Needless to say, the concepts of functions and subroutines were a bit confusing 
for many VBScript writers. A common question I used to receive when teaching VBScript 
classes was, 23When do I use a subroutine and when do I use a function?24 After expounding 
[<0057004B>-7<004800030046>6<004F>-2<0044>-8<0056>-12<0056>-1<004C>-1<004600030047>-4<0048>-7<00C00051004C>-3<0057004C>-3<0052>-5<0051>-12<000F0003002C0003005A>1<0052>-7<0058>3<004F>-6<004700030057004B>-7<0048>-8<005100030056>-1<004B>-7<0052005A00030057004B>-7<0048>-8<005000030057>1<004B>-5<0044>-1<00570003005C>3<0052>-7<005800030046>3<0052>-7<0058>4<004F>-6<004700030044>-7<0046>-23<0057>-6<0058>-1<0044>-2<004F>3<004F>-10<005C0003005A>-6<0055>-9<004C>-3<0057>-1<00480003004400030056>-3<0058>3<0045>-5<0055>-10<0052>-7<0058>-3<0057004C>2<0051>-7<00480003>]TJ
that would behave like a function. Next, I would write a function that acted like a subrou
tine. It was great fun, and the class loved it. The Windows PowerShell team has essentially 
done the same thing. There is no confusion over when to use a subroutine and when to use 
a function, because there are no subroutines in Windows PowerShell27only functions. 
To create a 
function in Windows PowerShell, you begin with the
Function
 keyword, followed by the 
name of the function. As a best practice, use the Windows PowerShell verb-noun combination when 
creating functions. Pick the verb from the standard list of PowerShell 
verbs to make your functions 
easier to remember. It is a best practice to avoid creating new verbs when there is an existing verb 
that can easily do the job. 
An idea of the verb coverage can be obtained by using the 
Get-Command
 cmdlet and piping the 
results to the 
Group-Object
 cmdlet. This is shown here:
When the preceding command is run, the resulting output is shown. This command was run on 
Windows Server 2012 and includes cmdlets from the default modules. As shown in the listing, 
Get
 is 
used the most by the default cmdlets, followed distantly by 
Set
New
, and 
Remove
A function is not required to accept any parameters. In fact, many functions do not require input 
to perform their job in the script. Let22s use an example to illustrate this point. A common task for 
network administrators is obtaining the operating system version. Script writers often need to do 
this to ensure their script uses the correct interface or exits gracefully. It is also quite common that 
[<0052>-7<0051>-9<004800030056>-12<0048>-10<005700030052>1<0049000300C0>-2<004F>-7<0048>-12<00560003005A>-2<0052>-9<0058>1<004F>-8<004700030045>-13<0048000300460052>-7<0053>-6<004C>-5<0048>-16<004700030057>-1<00520003004400030047>-7<0048>-12<0056>-4<004E>-35<0057>-1<0052>-7<005300030055>-17<0058>1<0051>-4<0051>-2<004C0051>-11<004A00030052>-7<0051>-9<004800030059>1<0048>-10<0055>-26<0056>-4<004C>-5<0052>-7<005100030052004900030057>-2<004B>-9<004800030052>-7<0053>-13<0048>-10<0055>-8<0044>-3<0057>-2<004C0051>-11<004A00030056>-21<005C>-12<0056>-16<0057>-3<0048>-10<0050>-14<000F00030044>-3<0051>-11<00470003>]TJ
  
[<004400030047004C>-3<0049>-39<0049>-7<0048>-10<0055>-12<0048>-10<0051>-1<005700030056>-12<0048>-10<005700030052>1<0049000300C0>-2<004F>-7<0048>-12<00560003005A>-2<0052>-9<0058>1<004F>-8<004700030045>-13<0048000300460052>-7<0053>-6<004C>-5<0048>-16<004700030049>-7<0052>-7<005500030044>-4<0051>-9<0052>-2<0057>-2<004B>-9<0048>-10<005500030059>1<0048>-10<0055>-26<0056>-3<004C>-5<0052>-7<005100030052004900030057>-2<004B>-9<004800030052>-7<0053>-13<0048>-10<0055>-8<0044>-3<0057>-2<004C0051>-11<004A00030056>-21<005C>-12<0056>-16<0057>-3<0048>-10<0050>-14<00110003>]TJ
[<0037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030056>-16<0057>-3<0048>-10<00530003>]TJ
in creating a function is to come up with a name. Since the function is going to retrieve informa
tion, in the listing of cmdlet verbs shown earlier, the best verb to use is 
Get
. For the noun portion 
of the name, it is best to use something that describes the information that will be obtained. In this 
example, a noun of 
OperatingSystemVersion
 makes sense. An example of such a function is shown in 
the 
Get-OperatingSystemVersion.ps1 script. The 
Get-OperatingSystemVersion
 function uses 
Windows 
Management Instrumentation WMI to obtain the version of the operating system. In this basic form 
of the function, you have the function keyword followed by the name of the function, and a script 
block with code in it, which is delimited by curly brackets. This pattern is shown here:
In the Get-OperatingSystemVersion.ps1 script, the 
Get-OperatingSystemVersion
 function is 
at the top of the script. It uses the 
Function
[<0003004E>12<0048>-7<005C>-45<005A>-2<0052>-7<0055>-12<004700030057>-1<005200030047>-7<0048>-9<00C0>-2<0051>-9<004800030057>-2<004B>-9<004800030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051>-14<000F00030049>-7<0052>-6<004F>1<004F>-7<0052>-3<005A>-2<0048>-16<004700030045>-2<005C00030057>-2<004B>-9<00480003>]TJ
name, 
Get-OperatingSystemVersion
. The script block opens, followed by the code, and then the 
script block closes. The function uses the 
Get-WmiObject
 cmdlet to retrieve an instance of the 
Win32_OperatingSystem
 WMI class. Since this WMI class only returns a single instance, the properties 
of the class are directly accessible. The 
version
 property is the one you22ll work with, so use parentheses 
to force the evaluation of the code inside. The returned management object is used to emit the ver
sion value. The braces are used to close the script block. The operating system version is returned to 
the code that calls the function. In this example, a string that writes 23This OS is Version24 is used. A sub
expression is used to force evaluation of the function. The version of the operating system is returned 
to the place where the function was called. This is shown here:
Get-OperatingSystemVersion.ps1
Now let22s look at choosing the cmdlet verb. In the earlier listing of 
cmdlet verbs, there is one 
cmdlet that uses the verb 
Read
. It is the
Read-Host
 cmdlet, which is used to obtain information from 
the command line. This would indicate that the verb 
Read
[<0003004C>-5<005600030051>-9<0052>-2<005700030058>-6<0056>-12<0048>-16<004700030057>-1<005200030047>-7<0048>-12<0056>-13<0046>4<0055>-12<004C0045>-13<004800030055>-12<0048>-10<0044>-11<0047004C0051>-11<004A00030044000300C0>-2<004F>-7<0048>-7<00110003>]TJ
There is no verb called 23Display,24 and the 
Write
 verb is used in cmdlet names such as 
Write-Error
and 
Write-Debug
, both of which do not really seem to have the concept of displaying information. 
[<002C00490003005C>1<0052>-9<00580003005A>-2<0048>-10<0055>-12<00480003005A>-9<0055>-12<004C>-5<0057>-2<004C0051>-11<004A0003004400030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<005100030057>-2<004B>-7<0044>-3<00570003005A>-2<0052>-9<0058>1<004F>-8<004700030055>-12<0048>-10<0044>-11<004700030057>-2<004B>-9<0048000300460052>-7<00510057>-3<0048>-10<0051>-1<005700030052>1<00490003004400030057>-3<0048>-6<005B>-37<0057000300C0>-2<004F>-7<004800030044>-4<0051>-11<004700030047004C>-5<0056>-4<0053>-8<004F>-5<0044>2<005C00030056>-16<0057>-19<0044>-3<0057>-2<004C>-5<0056>-16<0057>-2<004C>-3<0046>-12<005600030044>-4<0045>-13<0052>-10<0058>-5<00570003>]TJ
[<0057>-2<004B>-7<0044>-3<0057000300C0>-2<004F>-7<0048>-9<000F0003005C>1<0052>-9<005800030050>-2<004C>-5<004A>1<004B>-1<005700030046>-14<0044>-4<004F>1<004F00030057>-2<004B>-9<004800030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<00510003>]TJ
Get-TextStatistics
. This is in keeping with cmdlet names such as 
Get-Process
 and 
Get-Service
, which include the concept of emitting their retrieved content within 
their essential functionality. The 
Get-TextStatistics
 function accepts a single parameter called 
path. 
The 
interesting thing about parameters for functions is that when you pass a value to the parameter, you 
use a hyphen. When you refer to the value inside the function, it is a variable such as 
$path
. To call the 
Get-TextStatistics
 function, you have a couple of options. 
[<0037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<00570003004C>-5<005600030057>-1<005200030058>-6<0056>-12<004800030057>-2<004B>-9<004800030051>-7<0044>-4<0050>-9<004800030052004900030057>-2<004B>-9<004800030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<00510003>]TJ
and put the value inside parentheses. This is shown here:
This is a natural way to call the function, and it works when there is a single parameter. It does not 
work when there are two or more parameters. Another way to pass a value to the function is to use 
the hyphen and the parameter name. This is shown here:
Note from the previous example that no parentheses are required. You can also use positional 
arguments when passing a value. In this usage, you omit the name of the parameter entirely and sim
ply place the value for the parameter following the call to the function. This is illustrated here:
ote
The use of 
positional arguments works well when you are working from the com
mand line and want to speed things along by reducing the typing load. However, it can 
be a bit confusing to rely on positional arguments, and in general I tend to avoid it27even 
when working at the command line. This is because I often copy my working code from the 
console directly into a script, and as a result, would need to retype the command a second 
time to get rid of aliases and unnamed arguments. With the improvements in tab expan
sion, I feel that the time saved by using positional arguments or partial arguments does not 
[<0056>-3<00580049>-39<00C0>-3<0046>7<004C>-3<0048>-8<0051>2<0057004F>-10<005C0003005A0044>-2<0055>-9<0055>-6<0044>-2<0051>2<005700030057>1<004B>-7<004800030057004C>2<0050>-7<00480003004C>2<0051>6<0059>3<0052>-4<004F>-10<0059>3<0048>-14<00470003004C>2<005100030055>-10<0048>-8<0057>-36<005C>-10<0053>-4<004C>2<0051>-9<004A00030046>3<0052>-5<0050>-1<0050>-5<0044>-1<0051>-9<0047>-4<00560003005A>-7<004B>-7<0048>-8<005100030057004B>-7<0048>-5<005C00030051>-7<0048>-14<0048>-14<004700030057>2<005200030045>-11<0048000300570055>-6<0044>-2<0051>-7<0056>]TJ
ferred to scripts. The other reason for always using named arguments is that it helps you to 
be aware of the exact command syntax. 
One additional way to pass a value to a function is to use partial parameter names. All that is 
required is enough of the parameter name to disambiguate it from other parameters.  This is illus
trated here:
The complete text of the 
Get-TextStatistics
 function is shown here:
Get-
extStatistics Function
Between PowerShell 1.0 and PowerShell 2.0, the number of verbs grew from 40 to 60. In Windows 
PowerShell 3.0, the number of verbs grew from 60 to 98. The list of approved verbs appears here:
  
Once the function has been named, you should specify any parameters the function may require. 
The parameters are contained within parentheses. In the 
Get-TextStatistics
 function, the function 
accepts a single parameter: 
path
. When you have a function that accepts a single parameter, you 
can pass the value to the function by placing the value for the parameter inside parentheses. This is 
known as calling a function like a method, and is disallowed when you use 
Set-StrictMode
 with the
-latest
 switch. The following command generates an error when the latest strict mode is in effect27
otherwise, it is a permissible way to call a function.
The path C:fsotest.txt is passed to the 
Get-TextStatistics
 function via the -
path
 parameter. 
Inside the function, the string C:fsotext.txt is contained in the 
$path
 variable. The 
$path
 vari
[<0044>-4<0045>-8<004F>-7<004800030052>-7<0051>-4<004F>-12<005C0003004F004C>-12<0059>1<0048>-12<00560003005A>-9<004C>-5<0057>-2<004B>-2<004C005100030057>-2<004B>-9<0048000300460052>-7<005100C0>-2<0051>-9<0048>-12<005600030052004900030057>-2<004B>-9<00480003>]TJ
Get-TextStatistics
 function. It is not available outside the 
scope of the function. It is available from within child scopes of the 
Get-TextStatistics
 function. A 
child scope 
Get-TextStatistics
 is one that is created from within the 
Get-TextStatistics
 function. In 
the Get-TextStatisticsCallChildFunction.ps1 script, the 
Write-Path
 function is called from within the 
Get-TextStatistics
 function. This means the 
Write-Path 
function will have access to variables that are 
created within the 
Get-TextStatistics 
function. This is the concept of 
variable scope
, which is extremely 
important when working with functions. As you use functions to separate the creation of objects, you 
must always be aware of where the objects get created, and where you intend to use them. In the 
Get-TextStatisticsCallChildFunction
, the 
$path
 variable does not obtain its value until it is passed to the 
function. It therefore lives within the
 Get-TextStatistics
 function. But since the 
Write-Path
 function is 
called from within the 
Get-TextStatistics
 function, it inherits the variables from that scope. When you 
call a function from within another function, variables created within the parent function are available 
to the child function. This is shown in the Get-TextStatisticsCallChildFunction.ps1 script, which follows: 
Get-
extStatisticsCallChildFunction.ps1
Inside the 
Get-TextStatistics
 function, the 
$path
 variable is used to provide the path to the 
Get-Content
 cmdlet. When the 
Write-Path
 function is called, nothing is passed to it. But inside the 
Write-Path
 function, the value of 
$path
 is maintained. Outside both of the functions, however, 
$path
does not have any value. The output from running the script is shown here:
You will then need to open and to close a script block. A pair of opening and closing braces is used 
to delimit the script block on a function. As a best practice, when writing a function, I will always use 
the 
Function
 keyword, and type in the name, the input parameters, and the curly brackets for the 
script block at the same time. This is shown here:
In this manner, I do not forget to close the 
curly brackets. Trying to identify a missing curly bracket 
within a long script can be somewhat problematic, as the error that is presented does not always cor
respond to the line that is missing the curly bracket. For example, suppose the closing curly bracket 
is left off of the 
Get-TextStatistics
 function, as shown in the Get-TextStatisticsCallChildFunction-
DoesNOTWork-MissingClosingBracket.ps1 script. An error will be generated, as shown here:
[<0037>-7<004B>-9<004800030053>-7<0055>-12<0052>-7<0045>-8<004F>-7<0048>-10<00500003004C>-5<005600030057>-2<004B>-7<0044>-3<005700030057>-2<004B>-9<004800030053>-13<0052>-7<0056>-3<004C>-5<0057>-2<004C>-5<0052>-7<00510003004C0051>-11<0047004C>-3<0046>-14<0044>-3<0057>-1<0052>-7<005500030052004900030057>-2<004B>-9<004800030048>-10<0055>-12<0055>-12<0052>-7<005500030050>-9<0048>-12<0056>-14<0056>-17<0044>-11<004A>-7<004800030053>-13<0052>-4<004C00510057>-19<005600030057>-1<005200030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030046>4<004B>-7<0044>-4<0055>-8<0044>-9<0046>-25<0057>-3<0048>-10<00550003>]TJ
[<0052>-7<00510003004F004C0051>-9<004800030015>8<001B>-19<00110003002F>-9<004C0051>-9<004800030015>8<001B0003004B>-7<0044>-4<0053>-7<0053>-13<0048>-10<0051>-9<005600030057>-1<005200030045>-13<004800030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030045>-7<004F>-5<0044>-4<0051>-4<004E0003004F004C0051>-9<004800030044>-1<0049>-41<0057>-3<0048>-10<005500030057>-2<004B>-9<004800030048>-10<0051>-11<004700030052004900030057>-2<004B>-9<004800030056>-13<0046>4<0055>-12<004C0053>-5<0057>-20<001100030037>-7<004B>-2<004C>-5<005600030050>-9<0048>-10<0044>-4<0051>-9<005600030057>-2<004B>-7<0044>-3<00570003>]TJ
Windows PowerShell scanned the entire script looking for the closing curly bracket. Since it did not 
[<00C0>-2<0051>-11<00470003004C>-5<0057>-20<000F0003004C>-5<005700030056>-16<0057>-19<0044>-3<0057>-3<0048>-12<005600030057>-2<004B>-7<0044>-3<005700030057>-2<004B>-9<004800030048>-10<0055>-12<0055>-12<0052>-7<00550003004C>-5<005600030057>-2<004B>-9<004800030048>-10<0051>-11<004700030052004900030057>-2<004B>-9<004800030056>-13<0046>4<0055>-12<004C0053>-5<0057>-20<00110003002C>1<00490003005C>1<0052>-9<00580003005A>-2<0048>-10<0055>-12<004800030057>-1<005200030053>-8<004F>-5<0044>-9<0046>-2<00480003004400030046>4<004F>-7<0052>-7<0056>-4<004C0051>-11<004A00030046>-1<0058>1<0055>-12<004F>-12<005C00030045>-7<0055>-8<0044>-9<0046>4<004E>12<0048>-10<00570003>]TJ
on line 28, the error in this example would go away, but the script would not work either. The Get-
TextStatisticsCallChildFunction-DoesNOTWork-MissingClosingBracket.ps1 script is shown here, with 
a comment that indicates where the missing closing curly bracket should be placed:
  
One other technique to guard against the problem of the missing curly bracket is to add a com
ment to the closing curly bracket of each function. 
Using functions to provide ease of code reuse
When scripts are written using well-designed functions, it makes it easier to reuse them in other 
scripts, and to provide access to these functions from within the Windows PowerShell console. To get 
access to these functions, you will need to 
dot-source
 the containing script by placing a dot in front of 
[<0057>-2<004B>-9<004800030053>-9<0044>-3<0057>-2<004B00030057>-1<005200030057>-2<004B>-9<004800030056>-13<0046>4<0055>-12<004C0053>-5<00570003005A>-9<004B>-9<0048>-10<00510003005C>1<0052>-9<005800030046>-14<0044>-4<004F>1<004F0003004C>-6<0057>-20<000F00030044>-3<0051>-11<004700030053>-9<0058>-5<005700030057>-2<004B>-9<004800030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051>-9<00560003004C00510003004400030050>-9<0052>-13<0047>-3<0058>1<004F>-7<004800030052>-7<00550003004F>-7<0052>-10<0044>-11<004700030057>-2<004B>-9<0048>-10<005000030059>-12<004C>-2<004400030057>-2<004B>-9<004800030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-7<00110003>]TJ
An issue with 
dot-sourcing scripts to bring in functions is that often the scripts may contain global 
variables or other items you do not want to bring into your current environment. 
An example of a useful function is the 
ConvertToMeters.ps1 script because it converts feet to 
[<0050>-9<0048>-10<0057>-3<0048>-10<0055>-26<0056>-19<001100030037>-7<004B>-9<0048>-10<0055>-12<004800030044>-4<0055>-12<004800030051>-9<005200030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<0048>-12<005600030047>-7<0048>-9<00C0>-2<0051>-9<0048>-16<004700030052>-9<0058>-5<0057>-19<0056>-4<004C>-5<0047>-7<004800030057>-2<004B>-9<004800030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051>-14<000F00030044>-4<0051>-11<004700030057>-2<004B>-9<004800030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<00510003004C>-5<0057>-19<0056>-12<0048>-11<004F>-3<004900030047>-5<0052>-13<0048>-12<005600030051>-9<0052>-2<005700030058>-6<0056>-12<004800030057>-2<004B>-9<00480003>]TJ
Write-Host
 cmdlet to break up the pipeline. The results of the conversion will be returned directly to 
the calling code. The only problem with the ConvertToMeters.ps1 script is that when it is dot-sourced 
into the Windows PowerShell console, it runs, and returns the data because all executable code in the 
script is executed. The ConvertToMeters.ps1 script is shown here:
Convert
oMeters.ps1
With well-written functions, it is trivial to collect them into a single script27you just cut and paste. 
When you are done, you have created a
 function library. 
When pasting your functions into the function library script, pay attention to the 
comments at the 
end of the function. The comments at the closing curly bracket for each function not only point to 
the end of the script block, but also provide a nice visual indicator for the end of each function. This 
can be helpful when you need to troubleshoot a script. An example of such a function library is the
ConversionFunctions.ps1 script, which is shown here:
ConversionFunctions.ps1
One way to use the functions from the ConversionFunctions.ps1 script is to use the dot-sourcing 
operator to run the script so that the functions from the script are part of the calling scope. To dot-
source the script, you use the dot-source operator the period, or dot symbol, followed by a space, 
followed by the path to the script containing the functions you wish to include in your current scope. 
Once you do this, you can call the function directly, as shown here: 
  
All of the functions from the dot-sourced script are available to the current session. This can be 
demonstrated by creating a listing of the function drive, as shown here:
Including functions in the Windows PowerShell environment
In PowerShell 1.0, you could include functions from previously written scripts by dot-sourcing the 
[<0056>-13<0046>4<0055>-12<004C0053>-5<0057>-20<001100030037>-7<004B>-9<004800030058>-6<0056>-12<00480003005200490003004400030050>-9<0052>-13<0047>-3<0058>1<004F>-7<0048000300520049>-39<0049>-7<0048>-10<0055>-26<00560003004A>1<0055>-12<0048>-10<0044>-3<0057>-3<0048>-10<0055000300C1>-10<0048>-6<005B>-8<004C0045>-6<004C004F004C>-5<0057>-38<005C00030057>-2<004B>-7<0044>-4<005100030047>-5<0052>-2<0057>33<0010>-4<0056>-12<0052>-9<0058>1<0055>-10<0046>4<004C0051>-11<004A00030047>-3<0058>-7<004800030057>-1<005200030057>-2<004B>-9<004800030044>-4<0045>-6<004C004F004C>-5<0057>-38<005C00030057005200030046>4<0055>-12<0048>-10<0044>-3<0057>-3<0048000300440003>]TJ
module manifest
[<000F0003005A>-9<004B>-2<004C>-3<0046>4<004B00030056>-3<0053>-13<0048>-16<0046>4<004C>-5<00C0>-7<0048>-12<005600030048>-6<005B>-6<0044>-9<0046>-25<0057>-2<004F>-12<005C0003005A>-9<004B>-2<004C>-3<0046>4<004B00030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051>-9<005600030044>-4<0051>-11<004700030053>-7<0055>-12<0052>-13<004A>1<0055>-8<0044>-4<0050>-4<0050>-2<004C0051>-11<004A00030048>-11<004F>-7<0048>-10<0050>-9<0048>-10<00510057>-19<00560003005A>-9<004C004F>1<004F00030045>-13<00480003004C0050>-4<0053>-13<0052>-7<0055>-41<0057>-3<0048>-16<00470003>]TJ
into the current session. 
Using dot-sourcing
This technique of dot-sourcing still works in Windows PowerShell 3.0, and it offers the advantage of 
simplicity and familiarity. In the TextFunctions.ps1 script shown following, two functions are created. 
[<0037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<00510003004C>-5<005600030046>-15<0044>-4<004F>1<004F>-7<0048>-16<00470003>]TJ
New-Line
, and the second is called 
Get-TextStats
. The 
TextFunctions.ps1 
script is shown here:
extFunctions.ps1
The 
New-Line
 function will create a string of hyphen characters as long as the length of the input 
text. This is helpful when you want an underline for text separation purposes that is sized to the text. 
[<0037>56<0055>-8<0044>-11<0047004C>-5<0057>-2<004C>-5<0052>-7<0051>-7<0044>-4<004F00030039>-9<0025>-1<0036>-11<0046>4<0055>-12<004C0053>-5<005700030058>-6<0056>-12<0048>-10<0055>-26<0056000300460052>-7<0053>-2<005C00030057>-2<004B>-9<004800030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<005100030057>-2<004B>-9<0048>-7<005C00030051>-9<0048>-16<0048>-16<004700030057005200030058>-6<0056>-12<00480003004C00510057>-1<00520003004400030056>-12<0048>-10<0053>-9<0044>-4<0055>-8<0044>-3<0057>-3<0048000300C0>-2<004F>-7<004800030044>-4<0051>-11<004700030055>-17<0058>1<005100030057>-2<004B>-9<004800030051>-9<0048>-9<005A>-9<004F>-12<005C0003>]TJ
produced script. An example of using the 
New-Line 
text function in this manner is shown here:
Call
ew-Line
extFunction.ps1
When the script runs, it returns the following output:
[<0032>-19<0049000300460052>-9<0058>1<0055>-26<0056>-12<0048>-9<000F00030057>-2<004B>-2<004C>-5<00560003004C>-5<00560003004400030045>-6<004C>-5<00570003004C0051>-9<0048>-8<0049>-41<00C0>-5<0046>4<004C>-5<0048>-10<0051005700030044>-4<0051>-11<00470003004F004C0050>-2<004C>-5<0057>-19<00560003005C>1<0052>-10<0058>1<005500030044>-4<0045>-6<004C004F004C>-5<0057>-38<005C00030057005200030058>-6<0056>-12<004800030057>-2<004B>-9<004800030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051>-9<0056>-19<00110003002C>1<00490003005C>1<0052>-10<00580003004B>-7<0044>1<0059>1<004800030057>-1<0052000300460052>-7<0053>-3<005C0003>]TJ
the entire text of a function into each new script you wish to produce, or edit a script each time you 
wish to use a function in a different manner, you dramatically increase your workload. If the func
tions were available all the time, you might be inclined to utilize them more often. To make the text 
functions available in your current Windows PowerShell console, you need to dot-source the script 
[<00460052>-7<0051>-1<0057>-19<0044>-2<004C0051>-2<004C0051>-11<004A00030057>-2<004B>-9<004800030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051>-9<00560003004C00510057>-1<00520003005C>1<0052>-10<0058>1<0055000300460052>-7<0051>-9<0056>-12<0052>-6<004F>-7<0048>-9<000F00030053>-9<0058>-5<00570003004C>-5<00570003004C00510003004400030050>-9<0052>-13<0047>-3<0058>1<004F>-7<0048>-9<000F00030052>-7<00550003004F>-7<0052>-10<0044>-11<00470003004C>-5<005700030059>-12<004C>-2<00440003005C>1<0052>-9<0058>1<005500030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-7<00110003003C>49<0052>-9<00580003005A>-9<004C004F>1<004F00030051>-9<0048>-16<0048>-16<00470003>]TJ
to use the entire path to the script unless the folder that contains the script is in your search path. The 
syntax to dot-source a script is so easy that it actually becomes a stumbling block for some people 
who are expecting some complex formula or cmdlet with obscure parameters. It is none of that27just 
a period dot, followed by a space, followed by the path to the script that contains the function. This 
is why it is called dot-sourcing: you have a dot and the source path to the functions you wish to 
include. This is shown here:
Once you have included the functions in your current console, all the functions in the source script 
are added to the 
Function drive. This is shown in Figure 6-1.
  
FIGURE 6-1
Functions from a dot-sourced script are available via the Function drive.
Using dot-sourced functions
Once the functions have been introduced to the current console, you can incorporate them into your 
[<0051>-9<0052>-7<0055>-12<0050>-7<0044>-4<004F000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<0047>-6<0056>-19<001100030037>-7<004B>-2<004C>-5<0056000300C1>-10<0048>-6<005B>-8<004C0045>-6<004C004F004C>-5<0057>-38<005C00030056>-3<004B>-9<0052>-9<0058>1<004F>-8<004700030044>-4<004F>-8<0056>-12<00520003004C005100C1>-6<0058>-7<0048>-10<0051>-9<0046>-2<004800030057>-2<004B>-9<00480003005A>-3<0044>2<005C0003005C>1<0052>-9<00580003005A>-9<0055>-12<004C>-5<0057>-3<004800030057>-2<004B>-9<004800030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051>-14<00110003002C004900030057>-2<004B>-9<004800030049>-18<0058>1<0051>-9<0046>]TJ
tions are written so they will accept pipelined input and do not change the system environment, by 
adding global variables, for example, you will be much more likely to use the functions, and they will 
[<0045>-13<00480003004F>-7<0048>-12<0056>-14<00560003004F004C004E>12<0048>-11<004F>-12<005C000300570052000300460052>-7<005100C1>-3<004C>-3<0046>-25<00570003005A>-9<004C>-5<0057>-2<004B00030048>-9<004C>-5<0057>-2<004B>-9<0048>-10<005500030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051>-9<005600030052>-7<005500030046>4<0050>-11<0047>1<004F>-7<0048>-10<0057>-19<005600030057>-2<004B>-7<0044>-3<005700030044>-3<0055>-12<004800030053>-7<0055>-12<0048>-12<0056>-12<0048>-10<005100570003004C005100030057>-2<004B>-9<004800030046>-2<0058>1<0055>-12<0055>-12<0048>-10<0051005700030046>1<0052>-7<0051>-9<0056>-12<0052>-6<004F>-7<0048>-7<00110003>]TJ
As an example of using the 
New-Line
 function, consider the fact that the 
Get-CimInstance
 cmdlet 
allows the use of an array of computer names for the 
-computername
 parameter. In this example, 
BIOS information is obtained from two separate workstations. This is shown here:
You can improve the display of the information returned by the 
Get-CimInstance
 by pipelining the 
output to the 
New-Line
 function so that you can underline each computer name as it comes across 
the pipeline. You do not need to write a script to produce this kind of display. You can type the com
[<0050>-7<0044>-4<0051>-11<004700030047004C0055>-12<0048>-16<0046>-25<0057>-2<004F>-12<005C0003004C00510057>-1<005200030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F000300460052>-7<0051>-9<0056>-12<0052>-6<004F>-7<0048>-7<001100030037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030057>-2<004B>-2<004C0051>-11<004A0003005C>1<0052>-9<005800030051>-9<0048>-16<0048>-16<004700030057005200030047>-5<00520003004C>-5<005600030057>-1<005200030047>-5<0052>-2<0057>33<0010>-4<0056>-12<0052>-10<0058>1<0055>-10<0046>-2<00480003>]TJ
the 
TextFunctions.ps1 script. This makes the functions directly available in the current Windows 
PowerShell console session. You then use the same 
Get-CimInstance
 query you used earlier to obtain 
BIOS information via WMI from two computers. Pipeline the resulting management objects to the 
ForEach-Object
 cmdlet. Inside the script block section, you use the 
 automatic variable to reference 
the current object on the pipeline and retrieve the 
pscomputername
 property. You send this informa
tion to the 
New-Line
 function so the server name is underlined, and you display the BIOS information 
that is contained in the 
 variable. 
The command to import the 
New-Line
 function into the current Windows PowerShell session and 
use it to underline the server names is shown here:
The results of using the 
New-Line
 function are shown in Figure 6-2.
FIGURE 6-2
[<0029>2<0058>-4<0051>-14<0046>-29<0057>-7<004C>-10<0052>-11<0051>-13<005600030057>-7<004B>-11<0044>-8<005700030044>-8<0055>-17<00480003005A>-13<0055>-16<004C>-10<0057>-35<0057>-8<0048>-15<005100030057>-5<005200030044>-14<0046>-5<0046>-6<0048>-15<0053>-10<005700030053>-10<004C>-5<0053>-17<0048>-16<004F>-5<004C>-5<0051>-14<0048>-21<00470003004C>-5<0051>-8<0053>-14<0058>-9<0057000300C0>-6<0051>-15<004700030044>-8<00510003004C>-5<0050>-8<0050>-14<0048>-21<0047>-4<004C>-7<0044>-8<0057>-8<004800030058>-11<0056>-17<00480003004C>-5<00510003005C>-4<0052>-14<0058>-4<005500030047>-8<0044>-7<004C>-5<004F>-17<005C0003005A>-6<0052>-11<0055>-16<004E00030055>-17<0052>-14<0058>-9<0057>-7<004C>-5<0051>-14<0048>-12<0011>]TJ
The 
Get-TextStats
 function from the TextFunctions.ps1 script provides statistics based upon an 
[<004C0051>-4<0053>-9<0058>-5<005700030057>-3<0048>-6<005B>-37<0057000300C0>-2<004F>-7<004800030052>-7<005500030057>-3<0048>-6<005B>-37<005700030056>-16<0057>-2<0055>-12<004C0051>-11<004A>-8<001100030032>-11<0051>-9<0046>-2<004800030057>-2<004B>-9<004800030037>55<0048>-6<005B>-37<0057>-2<0029>7<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051>-9<0056>-19<0011>-8<0053>-8<0056>8<001400030056>-13<0046>4<0055>-12<004C0053>-5<00570003004C>-5<005600030047>-5<0052>-2<0057>33<0010>-4<0056>-12<0052>-10<0058>1<0055>-10<0046>-2<0048>-16<00470003004C00510057>-1<005200030057>-2<004B>-9<004800030046>-2<0058>1<0055>-12<0055>-12<0048>-10<0051005700030046>1<0052>-7<0051>-9<0056>-12<0052>-6<004F>-7<0048>-9<000F0003>]TJ
[<0057>-2<004B>-9<004800030056>-16<0057>-19<0044>-3<0057>-2<004C>-5<0056>-16<0057>-2<004C>-3<0046>-12<00560003004C>-5<005700030055>-12<0048>-10<0057>-8<0058>1<0055>-12<0051>-9<00560003005A>-9<004B>-9<0048>-10<005100030057>-2<004B>-9<004800030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<00510003004C>-5<005600030046>-14<0044>-4<004F>1<004F>-7<0048>-16<004700030044>-4<0055>-12<00480003005A>-2<0052>-7<0055>-12<0047000300460052>-9<0058>1<00510057>-20<000F00030051>-6<0058>1<0050>-4<0045>-13<0048>-10<00550003005200490003004F004C0051>-9<0048>-12<00560003004C005100030057>-2<004B>-9<0048000300C0>-2<004F>-7<0048>-9<000F00030044>-3<0051>-11<00470003>]TJ
number of characters. An example of using this function is shown here:
  
When the 
Get-TextStats
 function is used, the following output is produced:
In this section, the use of functions was discussed. The reuse of functions could be as simple as 
copying the text of the function from one script into another script. It is easier, however, to dot-source 
the function than to reuse it. This can be done from within the Windows PowerShell console or from 
within a script. 
Adding help for functions
When you dot-source functions into the current Windows PowerShell console, one problem is intro
[<0047>-3<0058>-5<0046>-2<0048>-16<0047>-8<001100030025>-12<0048>-16<0046>-14<0044>-6<0058>-6<0056>-12<00480003005C>1<0052>-9<005800030044>-4<0055>-12<004800030051>-9<0052>-2<005700030055>-12<0048>-16<0054>-3<0058004C0055>-12<0048>-16<004700030057>-1<005200030052>-7<0053>-13<0048>-10<005100030057>-2<004B>-9<0048000300C0>-2<004F>-7<004800030057>-2<004B>-7<0044>-3<005700030046>1<0052>-7<00510057>-19<0044>-2<004C0051>-9<005600030057>-2<004B>-9<004800030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<005100030057005200030058>-6<0056>-12<00480003004C>-5<0057>-20<000F0003005C>1<0052>-9<005800030050>-7<0044>2<005C00030045>-13<00480003>]TJ
[<0058>1<0051>-7<0044>-3<005A>-3<0044>-4<0055>-12<004800030052004900030048>-8<0059>1<0048>-10<0055>-47<005C>-41<0057>-2<004B>-2<004C0051>-11<004A00030057>-2<004B>-9<0048000300C0>-2<004F>-7<0048000300460052>-7<00510057>-19<0044>-2<004C0051>-9<00560003005A>-9<004C>-5<0057>-2<004B>-2<004C00510003004C>-5<0057>-20<00110003002C>-1<005100030044>-11<0047>-7<0047004C>-5<0057>-2<004C>-5<0052>-7<005100030057005200030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051>-9<0056>-20<000F00030057>-2<004B>-9<0048000300C0>-2<004F>-7<0048000300460052>-9<0058>1<004F>-8<0047000300460052>-7<00510057>-19<0044>-2<004C005100030059>-5<0044>-4<0055>-12<004C>]TJ
ables, aliases, PowerShell drives, or any number of other things. Depending on what you are actually 
trying to accomplish, this may or may not be an issue. The need sometimes arises, however, to have 
access to help information about the features provided by the Windows PowerShell script. 
Using a 
[<004B>-2<0048>-7<0055>-9<0048>-7<0010>-1<0056>-5<00570055>-1<004C>-2<0051004A>]TJ
 object for help
In Windows PowerShell 1.0, you could solve this problem by adding a 
help
 parameter to the func
tion and storing the help text within a 
here-string
 object. You can use this approach in Windows 
PowerShell 3.0 as well, but as shown in Chapter 7, 23Creating Advanced Functions and Modules,24 
there is a better approach to providing help for functions. The classic 
here-string
 approach for help is 
shown in the 
[<002A>-15<0048>-10<0057>-10<003A>15<0050>-2<004C>-11<0026>8<004F>-5<0044>-10<0056>-14<0056>-12<0048>-12<0056>-6<0029>7<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051>-14<0011>-8<0053>-8<0056>8<001400030056>-13<0046>4<0055>-12<004C0053>-5<0057>-20<000F0003005A>-8<004B>-2<004C>-3<0046>4<004B00030049>-7<0052>-6<004F>1<004F>-7<0052>-3<005A>-12<0056>-19<001100030037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030056>-16<0057>-3<0048>-10<005300030057>-2<004B>-7<0044>-3<005700030051>-9<0048>-16<0048>-16<0047>-6<005600030057>-1<005200030045>-13<004800030047>-5<0052>-7<0051>-9<00480003>]TJ
[<004C>-5<005600030057>-1<005200030047>-7<0048>-9<00C0>-2<0051>-9<00480003004400030056>-18<005A>-9<004C>-5<0057>-1<0046>4<004B>-9<0048>-16<004700030053>-9<0044>-4<0055>-8<0044>-4<0050>-9<0048>-10<0057>-3<0048>-10<005500030051>-7<0044>-4<0050>-9<0048>-16<00470003>]TJ
$help
. The second step involves creating and displaying the 
results of a 
here-string
 object that includes help information. The GetWmiClassesFunction.ps1 script is 
shown here:
# GetWmiClassesFunction.ps1
The 
here-string
 technique works pretty well for providing function help if you follow the cmdlet 
help pattern. This is shown in Figure 6-3. 
FIGURE 6-3
Manually created help can mimic the look of core cmdlet help.
The drawback with manually creating help for a function is that it is tedious, and as a result, only 
the most important functions receive help information when you use this methodology. This is unfor
tunate, as it then requires the user to memorize the details of the function contract. One way to work 
around this is to use the 
Get-Content
 cmdlet to retrieve the code that was used to create the func
tion. This is much easier to do than searching for the script that was used to create the function and 
opening it up in Notepad. To use the 
Get-Content
 cmdlet to display the contents of a function, you 
type 
Get-Content
 and supply the path to the function. All functions available to the current Windows 
PowerShell environment are available via the Function PowerShell drive. You can therefore use the 
following syntax to obtain the content of a function:
  
The technique of using 
Get-Content
 to read the text of the function is shown in Figure 6-4.
FIGURE 6-4
The 
Get-Content
 cmdlet can retrieve the contents of a function.
An easier way to add help, by using comment-based help, is discussed in Chapter 7
Comment-
based help, although more complex than the method discussed here, offers a number of advan
tages27primarily due to the integration with the Windows PowerShell help subsystem. When you add 
comment-based help, users of your function can access your help in exactly the same manner as any 
of the core Windows PowerShell cmdlets. 
Using two input parameters
To create 
a function that uses multiple input parameters, you use the 
Function
 keyword, specify the 
[<0051>-7<0044>-4<0050>-9<004800030052004900030057>-2<004B>-9<004800030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051>-14<000F00030058>-6<0056>-12<004800030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<0048>-12<005600030049>-7<0052>-7<005500030048>-10<0044>-9<0046>4<004B0003004C0051>-4<0053>-9<0058>-5<005700030053>-9<0044>-4<0055>-8<0044>-4<0050>-9<0048>-10<0057>-3<0048>-10<0055>39<000F00030044>-3<0051>-11<004700030057>-2<004B>-9<0048>-10<005100030047>-7<0048>-9<00C0>-2<0051>-9<004800030057>-2<004B>-9<004800030056>-13<0046>4<0055>-12<004C0053>-5<005700030045>-7<004F>-7<0052>-13<0046>4<004E0003005A>-9<004C>-5<0057>-2<004B>-2<004C00510003>]TJ
the curly brackets. The pattern is shown here:
An example of a function that takes multiple parameters is the 
Get-FreeDiskSpace
 function, which 
is shown in the 
[<002A>-15<0048>-10<0057>33<0010>-13<0029>13<0055>-12<0048>-16<0048>-13<0027>-8<004C>-5<0056>-4<004E>-22<0036>1<0053>-9<0044>-9<0046>-2<0048>-7<0011>-8<0053>-8<0056>8<001400030056>-13<0046>4<0055>-12<004C0053>-5<005700030049>-12<0055>-12<0052>-7<005000030057>-2<004B>-9<0048000300B4>3<0032>-11<0045>-5<0057>-19<0044>-2<004C0051>-2<004C0051>-11<004A00030056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<00460003003A>-7<0030>-4<002C00030047>-3<0044>-3<0057>-19<0044>9<00B500030056>-12<0048>-16<0046>-25<0057>-2<004C>-5<0052>-7<005100030056>-3<004C>-5<0047>-7<0048>-10<0045>-9<0044>-4<0055>39<000F0003>]TJ
which follows. 
The Get-FreeDiskSpace.ps1 script begins with the 
Function
 keyword and is followed by the name 
of the function and the two input parameters. The input parameters are placed inside parentheses, as 
shown here:
Inside the function22s script block, the 
Get-FreeDiskSpace
 function uses the 
Get-WmiObject
 cmdlet 
to query the 
Win32_LogicalDisk
[<0003003A>-7<0030>-4<002C00030046>4<004F>-5<0044>-10<0056>-14<0056>-19<00110003002C>-1<005700030046>1<0052>-7<0051>-4<0051>-9<0048>-16<0046>-25<0057>-19<005600030057>-1<005200030057>-2<004B>-9<0048000300460052>-7<0050>-4<0053>-9<0058>-5<0057>-3<0048>-10<005500030056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-7<0048>-16<00470003004C005100030057>-2<004B>-9<00480003>]TJ
$computer
[<0053>-9<0044>-4<0055>-8<0044>-4<0050>-9<0048>-10<0057>-3<0048>-10<0055>39<000F00030044>-3<0051>-11<00470003004C>-5<0057000300C0>-2<004F>-6<0057>-3<0048>-10<0055>-26<005600030052>-10<0058>-5<005700030052>-7<0051>-4<004F>-12<005C00030057>-2<004B>-9<004800030047>1<0055>-12<004C>-12<0059>1<004800030057>-2<004B>-7<0044>-3<00570003004C>-5<005600030056>-4<0053>-13<0048>-16<0046>4<004C>-4<00C0>-7<0048>-16<00470003004C005100030057>-2<004B>-9<00480003>]TJ
$drive
 parameter. When the function 
[<004C>-5<005600030046>-15<0044>-4<004F>1<004F>-7<0048>-16<0047>-9<000F00030048>-10<0044>-9<0046>4<004B00030053>-9<0044>-4<0055>-8<0044>-4<0050>-9<0048>-10<0057>-3<0048>-10<00550003004C>-5<005600030056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-7<0048>-16<004700030044>-10<00560003>]TJ
-drive
 and 
-computer
[<00110003002C>-1<005100030057>-2<004B>-9<004800030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<005100030047>-7<0048>-9<00C0>-2<0051>-2<004C>-5<0057>-2<004C>-5<0052>-7<0051>-15<000F00030057>-2<004B>-9<004800030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<0048>-12<00560003>]TJ
$drive
 and 
$computer
 are used to hold the values supplied to the parameters. 
Once the data from WMI is retrieved, it is stored in the 
$driveData
 variable. The data that is stored 
in the 
$driveData
 variable is an instance of the
Win32_LogicalDisk
 class. This variable contains a com
plete instance of the class. The members of this class are shown in Table 6-1.
TABLE 6-1
Members of the 
Win32_LogicalDisk
 class
Name
Member type
[<0027>-2<0048>-6<00C00051004C>5<0057>-7<004C>1<0052>-1<0051>]TJ
Chkdsk
Method
System.Management.ManagementBaseObject 
ChkdskSystem.Boolean FixErrors, System.
Boolean VigorousIndexCheck, System.Boolean 
SkipFolderCycle, System.Boolean ForceDismount, 
System.Boolean RecoverBadSectors, System.Boolean 
OkToRunAtBootUp
Reset
Method
System.Management.ManagementBaseObject Reset
SetPowerState
Method
System.Management.ManagementBaseObject 
SetPowerStateSystem.UInt16 PowerState, System.
String Time
Access
Property
System.UInt16 Access {get;set;}
Availability
Property
System.UInt16 Availability {get;set;}
BlockSize
Property
System.UInt64 BlockSize {get;set;}
Caption
Property
System.String Caption {get;set;}
Compressed
Property
System.Boolean Compressed {get;set;}
[<0026>5<0052>-4<0051>-5<00C0>-4<004A>-6<0030>-5<0044>-1<00510044>-2<004A0048>-3<0055>-2<00280055>-4<0055>-7<0052>-3<0055>-22<0026>5<0052>-7<0047>1<0048>]TJ
Property
[<0036>11<005C>-22<0056>-18<0057>-7<0048>-13<0050>-23<0011>6<0038>-21<002C>-16<0051>-7<0057>-20<0016>-6<001500030026>-5<0052>-14<0051>-15<00C0>-14<004A>-16<0030>-15<0044>-11<0051>-10<0044>-12<004A>-10<0048>-13<0055>-12<0028>-10<0055>-14<0055>-17<0052>-13<0055>-32<0026>-5<0052>-17<0047>-9<00480003005E>-7<004A>-10<0048>-21<0057>-25<001E>-13<0056>-6<0048>-21<0057>-25<001E0060>]TJ
[<0026>9<00520051>-1<00C0004A>-2<0030>-1<0044>3<0051>4<0044>2<004A>4<0048>1<0055>-2<0038>6<0056>8<0048>1<0055>-18<0026>9<00520051>-1<00C0004A>]TJ
Property
[<0036>25<005C>-8<0056>-4<0057>7<0048>1<0050>-9<0011>-14<0025>-8<0052>-5<0052004F>4<0048>2<0044>3<0051>14<0003>14<0026>9<00520051>-1<00C0004A>-2<0030>-1<0044>3<0051>4<0044>2<004A>4<0048>1<0055>-2<0038>6<0056>8<0048>1<0055>-18<0026>9<00520051>-1<00C0004A>14<0003>14<005E>7<004A>4<0048>-7<0057>-11<001E>1<0056>8<0048>-7<0057>-11<001E>14<0060>]TJ
CreationClassName
Property
System.String CreationClassName {get;set;}
Description
Property
System.String Description {get;set;}
DeviceID
Property
System.String DeviceID {get;set;}
DriveType
Property
System.UInt32 DriveType {get;set;}
ErrorCleared
Property
System.Boolean ErrorCleared {get;set;}
ErrorDescription
Property
System.String ErrorDescription {get;set;}
ErrorMethodology
Property
System.String ErrorMethodology {get;set;}
FileSystem
Property
System.String FileSystem {get;set;}
FreeSpace
Property
System.UInt64 FreeSpace {get;set;}
InstallDate
Property
System.String InstallDate {get;set;}
LastErrorCode
Property
System.UInt32 LastErrorCode {get;set;}
MaximumComponentLength
Property
System.UInt32 MaximumComponentLength {get;set;}
MediaType
Property
System.UInt32 MediaType {get;set;}
Name
Property
System.String Name {get;set;}
  
Name
Member type
[<0027>-2<0048>-6<00C00051004C>5<0057>-7<004C>1<0052>-1<0051>]TJ
NumberOfBlocks
Property
System.UInt64 NumberOfBlocks {get;set;}
PNPDeviceID
Property
System.String PNPDeviceID {get;set;}
PowerManagementCapabilities
Property
System.UInt16[] PowerManagementCapabilities 
{get;set;}
PowerManagementSupported
Property
System.Boolean PowerManagementSupported {get;set;}
ProviderName
Property
System.String ProviderName {get;set;}
Purpose
Property
System.String Purpose {get;set;}
QuotasDisabled
Property
System.Boolean QuotasDisabled {get;set;}
QuotasIncomplete
Property
System.Boolean QuotasIncomplete {get;set;}
QuotasRebuilding
Property
System.Boolean QuotasRebuilding {get;set;}
Size
Property
System.UInt64 Size {get;set;}
Status
Property
System.String Status {get;set;}
StatusInfo
Property
System.UInt16 StatusInfo {get;set;}
SupportsDiskQuotas
Property
System.Boolean SupportsDiskQuotas {get;set;}
SupportsFileBasedCompression
Property
System.Boolean SupportsFileBasedCompression 
{get;set;}
SystemCreationClassName
Property
System.String SystemCreationClassName {get;set;}
SystemName
Property
System.String SystemName {get;set;}
VolumeDirty
Property
System.Boolean VolumeDirty {get;set;}
VolumeName
Property
System.String VolumeName {get;set;}
VolumeSerialNumber
Property
System.String VolumeSerialNumber {get;set;}
__CLASS
Property
System.String __CLASS {get;set;}
__DERIVATION
Property
System.String[] __DERIVATION {get;set;}
__DYNASTY
Property
System.String __DYNASTY {get;set;}
__GENUS
Property
System.Int32 __GENUS {get;set;}
__NAMESPACE
Property
System.String __NAMESPACE {get;set;}
__PATH
Property
System.String __PATH {get;set;}
__PROPERTY_COUNT
Property
System.Int32 __PROPERTY_COUNT {get;set;}
__RELPATH
Property
System.String __RELPATH {get;set;}
__SERVER
Property
System.String __SERVER {get;set;}
__SUPERCLASS
Property
System.String __SUPERCLASS {get;set;}
PSStatus
Property set
PSStatus {Status, Availability, DeviceID, StatusInfo}
ConvertFromDateTime
Script method
System.Object ConvertFromDateTime;
ConvertToDateTime
Script method
System.Object ConvertToDateTime;
[<0032>-1<0045>1<0057>-11<0044>1<004C>10<0051>7<004C>10<0051>-1<004A00030056>3<0053>-4<0048>-7<0046>2<004C>9<00C0>7<00460003003A>5<0030>11<002C00030047>4<00440057>-11<0044>]TJ
While 
storing the complete instance of the object in the 
[<00030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<00480003004C>-5<00560003004400030045>-6<004C>-5<00570003004C0051>-9<0048>-8<0049>-41<00C0>-5<0046>4<004C>-5<0048>-10<0051>-1<00570003>]TJ
due to the amount of data it contains, in reality the class is rather small, and the ease of using 
the 
 cmdlet is usually worth the wasteful methodology. If performance is a pri
mary consideration, the use of the 
 type accelerator would be a better solution. To obtain 
the free disk space using this method, you would use the following syntax:
To put the preceding command into a usable function, you would need to substitute the 
hard-coded drive letter for a variable. In addition, you would want to modify the class construc
tor to receive a path to a remote computer as well. The newly created function is contained in the 
Get-DiskSpace.ps1 script, shown here:
Once you have made the preceding changes, the code only returns the value of the 
FreeSpace
[<00030053>-7<0055>-12<0052>-7<0053>-13<0048>-10<0055>-41<0057>-38<005C00030049>-12<0055>-12<0052>-7<005000030057>-2<004B>-9<004800030056>-4<0053>-13<0048>-16<0046>4<004C>-4<00C0>-5<004600030047>1<0055>-12<004C>-12<0059>1<0048>-7<00110003002C>1<00490003005C>1<0052>-10<00580003005A>-1<0048>-10<0055>-12<004800030057>-1<005200030056>-12<0048>-10<0051>-11<004700030057>-2<004B>-9<004800030052>-10<0058>-5<0057>-2<0053>-9<0058>-5<00570003005700520003>]TJ
, you 
[<005A>-2<0052>-10<0058>1<004F>-8<004700030056>-12<0048>-16<00480003005C>1<0052>-9<00580003004B>-7<0044>1<0059>1<004800030044>-4<00510003004C0051>-1<0057>-3<0048>-16<004A>-7<0048>-10<0055>43<001100030037>-7<004B>-2<004C>-5<005600030057>-3<0048>-16<0046>4<004B>-4<0051>-2<004C>-5<0054>-3<0058>-7<00480003004C>-5<005600030050>-9<0052>-7<0055>-12<004800030048>-8<0049>-40<00C0>-5<0046>4<004C>-5<0048>-10<0051>-1<005700030057>-2<004B>-7<0044>-4<005100030056>-16<0057>-1<0052>-7<0055>-12<004C0051>-11<004A00030044>-4<005100030048>-10<00510057>-2<004C0055>-12<00480003004C0051>-9<0056>-16<0057>-19<0044>-4<0051>-9<0046>-2<00480003>]TJ
of the 
 class and then selecting a single value.
Once you have the data stored in the 
$driveData 
variable, you will want to print out some informa
[<0057>-2<004C>-5<0052>-7<005100030057>-1<005200030057>-2<004B>-9<004800030058>-6<0056>-12<0048>-10<005500030052004900030057>-2<004B>-9<004800030056>-13<0046>4<0055>-12<004C0053>-5<0057>-20<001100030037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030057>-2<004B>-2<004C0051>-11<004A00030057>-1<005200030047>-5<00520003004C>-5<005600030053>-7<0055>-12<004C0051005700030052>-9<0058>-5<005700030057>-2<004B>-9<004800030051>-7<0044>-4<0050>-9<004800030052004900030057>-2<004B>-9<0048000300460052>-7<0050>-4<0053>-9<0058>-5<0057>-3<0048>-10<005500030044>-4<0051>-11<004700030057>-2<004B>-9<004800030051>-7<0044>-4<0050>-9<00480003>]TJ
of the drive. To do this, you can place the variables inside double 
quotation marks. Double quotes are 
expanding strings, and variables placed inside double quotes emit their value, not their name. This is 
shown here:
The next thing you will want to do is to 
format the data that is returned. To do this, use the .NET 
Framework format strings to specify two decimal places. You will need to use a subexpression to 
prevent unraveling of the WMI object inside the expanding-string double quotation marks. The 
subexpression uses the 
dollar sign and a pair of parentheses to force the evaluation of the expression 
before returning the data to the string. This is shown here:
Get-FreeDiskSpace.ps1
  
Using a type constraint in a function
When 
accepting parameters for a function, it may be important to use a type constraint to ensure the 
function receives the correct type of data. To do this, you place the desired type name inside square 
brackets in front of the input parameter. This constrains the data type and prevents the entry of an 
incorrect type of data. Allowable type accelerators appear in Table 6-2.
TABLE 6-2
Data type aliases
Alias
Type
[int]
32-bit signed integer
[long]   
64-bit signed integer
[string]   
Fixed-length string of Unicode characters
[char]   
Unicode 16-bit character
[bool] 
True/false value
[byte] 
8-bit unsigned integer
[double]  
[<0027>-19<0052>-16<0058>-6<0045>-15<004F>-14<0048>-25<0010>-12<0053>-14<0055>-19<0048>-23<0046>-3<004C>-12<0056>-11<004C>-12<0052>-14<005100030019>-41<0017>-27<0010>-12<0045>-13<004C>-13<0057000300C1>-15<0052>-17<0044>-10<0057>-9<004C>-7<0051>-18<004A>-9<0010>-12<0053>-20<0052>-11<004C>-7<0051>-8<005700030051>-13<0058>-6<0050>-11<0045>-20<0048>-17<0055>]TJ
[decimal] 
128-bit decimal value
[single]
[<0036>-6<004C>-7<0051>-18<004A>-6<004F>-14<0048>-25<0010>-12<0053>-14<0055>-19<0048>-23<0046>-3<004C>-12<0056>-11<004C>-12<0052>-14<005100030016>6<0015>19<0010>-12<0045>-13<004C>-13<0057000300C1>-15<0052>-17<0044>-10<0057>-9<004C>-7<0051>-18<004A>-9<0010>-12<0053>-20<0052>-11<004C>-7<0051>-8<005700030051>-13<0058>-6<0050>-11<0045>-20<0048>-17<0055>]TJ
[array]
Array of values
[xml]
XML object
[hashtable]
Hashtable object similar to a dictionary object
In the
Resolve-ZipCode
 function, which is shown in the following 
Resolve-ZipCode.ps1 script, the 
$zip
 input parameter is constrained to only allow a 32-bit signed integer for input. Obviously, the 
[int] 
type constraint would eliminate most of the world22s postal codes, but the web service the script uses 
only resolves US-based postal codes, so it is a good addition to the function. 
In the 
Resolve-ZipCode
[<00030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051>-15<000F00030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030057>-2<004B>-2<004C0051>-11<004A00030057>-2<004B>-7<0044>-3<00570003004C>-5<005600030047>-5<0052>-7<0051>-9<00480003004C>-5<005600030057>-1<005200030058>-6<0056>-12<00480003004400030056>-16<0057>-2<0055>-12<004C0051>-11<004A00030057>-2<004B>-7<0044>-3<005700030053>-13<0052>-4<004C00510057>-19<005600030057>-1<005200030057>-2<004B>-9<00480003>]TJ
WSDL Web Services Description Language for the web service. Next, the 
New-WebServiceProxy
cmdlet is used to create a new web service proxy for the ZipCode service. The WSDL for the ZipCode 
[<0056>-12<0048>-10<0055>-47<0059>-12<004C>-3<0046>-2<004800030047>-7<0048>-9<00C0>-2<0051>-9<0048>-12<00560003004400030050>-9<0048>-10<0057>-2<004B>-9<0052>-13<004700030046>-14<0044>-4<004F>1<004F>-7<0048>-16<004700030057>-2<004B>-9<00480003>]TJ
GetInfoByZip
 method. It will accept a standard U.S.-based postal 
code. The results are displayed as a table. The Resolve-ZipCode.ps1 script is shown here:
esolve-ZipCode.ps1
When using a type constraint on an input parameter, any deviation from the expected data type 
will generate an error similar to the one shown here:
Needless to say, such an
 error could be distracting to the users of the function. One 
way to handle the problem of confusing error messages is to use the 
Trap
 keyword. In the 
DemoTrapSystemException.ps1 script, the My-Test function uses 
[int]
 to constrain the 
$myinput
 vari
able to only accept a 32-bit unsigned integer for input. If such an integer is received by the function 
when it is called, the function will return the string 
It worked
. If the function receives a string for input, 
an error will be raised, similar to the one shown previously. 
[<0035>-3<0044>-3<0057>-2<004B>-9<0048>-10<005500030057>-2<004B>-7<0044>-4<005100030047004C>-5<0056>-4<0053>-8<004F>-5<0044>2<005C0003004400030055>-8<0044>-3<005A00030048>-10<0055>-12<0055>-12<0052>-7<005500030050>-9<0048>-12<0056>-14<0056>-17<0044>-11<004A>-7<0048>-9<000F0003005A>-9<004B>-2<004C>-3<0046>4<004B00030050>-9<0052>-7<0056>-16<005700030058>-6<0056>-12<0048>-10<0055>-26<005600030044>-4<0051>-11<004700030050>-7<0044>-4<0051>4<005C0003002C>-3<003700030053>-7<0055>-12<00520049>-7<0048>-12<0056>-14<0056>-4<004C>-5<0052>-7<0051>-7<0044>-4<004F>-8<0056000300C0>-2<0051>-11<0047000300460052>-7<0051>2<0049>-18<0058>-6<0056>]TJ
ing, it is a best practice to suppress the display of the error message, and perhaps inform the user an 
error condition has occurred and provide more meaningful and direct information that the user can 
then relay to the help desk. Many times, IT departments will display such an error message, complete 
with either a local telephone number for the appropriate help desk, or even a link to an internal web 
page that provides detailed troubleshooting and corrective steps the user can perform. You could 
[<0048>-8<0059>1<0048>-10<005100030053>-7<0055>-12<0052>-1<0059>-12<004C>-5<0047>-7<0048000300440003005A>-2<0048>-10<004500030053>-9<0044>-11<004A>-7<004800030057>-2<004B>-7<0044>-3<00570003004B>-9<0052>-7<0056>-16<0057>-3<0048>-16<00470003004400030056>-12<0046>4<0055>-12<004C0053>-5<005700030057>-2<004B>-7<0044>-3<005700030057>-2<004B>-9<004800030058>-6<0056>-12<0048>-10<0055000300460052>-10<0058>1<004F>-8<004700030055>-17<0058>1<0051000300570052000300C0>-11<005B00030057>-2<004B>-9<004800030053>-7<0055>-12<0052>-7<0045>-8<004F>-7<0048>-10<0050>-14<001100030037>-7<004B>-2<004C>-5<00560003004C>-5<005600030056>-4<004C0050>-2<004C004F>-5<0044>-4<00550003>]TJ
to the 23Fix it for me24 web pages Microsoft introduced. 
When creating an instance of a 
System.SystemException
 class when a system exception occurs, 
the 
Trap
 statement will trap the error, rather than allowing it to display the error information on the 
screen. If you were to query the 
$error
 variable, you would see that the error had in fact occurred 
and was actually received by the error record. You would also have access to the 
ErrorRecord
 class 
via the 
$_ 
automatic variable, which means the error record has been passed along the pipeline. This 
gives you the ability to build a rich error-handling solution. In this example, the string 
error trapped
is displayed, and the 
Continue
 statement is used to continue the script execution on the next line of 
code. In this example, the next line of code that is executed is the 
After the error
 string. When the 
DemoTrapSystemException.ps1 script is run, the following output is shown:
  
The complete DemoTrapSystemException.ps1 script is shown here:
Demo
rapSystemException.ps1
Using more than two input parameters
When 
using more than two input parameters, I consider it a best practice to modify the way the 
function is structured. This not only makes the function easier to read, but it also permits cmdlet 
binding. In the basic function pattern shown here, the function accepts three input parameters. 
When considering the default values and the type constraints, the parameters begin to become 
long. Moving them to the inside of the function body highlights the fact that they are input param
eters, and it makes them easier to read, understand, and maintain. It also permits decorating the 
parameters with attributes.
An example of a function that uses three input parameters is the
Get-DirectoryListing
 function. 
With the type constraints, default values, and parameter names, the function signature would be 
rather cumbersome to include on a single line. This is shown here:
If the number of parameters were increased to four, or if a default value for the 
-path
 parameter 
were desired, the signature would easily scroll to two lines. The use of the 
Param
 statement inside the 
function body also provides the ability to specify input parameters to a function. 
ote
The use of the 
 statement inside the function body is often regarded as a per
sonal preference. It requires additional work, and often leaves the reader of the script won
dering why this was done. When there are more than two parameters, visually the 
statement stands out, and it is obvious why it was done in this particular manner. But, as 
will be shown in Chapter 7, using the 
 statement is the only way to gain access to 
advanced function features such as cmdlet binding, parameter attributes, and other power
ful features of Windows PowerShell.
Following the 
Function
 keyword, the name of the function, and the opening script block, the 
Param
 keyword is used to identify the parameters for the function. Each parameter must be sepa
rated by a comma. All the parameters must be surrounded with a set of parentheses. If you want to 
assign a default value for a parameter, such as the extension .txt for the 
Extension
 parameter in the 
Get-DirectoryListing
 function, you perform a straight value assignment followed by a comma. 
In the
Get-DirectoryListing 
function, the 
Today
 parameter is a 
switched parameter. When it is 
[<0056>-5<0058>1<0053>-7<0053>-8<004F004C>-5<0048>-16<004700030057>-1<005200030057>-2<004B>-9<004800030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051>-14<000F00030052>-7<0051>-4<004F>-12<005C000300C0>-2<004F>-7<0048>-12<00560003005A>-9<0055>-12<004C>-5<0057>-31<0057>-3<0048>-10<005100030057005200030056>-4<004C0051>-9<0046>-2<004800030050>-2<004C>-5<0047>1<0051>-2<004C>-5<004A>1<004B>-1<005700030052>-7<005100030057>-2<004B>-9<004800030047>-3<0044>2<005C00030057>-2<004B>-9<004800030056>-13<0046>4<0055>-12<004C0053>-5<00570003004C>-5<005600030055>-17<0058>1<00510003005A>-9<004C004F>1<004F00030045>-13<00480003>]TJ
[<0047004C>-5<0056>-4<0053>-8<004F>-5<0044>2<005C>1<0048>-16<0047>-8<00110003002C00490003004C>-5<00570003004C>-5<005600030051>-9<0052>-2<005700030056>-5<0058>1<0053>-7<0053>-8<004F004C>-5<0048>-16<0047>-9<000F00030044>-4<004F>1<004F000300C0>-2<004F>-7<0048>-12<005600030050>-7<0044>-3<0057>-1<0046>4<004B>-2<004C0051>-11<004A00030057>-2<004B>-9<004800030048>-6<005B>-37<0057>-3<0048>-10<0051>-9<0056>-3<004C>-5<0052>-7<00510003004C005100030057>-2<004B>-9<004800030049>-7<0052>-6<004F>-8<0047>-7<0048>-10<00550003005A>-9<004C004F>1<004F00030045>-13<004800030047004C>-5<0056>-4<0053>-8<004F>-5<0044>2<005C>1<0048>-16<0047>-8<001100030037>-7<004B>-9<00480003>]TJ
Get-DirectoryListingToday.ps1 script is shown here:
Get-DirectoryListing
oday.ps1
  
ote
 a best practice, you should avoid creating functions that have a large number 
[<0052>-27<0049>-30<0003>-30<004C>-28<0051>-32<0053>-37<0058>-33<0057>-30<0003>-30<0053>-37<0044>-31<0055>-36<0044>-32<0050>-37<0048>-18<0057>-11<0048>-18<0055>-34<0056>-17<00110003002C>1<00570003004C>-3<005600030059>3<0048>-8<0055>-45<005C00030046>3<0052>-5<0051>4<0049>-16<0058>-4<0056>-1<004C>2<0051>-9<004A>-6<00110003003A>-8<004B>-7<0048>-8<00510003005C>3<0052>-7<0058000300C00051>-9<00470003005C>3<0052>-7<0058>3<0055>-24<0056>-10<0048>-9<004F>-1<004900030046>6<0055>-10<0048>-7<0044>-1<0057004C>2<0051>-9<004A000300440003004F>-3<0044>-2<0055>-10<004A>-5<004800030051>-4<0058>3<0050>-1<0045>-11<0048>-8<005500030052>3<0049>-10<0003>]TJ
input parameters, you should ask if there is a better way to do things. It may be an indicator 
that you do not have a single-purpose function. In the 
 function, I have 
[<004400030056>-16<005A>-7<004C>-3<0057>1<0046>6<004B>-7<0048>-14<004700030053>-7<0044>-2<0055>-6<0044>-2<0050>-7<0048>-8<0057>-1<0048>-8<005500030057004B>-5<0044>-1<00570003005A>-6<004C>2<004F>3<004F000300C0004F>-4<0057>-1<0048>-8<005500030057004B>-7<0048000300C0004F>-5<0048>-10<005600030055>-10<0048>-8<0057>-5<0058>3<0055>-9<0051>-7<0048>-14<004700030045005C00030057004B>-7<004800030052>-5<0051>-7<0048>-10<00560003005A>-7<0055>-9<004C>-3<0057>-29<0057>-1<0048>-8<005100030057>2<005200030057>2<0052>-11<0047>-1<0044>4<005C>37<00110003002C>3<00490003002C0003005A>1<0048>-8<0055>-10<00480003>]TJ
writing the script for production use, instead of just to demonstrate multiple function 
parameters, I would have created another function called something like
. In 
that function, I would have a 
 switch, and a 
 parameter to allow a selectable date 
[<0049>-5<0052>-5<005500030057004B>-7<0048000300C0004F>-3<0057>-1<0048>-8<0055>46<001100030037>-5<004B004C>-3<005600030056>-10<0048>-8<0053>-7<0044>-2<0055>-6<0044>-1<0057>-1<0048>-10<005600030057004B>-7<004800030047>-1<0044>-1<0057>-17<0044>-5<0010>-15<004A>-1<0044>-1<0057004B>-7<0048>-8<0055>-9<004C>2<0051>-9<004A00030049>-16<0058>3<0051>-7<0046>-23<0057004C>-3<0052>-5<005100030049>-10<0055>-10<0052>-5<005000030057>1<004B>-7<0048000300C0004F>-3<0057>-1<0048>-8<0055>45<0012>20<0053>-5<0055>-10<0048>-10<0056>-10<0048>-8<0051>2<0057>-17<0044>-1<0057004C>-3<0052>-5<005100030049>-16<0058>3<0051>-7<0046>]TJ
[<0057004C>-3<0052>-5<0051>-11<001100030036>-8<0048>-14<004800030057004B>-7<0048000300B4>-13<0038>-1<0056>-10<004800030052>3<004900030049>-16<0058>3<0051>-7<0046>-23<0057004C>-3<0052>-5<0051>-7<005600030057>2<005200030053>-5<0055>-10<0052>1<0059>-10<004C>-3<0047>-5<004800030048>-8<0044>-8<0056>-10<004800030052>3<004900030050>-7<0052>-11<0047>2<004C>-2<00C0>-3<0046>-12<0044>-1<0057004C>-3<0052>-5<0051>11<00B500030056>-10<0048>-14<0046>-23<0057004C>-3<0052>-5<00510003004F>-2<0044>-1<0057>-1<0048>-8<00550003004C>2<005100030057004B>-7<004800030046>6<004B>-5<0044>-2<0053>-3<0057>-1<0048>-8<00550003>]TJ
for more discussion of this technique. 
Use of functions to encapsulate business logic
There 
[<0044>-4<0055>-12<004800030057>-35<005A>-2<00520003004E>-14<004C0051>-11<0047>-6<00560003005200490003004F>-7<0052>-13<004A004C>-3<00460003005A>-9<004C>-5<0057>-2<004B0003005A>-9<004B>-2<004C>-3<0046>4<004B00030056>-13<0046>4<0055>-12<004C0053>-5<0057>-35<005A>-9<0055>-12<004C>-5<0057>-3<0048>-10<0055>-26<005600030051>-9<0048>-16<0048>-16<004700030057>-1<005200030045>-13<0048000300460052>-7<0051>-9<0046>-2<0048>-10<0055>-12<0051>-9<0048>-16<0047>-8<001100030037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<00570003004C>-5<00560003>]TJ
program logic, 
and the second is business logic. 
Program logic
 includes the way the script works, the order in which 
things need to be done, and the requirements of code used in the script. An example of program 
logic is the requirement to open a connection to a database before querying the database. 
Business logic
 is something that is a requirement of the business, but not necessarily a requirement 
[<0052004900030057>-2<004B>-9<004800030053>-7<0055>-12<0052>-13<004A>1<0055>-8<0044>-4<005000030052>-7<005500030056>-13<0046>4<0055>-12<004C0053>-5<0057>-20<001100030037>-7<004B>-9<004800030056>-13<0046>4<0055>-12<004C0053>-5<005700030046>-14<0044>-4<0051000300520049>-41<0057>-3<0048>-10<005100030052>-7<0053>-13<0048>-10<0055>-8<0044>-3<0057>-3<00480003004D>-2<0058>-6<0056>-16<0057000300C0>-2<0051>-9<004800030055>-12<0048>-16<004A>-3<0044>-4<0055>-13<0047>1<004F>-7<0048>-12<0056>-14<005600030052004900030057>-2<004B>-9<004800030053>-9<0044>-4<0055>-41<0057>-2<004C>-3<0046>-2<0058>1<004F>-5<0044>-4<0055>-26<005600030052004900030057>-2<004B>-9<00480003>]TJ
[<0045>-9<0058>-6<0056>-3<004C0051>-9<0048>-12<0056>-14<005600030055>-17<0058>1<004F>-7<0048>-7<00110003002C>1<004900030057>-2<004B>-9<004800030056>-13<0046>4<0055>-12<004C0053>-5<00570003004C>-5<005600030047>-7<0048>-12<0056>-3<004C>-5<004A>1<0051>-9<0048>-16<004700030053>-7<0055>-12<0052>-7<0053>-13<0048>-10<0055>-12<004F>-12<005C>34<000F0003004C>-5<005700030056>-3<004B>-9<0052>-9<0058>1<004F>-8<004700030052>-7<0053>-13<0048>-10<0055>-8<0044>-3<0057>-3<004800030053>-13<0048>-10<0055>-38<0049>-7<0048>-16<0046>-25<0057>-2<004F>-12<005C000300C0>-2<0051>-9<004800030051>-9<005200030050>-7<0044>-3<0057>-31<0057>-3<0048>-10<00550003005A>-9<004B>-7<0044>-3<00570003004A>-6<0048>-10<0057>-19<00560003>]TJ
supplied for the business rules. 
In the 
BusinessLogicDemo.ps1 script, a function called 
Get-Discount
 is used to calculate the 
discount to be granted to the total amount. One good thing about encapsulating the business rules 
for the discount into a function is that as long as the contract between the function and the calling 
code does not change, you can drop any kind of convoluted discount schedule into the script block 
of the 
Get-Discount
 function that the business decides to come up with27including database calls 
to determine on-hand inventory, time of day, day of week, total sales volume for the month, the 
buyer22s loyalty level, and the square root of some random number that is used to determine instant 
discount rate. 
So, what is the contract with the function? The contract with the 
Get-Discount 
function says, 23If 
you give me a rate number as a type of 
system.double
 and a total as an integer, I will return to you a 
number that represents the total discount to be applied to the sale.24 As long as you adhere to that 
contract, you never need to modify the code. 
The 
Get-Discount 
function begins with the 
Function
 keyword and is followed by the name of the 
[<0049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<005100030044>-4<0051>-11<004700030057>-2<004B>-9<004800030047>-7<0048>-9<00C0>-2<0051>-2<004C>-5<0057>-2<004C>-5<0052>-7<005100030049>-7<0052>-7<005500030057>-35<005A>-2<00520003004C0051>-4<0053>-9<0058>-5<005700030053>-9<0044>-4<0055>-8<0044>-4<0050>-9<0048>-10<0057>-3<0048>-10<0055>-26<0056>-19<001100030037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<00570003004C0051>-4<0053>-9<0058>-5<005700030053>-9<0044>-4<0055>-8<0044>-4<0050>-9<0048>-10<0057>-3<0048>-10<00550003004C>-5<005600030057>-2<004B>-9<0048>]TJ
 $rate 
parameter, 
which is constrained to be of type
 system.double
 which will permit you to supply decimal numbers. 
The second input parameter is the
 $total
 parameter, which is constrained to be of type 
system.integer
and therefore will not allow decimal numbers. In the script block, the value of the 
-total
 parameter is 
multiplied by the value of the
-rate 
parameter. The result of this calculation is returned to the pipeline. 
The
 Get-Discount 
function is shown here: 
The entry point to the script assigns values to both the 
$total
 and 
$rate
 variables, as shown here:
The variable 
$discount 
is used to hold the result of the calculation from the 
Get-Discount 
function. 
When calling the function, it is a best practice to use the full parameter names. It makes the code 
easier to read, and will help make it immune to unintended problems if the function signature ever 
changes. 
ote
The 
signature of a function is the order and names of the input parameters. If you 
typically supply values to the signature via positional parameters, and the order of the input 
parameters changes, the code will fail, or worse yet, produce inconsistent results. If you 
typically call functions via partial parameter names, and an additional parameter is added, 
[<0057004B>-7<004800030056>-10<0046>6<0055>-9<004C>2<0053>-3<00570003005A>-6<004C>2<004F>3<004F00030049>-7<0044004C>2<004F00030047>-1<0058>-4<004800030057>2<005200030047>2<004C>-1<0049>-39<00C0>-3<0046>1<0058>4<004F>-3<0057>-36<005C0003005A>-6<004C>-3<0057004B00030057004B>-7<004800030047>2<004C>-3<0056>-15<0044>-2<0050>-2<0045>-4<004C>-3<004A>-1<0058>-1<0044>-1<0057004C>-3<0052>-5<005100030053>-4<0055>-10<0052>-11<0046>1<0048>-10<0056>-12<0056>-17<001100030032>-9<0045>-1<0059>-10<004C>-3<0052>-7<0058>-4<0056>-3<004F>-10<005C>37<000F0003005C>3<0052>-7<005800030057>-17<0044>-2<004E>14<004800030057004B004C>-3<00560003>]TJ
[<004C>2<0051>2<0057>2<005200030044>-7<0046>2<0046>3<0052>-7<0058>3<0051>2<00570003005A>-6<004B>-7<0048>-8<0051000300C0>1<0055>-24<0056>-14<00570003005A>-6<0055>-9<004C>-3<0057004C>2<0051>-9<004A00030057004B>-7<004800030056>-10<0046>6<0055>-9<004C>2<0053>-3<005700030044>-1<0051>-9<004700030057004B>-7<004800030049>-16<0058>3<0051>-7<0046>-23<0057004C>-3<0052>-5<0051>-12<000F00030045>-7<0058>-3<005700030050>-7<0052>-5<0051>2<0057004B>-7<005600030052>-5<00550003005C>3<0048>-7<0044>-2<0055>-24<00560003004F>-3<0044>-1<0057>-1<0048>-8<0055>42<000F0003005A>-6<004B>-7<0048>-8<00510003>]TJ
[<0050>-5<0044>-2<004E>-12<004C>2<0051>-9<004A00030050>-7<0052>-11<0047>2<004C>-2<00C0>-3<0046>-12<0044>-1<0057004C>-3<0052>-5<0051>-7<005600030057>2<005200030057004B>-7<004800030056>-10<0046>6<0055>-9<004C>2<0053>-3<005700030052>-4<005500030046>-12<0044>-2<004F>3<004F>2<004C>2<0051>-9<004A00030057004B>-7<004800030049>-16<0058>3<0051>-7<0046>-23<0057004C>-3<0052>-5<005100030059>-10<004C004400030044>-1<0051>-7<00520057004B>-7<0048>-8<005500030056>-10<0046>6<0055>-9<004C>2<0053>-3<0057>-17<000F00030057>1<004B>-7<004800030053>-5<0055>-10<0052>-5<0045>-5<004F>-5<0048>-8<00500003>]TJ
can arise.
The remainder of the script produces output for the screen. The results of running the script are 
shown here:
The complete text of the BusinessLogicDemo.ps1 script is shown here:
BusinessLogicDemo.ps1
  
Business logic does not have to be related to business purposes. Business logic is anything that is 
arbitrary that does not affect the running of the code. In the 
FindLargeDocs.ps1 script, there are two 
[<0049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051>-9<0056>-19<001100030037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051>-14<000F0003>]TJ
Get-Doc
[<000F0003004C>-5<005600030058>-6<0056>-12<0048>-16<0047000300570052000300C0>-2<0051>-11<004700030047>-5<0052>-13<0046>-2<0058>1<0050>-9<0048>-10<0051>-1<0057000300C0>-2<004F>-7<0048>-12<00560003000B>13<00C0>-2<004F>-7<0048>-12<00560003005A>-9<004C>-5<0057>-2<004B00030044>-4<005100030048>-6<005B>-37<0057>-3<0048>-10<0051>-9<0056>-4<004C>-5<0052>-7<005100030052004900030011>-5<0047>-5<0052>-13<0046>-15<000F0003>]TJ
.docx, or .dot in a folder that is passed to the function when it is called. The 
-recurse
 switch, when 
used with the 
Get-ChildItem
 cmdlet, causes the function to look in the present folder, as well as within 
child folders. This function is stand-alone and has no dependency on any other functions. 
The 
LargeFiles
[<00030053>-6<004C>-5<0048>-16<0046>-2<0048000300520049000300460052>-13<0047>-7<00480003004C>-5<005600030044000300C0>-2<004F>-6<0057>-3<0048>-10<0055>43<001100030024000300C0>-2<004F>-6<0057>-3<0048>-10<00550003004C>-5<00560003004E>-14<004C0051>-11<004700030052004900030056>-4<0053>-13<0048>-16<0046>4<004C>-2<0044>-4<004F>-3<0010>-4<0053>-9<0058>1<0055>-12<0053>-13<0052>-7<0056>-12<004800030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<005100030057>-2<004B>-7<0044>-3<005700030058>-6<0056>-12<0048>-12<005600030057>-2<004B>-9<00480003>]TJ
Filter
keyword rather than using the 
Function
 keyword when it is created. 
[<0038>9<0056004800030052>5<004900030049>-1<0058>4<00510046>-6<0057>-4<004C>3<0052>2<0051>-2<005600030057>2<0052000300530055>-6<0052>15<0059>-2<004C>1<0047>1<004800030048>-4<0044>-2<0056004800030052>5<004900030050>1<0052>-1<0047>4<004C>4<00C0>5<0046>-6<0044>9<0057>-5<004C>3<0052>2<0051>]TJ
It is a
 truism that a script is never completed. There is always something else to add to a script27a 
change that will improve it, or additional functionality someone requests. When a script is written as 
one long piece of inline code, without recourse to functions, it can be rather tedious and error prone 
to modify. 
An example of an inline script is the 
[<002C>-1<0051>-6<002F>-9<004C0051>-9<0048>-20<002A>-15<0048>-10<0057>-4<002C>-4<0033>6<0027>-12<0048>-10<0050>-9<0052>1<0011>-8<0053>-8<0056>8<001400030056>-13<0046>4<0055>-12<004C0053>-5<0057>-20<000F0003005A>-9<004B>-2<004C>-3<0046>4<004B00030049>-7<0052>-6<004F>1<004F>-7<0052>-3<005A>-12<0056>-19<001100030037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<00570003004F004C0051>-9<0048000300520049000300460052>-13<0047>-7<0048>-10<0003>]TJ
uses the 
Get-WmiObject
 cmdlet to retrieve the instances of the 
[<003A>-14<004C>5<0051>17<0016>8<0015>-20<0042>-34<0031>-2<0048>-7<0057>-27<005A>5<00520055>1<004E>-37<0024>-2<0047>5<0044>1<0053>4<0057>7<0048>1<0055>-19<0026>9<00520051>-1<00C0004A>5<0058>4<0055>2<00440057>4<004C>2<00520051>]TJ
WMI class that 
Internet Protocol IP enabled. The results of this WMI query are stored in the 
$IP
 vari
able. This line of code is shown here:
Once the WMI information has been obtained and stored, the remainder of the script prints out 
information to the screen. The 
IPAddress
IPSubNet
, and 
DNSServerSearchOrder
 properties are all 
[<0056>-16<0057>-1<0052>-7<0055>-12<0048>-16<00470003004C005100030044>-4<005100030044>-4<0055>-12<0055>-8<0044>2<005C>35<001100030029>-3<0052>-7<005500030057>-2<004B>-2<004C>-5<005600030048>-6<005B>-6<0044>-4<0050>-4<0053>-8<004F>-7<0048>-9<000F0003005C>1<0052>-9<005800030044>-4<0055>-12<004800030052>-7<0051>-4<004F>-12<005C0003004C00510057>-3<0048>-10<0055>-12<0048>-12<0056>-16<0057>-3<0048>-16<00470003004C005100030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<00570003002C>-3<003300030044>-11<0047>-7<0047>1<0055>-12<0048>-12<0056>-14<0056>-20<000F00030044>-3<0051>-11<00470003005C>1<0052>-9<005800030057>-2<004B>-9<0048>-10<0055>-12<0048>-8<0049>-7<0052>-7<0055>-12<00480003>]TJ
print out element 0, which will always exist if the network adapter has an IP address. This section of 
the script is shown here:
When the script is run, it produces output similar to the following:
The complete
 InLineGetIPDemo.ps1 script is shown here:
InLineGetIPDemo.ps1
With 
[<004D>-2<0058>-6<0056>-16<00570003004400030049>-6<0048>-9<005A00030050>-9<0052>-13<0047004C>-5<00C0>-5<0046>-14<0044>-3<0057>-2<004C>-5<0052>-7<0051>-9<005600030057>-1<005200030057>-2<004B>-9<004800030056>-13<0046>4<0055>-12<004C0053>-5<0057>-20<000F000300440003004A>2<0055>-12<0048>-10<0044>-3<005700030047>-7<0048>-10<0044>-4<004F000300520049000300C1>-10<0048>-6<005B>-8<004C0045>-6<004C004F004C>-5<0057>-38<005C00030046>-14<0044>-4<005100030045>-13<004800030052>-7<0045>-5<0057>-19<0044>-2<004C0051>-9<0048>-16<0047>-8<001100030037>-7<004B>-9<004800030050>-9<0052>-13<0047004C>-5<00C0>-5<0046>-14<0044>]TJ
tions, of course, involve moving the inline code into functions. As a best practice, a function should 
[<0045>-13<004800030051>-7<0044>-4<0055>-12<0055>-12<0052>-3<005A>-9<004F>-12<005C00030047>-7<0048>-9<00C0>-2<0051>-9<0048>-16<004700030044>-4<0051>-11<004700030056>-3<004B>-9<0052>-9<0058>1<004F>-8<004700030048>-10<0051>-9<0046>-14<0044>-4<0053>-8<0056>-6<0058>1<004F>-5<0044>-3<0057>-3<00480003004400030056>-3<004C0051>-11<004A>1<004F>-7<004800030057>-2<004B>-9<0052>-9<0058>-7<004A>1<004B>-1<0057>-20<00110003003A>-10<004B>-2<004C004F>-7<00480003004C>-5<00570003005A>-2<0052>-9<0058>1<004F>-8<004700030045>-13<004800030053>-13<0052>-7<0056>-14<0056>-3<004C0045>-8<004F>-7<004800030057>-1<005200030050>-9<0052>-1<0059>1<004800030057>-2<004B>-9<00480003>]TJ
[<0048>-10<0051>-1<0057>-2<004C0055>-12<004800030053>-7<0055>-12<0048>-8<0059>-12<004C>-5<0052>-9<0058>-6<005600030056>-13<0046>4<0055>-12<004C0053>-5<00570003004C00510057>-1<00520003004400030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051>-14<000F0003005C>1<0052>-9<00580003005A>-2<0052>-9<0058>1<004F>-8<004700030051>-9<0052>-2<00570003004B>-7<0044>1<0059>1<004800030044>-10<005600030050>-6<0058>-5<0046>4<004B000300C1>-10<0048>-6<005B>-8<004C0045>-6<004C004F004C>-5<0057>-38<005C>35<001100030037>-7<004B>-9<0048>-10<0055>-12<004800030044>-4<0055>-12<004800030057>-35<005A>-2<005200030057>-2<004B>-9<0052>-9<0058>-7<004A>1<004B>-2<0057>-19<00560003>]TJ
[<0052>-7<00550003004C>-5<0047>-7<0048>-10<0044>-10<005600030057>-2<004B>-7<0044>-3<005700030044>-4<0055>-12<004800030048>-6<005B>-8<0053>-7<0055>-12<0048>-12<0056>-14<0056>-12<0048>-16<00470003004C005100030057>-2<004B>-9<004800030056>-13<0046>4<0055>-12<004C0053>-5<0057>-20<001100030037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<00570003004C>-5<005600030052>-7<0045>-5<0057>-19<0044>-2<004C0051>-2<004C0051>-11<004A00030057>-2<004B>-9<00480003002C>-4<00330003004C0051>2<0049>-7<0052>-7<0055>-12<0050>-7<0044>-3<0057>-2<004C>-5<0052>-7<005100030049>-12<0055>-12<0052>-7<00500003003A>-7<0030>-4<002C>-16<000F00030044>-3<0051>-11<004700030057>-2<004B>-9<00480003>]TJ
second is formatting and displaying the IP information. It would be best to separate the gathering 
and the displaying processes from one another, because they are logically two different activities. 
To convert the InLineGetIPDemo.ps1 script into a script that uses a function, you only need to add 
the 
Function
 keyword, give the function a name, and surround the original code with a pair of curly 
brackets. The transformed script is now named 
GetIPDemoSingleFunction.ps1 and is shown here:
GetIPDemoSingleFunction.ps1
  
[<002C00490003005C>1<0052>-9<00580003004A>-5<005200030057>-1<005200030044>-4<004F>1<004F00030057>-2<004B>-9<004800030057>-2<0055>-12<0052>-9<0058>1<0045>-8<004F>-7<004800030057>-1<005200030057>-2<0055>-8<0044>-4<0051>-9<0056>-13<0049>-7<0052>-7<0055>-12<005000030057>-2<004B>-9<00480003004C0051>-4<004F004C0051>-9<0048000300460052>-13<0047>-7<00480003004C00510057>-1<00520003004400030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051>-14<000F0003005A>-9<004B>-7<0044>-3<005700030045>-13<0048>-10<0051>-9<0048>-9<00C0>-7<005700030047>-5<00520003005C>1<0052>-10<00580003>]TJ
derive? By making this single change, your code will become
Easier to read
Easier to understand
Easier to reuse
Easier to troubleshoot
The 
script is easier to read because you do not really need to read each line of code to see what 
it does. You see that there is a function that obtains the IP address, and it is called from outside the 
function. That is all the script does.
The script is easier to understand because you see there is a function that obtains the IP address. If 
you want to know the details of that operation, you read that function. If you are not interested in the 
details, you can skip that portion of the code.
The
script is easier to reuse because you can dot-source the script, as shown here. When the script 
is dot-sourced, all the executable code in the script is run. As a result, because each of the scripts 
prints information, the following is displayed:
The 
DotSourceScripts.ps1 script is shown following. As you can see, it provides a certain level of 
[<00C1>-10<0048>-6<005B>-8<004C0045>-6<004C004F004C>-5<0057>-38<005C00030057>-1<005200030046>4<004B>-9<0052>-13<0052>-7<0056>-12<004800030057>-2<004B>-9<00480003004C0051>2<0049>-7<0052>-7<0055>-12<0050>-7<0044>-3<0057>-2<004C>-5<0052>-7<005100030055>-12<0048>-16<0054>-3<0058004C0055>-12<0048>-16<0047>-9<000F00030044>-3<0051>-11<00470003004C>-5<005700030044>-4<004F>-8<0056>-12<005200030050>-7<0044>-4<004E>12<0048>-12<00560003004C>-6<005700030048>-9<0044>-10<0056>-21<005C00030057005200030050>-2<004C>-9<005B00030044>-4<0051>-11<004700030050>-7<0044>-3<0057>-1<0046>4<004B00030057>-2<004B>-9<004800030055>-12<0048>-16<0054>-3<0058004C0055>-12<0048>-16<00470003>]TJ
information. If each of the scripts had been written in a more standard fashion, and the output had 
been more standardized, the results would have been more impressive. As it is, three lines of code 
produce an exceptional amount of useful output that could be acceptable in a variety of situations. 
# DotSourceScripts.ps1
A better way to work with the function is to think about the things the function is actually doing. In 
the 
[<0029>7<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051>-14<002A>-15<0048>-10<0057>-4<002C>-4<0033>6<0027>-12<0048>-10<0050>-9<0052>1<0011>-8<0053>-8<0056>8<001400030056>-13<0046>4<0055>-12<004C0053>-5<0057>-20<000F00030057>-2<004B>-9<0048>-10<0055>-12<004800030044>-4<0055>-12<004800030057>-35<005A>-2<005200030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051>-9<0056>-19<001100030037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030046>1<0052>-7<0051>-4<0051>-9<0048>-16<0046>-25<0057>-19<005600030057>-1<00520003003A>-7<0030>-4<002C>-16<000F0003005A>-9<004B>-2<004C>-3<0046>4<004B00030055>-12<0048>-10<0057>-8<0058>1<0055>-12<0051>-9<00560003>]TJ
a management object. The second function formats the output. These are two completely unrelated 
[<0057>-19<0044>-10<0056>-4<004E>-31<0056>-19<001100030037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030057>-19<0044>-10<0056>-4<004E0003004C>-5<005600030047>-3<0044>-3<0057>-19<00440003004A>-3<0044>-3<0057>-2<004B>-9<0048>-10<0055>-12<004C0051>-11<004A>-11<000F00030044>-3<0051>-11<004700030057>-2<004B>-9<004800030056>-12<0048>-16<00460052>-7<0051>-11<004700030057>-19<0044>-10<0056>-4<004E0003004C>-5<005600030057>-2<004B>-9<004800030053>-7<0055>-12<0048>-12<0056>-12<0048>-10<00510057>-19<0044>-3<0057>-2<004C>-5<0052>-7<005100030052004900030057>-2<004B>-9<00480003004C0051>2<0049>-7<0052>-7<0055>-12<0050>-7<0044>-3<0057>-2<004C>-5<0052>-7<0051>-14<001100030037>-7<004B>-9<00480003>]TJ
FunctionGetIPDemo.ps1 script is shown here:
FunctionGetIPDemo.ps1
By 
separating the data-gathering and the presentation activities into different functions, you 
[<004A>-3<0044>-2<004C005100030044>-11<0047>-7<0047004C>-5<0057>-2<004C>-5<0052>-7<0051>-7<0044>-4<004F000300C1>-10<0048>-6<005B>-8<004C0045>-6<004C004F004C>-5<0057>-38<005C>35<00110003003C>49<0052>-9<0058000300460052>-9<0058>1<004F>-8<004700030048>-10<0044>-10<0056>-3<004C004F>-12<005C00030050>-9<0052>-13<0047004C>-3<0049>-48<005C00030057>-2<004B>-9<00480003>]TJ
Get-IPObject 
function to look for network 
adapters that were not IP enabled. To do this, you would need to modify the 
[<0010>-5<00C0>-1<004F0057>7<0048>1<0055>]TJ
 parameter of 
the 
Get-WmiObject
 cmdlet. Since most of the time you would actually be interested only in network 
adapters that are IP enabled, it would make sense to set the default value of the input parameter to 
$true
[<001100030025>-9<005C00030047>-6<0048>-8<0049>-9<0044>-6<0058>1<004F>-5<0057>-20<000F00030057>-2<004B>-9<004800030045>-13<0048>-10<004B>-7<0044>1<0059>-12<004C>-5<0052>-7<005500030052004900030057>-2<004B>-9<004800030055>-12<0048>-8<0059>-12<004C>-5<0056>-12<0048>-16<004700030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<00510003004C>-5<005600030048>-6<005B>-6<0044>-9<0046>-25<0057>-2<004F>-12<005C00030044>-10<00560003004C>-5<00570003005A>-2<0044>-10<005600030053>-7<0055>-12<004C>-5<0052>-7<005500030057>-1<005200030050>-9<0052>-13<0047004C>-5<00C0>-5<0046>-14<0044>-3<0057>-2<004C>-5<0052>-7<0051>-14<001100030037>-7<004B>-9<00480003>]TJ
advantage is that you can now use the function and modify the objects returned by it. To do this, 
you supply 
$false
 when calling the function. This is illustrated in the 
Get-IPObjectDefaultEnabled.ps1 
script. 
Get-IPObjectDefaultEnabled.ps1
By separating the gathering of the information from the presentation of the information, you gain 
[<00C1>-10<0048>-6<005B>-8<004C0045>-6<004C004F004C>-5<0057>-38<005C00030051>-9<0052>-2<005700030052>-7<0051>-4<004F>-12<005C0003004C005100030057>-2<004B>-9<004800030057>-38<005C>-12<0053>-13<00480003005200490003004C0051>2<0049>-7<0052>-7<0055>-12<0050>-7<0044>-3<0057>-2<004C>-5<0052>-7<005100030057>-2<004B>-7<0044>-3<00570003004C>-5<00560003004A>-3<0044>-4<0055>-12<0051>-9<0048>-10<0055>-12<0048>-16<0047>-9<000F00030045>-9<0058>-5<005700030044>-4<004F>-8<0056>-12<00520003004C005100030057>-2<004B>-9<00480003005A>-3<0044>2<005C00030057>-2<004B>-9<00480003004C0051>2<0049>-7<0052>-7<0055>-12<0050>-7<0044>-3<0057>-2<004C>-5<0052>-7<00510003004C>-5<00560003>]TJ
[<0047004C>-5<0056>-4<0053>-8<004F>-5<0044>2<005C>1<0048>-16<0047>-8<00110003003A>-10<004B>-9<0048>-10<00510003004A>-3<0044>-3<0057>-2<004B>-9<0048>-10<0055>-12<004C0051>-11<004A00030051>-9<0048>-10<0057>-35<005A>-2<0052>-7<0055>-12<004E00030044>-11<0047>-3<0044>-4<0053>-5<0057>-3<0048>-10<0055000300460052>-7<005100C0>-7<004A>-3<0058>1<0055>-8<0044>-3<0057>-2<004C>-5<0052>-7<00510003004C0051>2<0049>-7<0052>-7<0055>-12<0050>-7<0044>-3<0057>-2<004C>-5<0052>-7<005100030049>-12<0055>-12<0052>-7<00500003004400030051>-9<0048>-10<0057>-35<005A>-2<0052>-7<0055>-12<004E00030044>-11<0047>-3<0044>-4<0053>-5<0057>-3<0048>-10<005500030057>-2<004B>-7<0044>-3<00570003004C>-5<00560003>]TJ
not enabled for IP, the results are not as impressive as for one that is enabled for IP. You might there
fore decide to create a different display to list only the pertinent information. As the function that 
displays the information is different from the one that gathers the information, a change can easily be 
made that customizes the information that is most germane. The 
Begin
 section of the function is run 
once during the execution of the function. This is the perfect place to create a header for the output 
  
data. The 
Process
 section executes once for each item on the pipeline, which in this example will be 
each of the non-IP-enabled network adapters. The 
Write-Host
 cmdlet is used to easily write the data 
out to the Windows PowerShell console. The backtick-
 character combination 
 is used to produce 
a tab. 
ote
The 
 character is a string character, and as such works with cmdlets that accept 
string input. 
The 
Get-IPObjectDefaultEnabledFormatNonIPOutput.ps1 script is shown here:
Get-IPObjectDefaultEnabledFormat
onIPOutput.ps1
You can use the 
Get-IPObject
[<00030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<005100030057005200030055>-12<0048>-10<0057>-2<0055>-12<004C>-5<0048>-8<0059>1<004800030057>-2<004B>-9<004800030051>-9<0048>-10<0057>-35<005A>-2<0052>-7<0055>-12<004E00030044>-11<0047>-3<0044>-4<0053>-5<0057>-3<0048>-10<0055000300460052>-7<005100C0>-7<004A>-3<0058>1<0055>-8<0044>-3<0057>-2<004C>-5<0052>-7<0051>-14<000F00030044>-3<0051>-11<00470003005C>1<0052>-9<005800030046>-14<0044>-4<00510003>]TJ
use the 
Format-NonIPOutput 
and
Format-IPOutput 
functions in a script to display the IP information 
[<0044>-10<005600030056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<0046>-14<0044>-4<004F>1<004F>-12<005C00030049>-7<0052>-7<0055>-12<0050>-7<0044>-3<0057>-31<0057>-3<0048>-16<004700030052>-9<0058>-5<0057>-2<0053>-9<0058>-5<0057>-20<0011>]TJ
CombinationFormatGetIPDemo.ps1
[<0038>5<0051>-3<0047>-1<0048>-7<0055>-10<0056>5<0057>-12<0044>-1<0051>-3<0047>2<004C>1<0051>-5<004A>-2<0003>-2<00C0>1<004F>2<00570048>-7<0055>-10<0056>]TJ
[<0024000300C0>-2<004F>-6<0057>-3<0048>-10<0055>]TJ
 is a special-purpose function. It is used to operate on each object in a pipeline and is often 
[<0058>-6<0056>-12<0048>-16<004700030057>-1<005200030055>-12<0048>-16<0047>-3<0058>-5<0046>-2<004800030057>-2<004B>-9<004800030051>-6<0058>1<0050>-4<0045>-13<0048>-10<005500030052004900030052>-7<0045>-6<004D>-5<0048>-16<0046>-25<0057>-19<005600030057>-2<004B>-7<0044>-3<005700030044>-4<0055>-12<004800030053>-9<0044>-10<0056>-14<0056>-12<0048>-16<004700030044>-4<004F>-7<0052>-7<0051>-11<004A00030057>-2<004B>-9<004800030053>-6<004C0053>-13<0048>-11<004F004C0051>-9<0048>-7<001100030037>53<005C>-12<0053>-6<004C>-3<0046>-14<0044>-4<004F>1<004F>-12<005C>34<000F00030044000300C0>-2<004F>-6<0057>-3<0048>-10<005500030047>-5<0052>-13<0048>-12<005600030051>-9<0052>-2<00570003>]TJ
use the 
Begin
 or the 
End
[<00030053>-9<0044>-4<0055>-8<0044>-4<0050>-9<0048>-10<0057>-3<0048>-10<0055>-26<005600030057>-2<004B>-7<0044>-3<00570003004400030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<005100030050>-2<004C>-5<004A>1<004B>-1<005700030051>-9<0048>-16<0048>-16<004700030057>-1<005200030058>-6<0056>-12<0048>-7<001100030036>-10<0052000F00030044000300C0>-2<004F>-6<0057>-3<0048>-10<00550003004C>-5<0056000300520049>-41<0057>-3<0048>-10<005100030057>-2<004B>-9<0052>-9<0058>-7<004A>1<004B>-1<00570003>]TJ
of as a function that only has a 
Process
 block. But then, many functions are written without using the 
Begin 
or 
End
[<00030053>-9<0044>-4<0055>-8<0044>-4<0050>-9<0048>-10<0057>-3<0048>-10<0055>-26<0056>-20<000F0003005A>-9<004B>-2<004C004F>-7<0048000300C0>-2<004F>-6<0057>-3<0048>-10<0055>-26<005600030044>-4<0055>-12<004800030051>-9<0048>-8<0059>1<0048>-10<00550003005A>-9<0055>-12<004C>-5<0057>-31<0057>-3<0048>-10<00510003004C005100030056>-5<0058>-5<0046>4<004B000300440003005A>-2<0044>2<005C00030057>-2<004B>-7<0044>-3<005700030057>-2<004B>-9<0048>-7<005C00030058>-6<0056>-12<004800030057>-2<004B>-9<00480003>]TJ
Begin
 or the 
End
[<0003>10<0053>1<0044>6<0055>2<0044>-4<0050>-9<0048>-10<0057>-3<0048>-10<0055>-26<0056>-19<001100030037>-7<004B>-9<004800030045>-6<004C>-5<004A>-7<004A>-7<0048>-12<0056>-16<005700030047004C>-3<0049>-39<0049>-7<0048>-10<0055>-12<0048>-10<0051>-9<0046>-2<004800030045>-13<0048>-10<0057>-35<005A>-2<0048>-16<0048>-10<00510003004400030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<005100030044>-4<0051>-11<004700030044000300C0>-2<004F>-6<0057>-3<0048>-10<00550003004C>-5<00560003004400030045>-6<004C>-5<005700030056>-5<0058>1<0045>-5<0057>-2<004F>-7<0048>-10<0055>39<000F0003004B>-9<0052>-3<005A>-2<0048>-8<0059>1<0048>-10<0055>43<0011>10<0003>]TJ
When a function is used inside a pipeline, it actually halts the processing of the pipeline until the 
[<00C0>-12<0055>-36<0056>-26<0057>-10<0003>-10<0048>-21<004F>-17<0048>-20<0050>-19<0048>-10<005100570003004C005100030057>-2<004B>-9<004800030053>-6<004C0053>-13<0048>-11<004F004C0051>-9<00480003004B>-7<0044>-10<005600030055>-17<0058>1<005100030057>-1<0052000300460052>-7<0050>-4<0053>-8<004F>-7<0048>-10<0057>-2<004C>-5<0052>-7<0051>-14<001100030037>-7<004B>-9<004800030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<005100030057>-2<004B>-9<0048>-10<005100030044>-9<00460046>-2<0048>-10<0053>-5<0057>-19<005600030057>-2<004B>-9<00480003004C0051>-4<0053>-9<0058>-5<005700030049>-12<0055>-12<0052>-7<005000030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<0057>-10<0003>]TJ
element in the pipeline and begins its processing. When the processing in the function is completed, 
it then passes the results along to the next element in the script block. A function runs once for the 
[<0053>-6<004C0053>-13<0048>-11<004F004C0051>-9<0048>-16<004700030047>-3<0044>-3<0057>-19<0044>-14<001100030024000300C0>-2<004F>-5<0057>-3<0048>-10<0055>39<000F00030052>-6<005100030057>-2<004B>-9<004800030052>-2<0057>-2<004B>-9<0048>-10<00550003004B>-7<0044>-4<0051>-11<0047>-9<000F00030055>-17<0058>1<0051>-9<005600030052>-7<0051>-9<0046>-2<004800030049>-7<0052>-7<005500030048>-10<0044>-9<0046>4<004B00030053>-6<004C>-5<0048>-16<0046>-2<004800030052004900030047>-3<0044>-3<0057>-19<004400030053>-9<0044>-10<0056>-14<0056>-12<0048>-16<004700030052>-1<0059>1<0048>-10<005500030057>-2<004B>-9<004800030053>-6<004C0053>-13<0048>-11<004F004C0051>-9<0048>-7<00110003>]TJ
[<002C>-1<005100030056>-4<004B>-9<0052>-7<0055>-41<0057>-20<000F00030044000300C0>-2<004F>-5<0057>-3<0048>-10<00550003005A>-9<004C004F>1<004F00030056>-16<0057>-2<0055>-12<0048>-10<0044>-4<005000030057>-2<004B>-9<004800030047>-3<0044>-3<0057>-19<00440003005A>-9<004B>-9<0048>-10<00510003004C00510003004400030053>-6<004C0053>-13<0048>-11<004F004C0051>-9<0048>-9<000F00030044>-3<0051>-11<00470003004400030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<00510003005A>-9<004C004F>1<004F00030051>-10<0052>-2<0057>-20<001100030037>-7<004B>-2<004C>-5<005600030046>-15<0044>-4<005100030050>-7<0044>-4<004E>12<00480003004400030045>-6<004C>-5<004A0003>]TJ
[<0047004C>-3<0049>-39<0049>-7<0048>-10<0055>-12<0048>-10<0051>-9<0046>-2<00480003004C005100030057>-2<004B>-9<004800030053>-13<0048>-10<0055>-38<0049>-7<0052>-7<0055>-12<0050>-7<0044>-4<0051>-9<0046>-2<0048>-7<001100030037>55<00520003004C004F>1<004F>-4<0058>-6<0056>-16<0057>-2<0055>-8<0044>-3<0057>-3<004800030057>-2<004B>-2<004C>-5<005600030053>-13<0052>-4<004C00510057>-20<000F0003004F>-7<0048>-10<0057>-32<00B7>26<005600030048>-6<005B>-6<0044>-4<0050>-2<004C0051>-9<00480003004400030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<005100030044>-4<0051>-11<004700030044000300C0>-2<004F>-6<0057>-3<0048>-10<005500030057>-2<004B>-7<0044>-3<005700030044>-9<004600460052>-7<0050>]TJ
plish the same things. 
In the 
MeasureAddOneFilter.ps1 script, which follows, an array of 50,000 elements is created by 
using the 
1..50000 
syntax. In Windows PowerShell 1.0, 50,000 was the maximum size of an array cre
ated in this manner. In Windows PowerShell 2.0 and 3.0, this ceiling is raised to the maximum size of 
an 
[Int32]
 2,146,483,647. The use of this size is dependent upon memory. This is shown here:
  
The array is then pipelined into the 
AddOne
[<000300C0>-2<004F>-6<0057>-3<0048>-10<0055>44<001100030037>-7<004B>-9<0048000300C0>-2<004F>-6<0057>-3<0048>-10<005500030053>-7<0055>-12<004C00510057>-19<005600030052>-10<0058>-5<005700030057>-2<004B>-9<004800030056>-16<0057>-2<0055>-12<004C0051>-11<004A0003>]TJ
[<0044>-3<0047>-2<004700030052>-7<0051>-6<0048000300C0>-7<004F>-7<00570048>-6<0055>]TJ
and then adds the number 1 to the current number on the pipeline. The length of time it takes 
to run the command is then displayed. On my computer, it takes about 2.6 seconds to run the 
MeasureAddOneFilter.ps1 script. 
Measure
ddOneFilter.ps1
The function version is shown following. In a similar fashion to the MeasureAddOneFIlter.ps1 script, 
it creates an array of 50,000 numbers and pipelines the results to the 
AddOne
 function. The string 
Add One Function
 is displayed. An automatic variable is created when pipelining input to a func
tion. It is called 
$input
. The 
$input 
variable is an enumerator, not just a plain array. It has a
moveNext
method, which can be used to move to the next item in the collection. Since 
$input
 is not a plain 
array, you cannot index directly into it27
$input[0]
[<0003005A>-2<0052>-9<0058>1<004F>-8<004700030049>-9<0044>-2<004C004F>-9<001100030037>55<005200030055>-12<0048>-10<0057>-2<0055>-12<004C>-5<0048>-8<0059>1<00480003004400030056>-3<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<004600030048>-11<004F>-7<0048>-10<0050>-9<0048>-10<00510057>-20<000F0003005C>1<0052>-9<005800030058>-6<0056>-12<00480003>]TJ
the 
$input.current
 property. When I run the script below, it takes 4.3 seconds on my computer that is 
[<0044>-4<004F>1<0050>-9<0052>-7<0056>-16<005700030057>-34<005A>-9<004C>-3<0046>-2<004800030044>-10<00560003004F>-7<0052>-7<0051>-11<004A00030044>-10<005600030057>-2<004B>-9<0048000300C0>-2<004F>-5<0057>-3<0048>-10<0055>6<000C>14<0011>]TJ
Measure
ddOneFunction.ps1
[<003A>-10<004B>-7<0044>-3<00570003005A>-2<0044>-10<00560003004B>-7<0044>-4<0053>-7<0053>-13<0048>-10<0051>-2<004C0051>-11<004A00030057>-2<004B>-7<0044>-3<005700030050>-7<0044>-11<0047>-7<004800030057>-2<004B>-9<0048000300C0>-2<004F>-6<0057>-3<0048>-10<005500030056>-12<005200030050>-6<0058>-5<0046>4<004B00030049>-9<0044>-10<0056>-16<0057>-3<0048>-10<005500030057>-2<004B>-7<0044>-4<005100030057>-2<004B>-9<004800030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<00510003004C005100030057>-2<004B>-2<004C>-5<005600030048>-6<005B>-6<0044>-4<0050>-4<0053>-8<004F>-7<0048>25<002200030037>-7<004B>-9<00480003>]TJ
[<00C0>-2<004F>-6<0057>-3<0048>-10<005500030055>-17<0058>1<0051>-9<005600030052>-7<0051>-9<0046>-2<004800030049>-7<0052>-7<005500030048>-10<0044>-9<0046>4<004B0003004C>-5<0057>-3<0048>-10<005000030052>-7<005100030057>-2<004B>-9<004800030053>-6<004C0053>-13<0048>-11<004F004C0051>-9<0048>-7<001100030037>-7<004B>-2<004C>-5<00560003004C>-5<005600030056>-4<004B>-9<0052>-3<005A>-9<00510003004B>-9<0048>-10<0055>-12<0048>5<001D>]TJ
The 
DemoAddOneFilter.ps1 script is shown here:
Demo
ddOneFilter.ps1
The 
AddOne
 function runs to completion once for all the items in the pipeline. This effectively stops 
the processing in the middle of the pipeline until all the elements of the array are created. Then all the 
data is passed to the function via the 
$input
 variable at one time. This type of approach does not take 
[<0044>-11<0047>-11<0059>-5<0044>-4<00510057>-19<0044>-11<004A>-7<004800030052004900030057>-2<004B>-9<004800030056>-16<0057>-2<0055>-12<0048>-10<0044>-4<0050>-2<004C0051>-11<004A00030051>-7<0044>-3<0057>-8<0058>1<0055>-12<004800030052004900030057>-2<004B>-9<004800030053>-6<004C0053>-13<0048>-11<004F004C0051>-9<0048>-9<000F0003005A>-9<004B>-2<004C>-3<0046>4<004B0003004C005100030050>-7<0044>-4<0051>4<005C0003004C0051>-9<0056>-16<0057>-19<0044>-4<0051>-9<0046>-2<0048>-12<00560003004C>-5<005600030050>-9<0052>-7<0055>-12<004800030050>-9<0048>-10<0050>-9<0052>-7<0055>-47<005C>4<0010>-19<0048>-8<0049>-41<00C0>-5<0046>4<004C>-5<0048>-10<00510057>-20<0011>-10<0003>]TJ
The DemoAddOneFunction.ps1 script is shown here:
Demo
ddOneFunction.ps1
To 
[<0046>4<004F>-7<0052>-7<0056>-12<004800030057>-2<004B>-2<004C>-5<005600030053>-13<0048>-10<0055>-38<0049>-7<0052>-7<0055>-12<0050>-7<0044>-4<0051>-9<0046>-2<00480003004C>-5<0056>-14<0056>-5<0058>-7<004800030045>-13<0048>-10<0057>-35<005A>-2<0048>-16<0048>-10<005100030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051>-9<005600030044>-4<0051>-11<0047000300C0>-2<004F>-6<0057>-3<0048>-10<0055>-26<00560003005A>-9<004B>-9<0048>-10<005100030058>-6<0056>-12<0048>-16<00470003004C00510003004400030053>-6<004C0053>-13<0048>-11<004F004C0051>-9<0048>-9<000F0003005C>1<0052>-10<005800030046>-14<0044>-4<00510003>]TJ
[<005A>-9<0055>-12<004C>-5<0057>-3<00480003005C>1<0052>-9<0058>1<005500030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<00510003004C005100030056>-5<0058>-5<0046>4<004B0003004400030050>-6<0044>-4<0051>-4<0051>-9<0048>-10<005500030057>-2<004B>-7<0044>-3<00570003004C>-5<005700030045>-13<0048>-10<004B>-7<0044>1<0059>1<0048>-12<00560003004F004C004E>12<004800030044000300C0>-2<004F>-6<0057>-3<0048>-10<0055>43<001100030037>55<005200030047>-5<005200030057>-2<004B>-2<004C>-5<0056>-20<000F0003005C>1<0052>-9<005800030050>-6<0058>-6<0056>-16<005700030048>-6<005B>-8<0053>-8<004F004C>-3<0046>4<004C>-5<0057>-2<004F>-12<005C00030046>-14<0044>-4<004F>1<004F0003>]TJ
out the 
Process
 block. When you use the 
Process
 block, you are also able to use the 
 automatic 
variable instead of being restricted to using 
$input
. When you do this, the script will look like 
DemoAddOneR2Function.ps1, the results of which are shown here:
  
The complete DemoAddOneR2Function.ps1 script is shown here:
Demo
ddOne
2Function.ps1
What does using an explicit 
Process
 block do to the performance? When run on my computer, the 
[<0049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<005100030057>-19<0044>-4<004E>12<0048>-12<005600030044>-4<0045>-13<0052>-10<0058>-5<0057000300150011>-5<001900030056>-12<0048>-16<00460052>-7<0051>-11<0047>-6<0056>-20<000F0003005A>-8<004B>-2<004C>-3<0046>4<004B0003004C>-5<005600030059>-12<004C0055>-41<0057>-8<0058>-3<0044>-4<004F>1<004F>-12<005C00030057>-2<004B>-9<004800030056>-17<0044>-4<0050>-9<004800030044>-4<0050>-9<0052>-9<0058>1<0051005700030052>1<004900030057>-2<004C0050>-9<004800030057>-19<0044>-4<004E>12<0048>-10<005100030045>-2<005C00030057>-2<004B>-9<0048000300C0>-2<004F>-6<0057>-3<0048>-10<0055>44<001100030037>-7<004B>-9<00480003>]TJ
MeasureAddOneR2Function.ps1 script is shown here:
Measure
ddOne
2Function.ps1
Another 
[<0055>-12<0048>-10<0044>-10<0056>-12<0052>-7<005100030049>-7<0052>-7<005500030058>-6<0056>-3<004C0051>-11<004A000300C0>-2<004F>-6<0057>-3<0048>-10<0055>-26<00560003004C>-5<005600030057>-2<004B>-7<0044>-3<005700030057>-2<004B>-9<0048>-7<005C00030059>-12<004C>-5<0056>-5<0058>-3<0044>-4<004F>1<004F>-12<005C00030056>-16<0057>-19<0044>-4<0051>-11<004700030052>-9<0058>-5<0057>-20<000F00030044>-3<0051>-11<004700030057>-2<004B>-9<0048>-10<0055>-12<0048>-8<0049>-7<0052>-7<0055>-12<00480003004C0050>-4<0053>-7<0055>-12<0052>-1<0059>1<004800030055>-12<0048>-10<0044>-11<0047>-3<0044>-4<0045>-6<004C004F004C>-5<0057>-38<005C0003005200490003>]TJ
[<0057>-2<004B>-9<004800030056>-13<0046>4<0055>-12<004C0053>-5<0057>-20<001100030037>-7<004B>-9<004800030057>-38<005C>-12<0053>-6<004C>-3<0046>-14<0044>-4<004F00030053>-9<0044>-3<0057>-31<0057>-3<0048>-10<0055>-12<005100030049>-7<0052>-7<005500030044000300C0>-2<004F>-6<0057>-3<0048>-10<00550003004C>-5<005600030056>-4<004B>-9<0052>-3<005A>-9<00510003004B>-9<0048>-10<0055>-12<0048>5<001D>]TJ
The 
HasMessage
[<000300C0>-2<004F>-6<0057>-3<0048>-10<0055>39<000F00030049>-7<0052>-10<0058>1<0051>-11<00470003004C005100030057>-2<004B>-9<00480003>]TJ
FilterHasMessage.ps1 script, begins with the 
Filter
 keyword, 
[<0044>-4<0051>-11<00470003004C>-5<005600030049>-7<0052>-6<004F>1<004F>-7<0052>-3<005A>-2<0048>-16<004700030045>-2<005C00030057>-2<004B>-9<004800030051>-7<0044>-4<0050>-9<004800030052004900030057>-2<004B>-9<0048000300C0>-2<004F>-6<0057>-3<0048>-10<0055>39<000F0003005A>-8<004B>-2<004C>-3<0046>4<004B0003004C>-5<00560003>]TJ
HasMessage
. Inside the script block the curly brack
ets, the 
 automatic variable is used to provide access to the pipeline. It is sent to the 
Where-Object
[<0046>4<0050>-11<0047>1<004F>-7<0048>-10<0057>-20<000F0003005A>-9<004B>-2<004C>-3<0046>4<004B00030053>-13<0048>-10<0055>-38<0049>-7<0052>-7<0055>-12<0050>-9<005600030057>-2<004B>-9<0048000300C0>-2<004F>-6<0057>-3<0048>-10<0055>44<00110003002C>-1<005100030057>-2<004B>-9<004800030046>-14<0044>-4<004F>1<004F004C0051>-11<004A00030056>-12<0046>4<0055>-12<004C0053>-5<0057>-20<000F00030057>-2<004B>-9<004800030055>-12<0048>-12<0056>-5<0058>1<004F>-6<0057>-19<005600030052004900030057>-2<004B>-9<00480003>]TJ
HasMessage
[<000300C0>-2<004F>-6<0057>-3<0048>-10<00550003004C>-5<005600030056>-12<0048>-10<005100570003005700520003>]TJ
the 
Measure-Object
 cmdlet, which tells the user how many events in the application log have a mes
sage attached to them. The FilterHasMessage.ps1 script is shown here:
Filter
asMessage.ps1
[<0024>-11<004F>-6<0057>-2<004B>-9<0052>-9<0058>-7<004A>1<004B00030057>-2<004B>-9<0048000300C0>-2<004F>-6<0057>-3<0048>-10<00550003004B>-7<0044>-10<005600030044>-4<00510003004C0050>-4<0053>-8<004F004C>-3<0046>4<004C>-5<00570003>]TJ
Process 
block, this does not prevent you from using the 
Begin
Process
, and 
End
 script blocks explicitly. In the 
[<0029>-2<004C004F>-6<0057>-3<0048>-10<0055>54<0037>55<0052>-13<0047>-3<0044>2<005C>35<0011>-8<0053>-8<0056>8<001400030056>-13<0046>4<0055>-12<004C0053>-5<0057>-20<000F00030044000300C0>-2<004F>-6<0057>-3<0048>-10<005500030051>-7<0044>-4<0050>-9<0048>-16<00470003>]TJ
IsToday
 is created. 
[<0037>55<005200030050>-7<0044>-4<004E>12<004800030057>-2<004B>-9<0048000300C0>-2<004F>-5<0057>-3<0048>-10<00550003004400030056>-16<0057>-19<0044>-4<0051>-11<0047>-2<0010>2<0044>-4<004F>-7<0052>-7<0051>-9<004800030048>-10<00510057>-2<004C>-5<0057>-38<005C0003005A>-9<004C>-5<0057>-2<004B00030051>-9<005200030048>-6<005B>-37<0057>-3<0048>-10<0055>-12<0051>-7<0044>-4<004F00030047>-7<0048>-10<0053>-13<0048>-10<0051>-11<0047>-7<0048>-10<0051>-9<0046>4<004C>-5<0048>-12<005600030055>-12<0048>-16<0054>-3<0058004C0055>-12<0048>-16<00470003000B>19<0056>-5<0058>-5<0046>4<004B00030044>-10<005600030057>-2<004B>-9<004800030053>-9<0044>-10<0056>-14<0056>-3<004C0051>-11<004A0003>]TJ
DateTime
[<00030052>-7<0045>-6<004D>-5<0048>-16<0046>-25<00570003005700520003004C>-6<0057>8<000C>2<000F0003005C>1<0052>-9<005800030051>-9<0048>-16<0048>-16<004700030057>-2<004B>-9<0048000300C0>-2<004F>-6<0057>-3<0048>-10<005500030057>-1<005200030052>-7<0045>-5<0057>-19<0044>-2<004C005100030057>-2<004B>-9<004800030046>-2<0058>1<0055>-12<0055>-12<0048>-10<0051>-1<005700030047>-3<0044>-3<0057>-3<0048>-7<00110003002B>-7<0052>-3<005A>-2<0048>-8<0059>1<0048>-10<0055>39<000F0003004C>-3<004900030057>-2<004B>-9<004800030046>-14<0044>-4<004F>1<004F00030057>-1<005200030057>-2<004B>-9<00480003>]TJ
Get-Date
 cmdlet was done inside the 
Process
[<00030045>-8<004F>-7<0052>-13<0046>4<004E>-34<000F00030057>-2<004B>-9<0048000300C0>-2<004F>-5<0057>-3<0048>-10<00550003005A>-2<0052>-9<0058>1<004F>-8<0047000300460052>-7<00510057>-2<004C0051>-6<0058>-7<004800030057>-1<00520003005A>-2<0052>-7<0055>-12<004E>-34<000F00030045>-9<0058>-5<005700030057>-2<004B>-9<004800030046>-14<0044>-4<004F>1<004F0003>]TJ
to 
Get-Date
 would be made once for each object found in the input folder. So, if there were 25 items 
in the folder, the 
Get-Date
 cmdlet would be called 25 times. When you have something that you want 
[<0057>-1<005200030052>-13<00460046>-2<0058>1<005500030052>-7<0051>-4<004F>-12<005C00030052>-7<0051>-9<0046>-2<00480003004C005100030057>-2<004B>-9<004800030053>-7<0055>-12<0052>-13<0046>-2<0048>-12<0056>-14<0056>-4<004C0051>-11<004A00030052004900030057>-2<004B>-9<0048000300C0>-2<004F>-6<0057>-3<0048>-10<0055>39<000F0003005C>1<0052>-10<005800030046>-14<0044>-4<005100030053>-7<004F>-5<0044>-9<0046>-2<00480003004C>-6<00570003004C0051000300440003>]TJ
Begin
 block. The 
Begin
 block 
is called only once, while the 
Process
 block is called once for each item in the pipeline. If you wanted 
[<0044>-4<0051>4<005C00030053>-13<0052>-7<0056>-16<0057>33<0010>-4<0053>-7<0055>-12<0052>-13<0046>-2<0048>-12<0056>-14<0056>-3<004C0051>-11<004A00030057>-1<005200030057>-19<0044>-4<004E>12<004800030053>-8<004F>-5<0044>-9<0046>-2<00480003000B>19<0056>-5<0058>-5<0046>4<004B00030044>-10<005600030053>-7<0055>-12<004C0051>-1<0057>-2<004C0051>-11<004A00030052>-9<0058>-5<00570003004400030050>-9<0048>-12<0056>-14<0056>-17<0044>-11<004A>-7<004800030056>-16<0057>-19<0044>-3<0057>-2<004C0051>-11<004A0003004B>-9<0052>-3<005A00030050>-7<0044>-4<0051>4<005C000300C0>-2<004F>-7<0048>-12<00560003005A>-2<0048>-10<0055>-12<004800030049>-7<0052>-9<0058>1<0051>-11<00470003>]TJ
today, you would place the relevant code in the 
End
[<00030045>-8<004F>-7<0052>-13<0046>4<004E00030052004900030057>-2<004B>-9<0048000300C0>-2<004F>-6<0057>-3<0048>-10<0055>44<001100030037>-7<004B>-9<004800030029>-2<004C004F>-6<0057>-3<0048>-10<0055>54<0037>55<0052>-13<0047>-3<0044>2<005C>35<0011>-8<0053>-8<0056>8<001400030056>-13<0046>4<0055>-12<004C0053>-5<00570003004C>-5<00560003>]TJ
shown here:
Filter
oday.ps1
Creating a function: step-by-step exercises
In this exercise, you22ll explore the use of the 
Get-Verb 
[<0046>4<0050>-11<0047>1<004F>-7<0048>-10<0057000300570052000300C0>-2<0051>-11<004700030053>-13<0048>-10<0055>-12<0050>-2<004C>-5<0056>-14<0056>-4<004C0045>-8<004F>-7<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F0003>]TJ
verbs. You will also use 
Function 
keyword and create a function. Once you have created the basic 
function, you22ll add additional functionality to the function in the next exercise.
Creating a basic function
1.
Start Windows PowerShell ISE.
2.
Use the 
Get-Verb
 cmdlet to obtain a listing of approved verbs. 
3.
[<0036>-11<0048>-11<004F>-7<0048>-16<0046>-25<00570003004400030059>1<0048>-10<0055>-12<004500030057>-2<004B>-7<0044>-3<00570003005A>-1<0052>-10<0058>1<004F>-8<004700030045>-13<004800030044>-4<0053>-7<0053>-7<0055>-12<0052>-7<0053>-7<0055>-12<004C>-2<0044>-3<0057>-3<004800030049>-7<0052>-7<00550003004400030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<005100030057>-2<004B>-7<0044>-3<005700030052>-7<0045>-5<0057>-19<0044>-2<004C0051>-9<0056000300440003004F004C>-5<0056>-16<0057>-2<004C0051>-11<004A000300520049000300C0>-2<004F>-7<0048>-12<005600030045>-3<005C00030047>-3<0044>-3<0057>-3<00480003004F>-5<0044>-10<0056>-16<00570003>]TJ
[<0050>-9<0052>-13<0047004C>-5<00C0>-7<0048>-16<0047>-8<00110003002C>-1<005100030057>-2<004B>-2<004C>-5<005600030046>-15<0044>-10<0056>-12<0048>-9<000F00030057>-2<004B>-9<004800030044>-4<0053>-7<0053>-7<0055>-12<0052>-7<0053>-7<0055>-12<004C>-2<0044>-3<0057>-3<004800030059>1<0048>-10<0055>-12<00450003004C>-5<00560003>]TJ
Get
4.
Create a new function named
Get-FilesByDate
. The code to do this appears here:
  
5.
[<0024>-3<0047>-7<004700030049>-7<0052>-9<0058>1<0055000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<0047>-2<0010>-5<004F004C0051>-9<004800030053>-9<0044>-4<0055>-8<0044>-4<0050>-9<0048>-10<0057>-3<0048>-10<0055>-26<005600030057>-1<005200030057>-2<004B>-9<004800030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051>-14<001100030037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030053>-9<0044>-4<0055>-8<0044>-4<0050>-9<0048>-10<0057>-3<0048>-10<00550003004C>-5<005600030044>-4<005100030044>-4<0055>-12<0055>-8<0044>2<005C000300520049000300C0>-2<004F>-7<00480003>]TJ
types, the second is for the month, the third parameter is for the year, and the last parameter 
[<004C>-5<005600030044>-4<005100030044>-4<0055>-12<0055>-8<0044>2<005C000300520049000300C0>-2<004F>-7<004800030053>-9<0044>-3<0057>-2<004B>-9<0056>-19<001100030037>-7<004B>-2<004C>-5<005600030053>-13<0052>-7<0055>-41<0057>-2<004C>-5<0052>-7<005100030052>1<004900030057>-2<004B>-9<004800030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<005100030044>-4<0053>-7<0053>-13<0048>-10<0044>-4<0055>-26<00560003004B>-9<0048>-10<0055>-12<0048>5<001D>]TJ
6.
Following the 
Param 
portion of the function, add the code to perform a recursive search of 
paths supplied via the 
$path 
[<0059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<0048>-7<00110003002F>-9<004C0050>-2<004C>-5<005700030057>-2<004B>-9<004800030056>-12<0048>-10<0044>-4<0055>-10<0046>4<004B0003005700520003004C0051>-9<0046>4<004F>-4<0058>-7<0047>-7<004800030052>-7<0051>-4<004F>-12<005C000300C0>-2<004F>-7<004800030057>-38<005C>-12<0053>-13<0048>-12<005600030056>-6<0058>1<0053>-7<0053>-8<004F004C>-5<0048>-16<004700030059>-12<004C>-2<00440003>]TJ
the 
[<000700C0>-12<004F>-8<0048>-19<0057>-39<005C>-25<0053>-15<0048>-10<0056>]TJ
 variable. This portion of the code appears here:
Add a 
Where-Object
[<00030046>4<004F>-5<0044>-6<0058>-6<0056>-12<004800030057>-1<00520003004F004C0050>-2<004C>-5<005700030057>-2<004B>-9<0048000300C0>-2<004F>-7<0048>-12<005600030055>-12<0048>-10<0057>-8<0058>1<0055>-12<0051>-9<0048>-16<004700030057>-1<005200030057>-2<004B>-9<004800030050>-9<0052>-7<00510057>-2<004B00030052004900030057>-2<004B>-9<0048>]TJ
lastwritetime 
property that equals the month supplied via the command line, and the year supplied via the 
command line. This portion of the function appears here:
8.
Save the function in a .ps1
[<00C0>-2<004F>-7<004800030051>-7<0044>-4<0050>-9<0048>-16<00470003002A>-14<0048>-10<0057>33<0010>-13<0029>-2<004C004F>-7<0048>-12<0056>-6<0025>-9<005C>-9<0027>-2<0044>-3<0057>-3<0048>-7<0011>-8<0053>-8<0056>8<0014>-10<00110003>]TJ
Run the script containing the function inside the Windows PowerShell ISE.
10.
In the command pane, call the function and supply appropriate parameters for the function. 
One such example of a command line appears here:
The completed function appears here:
This concludes this step-by-step exercise.
In the following exercise, you will add additional functionality to your Windows PowerShell func
[<0057>-2<004C>-5<0052>-7<0051>-14<001100030037>-7<004B>-9<004800030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051>-7<0044>-4<004F004C>-5<0057>-38<005C0003005A>-9<004C004F>1<004F0003004C0051>-9<0046>4<004F>-4<0058>-7<0047>-7<00480003004400030047>-7<0048>-8<0049>-9<0044>-6<0058>1<004F>-5<005700030059>-5<0044>-4<004F>-4<0058>-7<004800030049>-7<0052>-7<005500030057>-2<004B>-9<0048000300C0>-2<004F>-7<004800030057>-38<005C>-12<0053>-13<0048>-12<005600030044>-4<0051>-11<004700030050>-7<0044>-4<004E>-14<004C0051>-11<004A00030057>-2<004B>-9<00480003>]TJ
$month
$year
, and 
$path
 parameters mandatory. 
dding additional functionality to an existing function
1.
Start the Windows PowerShell ISE.
2.
Open the 
Get-FilesByDate.ps1 script created in the previous exercise and use the Save As fea
[<0057>-8<0058>1<0055>-12<004800030052004900030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F0003002C>-8<0036002800030057005200030056>-17<0044>1<0059>1<004800030057>-2<004B>-9<0048000300C0>-2<004F>-7<00480003005A>-9<004C>-5<0057>-2<004B0003004400030051>-9<0048>-9<005A00030051>-7<0044>-4<0050>-9<00480003005200490003>]TJ
Get-FilesByDateV2.ps1.
3.
[<0026>8<0055>-12<0048>-10<0044>-3<0057>-3<004800030044>-4<005100030044>-4<0055>-12<0055>-8<0044>2<005C00030052004900030047>-7<0048>-8<0049>-9<0044>-6<0058>1<004F>-6<0057000300C0>-2<004F>-7<004800030057>-38<005C>-12<0053>-13<0048>-12<005600030049>-7<0052>-7<005500030057>-2<004B>-9<00480003>]TJ
[<000700C0>-12<004F>-8<0048>-19<0057>-39<005C>-25<0053>-15<0048>-10<0056>-5<0003>]TJ
[<004C0051>-4<0053>-9<0058>-5<005700030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<0048>-7<001100030024>-27<0056>-14<0056>-3<004C>-5<004A>1<005100030057>-2<004B>-9<004800030044>-4<0055>-12<0055>-8<0044>2<005C000300520049000300C0>-2<004F>-7<00480003>]TJ
types to the 
[<000700C0>-12<004F>-8<0048>-19<0057>-39<005C>-25<0053>-15<0048>-10<0056>-5<0003>]TJ
[<004C0051>-4<0053>-9<0058>-5<005700030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<0048>-7<001100030038>-3<0056>-12<004800030044>-4<0055>-12<0055>-8<0044>2<005C00030051>-9<0052>-2<0057>-19<0044>-3<0057>-2<004C>-5<0052>-7<00510003005A>-9<004B>-9<0048>-10<005100030046>4<0055>-12<0048>-10<0044>-3<0057>-2<004C0051>-11<004A00030057>-2<004B>-9<004800030044>-4<0055>-12<0055>-8<0044>2<005C00030052>1<0049000300C0>-2<004F>-7<004800030057>-38<005C>-12<0053>-13<0048>-12<0056>-19<00110003>]TJ
For this exercise use 
*.doc
 and 
*.docx
. The command to do this appears here:
4.
Use the
 [ParameterMandatory=$true]
 parameter tag to make the
 $month
 parameter manda
tory. The tag appears just above the input parameter in the 
param 
portion of the script. Do 
the same thing for the 
$year
 and 
$path
 parameters as well. The revised portion of the 
param 
section of the script appears here:
5.
Save and run the function. Call the function without assigning a value for the path. An input 
box should appear permitting you to type in a path. Type in a single path residing on your 
system and press Enter. A second prompt appears because the 
$path
 parameter accepts an 
array. Simply press Enter a second time. An appropriate command line appears here:
6.
Now run the function and assign a path value. An appropriate command line appears here:
[<0031>-7<0052>-3<005A00030055>-17<0058>1<005100030057>-2<004B>-9<004800030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<005100030044>-4<0051>-11<00470003004F>-7<0052>-13<0052>-7<004E00030049>-7<0052>-7<00550003004400030047004C>-3<0049>-39<0049>-7<0048>-10<0055>-12<0048>-10<00510057000300C0>-2<004F>-7<004800030057>-38<005C>-12<0053>-13<0048>-7<00110003002C>-1<005100030057>-2<004B>-9<004800030048>-6<005B>-6<0044>-4<0050>-4<0053>-8<004F>-7<004800030044>-4<0053>-7<0053>-13<0048>-10<0044>-4<0055>-12<004C0051>-11<004A0003004B>-9<0048>-10<0055>-12<0048>-9<000F0003002C0003004F>-7<0052>-13<0052>-7<004E0003>]TJ
for Excel documents.
  
The revised function appears here:
This concludes the exercise.
Chapter 6 quick reference
Do this
Create a function 
Use the 
Function
 keyword, and provide a name and a 
script block.
Reuse a Windows PowerShell function
[<0027>-19<0052>-9<0057>25<0010>-11<0056>-19<0052>-16<0058>-6<0055>-17<0046>-9<004800030057>-9<004B>-16<0048000300C0>-10<004F>-14<004800030046>-7<0052>-14<0051>-8<0057>-26<0044>-9<004C>-7<0051>-9<004C>-7<0051>-18<004A00030057>-9<004B>-16<004800030049>-25<0058>-6<0051>-16<0046>-31<0057>-9<004C>-12<0052>-14<0051>-21<0011>]TJ
Constrain a data type
Use a type constraint in square brackets and place it in 
front of the variable or data to be constrained.
Provide input to a function
Use the 
Param 
keyword and supply variables to hold the 
input.
To use a function 
Load the function into memory.
To store a function
[<0033>-5<004F>-12<0044>-16<0046>-9<004800030057>-9<004B>-16<004800030049>-25<0058>-6<0051>-16<0046>-31<0057>-9<004C>-12<0052>-14<00510003004C>-7<00510003004400030056>-19<0046>-3<0055>-18<004C>-7<0053>-12<0057000300C0>-9<004F>-14<0048>-14<0011>]TJ
To name a function
Use 
Get-Verb 
to identify an appropriate verb and use the 
verb-noun naming convention.
CHAPTER 7
Creating 
dvanced Functions 
and Modules
fter completing this chapter, you will be able to:
Understand the use of the 
[cmdletbinding]
 attribute.
Use parameter validation attributes to prevent errors.
[<0026>9<00520051>7<00C0004A>4<0058>8<0055>-5<0048>7<0003>]TJ
shouldprocess
 to permit the use of -
whatif
[<0026>9<00520051>7<00C0004A>4<0058>8<0055>-5<0048>7<0003>]TJ
Write-Verbose 
to provide additional information.
Create a module.
Install a module.
Advanced functions incorporate advanced Microsoft Windows PowerShell features and can therefore 
behave like cmdlets. They do not have to be complicated. In fact, advanced functions do not even 
[<004B>-7<0044>1<0059>1<004800030057>-1<005200030045>-13<004800030047004C>-3<0049>-41<00C0>-5<0046>-2<0058>1<004F>-6<00570003005700520003005A>-9<0055>-12<004C>-5<0057>-3<004800030052>-7<005500030057>-1<005200030058>-6<0056>-12<0048>-7<00110003003A>-10<004B>-7<0044>-3<005700030050>-7<0044>-4<004E>12<0048>-12<00560003004400030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<005100030044>-11<0047>-12<0059>-5<0044>-4<0051>-9<0046>-2<0048>-16<00470003004C>-5<005600030057>-2<004B>-9<004800030046>-14<0044>-4<0053>-9<0044>-4<0045>-6<004C004F004C>-5<0057>-2<004C>-5<0048>-12<00560003004C>-6<005700030053>-13<0052>-7<0056>-14<0056>-12<0048>-12<0056>-14<0056>-12<0048>-12<00560003>]TJ
that enable it to behave in a similar manner to a cmdlet. Back during the beta of Windows PowerShell 
2.0, the name for the advanced function was 
script cmdlet
, and while the name change is perhaps 
understandable because script cmdlets really are just advanced functions, in reality, the name was 
very descriptive. This is because an advanced function mimics the behavior of a regular Windows 
PowerShell cmdlet. In fact, the best advanced functions behave exactly like a Windows PowerShell 
cmdlet and implement the same capabilities. 
The 
[cmdletbinding]
 attribute
The 
[<00C0>-2<0055>-26<0056>-16<005700030056>-16<0057>-3<0048>-10<00530003004C005100030046>4<0055>-12<0048>-10<0044>-3<0057>-2<004C0051>-11<004A00030044>-4<005100030044>-11<0047>-11<0059>-5<0044>-4<0051>-9<0046>-2<0048>-16<004700030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<00510003004C>-5<005600030057>-1<005200030044>-11<0047>-7<004700030057>-2<004B>-9<00480003>]TJ
[cmdletbinding]
 attribute to modify the 
way the function works. This single addition adds several capabilities, such as additional parameter 
checking and the ability to use easily the 
Write-Verbose 
cmdlet. To use the 
[cmdletbinding]
 attribute, 
[<005C>1<0052>-9<005800030053>-7<004F>-5<0044>-9<0046>-2<004800030057>-2<004B>-9<004800030044>-3<0057>-31<0057>-2<0055>-12<004C0045>-9<0058>-5<0057>-3<00480003004C00510003004400030056>-13<0054>-3<0058>-3<0044>-4<0055>-12<0048>-18<0010>-4<0045>-7<0055>-8<0044>-9<0046>4<004E>12<0048>-10<005700030044>-3<0057>-31<0057>-2<0055>-12<004C0045>-9<0058>-5<0057>-3<004800030057>-19<0044>-11<004A00030044>-4<0051>-11<00470003004C0051>-9<0046>4<004F>-4<0058>-7<0047>-7<00480003004C>-6<00570003004C005100030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030051>-9<0052>-7<0051>-9<00460052>-7<0050>-4<0050>-9<0048>-10<00510057>-3<0048>-16<00470003004F004C0051>-9<00480003>]TJ
in the function. In addition, the 
[cmdletbinding]
 attribute requires the use of the 
Param 
keyword. If 
your advanced function requires no parameters, you can use the 
Param 
keyword without specifying 
any parameters. This technique appears here:
  
[<0032>-11<0051>-9<0046>-2<00480003005C>1<0052>-9<00580003004B>-7<0044>1<0059>1<004800030057>-2<004B>-9<004800030045>-9<0044>-10<0056>-4<004C>-3<004600030052>-9<0058>-5<0057>-2<004F004C0051>-9<004800030052004900030057>-2<004B>-9<004800030044>-11<0047>-12<0059>-5<0044>-4<0051>-9<0046>-2<0048>-16<004700030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051>-14<000F0003005C>1<0052>-9<005800030046>-14<0044>-4<005100030045>-13<0048>-16<004A004C0051000300570052000300C0>-2<004F>1<004F0003004C005100030057>-2<004B>-9<004800030045>-8<004F>-5<0044>-4<0051>-4<004E>-31<0056>-19<001100030029>-3<0052>-7<00550003>]TJ
example, using the 
Write-Verbose
 cmdlet only requires adding the command. Without the use of the 
[cmdletbinding]
 attribute, you would need to manually change the value of the 
$VerbosePreference 
automatic variable from 
silentlycontinue
 to 
continue
 and presumably later change it back to the 
default value. The use of the 
[cmdletbinding]
 attribute and 
Write-Verbose
 appear here:
Enabling
 cmdlet binding for a function
1.
Begin a function by using the 
Function 
keyword and supplying the name of the function.
2.
Open a script block.
3.
Type the 
[cmdletbinding] 
attribute.
4.
Add the 
Param 
statement.
5.
Close the script block.
Easy verbose messages
Once 
loaded, the function permits the use of the -
verbose 
switched parameter. Use of this parameter 
causes each 
Write-Verbose
 statement to write to the Windows PowerShell console output. When the 
function runs without the -
verbose 
switch, no output displays from the verbose stream. Use of this 
technique appears in Figure 7-1.
FIGURE 7-1
[<0032>-16<0051>-14<0046>-6<004800030056>-8<0053>-17<0048>-21<0046>-1<004C>-9<00C0>-12<0048>-21<0047>-13<000F00030057>-6<004B>-14<00480003>]TJ
[cmdletbinding]
 attribute enables easy access to the verbose stream.
The great thing about using the 
-verbose 
switch is that detailed information such as the progress 
in making remote connections, loading modules, and other operations that could cause a script to 
fail is output as events happen. This provides a built-in diagnostic mode for the advanced function27
with virtually no additional programming required. 
Providing verbose output
1.
Inside a function, add the 
[cmdletbinding] 
attribute.
2.
Add a 
Param 
statement.
3.
Use the 
Write-Verbose
 cmdlet for each status message to display.
4.
When calling the function, use the 
-verbose 
switched parameter.
utomatic parameter checks
The 
default behavior for a Windows PowerShell function is that any additional values beyond the 
[<0047>-7<0048>-9<00C0>-2<0051>-9<0048>-16<004700030051>-6<0058>1<0050>-4<0045>-13<0048>-10<005500030052004900030044>-4<0055>-13<004A>-3<0058>1<0050>-9<0048>-10<00510057>-19<005600030044>-4<0055>-12<004800030056>-6<0058>1<0053>-7<0053>-8<004F004C>-5<0048>-16<004700030057005200030044>-4<005100030058>1<0051>-4<0051>-7<0044>-4<0050>-9<0048>-16<004700030044>-4<0055>-12<004A>-3<0058>1<0050>-9<0048>-10<0051005700030044>-4<0051>-11<004700030044>-4<0055>-12<004800030057>-2<004B>-9<0048>-10<0055>-12<0048>-8<0049>-7<0052>-7<0055>-12<004800030044>1<0059>-5<0044>-2<004C004F>-5<0044>-4<0045>-8<004F>-7<00480003004C00510003>]TJ
the automatic 
$args
 variable. This behavior, while potentially useful, easily becomes a source of errors 
for a script. The following function illustrates this behavior:
  
When the preceding function runs, any value supplied to the 
 parameter appears in the output. 
This appears here: 
[<002C0049>12<000F00030052>-7<005100030057>-2<004B>-9<004800030052>-2<0057>-2<004B>-9<0048>-10<00550003004B>-7<0044>-4<0051>-11<0047>-9<000F0003005A>-9<004B>-9<0048>-10<005100030046>-14<0044>-4<004F>1<004F004C0051>-11<004A00030057>-2<004B>-9<004800030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<00510003005C>1<0052>-9<005800030052>-7<0050>-2<004C>-5<005700030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030046>1<0052>-7<0050>-4<0050>-7<0044>-15<000F00030051>-9<005200030048>-10<0055>-12<0055>-12<0052>-7<00550003004C>-5<00560003004A>-7<0048>-10<0051>-9<0048>-10<0055>-8<0044>-3<0057>-3<0048>-16<0047>-35<00B3>]TJ
but the output displayed does not meet expectations. This appears here:
The remaining parameters appear in the automatic 
$args
 variable. Placing the 
$args
 variable in the 
function illustrates this. First add the 
$args
 automatic variable as appears here:
[<0031>-7<0052>-3<005A>17<000F0003005A>-9<004B>-9<0048>-10<005100030046>-14<0044>-4<004F>1<004F004C0051>-11<004A00030057>-2<004B>-9<004800030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051>-14<000F0003005A>-9<004B>-2<004C004F>-7<004800030052>-7<0050>-2<004C>-5<0057>-31<0057>-2<004C0051>-11<004A00030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030046>1<0052>-7<0050>-4<0050>-7<0044>-15<000F00030057>-2<004B>-9<004800030049>-7<0052>-6<004F>1<004F>-7<0052>-3<005A>-9<004C0051>-11<004A00030052>-9<0058>-5<0057>-2<0053>-9<0058>-5<005700030044>-4<0053>-7<0053>-13<0048>-10<0044>-4<0055>-26<0056>-19<0011>]TJ
While interesting, you may not want this supplying of additional values to an unnamed argument 
behavior. One way to correct it is to check the number of arguments supplied to the function. You can 
do this by monitoring the 
count property of the 
$args
 variable. This appears here:
When passing multiple arguments to the function, the value of 
count
 increments. In the output 
[<0044>-4<0053>-7<0053>-13<0048>-10<0044>-4<0055>-12<004C0051>-11<004A0003004B>-9<0048>-10<0055>-12<0048>-9<000F00030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030051>-6<0058>1<0050>-4<0045>-13<0048>-10<0055>39<000F00030014>-8<000F00030055>-12<0048>-10<0057>-8<0058>1<0055>-12<0051>-9<005600030049>-13<0055>-12<0052>-7<005000030057>-2<004B>-9<00480003>]TJ
 position. The number 3 is the count of extra 
arguments those not supplied for the named argument. 
By using this feature and checking the 
count 
property of 
$args
, you can detect extra arguments 
coming to the function with one line of code. This change appears here:
[<003A>-10<004B>-9<0048>-10<005100030057>-2<004B>-9<0048000300460052>-13<0047>-7<00480003004C>-5<005600030055>-17<0058>1<0051>-14<000F00030044>-10<005600030056>-4<004B>-9<0052>-3<005A>-9<005100030049>-7<0052>-6<004F>1<004F>-7<0052>-3<005A>-9<004C0051>-11<004A>-11<000F00030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030057>-35<005A>-2<005200030053>-9<0044>-4<0055>-8<0044>-4<0050>-9<0048>-10<0057>-3<0048>-10<0055>-26<005600030056>-6<0058>1<0053>-7<0053>-8<004F004C>-5<0048>-16<004700030044>-4<0055>-12<004800030044>-9<00460046>-2<0048>-10<0053>-5<0057>-3<0048>-16<004700030049>-7<0052>-7<005500030057>-2<004B>-9<00480003>]TJ
 and the 
-b
 parameters. The two remaining parameters go into the 
$args
 automatic variable. This 
increases the 
count 
property of 
$args
 to a value greater than 0, and therefore an error occurs. 
The 
easiest way to identify unhandled parameters supplied to a Windows PowerShell function is to 
use the 
[cmdletbinding]
 attribute. One of the features of the 
[cmdletbinding]
 attribute is that it gener
ates an error when unhandled parameter values appear on the command line. The following function 
illustrates the 
[cmdletbinding]
 attribute:
  
When you call the preceding function with too many arguments, the following error appears:
dding support for the 
-whatif 
parameter
One of 
the great features of Windows PowerShell is the use of the -
whatif 
parameter on cmdlets that 
change system state, such as the 
Stop-Service
 and 
Stop-Process
 cmdlets. If you consistently use the 
whatif 
switched parameter, you can avoid many inadvertent system outages or potential data loss. As 
a Windows PowerShell best practice, you should also implement the 
-whatif 
parameter in advanced 
functions that potentially change system state. In the past, this meant creating special parameters and 
adding lots of extra code to handle the output. Now it requires a single line of code. 
ote
[cmdletbinding]
 appears with empty parentheses because there are other things, 
such as 
, that can appear between the parentheses.
Inside the parentheses of the 
[cmdletbinding]
 attribute, set 
SupportsShouldProcess
 to 
true
. The fol
lowing function illustrates this technique:
Now when you call the function with the 
-whatif 
switched parameter, a message appears in the 
output detailing the exact behavior the cmdlet takes when run without the 
-whatif 
parameter. This 
appears in Figure 7-2.
FIGURE 7-2
Using 
-whatif
 when running a function with 
SupportsShouldProcess
 informs you what the function will 
do when run.
dding 
-whatif 
support
1.
Inside a function, add the 
[cmdletbinding]
 attribute.
2.
Inside the parentheses of the 
[cmdletbinding]
 attribute, add 
SupportsShouldProcess = $true
3.
Add a 
Param 
statement.
4.
When calling the function, use the 
-whatif 
switched parameter.
dding support for the 
[<0010>-10<0046>12<0052>3<005100C0>-1<0055>5<0050>-3<0003>]TJ
parameter
If all 
you want to do is to enable users of your function to use the 
[<0010>-16<0046>9<00520051>-1<00C00055>1<0050>]TJ
 switched parameter 
when calling the function, the command is exactly the same as the one to enable 
-whatif. 
The 
SupportsShouldProcess
 attribute turns on both 
-whatif 
and 
[<0010>-16<0046>9<00520051>-1<00C00055>1<0050>-9<0011>7<0003>]TJ
Therefore, when you run the 
function that follows with the 
[<0010>-16<0046>9<00520051>-1<00C00055>1<0050>7<0003>]TJ
[<0056>-18<005A>-9<004C>-5<0057>-1<0046>4<004B>-15<000F0003004C>-5<005700030053>-6<0055>-12<0052>-7<0050>-4<0053>-5<0057>-19<00560003005C>1<0052>-9<005800030053>-7<0055>-12<004C>-5<0052>-7<005500030057>-1<005200030048>-6<005B>2<0048>-16<0046>-2<0058>-5<0057>-2<004C0051>-11<004A00030057>-2<004B>-9<004800030056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<004600030044>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051>-14<0011>]TJ
The following command illustrates calling the function with the 
[<0010>-16<0046>9<00520051>-1<00C00055>1<0050>7<0003>]TJ
parameter:
  
The dialog box in Figure 7-3 displays as a result of the previous command line when the code runs 
from within the Windows PowerShell ISE.
FIGURE 7-3
Use of 
SupportsShouldProcess
 also enables the 
[<0010>-24<00460052>-9<0051>-10<00C0>-9<0055>-7<0050>]TJ
 switch.
Most of the time, when you do something in Windows PowerShell, it executes the command 
instead of prompting. For example, the following command stops all processes on the computer.
ote
On 
Windows 8, the preceding command prompts prior to stopping the 
CRSS process 
that will cause the computer to shut down. On operating systems prior to Windows 8, the 
command executes without prompting.
If you do not want a cmdlet to execute by default27that is, you wish for it to prompt by default27
you add an additional property to the 
[cmdletbinding]
 attribute: the 
[<0046>9<00520051>-1<00C00055>1<0050>4<004C>5<00500053>-3<0044>1<0046>-18<0057>7<0003>]TJ
property. This 
technique appears here:
There values for the 
[<0046>9<00520051>-1<00C00055>1<0050>4<004C>5<00500053>-3<0044>1<0046>-18<0057>7<0003>]TJ
property are 
High
Medium
Low
, and 
None
. They correspond to 
the values for the automatic 
[<0007>11<0046>8<0052>-1<0051>-2<00C0>-1<00550050>-1<00530055>-3<0048>-8<0049>-5<00480055>-3<0048>-1<00510046>9<0048>]TJ
 variable. 
Specifying the default parameter set
Properties
[<00030056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-7<0048>-16<004700030049>-7<0052>-7<005500030057>-2<004B>-9<00480003>]TJ
[cmdletbinding]
 attribute impact the entire function. Therefore, when an 
advanced function contains multiple parameter sets or different groupings of parameters for the 
same cmdlet, the function needs to know which one of several potential possibilities is the default. 
[<0037>-7<004B>-9<004800030049>-7<0052>-6<004F>1<004F>-7<0052>-3<005A>-9<004C0051>-11<004A000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<00470003004C004F>1<004F>-4<0058>-6<0056>-16<0057>-2<0055>-8<0044>-3<0057>-3<0048>-12<0056000300C0>-2<0051>-11<0047004C0051>-11<004A00030057>-2<004B>-9<004800030047>-7<0048>-8<0049>-9<0044>-6<0058>1<004F>-6<00570003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030053>-9<0044>-4<0055>-8<0044>-4<0050>-9<0048>-10<0057>-3<0048>-10<005500030056>-12<0048>-10<005700030049>-7<0052>-7<0055000300440003>]TJ
cmdlet:
To specify a default parameter set for an advanced function, use the
DefaultParameterSetName
property of the 
[cmdletbinding]
 attribute. When doing this, you tell Windows PowerShell that if 
[<004400030053>-9<0044>-4<0055>-41<0057>-2<004C>-3<0046>-2<0058>1<004F>-5<0044>-4<005500030053>-9<0044>-4<0055>-8<0044>-4<0050>-9<0048>-10<0057>-3<0048>-10<005500030056>-12<0048>-10<00570003004C>-5<005600030051>-9<0052>-2<005700030056>-3<0053>-13<0048>-16<0046>4<004C>-5<00C0>-7<0048>-16<004700030044>-4<0051>-11<004700030051>-9<0052>-2<005700030055>-12<0048>-12<0056>-12<0052>-6<004F>-12<0059>1<0048>-16<004700030045>-2<005C0003004C>-5<0057>-19<005600030047>-3<0044>-3<0057>-19<004400030057>-37<005C>-12<0053>-13<0048>-9<000F00030057>-2<004B>-9<0048>-10<005100030057>-2<004B>-9<004800030053>-9<0044>-4<0055>-8<0044>-4<0050>-9<0048>-10<0057>-3<0048>-10<00550003>]TJ
set with the 
DefaultParameterSetName 
attribute is to be used. Here is the code to specify the 
DefaultParameterSetName
 property of the 
[cmdletbinding]
 attribute:
More information about creating parameter sets appears in the following
section.
The 
parameter
 attribute
The 
parameter 
[<0044>-3<0057>-31<0057>-2<0055>-12<004C0045>-9<0058>-5<0057>-3<004800030044>-9<00460046>-2<0048>-10<0053>-5<0057>-19<00560003004400030051>-6<0058>1<0050>-4<0045>-13<0048>-10<005500030052004900030053>-7<0055>-12<0052>-7<0053>-13<0048>-10<0055>-41<0057>-2<004C>-5<0048>-12<005600030057>-2<004B>-7<0044>-3<005700030044>-11<0047>-7<004700030053>-13<0052>-3<005A>-2<0048>-10<005500030044>-4<0051>-11<0047000300C1>-10<0048>-6<005B>-8<004C0045>-6<004C004F004C>-5<0057>-38<005C0003005700520003005C>1<0052>-9<0058>1<00550003>]TJ
advanced Windows PowerShell function. The 
parameter 
attribute properties are shown in Table 7-1.
TABLE 7-1
Advanced function parameter attribute properties and meanings
Parameter attribute property
Example
Meaning
Mandatory
Mandatory=$true
[<0037>-14<004B>-16<004800030053>-16<0044>-11<0055>-15<0044>-11<0050>-16<0048>-17<0057>-10<0048>-17<005500030050>-13<0058>-13<0056>-23<005700030045>-20<004800030056>-11<0053>-20<0048>-23<0046>-3<004C>-12<00C0>-14<0048>-23<0047>-15<0011>]TJ
Position
Position=0
[<0037>-14<004B>-16<004800030053>-16<0044>-11<0055>-15<0044>-11<0050>-16<0048>-17<0057>-10<0048>-17<005500030052>-20<0046>-7<0046>-9<0058>-6<0053>-13<004C>-12<0048>-19<005600030057>-9<004B>-16<0048000300C0>-9<0055>-32<0056>-23<005700030053>-20<0052>-14<0056>-11<004C>]TJ
tion when calling the function.
ParameterSetName
ParameterSetName=24name24
The parameter belongs to the speci
[<00C0>-14<0048>-23<004700030053>-16<0044>-11<0055>-15<0044>-11<0050>-16<0048>-17<0057>-10<0048>-17<005500030056>-19<0048>-17<0057>-27<0011>]TJ
ValueFromPipeline
ValueFromPipeline=$true
The parameter accepts pipelined 
input.
ValueFromPipelineByPropertyName
ValueFromPipelineByPropertyName
=$true
The parameter uses a property on the 
object instead of the entire object. 
ValueFromRemainingArguments
ValueFromRemainingArguments=$
true
The parameter collects unassigned 
arguments.
HelpMessage
HelpMessage=24parameter help info24
A short help message for the param
eter is displayed.
he 
mandatory 
parameter property
The
mandatory 
parameter attribute property turns a function22s parameter from optional to manda
tory. By default, all parameters to an advanced function are optional; by using the 
mandatory 
prop
erty, you can change that behavior on a parameter-by-parameter basis. When a function runs with 
missing mandatory parameters, Windows PowerShell prompts for the missing parameter. 
Use of the 
mandatory 
parameter appears here:
  
When you run the 
Test-Mandatory
 function without supplying a value for the 
name 
parameter, 
Windows PowerShell prompts for the missing value. This appears in the output that follows:
If, the user does not supply a value for the missing parameter, but instead skips past the prompt, 
no error occurs, and the function continues to run, because the user is really assigning something 
$null
 to the parameter. 
ote
If the code itself generates errors when run with no parameter values, these errors 
are displayed. In this way, the 
mandatory 
parameter property causes a prompt, but it is not 
an error-handling technique. 
The output appears in Figure 7-4.
FIGURE 7-4
No error appears when skipping past a mandatory parameter.
he 
position
 parameter property
The 
position 
[<0053>-9<0044>-4<0055>-8<0044>-4<0050>-9<0048>-10<0057>-3<0048>-10<005500030053>-7<0055>-12<0052>-7<0053>-13<0048>-10<0055>-41<0057>-38<005C00030057>-3<0048>-11<004F>1<004F>-8<00560003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030057>-2<004B>-7<0044>-3<005700030057>-2<004B>-9<004800030056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<004600030053>-9<0044>-4<0055>-8<0044>-4<0050>-9<0048>-10<0057>-3<0048>-10<005500030055>-12<0048>-16<0046>-2<0048>-9<004C>-12<0059>1<0048>-12<005600030059>-5<0044>-4<004F>-4<0058>-7<0048>-12<00560003>]TJ
[<005A>-9<004B>-9<0048>-10<00510003004C>-5<005700030052>-13<00460046>-2<0058>1<0053>-6<004C>-5<0048>-12<00560003004400030056>-3<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<004600030053>-13<0052>-7<0056>-4<004C>-5<0057>-2<004C>-5<0052>-7<0051>-14<001100030033>6<0052>-7<0056>-3<004C>-5<0057>-2<004C>-5<0052>-7<005100030051>-6<0058>1<0050>-4<0045>-13<0048>-10<0055>-26<005600030044>-4<0055>-12<00480003005D>-1<0048>-10<0055>-12<005200030045>-9<0044>-10<0056>-12<0048>-16<0047>-9<000F00030044>-3<0051>-11<004700030057>-2<004B>-9<0048>-10<0055>-12<0048>-8<0049>-7<0052>-7<0055>-12<004800030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030053>-13<0052>-7<0056>-4<004C>-5<0057>-2<004C>-5<0052>-7<00510003>]TJ
is parameter position 0. By default, Windows PowerShell parameters are positional27that is, you can 
supply values for them in the order in which they appear in the parameter set. However, once you 
use the 
position 
parameter property for any single parameter, the parameters default to being 
nonpositional27that is, you will now need to use the parameter names to supply values. 
ote
When supplying values for named parameters, you only need to type enough of 
the parameter name to distinguish it from other parameter names including the default 
parameters.
The code that appears here illustrates using the 
position 
parameter property:
he 
ParameterSetName 
parameter property
The 
ParameterSetName
[<00030053>-7<0055>-12<0052>-7<0053>-13<0048>-10<0055>-41<0057>-38<005C0003004C>-5<0047>-7<0048>-10<00510057>-2<004C>-5<00C0>-7<0048>-12<00560003004A>1<0055>-12<0052>-9<0058>1<0053>-8<005600030052004900030053>-9<0044>-4<0055>-8<0044>-4<0050>-9<0048>-10<0057>-3<0048>-10<0055>-26<005600030057>-2<004B>-7<0044>-3<005700030057>-19<0044>-4<004E>12<0048>-10<0051000300570052>-13<004A>-7<0048>-10<0057>-2<004B>-9<0048>-10<005500030046>4<0055>-12<0048>-10<0044>-3<0057>-3<00480003004400030056>-3<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<00460003>]TJ
command set. It is quite common for cmdlets and advanced functions to expose multiple ways of 
calling the code. One thing to keep in mind when creating different parameter sets is that the same 
parameter cannot appear in more than one parameter set. Therefore, only the parameters that are 
unique to each parameter set appear. 
ote
When creating a parameter set, it is a best practice always to include one mandatory 
parameter in each set.
If your parameter set uses more than a single parameter, use the 
ParameterSetName
 property 
from the automatic 
$PSCmdlet
 variable in a 
switch 
statement to evaluate actions to take place. This 
technique appears in the 
Test-ParameterSet
 function that follows.
  
he 
ValueFromPipeline 
property
The 
ValueFromPipeline 
property causes Windows PowerShell to accept objects from the pipeline. The 
entire object passes into the function22s 
Process
 block when you use the 
ValueFromPipeline 
parameter 
[<0053>-7<0055>-12<0052>-7<0053>-13<0048>-10<0055>-41<0057>-38<005C>35<001100030025>-12<0048>-16<0046>-14<0044>-6<0058>-6<0056>-12<004800030057>-2<004B>-9<004800030048>-10<00510057>-2<004C0055>-12<004800030052>-7<0045>-6<004D>-5<0048>-16<0046>-25<005700030053>-9<0044>-10<0056>-14<0056>-12<0048>-12<005600030057>-1<005200030057>-2<004B>-9<004800030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051>-14<000F0003005C>1<0052>-9<005800030046>-14<0044>-4<005100030044>-9<00460046>-2<0048>-12<0056>-14<005600030056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<004600030053>-7<0055>-12<0052>-7<0053>-13<0048>-10<0055>-41<0057>-2<004C>-5<0048>-12<005600030049>-13<0055>-12<0052>-7<005000030057>-2<004B>-9<00480003>]TJ
pipeline with dotted notation. An example of this technique appears here:
Instead of receiving an entire object from the pipeline, the 
ValueFromPipelineByPropertyName 
property can often simplify code by allowing your function to pick properties from the input object 
directly from the pipeline. The
Test-PipedValueByPropertyName
 function illustrates this technique:
[<003A>-10<004B>-9<0048>-10<00510003005C>1<0052>-9<005800030051>-9<0048>-16<0048>-16<004700030057>-1<005200030044>-9<00460046>-2<0048>-10<0053>-5<005700030044>-4<0055>-12<0045>-6<004C>-5<0057>-2<0055>-8<0044>-4<0055>-47<005C0003004C0051>2<0049>-7<0052>-7<0055>-12<0050>-7<0044>-3<0057>-2<004C>-5<0052>-7<005100030057>-2<004B>-7<0044>-3<005700030050>-7<0044>2<005C00030052>-7<005500030050>-7<0044>2<005C00030051>-9<0052>-2<005700030044>-4<004F004C>-5<004A>1<00510003005A>-9<004C>-5<0057>-2<004B00030056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<004600030053>-9<0044>-4<0055>-8<0044>-4<0050>-9<0048>-10<0057>-3<0048>-10<0055>-26<0056>-20<000F>-10<0003>]TJ
the 
ValueFromRemainingArguments
 parameter property provides the answer. Such a technique permits 
[<00C1>-10<0048>-6<005B>-8<004C0045>-6<004C004F004C>-5<0057>-38<005C0003004C005100030057>-2<004B>-9<004800030058>-6<0056>-12<004800030052004900030057>-2<004B>-9<004800030053>-9<0044>-4<0055>-8<0044>-4<0050>-9<0048>-10<0057>-3<0048>-10<0055>-26<0056>-20<000F00030044>-4<0051>-11<004700030057>-2<004B>-9<004800030055>-12<0048>-10<0050>-7<0044>-2<004C0051>-2<004C0051>-11<004A0003004C>-5<0057>-3<0048>-10<0050>-9<00560003004C005100030057>-2<004B>-9<004800030044>-4<0055>-12<004A>-3<0058>1<0050>-9<0048>-10<00510057>-19<0056000300460052>-7<0050>-4<0053>-7<0055>-12<004C>-5<0056>-12<004800030044>-4<005100030044>-4<0055>-12<0055>-8<0044>2<005C00030044>-4<0051>-11<0047>-10<0003>]TJ
are therefore accessible via standard array notation. The 
Test-ValueFromRemainingArguments
 function 
illustrates using the 
ValueFromRemainingArguments 
parameter property in a function:
Figure 7-5 illustrates calling the 
Test-ValueFromRemainingArguments
 function and providing addi
tional arguments to the function. 
FIGURE 7-5
The 
ValueFromRemainingArguments
 parameter property permits access to extra arguments.
he 
[<002B>-2<0048>-5<004F0053>-6<0030>-2<0048>-5<00560056>5<0044>3<004A>3<0048>]TJ
 property
The 
HelpMessage 
[<0053>-7<0055>-12<0052>-7<0053>-13<0048>-10<0055>-41<0057>-38<005C00030053>-7<0055>-12<0052>-1<0059>-13<004C>-5<0047>-7<0048>-12<00560003004400030056>-4<0050>-7<0044>-4<004F>1<004F00030044>-4<0050>-9<0052>-9<0058>1<0051>-1<005700030052>1<00490003004B>-9<0048>-11<004F>1<005300030055>-12<0048>-11<004F>-5<0044>-3<0057>-3<0048>-16<00470003005700520003004400030056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<004600030053>-9<0044>-4<0055>-8<0044>-4<0050>-9<0048>-10<0057>-3<0048>-10<0055>43<001100030037>-7<004B>-2<004C>-5<00560003>]TJ
information becomes accessible when Windows PowerShell prompts for a missing parameter. This 
means that it only makes sense to use the 
HelpMessage 
parameter property when it is coupled with 
the 
Mandatory 
parameter property. 
ote
It is a Windows PowerShell best practice to use the 
when using the 
Mandatory 
When Windows PowerShell prompts for a missing parameter, and when the 
HelpMessage 
param
eter property exists, an additional line appears in the output. This line appears here:
To view the help, type 
 and press Enter, and the string value for the 
HelpMessage 
parameter 
property will be displayed. 
  
Understanding modules
Windows 
PowerShell 2.0 introduced the concept of modules. A module is a package that can 
[<00460052>-7<0051>-1<0057>-19<0044>-2<004C00510003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030046>4<0050>-11<0047>1<004F>-7<0048>-10<0057>-19<0056>-20<000F00030044>-4<004F004C>-2<0044>-10<0056>-12<0048>-12<0056>-20<000F00030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051>-9<0056>-20<000F00030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<0048>-12<0056>-20<000F00030057>-38<005C>-12<0053>-13<0048>-1<0012>-9<0049>-7<0052>-7<0055>-12<0050>-7<0044>-3<00570003003B>-6<0030>-4<002F>-28<000F0003004B>-9<0048>-11<004F>1<0053000300C0>-2<004F>-7<0048>-12<0056>-20<000F00030052>-2<0057>-2<004B>-9<0048>-10<00550003>]TJ
scripts, and even providers. In short, a Windows PowerShell module can contain the kinds of things 
[<0057>-2<004B>-7<0044>-3<00570003005C>1<0052>-10<005800030050>-2<004C>-5<004A>1<004B>-1<005700030053>-9<0058>-5<00570003004C00510057>-1<00520003005C>1<0052>-9<0058>1<005500030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-9<000F00030045>-9<0058>-5<00570003004C>-5<005700030046>-14<0044>-4<005100030044>-4<004F>-8<0056>-12<0052000300460052>-7<00510057>-19<0044>-2<004C005100030057>-2<004B>-2<004C0051>-11<004A>-6<005600030057>-2<004B>-7<0044>-3<00570003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030014>-10<0011>-9<00130003>]TJ
required a developer to incorporate into a PowerShell 
snap-in. There are several advantages of mod
ules over snap-ins:
Anyone who can write a Windows PowerShell script can create a module. 
To install a module, you do not need to write a Windows Installer package.
To install a module, you do not have to have administrator rights.
These advantages should be of great interest to the IT professional. 
Locating and loading modules
There 
[<0044>-4<0055>-12<004800030057>-35<005A>-2<005200030047>-7<0048>-8<0049>-9<0044>-6<0058>1<004F>-6<00570003004F>-7<0052>-13<0046>-14<0044>-3<0057>-2<004C>-5<0052>-7<0051>-9<005600030049>-7<0052>-7<00550003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030050>-9<0052>-13<0047>-3<0058>1<004F>-7<0048>-12<0056>-19<001100030037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<00570003004F>-7<0052>-13<0046>-14<0044>-3<0057>-2<004C>-5<0052>-7<00510003004C>-5<00560003004C005100030057>-2<004B>-9<004800030058>-6<0056>-12<0048>-10<0055>-26<00B7>26<00560003>]TJ
home directory, and the second is in the Windows PowerShell home directory. These locations are 
[<0047>-7<0048>-9<00C0>-2<0051>-9<0048>-16<00470003004C0051>]TJ
$env:psmodulepath
, a default environmental variable. You can add additional default mod
ule path locations by editing this variable. The modules directory in the Windows PowerShell home 
directory always exists. However, the modules directory in the user22s home directory is not present 
by default. The modules directory will only exist in the user22s home directory if it has been created. 
The creation of the modules directory in the user22s home directory does not normally happen until 
someone has decided to create and to store modules there. A nice feature of the modules directory is 
[<0057>-2<004B>-7<0044>-3<00570003005A>-9<004B>-9<0048>-10<00510003004C>-5<005700030048>-6<005B>-8<004C>-5<0056>-16<0057>-19<0056>-20<000F0003004C>-5<00570003004C>-5<005600030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030053>-7<004F>-5<0044>-9<0046>-2<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030058>-6<0056>-12<0048>-12<00560003005A>-9<004B>-9<0048>-10<00510003004C>-5<005700030056>-12<0048>-10<0044>-4<0055>-10<0046>4<004B>-9<0048>-12<005600030049>-7<0052>-7<00550003004400030050>-9<0052>-13<0047>-3<0058>1<004F>-7<0048>-7<00110003002C>1<004900030057>-2<004B>-9<00480003>]TJ
user22s module directory does not exist, the modules directory within the Windows PowerShell home 
directory is used. 
Listing available modules
Windows 
PowerShell modules exist in two states: loaded and unloaded. To display a list of all loaded 
modules, use the 
Get-Module
 cmdlet without any parameters. This is shown here:
ModuleType Name                                ExportedCommands                                  
---------- ----                                ----------------                                  
If there are multiple modules loaded when the 
Get-Module
 cmdlet runs, each module will appear 
along with its accompanying exported commands on their own individual lines. This is shown here:
If no modules are loaded, nothing displays to the Windows PowerShell console. No errors 
[<0044>-4<0053>-7<0053>-13<0048>-10<0044>-4<0055>39<000F00030051>-9<0052>-7<00550003004C>-5<005600030057>-2<004B>-9<0048>-10<0055>-12<004800030044>-4<0051>4<005C00030046>1<0052>-7<005100C0>-2<0055>-12<0050>-7<0044>-3<0057>-2<004C>-5<0052>-7<005100030057>-2<004B>-7<0044>-3<005700030057>-2<004B>-9<0048000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<00470003004B>-7<0044>-10<005600030044>-9<0046>-25<0057>-8<0058>-3<0044>-4<004F>1<004F>-12<005C00030055>-17<0058>1<0051>-14<001100030037>-7<004B>-2<004C>-5<005600030056>-4<004C>-5<0057>-8<0058>-3<0044>-3<0057>-2<004C>-5<0052>-7<005100030051>-9<0048>-8<0059>1<0048>-10<00550003>]TJ
occurs on Windows 8 because Windows PowerShell core cmdlets reside in two basic modules: the 
Microsoft.PowerShell.Management
 and 
Microsoft.PowerShell.Utility
 modules. These two modules 
always load unless Windows PowerShell launches with the 
[<0010>-3<00510052>-4<00530055>-4<0052>-6<00C0>-2<004F>3<0048>]TJ
 switch. But even then, the 
Microsoft.PowerShell.Management
 module loads due to autoload. 
To 
obtain a listing of all modules that are available on the system, you use the 
Get-Module
 cmdlet 
with the 
-ListAvailable
 parameter. The 
Get-Module
 cmdlet with the 
-ListAvailable
 parameter lists all 
modules that are available whether or not the modules are loaded into the Windows PowerShell con
sole. The output appearing here illustrates the default installation of a Windows 8 client system:
  
ote
Windows PowerShell 3.0 still installs into the windowssystem32WindowsPowerShell
v1.0 directory even on Windows 8. The reason for adherence to this location is for com
patibility with applications that expect this location. A common question I receive via the 
Hey Scripting Guy! blog 
http://www.scriptingguys.com/blog
 is related to this folder name. 
To determine the version of Windows PowerShell you are running, use the 
automatic variable. 
Loading modules
Once 
[<005C>1<0052>-9<00580003004B>-7<0044>1<0059>1<00480003004C>-5<0047>-7<0048>-10<00510057>-2<004C>-5<00C0>-7<0048>-16<00470003004400030050>-9<0052>-13<0047>-3<0058>1<004F>-7<00480003005C>1<0052>-9<00580003005A>-9<004C>-5<0056>-4<004B0003005700520003004F>-7<0052>-10<0044>-11<0047>-9<000F0003005C>1<0052>-10<005800030058>-6<0056>-12<004800030057>-2<004B>-9<0048>]TJ
Import-Module
 cmdlet to load the 
module into the current Windows PowerShell session. This appears here: 
If the module exists, the 
Import-Module
 cmdlet completes without displaying any information. If 
the module is already loaded, no error message displays. This behavior appears as follows, where you 
press the up arrow key to retrieve the previous command and press Enter to execute the command. 
The 
Import-Module
 command runs three times but no errors appear. 
Once you import the module, you may want to use the 
Get-Module
 cmdlet to quickly see the func
tions exposed by the module. You can also use the 
Get-Command -module <modulename> 
com
mand as well. It is not necessary to type the complete module name. You can use wildcards, and you 
can even use tab expansion to expand the module name. The wildcard technique appears here: 
As shown previously, the 
netconnection
 module exports two commands: the 
[<002A>-10<0048>-11<0057>35<0010>-19<0031>-6<0048>-11<0057>-19<0026>5<0052>-4<00510051>-3<0048>-6<0046>-22<0057004C>-2<0052>-4<0051>-5<0033>7<0055>-7<0052>-9<00C0>-4<004F0048>]TJ
function, and some other command that is probably 
[<0036>-1<0048>-11<0057>35<0010>-19<0031>-6<0048>-11<0057>-19<0026>5<0052>-4<00510051>-3<0048>-6<0046>-22<0057004C>-2<0052>-4<0051>-5<0033>7<0055>-7<0052>-9<00C0>-4<004F0048>3<0003>]TJ
the guess is due to the fact 
that the 
Get
 and the 
Set
[<0003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030059>1<0048>-10<0055>-12<0045>-8<0056000300520049>-41<0057>-3<0048>-10<00510003004A>-5<005200030057>-1<0052>-13<004A>-7<0048>-10<0057>-2<004B>-9<0048>-10<0055>44<001100030025>-12<0048>-16<0046>-14<0044>-6<0058>-6<0056>-12<004800030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030057>-2<004B>-4<0055>-12<0048>-16<00480003004F>-7<0048>-10<0057>-31<0057>-3<0048>-10<0055>-26<00560003>]TJ
of the noun for the second function is 
net, 
I am assuming the command name. The one problem 
with using the 
Get-Module
 cmdlet is that it truncates the 
exportedcommands
 property the truncate 
behavior is controlled by the value assigned to the 
$formatEnumeration
 automatic variable. The easy 
solution to this problem is to pipeline the resulting 
psmoduleinfo
 object to the 
Select-Object
 cmdlet 
and expand the 
exportedcommands 
property. This technique appears here:
  
When
 loading modules that have long names, you are not limited to typing the entire module name. 
You can use wildcards or tab expansion to complete the module name. When using wildcards to load 
[<0050>-9<0052>-13<0047>-3<0058>1<004F>-7<0048>-12<0056>-20<000F0003004C>-5<00570003004C>-5<00560003004400030045>-13<0048>-12<0056>-16<005700030053>-7<0055>-8<0044>-9<0046>-25<0057>-2<004C>-3<0046>-2<004800030057>-1<005200030057>-38<005C>-12<0053>-13<00480003004400030056>-3<004C>-5<004A>1<0051>-2<004C>-5<00C0>-5<0046>-14<0044>-4<0051005700030053>-13<0052>-7<0055>-41<0057>-2<004C>-5<0052>-7<005100030052004900030057>-2<004B>-9<004800030050>-9<0052>-13<0047>-3<0058>1<004F>-7<004800030051>-7<0044>-4<0050>-9<004800030056>-12<005200030057>-2<004B>-7<0044>-3<00570003005C>1<0052>-9<005800030052>-7<0051>-4<004F>-12<005C00030050>-7<0044>-3<0057>-1<0046>4<004B00030044>-10<0003>]TJ
single module from the list of modules that are available to you. If you do not match a single module, an 
error is generated. The following error appears because 
net*
 matches multiple modules.
In 
Windows PowerShell 2.0, if a 
wildcard pattern matches more than one 
[<0050>-7<0052>-11<0047>-1<0058>4<004F>-5<004800030051>-5<0044>-2<0050>-7<0048>-7<000F00030057>1<004B>-7<0048000300C00055>-24<0056>-14<005700030050>-4<0044>-1<0057>1<0046>6<004B>-7<0048>-14<004700030050>-7<0052>-11<0047>-1<0058>4<004F>-5<00480003004F>-5<0052>-8<0044>-9<0047>-4<005600030044>-2<0051>-9<004700030057004B>-7<004800030055>-10<0048>-8<0050>-5<0044004C>2<0051004C>2<0051>-9<004A00030050>-4<0044>-1<0057>1<0046>6<004B>-7<0048>-10<005600030044>-2<0055>-10<00480003004C>-3<004A>3<0051>-7<0052>-5<0055>-10<0048>-14<0047>-6<001100030037>-5<004B004C>-3<00560003>]TJ
leads to inconsistent and unpredictable results. Therefore, Windows PowerShell 3.0 changes 
this behavior to generate an error when a wildcard pattern matches more than one module 
name.
If you want to load all of the modules that are available on your system, you can use the 
Get-
Module
 cmdlet with the 
-ListAvailable
 parameter and pipeline the resulting 
PSModuleInfo 
objects to 
the 
Import-Module
 cmdlet. This is shown here:
[<002C00490003005C>1<0052>-9<00580003004B>-7<0044>1<0059>1<00480003004400030050>-9<0052>-13<0047>-3<0058>1<004F>-7<004800030057>-2<004B>-7<0044>-3<005700030046>1<0052>-7<00510057>-19<0044>-2<004C0051>-9<00560003004400030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051>-14<000F00030046>4<0050>-11<0047>1<004F>-7<0048>-10<0057>-20<000F00030052>-7<00550003005A>-2<0052>-7<0055>-12<004E>-34<00C1>-8<0052>-3<005A00030057>-2<004B>-7<0044>-3<005700030058>-6<0056>-12<0048>-12<00560003004400030059>1<0048>-10<0055>-12<004500030057>-2<004B>-7<0044>-3<00570003004C>-5<005600030051>-9<0052>-2<005700030052>-7<00510003>]TJ
the allowed verb list, a warning message displays when you import the module. The functions in the 
module still work, and the module will work, but the warning displays to remind you to check the 
authorized verb list. This behavior appears here: 
To obtain more information about which unapproved verbs are being used, you use the 
-Verbose 
parameter of 
Import-Module
. This command is shown here:
The results of the 
Import-Module -Verbose
 command are shown in Figure 7-6. 
FIGURE 7-6
The -
Verbose
 parameter of 
Import-Module
 displays information about each function exported, as well 
as illegal verb names. The 
hello
 verb used in 
Hello-User
 is not an approved verb. 
In this section, the concept of locating and loading modules was discussed. You can list modules 
by using the 
-ListAvailable
 switched parameter with the 
Get-Module
 cmdlet. Modules are loaded via 
the 
Import-Module
 cmdlet. 
Installing modules
One 
of the features of modules is that they can be installed without elevated rights. Because each 
[<0058>-6<0056>-12<0048>-10<00550003004B>-7<0044>-10<00560003004400030050>-9<0052>-13<0047>-3<0058>1<004F>-7<0048>-12<005600030049>-7<0052>-6<004F>-8<0047>-7<0048>-10<00550003004C005100030057>-2<004B>-9<004800030008>-10<0058>-6<0056>-12<0048>-10<0055>-12<0053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>4<000800030047004C0055>-12<0048>-16<0046>-25<0057>-1<0052>-7<0055>-47<005C00030057>-2<004B>-7<0044>-3<005700030057>-2<004B>-9<004800030058>-6<0056>-12<0048>-10<00550003004B>-7<0044>-10<005600030055>-12<004C>-5<004A>1<004B>-1<0057>-19<005600030057>-1<005200030058>-6<0056>-12<0048>-9<000F00030057>-2<004B>-9<00480003004C0051>-9<0056>-16<0057>-19<0044>-4<004F>]TJ
lation of a module does not require administrator rights to install into the personal module store. 
An additional feature of modules is that they do not require a specialized installer of course, some 
[<00460052>-7<0050>-4<0053>-8<004F>-7<0048>-6<005B00030050>-9<0052>-13<0047>-3<0058>1<004F>-7<0048>-12<005600030047>-5<005200030058>-6<0056>-12<004800030056>-4<0053>-13<0048>-16<0046>4<004C>-2<0044>-4<004F004C>-7<005D>-1<0048>-16<00470003004C0051>-9<0056>-16<0057>-19<0044>-4<004F>1<004F>-7<0048>-10<0055>-26<005600030057>-1<005200030050>-7<0044>-4<004E>12<00480003004C>-5<005700030048>-9<0044>-10<0056>-4<004C>-5<0048>-10<005500030049>-7<0052>-7<005500030058>-6<0056>-12<0048>-10<0055>-26<005600030057>-1<005200030047>-7<0048>-10<0053>-8<004F>-7<0052>-1<005C>7<000C>14<001100030037>-7<004B>-9<0048000300C0>-2<004F>-7<0048>-12<005600030044>-11<0056>-14<0056>-12<0052>]TJ
ciated with a module can be copied by using the Xcopy utility, or they can be copied by using 
Windows PowerShell cmdlets. 
Creating a per-user Modules folder
The 
users22 modules folder does not exist by default. To avoid confusion, you may decide to create 
[<0057>-2<004B>-9<004800030050>-9<0052>-13<0047>-3<0058>1<004F>-7<0048>-12<005600030047004C0055>-12<0048>-16<0046>-25<0057>-1<0052>-7<0055>-47<005C0003004C005100030057>-2<004B>-9<004800030058>-6<0056>-12<0048>-10<0055>-26<00B7>26<005600030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<004800030053>-7<0055>-12<004C>-5<0052>-7<005500030057>-1<005200030047>-7<0048>-10<0053>-8<004F>-7<0052>-1<005C>-12<004C0051>-11<004A00030050>-9<0052>-13<0047>-3<0058>1<004F>-7<0048>-12<0056>-20<000F00030052>-7<00550003005C>1<0052>-10<005800030050>-7<0044>2<005C00030056>-3<004C0050>-4<0053>-8<004F>-12<005C00030046>4<0055>-12<0048>-10<0044>-3<0057>-3<0048000300440003>]TJ
module-installer script or even a logon script that checks for the existence of the user22s modules 
folder, creates the folder if it does not exist, and then copies the modules. One thing to remember 
when directly accessing the user22s modules directory is that the modules folder is in a different loca
tion depending on the version of the operating system. On 
Windows XP and 
Windows Server 2003, 
the user22s modules folder is in the My Documents folder, and on Windows Vista and above, the user22s 
modules folder is in the Documents folder. 
  
ote
Windows PowerShell 3.0 does not install on Windows Vista or below. So, in a pure 
Windows PowerShell 3.0 environment, you can skip the operating system check and simply 
create the folder in the Documents
In the Copy-Modules.ps1 script available with the scripts for this chapter from 
http://aka.ms/PowerShellSBS_book
, you solve the problem of different modules folder locations 
by using the 
Get-OperatingSystemVersion
 function, which retrieves the major version number of the 
operating system. The 
Get-OperatingSystemVersion
 function appears here:
The 
Test-ModulePath
 function uses the major version number of the operating system. If the major 
version number of the operating system is greater than 6, it means the operating system is at least 
Windows Vista and will therefore use the Documents folder in the path to the modules. If the major 
version number of the operating system is not greater than 6, the script will use the 
My Documents
folder for the module location. Once the version of the operating system is determined and the path 
to the module location is ascertained, it is time to determine if the modules folders exist or not. The 
best tool for the job of checking for the existence of folders is the 
Test-Path
 cmdlet. The 
Test-Path
cmdlet returns a Boolean value. As you are only interested in the absence of the folder, you can use 
the 
not
 operator in the completed 
Test-ModulePath
 function, as shown here:
Upon creating the user22s Modules folder, it is time to create a child folder to hold the new module. 
A module installs into a folder that has the same name as the module itself. The name of the module 
[<004C>-5<005600030057>-2<004B>-9<004800030051>-7<0044>-4<0050>-9<004800030052004900030057>-2<004B>-9<004800030049>-7<0052>-6<004F>-8<0047>-7<0048>-10<0055>44<001100030029>-3<0052>-7<005500030057>-2<004B>-9<004800030050>-9<0052>-13<0047>-3<0058>1<004F>-7<004800030057>-1<005200030045>-13<004800030059>-5<0044>-4<004F004C>-5<0047>-9<000F0003004C>-5<005700030051>-9<0048>-16<0048>-16<0047>-6<005600030044000300C0>-2<004F>-7<004800030052004900030057>-2<004B>-9<004800030056>-17<0044>-4<0050>-9<004800030051>-7<0044>-4<0050>-9<00480003005A>-9<004C>-5<0057>-2<004B00030048>-9<004C>-5<0057>-2<004B>-9<0048>-10<0055000300440003>]TJ
.psm1 or 
.psd1 extension. The location is shown in Figure 7-7. 
FIGURE 7-7
Modules are placed in the user22s 
Modules directory.
In the 
Copy-Module
 function from the 
[<0026>2<0052>-7<0053>-3<005C>4<0010>-13<0030>-8<0052>-13<0047>-3<0058>1<004F>-7<0048>-12<0056>-19<0011>-8<0053>-8<0056>8<001400030056>-13<0046>4<0055>-12<004C0053>-5<0057>-20<000F00030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030044>-9<0046>-25<0057>-2<004C>-5<0052>-7<005100030055>-12<0048>-10<0057>-2<0055>-12<004C>-5<0048>-8<0059>1<0048>-12<005600030057>-2<004B>-9<004800030059>-5<0044>-4<004F>-4<0058>-7<00480003>]TJ
of the 
PSModulePath 
environmental variable. Because there are two default locations in which mod
ules can be stored, the 
PSModulePath
 environmental variable contains the path to both locations. 
PSModulePath
 is not stored as an array; it is stored as a string. The value contained in 
PSModulePath 
appears here: 
If you attempt to index into the data stored in the
 PSModulePath
 environmental variable, you will 
retrieve one letter at a time. This is shown here:
Attempting to retrieve the path to the user22s module location one letter at a time would be prob
lematic at best and error prone at worst. Because the data is a string, you can use string methods 
to manipulate the two paths. To break a string into an usable array, you use the 
split
 method from 
the 
System.String
 class. You only need to pass a single value to the 
split
 method: the character upon 
which to split. Because the value stored in the 
PSModulePath
 variable is a set of strings separated by 
semicolons, you can access the 
split
 method directly. This technique appears here: 
  
[<003C>49<0052>-9<005800030046>-14<0044>-4<005100030056>-12<0048>-16<004800030049>-13<0055>-12<0052>-7<005000030057>-2<004B>-9<004800030053>-7<0055>-12<0048>-16<0046>-2<0048>-16<0047004C0051>-11<004A00030052>-9<0058>-5<0057>-2<0053>-9<0058>-5<005700030057>-2<004B>-7<0044>-3<005700030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030056>-16<0057>-2<0055>-12<004C0051>-11<004A00030047004C>-5<0056>-4<0053>-8<004F>-5<0044>2<005C>1<0048>-16<00470003004C>-5<005600030057>-2<004B>-9<004800030053>-9<0044>-3<0057>-2<004B00030057005200030057>-2<004B>-9<004800030058>-6<0056>-12<0048>-10<0055>-26<00B7>26<00560003>]TJ
modules folder, and the second string is the path to the system modules folder. Because the 
split
method turns a string into an array, you can now index into the array and retrieve the path to the 
user22s modules folder by using the
[0]
 syntax. You do not need to use an intermediate variable to 
store the returned array of paths if you do not wish to. You can index into the returned array directly. 
If you were to use the intermediate variable to hold the returned array, and then index into the array, 
the code would resemble the following:
Because the array is immediately available once the 
split
 method has been called, you directly 
retrieve the user22s modules path. This is shown here:
Working with the 
$modulePath
 variable
The 
path that will be used to store the module is stored in the 
$modulepath
 variable. This path includes 
the path to the user22s modules folder plus a child folder that has the same name as the module itself. 
To create the new path, it is a best practice to use the 
Join-Path
 cmdlet instead of doing string con
catenation and attempting to manually build the path to the new folder. The 
Join-Path
 cmdlet will put 
together a parent path and a child path to create a new path. This is shown here:
Windows PowerShell adds a script property called 
basename
 to the 
System.Io.FileInfo
 class. This 
[<0050>-7<0044>-4<004E>12<0048>-12<00560003004C>-6<005700030048>-9<0044>-10<0056>-21<005C00030057005200030055>-12<0048>-10<0057>-2<0055>-12<004C>-5<0048>-8<0059>1<004800030057>-2<004B>-9<004800030051>-7<0044>-4<0050>-9<004800030052004900030044000300C0>-2<004F>-7<00480003005A>-9<004C>-5<0057>-2<004B>-9<0052>-9<0058>-5<005700030057>-2<004B>-9<0048000300C0>-2<004F>-7<004800030048>-6<005B>-37<0057>-3<0048>-10<0051>-9<0056>-4<004C>-5<0052>-7<0051>-14<001100030033>3<0055>-12<004C>-5<0052>-7<005500030057>-1<00520003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F0003>]TJ
2.0, it was common to use the 
split 
method or some other string-manipulation technique to remove 
[<0057>-2<004B>-9<004800030048>-6<005B>-37<0057>-3<0048>-10<0051>-9<0056>-3<004C>-5<0052>-7<005100030049>-12<0055>-12<0052>-7<005000030057>-2<004B>-9<0048000300C0>-2<004F>-7<004800030051>-7<0044>-4<0050>-9<0048>-7<001100030038>-3<0056>-12<004800030052004900030057>-2<004B>-9<00480003>]TJ
basename
 property appears here: 
[<0029>-2<004C0051>-7<0044>-4<004F>1<004F>-12<005C>34<000F0003005C>1<0052>-9<005800030051>-9<0048>-16<0048>-16<004700030057>-1<005200030046>4<0055>-12<0048>-10<0044>-3<0057>-3<004800030057>-2<004B>-9<004800030056>-6<0058>1<0045>-15<0047004C0055>-12<0048>-16<0046>-25<0057>-1<0052>-7<0055>-47<005C00030057>-2<004B>-7<0044>-3<00570003005A>-9<004C004F>1<004F0003004B>-9<0052>-6<004F>-8<004700030057>-2<004B>-9<004800030050>-9<0052>-13<0047>-3<0058>1<004F>-7<004800030044>-4<0051>-11<004700030046>1<0052>-7<0053>-2<005C00030057>-2<004B>-9<004800030050>-9<0052>-13<0047>-3<0058>1<004F>-7<0048000300C0>-2<004F>-7<0048>-12<00560003>]TJ
into the directory. To avoid cluttering the display with the returned information from the 
New-Item
and 
Copy-Item
 cmdlets, the results are pipelined to the 
Out-Null
 cmdlet. This is shown here:
The entry point to the 
Copy-Modules.ps1 script calls the 
Test-ModulePath
 function to determine 
if the user22s modules folder exists. It then uses the 
Get-ChildItem
 cmdlet to retrieve a listing of all 
[<0057>-2<004B>-9<004800030050>-9<0052>-13<0047>-3<0058>1<004F>-7<0048000300C0>-2<004F>-7<0048>-12<00560003004C00510003004400030053>-9<0044>-4<0055>-41<0057>-2<004C>-3<0046>-2<0058>1<004F>-5<0044>-4<005500030049>-7<0052>-6<004F>-8<0047>-7<0048>-10<0055>44<001100030037>-7<004B>-9<0048>]TJ
 -Recurse
[<00030053>-9<0044>-4<0055>-8<0044>-4<0050>-9<0048>-10<0057>-3<0048>-10<00550003004C>-5<005600030058>-6<0056>-12<0048>-16<004700030057>-1<005200030055>-12<0048>-10<0057>-2<0055>-12<004C>-5<0048>-8<0059>1<004800030044>-4<004F>1<004F00030057>-2<004B>-9<004800030050>-9<0052>-13<0047>-3<0058>1<004F>-7<0048000300C0>-2<004F>-7<0048>-12<00560003>]TJ
in the path. The resulting 
FileInfo
 objects are pipelined to the 
ForEach-Object
 cmdlet. The
fullname
property of each 
FileInfo
 object is passed to the
Copy-Module
 function. This is shown here: 
The complete 
Copy-Modules.ps1 script is shown here:
Copy-Modules.ps1
  
ote
You must set the script execution policy to permit running of scripts to use user-
created script modules. Script support does not need to be enabled in Windows PowerShell 
to use the system modules. However, to run Copy-Modules.ps1 to install modules to the 
[<0058>-4<0056>-10<0048>-8<0055>-24<00B7>28<005600030053>-5<0055>-10<0052>1<00C0004F>-5<0048>-7<000F0003005C>3<0052>-7<00580003005A>1<0052>-7<0058>4<004F>-6<004700030051>-7<0048>-14<0048>-14<004700030056>-10<0046>6<0055>-9<004C>2<0053>-3<0057004C>2<0051>-9<004A00030056>-3<0058>3<0053>-5<0053>-11<0052>-5<0055>-39<0057>-18<001100030037>58<005200030048>-8<0051>-5<0044>-2<0045>-5<004F>-5<004800030056>-10<0046>6<0055>-9<004C>2<0053>-3<0057004C>2<0051>-9<004A00030056>-3<0058>3<0053>-5<0053>-11<0052>-5<0055>-39<00570003004C>3<00510003003A>-14<004C>2<0051>-9<0047>-3<0052005A>-9<00560003>]TJ
PowerShell, you use the 
 cmdlet. 
Creating a module drive
An 
easy way to work with modules is to create a couple of Windows PowerShell drives using the 
[<00C0>-2<004F>-7<0048>-12<0056>-21<005C>-12<0056>-16<0057>-3<0048>-10<005000030053>-7<0055>-12<0052>-1<0059>-12<004C>-5<0047>-7<0048>-10<0055>44<001100030036>2<004C0051>-9<0046>-2<004800030057>-2<004B>-9<004800030050>-9<0052>-13<0047>-3<0058>1<004F>-7<0048>-12<00560003004F004C>-12<0059>1<00480003004C0051000300440003004F>-6<0052>-13<0046>-14<0044>-3<0057>-2<004C>-5<0052>-7<005100030057>-2<004B>-7<0044>-3<00570003004C>-5<005600030051>-9<0052>-2<005700030048>-10<0044>-10<0056>-4<004C004F>-12<005C00030051>-7<0044>1<0059>-12<004C>-5<004A>-3<0044>-3<0057>-3<0048>-16<004700030057>-1<005200030049>-12<0055>-12<0052>-7<005000030057>-2<004B>-9<0048000300460052>-7<0050>]TJ
mand line, and since 
$PSModulePath
 returns a string that contains the path to both the user22s and 
system modules folders, it makes sense to provide an easier way to work with the modules22 locations. 
To create a Windows PowerShell drive for the user module location, you use the 
New-PSDrive
 cmdlet, 
[<0056>-4<0053>-13<0048>-16<0046>4<004C>-3<0049>-48<005C0003004400030051>-6<0044>-4<0050>-9<0048>-9<000F00030056>-5<0058>-5<0046>4<004B00030044>-10<005600030050>3<005C>-12<0050>-9<0052>-13<0047>-6<0056>-20<000F00030058>-6<0056>-12<004800030057>-2<004B>-9<0048000300C0>-2<004F>-7<0048>-12<0056>-21<005C>-12<0056>-16<0057>-3<0048>-10<005000030053>-7<0055>-12<0052>-1<0059>-12<004C>-5<0047>-7<0048>-10<0055>39<000F00030044>-3<0051>-11<004700030052>-7<0045>-5<0057>-19<0044>-2<004C005100030057>-2<004B>-9<004800030055>-12<0052>-13<0052>-2<00570003004F>-7<0052>-13<0046>-14<0044>-3<0057>-2<004C>-5<0052>-7<005100030049>-12<0055>-12<0052>-7<005000030057>-2<004B>-9<00480003>]TJ
$PSModulePath
 environmental variable by using the 
split
 method from the .NET Framework 
String
[<0046>4<004F>-5<0044>-10<0056>-14<0056>-19<001100030029>-3<0052>-7<005500030057>-2<004B>-9<004800030058>-6<0056>-12<0048>-10<0055>-26<00B7>25<005600030050>-9<0052>-13<0047>-3<0058>1<004F>-7<0048>-12<005600030049>-7<0052>-6<004F>-8<0047>-7<0048>-10<0055>39<000F0003005C>1<0052>-9<005800030058>-6<0056>-12<0048000300C0>-2<0055>-26<0056>-16<005700030048>-11<004F>-7<0048>-10<0050>-9<0048>-10<0051005700030049>-12<0055>-12<0052>-7<005000030057>-2<004B>-9<004800030055>-12<0048>-10<0057>-8<0058>1<0055>-12<0051>-9<0048>-16<004700030044>-4<0055>-12<0055>-8<0044>2<005C>35<001100030037>-7<004B>-2<004C>-5<00560003004C>-5<005600030056>-4<004B>-9<0052>-3<005A>-9<00510003004B>-9<0048>-10<0055>-12<0048>5<001D0003>]TJ
The command to create a Windows PowerShell drive for the system module location is similar 
to the one used to create a Windows PowerShell drive for the user module location. The exceptions 
are specifying a different name, such as sysmods, and choosing the second element from the array 
obtained via the 
split
 method call on the 
$PSModulePath
 variable. This command appears here: 
You can also write a script that creates Windows PowerShell drives for each of the two mod
[<0058>1<004F>-7<00480003004F>-7<0052>-13<0046>-14<0044>-3<0057>-2<004C>-5<0052>-7<0051>-9<0056>-19<001100030037>55<005200030047>-5<005200030057>-2<004B>-2<004C>-5<0056>-20<000F0003005C>1<0052>-10<0058000300C0>-2<0055>-26<0056>-16<005700030046>4<0055>-12<0048>-10<0044>-3<0057>-3<004800030044>-4<005100030044>-4<0055>-12<0055>-8<0044>2<005C00030052004900030051>-7<0044>-4<0050>-9<0048>-12<005600030049>-7<0052>-7<005500030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030047>1<0055>-12<004C>-12<0059>1<0048>-12<0056>-19<00110003>]TJ
You then use a 
For
 statement to walk through the array of PowerShell drive names and call the 
New-PSDrive
 cmdlet. Because you are running the commands inside a script, the new PowerShell 
drives by default will live within the script scope. Once the script ends, the script scope goes away. 
This means the Windows PowerShell drives will not be available once the script ended27which would 
[<0047>-7<0048>-8<0049>-7<0048>-10<0044>-3<00570003005C>1<0052>-9<0058>1<005500030053>-10<0058>1<0055>-12<0053>-13<0052>-7<0056>-12<0048>-12<00560003004C005100030046>4<0055>-12<0048>-10<0044>-3<0057>-2<004C0051>-11<004A00030057>-2<004B>-9<0048>-10<00500003004C005100030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030053>-7<004F>-5<0044>-9<0046>-2<0048>-7<001100030037>55<0052000300460052>-7<0050>-4<0045>-9<0044>-3<005700030057>-2<004B>-2<004C>-5<005600030056>-13<00460052>-7<0053>-6<004C0051>-11<004A0003004C>-5<0056>-14<0056>-5<0058>-7<0048>-9<000F0003005C>1<0052>-9<005800030051>-9<0048>-16<0048>-16<00470003>]TJ
to create the PowerShell drives within the global scope, which means they will be available in the 
[<003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F000300460052>-7<0051>-9<0056>-12<0052>-6<004F>-7<004800030052>-7<0051>-9<0046>-2<004800030057>-2<004B>-9<004800030056>-13<0046>4<0055>-12<004C0053>-5<00570003004B>-7<0044>-10<0056000300460052>-7<0050>-4<0053>-8<004F>-7<0048>-10<0057>-3<0048>-16<004700030055>-17<0058>1<0051>-4<0051>-2<004C0051>-11<004A>-8<001100030037>55<005200030044>1<0059>1<0052>-4<004C>-5<004700030047004C>-5<0056>-4<0053>-8<004F>-5<0044>2<005C>-12<004C0051>-11<004A000300460052>-7<005100C0>-2<0055>-12<0050>-7<0044>-3<0057>-2<004C>-5<0052>-7<00510003>]TJ
messages when creating the PowerShell drives, you pipe the results to the 
Out-Null
 cmdlet. 
[<002C>-1<005100030057>-2<004B>-9<004800030031>-9<0048>-9<005A>-4<0010>-13<0030>-8<0052>-13<0047>-3<0058>1<004F>-7<0048>-12<0056>-6<0027>-11<0055>-12<004C>-12<0059>1<0048>-7<0011>-8<0053>-8<0056>8<001400030056>-13<0046>4<0055>-12<004C0053>-5<0057>-20<000F00030046>4<0055>-12<0048>-10<0044>-3<0057>-3<004800030044>-4<0051>-9<0052>-2<0057>-2<004B>-9<0048>-10<005500030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051>-14<001100030037>-7<004B>-2<004C>-5<005600030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<005100030047004C>-5<0056>-4<0053>-8<004F>-5<0044>2<005C>-12<00560003004A>1<004F>-7<0052>-7<0045>-9<0044>-4<004F000300C0>-2<004F>-7<00480003>]TJ
system PowerShell drives. When the script runs, call the 
New-ModuleDrive
 function. Then call the 
Get-FileSystemDrives
 function. The complete 
New-ModuleDrive
 function appears here: 
ew-ModuleDrive function
This section covered the concept of installing modules. Before installing modules, create a special 
[<0050>-9<0052>-13<0047>-3<0058>1<004F>-7<0048>-12<005600030049>-7<0052>-6<004F>-8<0047>-7<0048>-10<00550003004C005100030057>-2<004B>-9<004800030058>-6<0056>-12<0048>-10<0055>-26<00B7>26<005600030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-7<00110003002400030056>-12<0046>4<0055>-12<004C0053>-5<00570003005A>-2<0044>-10<005600030047>-7<0048>-8<0059>1<0048>-11<004F>-7<0052>-7<0053>-13<0048>-16<004700030057>-2<004B>-7<0044>-3<00570003005A>-9<004C004F>1<004F00030053>-13<0048>-10<0055>-38<0049>-7<0052>-7<0055>-12<005000030057>-2<004B>-2<004C>-5<005600030044>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051>-14<001100030037>-7<004B>-9<004800030058>-6<0056>-12<00480003005200490003>]TJ
$modulepath
 variable was examined. The section concluded with a script that creates a PowerShell 
drive to provide easy access to installed modules. 
  
Checking for module dependencies
One 
problem with using modules is you now have a dependency to external code, and this means 
that a script that uses the module must have the module installed, or else the script will fail. If you 
control the environment, taking an external dependency is not a bad thing; if you do not control the 
environment, an external dependency can be a disaster. 
Because of the potential for problems, Windows PowerShell 3.0 adds additional capabilities to the 
#requires
 statement. The 
#requires
 statement can check for Windows PowerShell version, modules, 
snap-ins, and even module and 
snap-in version numbers. Unfortunately, use of 
#requires
 only works 
in a script, not in a function, cmdlet, or 
snap-in. Figure 7-8 illustrates using the 
#requires
 statement 
[<0057>-1<005200030048>-10<0051>-9<0056>-5<0058>1<0055>-12<004800030057>-2<004B>-9<004800030053>-7<0055>-12<0048>-12<0056>-12<0048>-10<0051>-9<0046>-2<00480003005200490003004400030056>-3<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<004600030050>-9<0052>-13<0047>-3<0058>1<004F>-7<004800030053>-7<0055>-12<004C>-5<0052>-7<005500030057>-1<005200030056>-13<0046>4<0055>-12<004C0053>-5<005700030048>-6<005B>2<0048>-16<0046>-2<0058>-5<0057>-2<004C>-5<0052>-7<0051>-14<001100030037>-7<004B>-9<004800030056>-13<0046>4<0055>-12<004C0053>-5<005700030055>-12<0048>-16<0054>-3<0058004C0055>-12<0048>-12<00560003004400030050>-9<0052>-13<0047>-3<0058>1<004F>-7<00480003>]TJ
named 
bogus 
that does not exist. Because the 
bogus 
module does not exist, an error occurs. 
FIGURE 7-8
Use the 
#requires
 statement to prevent execution of a script when a required module does not exist.
Because you cannot use the 
#requires
 statement inside a function, you may want to use the 
Get-MyModule
 function to determine if a module exists or is already loaded the other way to do this 
is to use a manifest. The complete
Get-MyModule
 function appears here: 
Get-MyModule.ps1
The 
Get-MyModule 
function accepts a single string: the name of the module to check. The 
 state
ment is used to see if the module is currently loaded. If it is not loaded, the 
Get-Module
 cmdlet is 
used to see if the module exists on the system. If it does exist, the module is loaded. 
If the module is already loaded into the current Windows PowerShell session, the 
Get-MyModule 
function returns 
$true
 to the calling code. Let22s dig into the function a bit further to see how it works. 
[<0037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030057>-2<004B>-2<004C0051>-11<004A0003005C>1<0052>-9<005800030047>-5<00520003004C>-5<005600030058>-6<0056>-12<004800030057>-2<004B>-9<00480003>]TJ
 statement to see if the module is not loaded into the current 
session. To do this, use the
-not 
operator to see if the module is not loaded. Use the 
Get-Module
cmdlet to search for the required module by name. This section of the script appears here:
To obtain a list of modules that are installed on a system, use the 
Get-Module
 cmdlet with the 
-ListAvailable 
[<0056>-18<005A>-9<004C>-5<0057>-1<0046>4<004B>-14<001100030038>-2<0051>2<0049>-7<0052>-7<0055>-41<0057>-8<0058>1<0051>-7<0044>-3<0057>-3<0048>-11<004F>-12<005C>34<000F00030057>-2<004B>-9<0048>-10<0055>-12<00480003004C>-5<005600030051>-9<00520003005A>-3<0044>2<005C000300570052000300C0>-2<004F>-6<0057>-3<0048>-10<005500030057>-2<004B>-9<004800030055>-12<0048>-12<0056>-6<0058>1<004F>-6<0057>-19<0056>-20<000F00030044>-3<0051>-11<004700030057>-2<004B>-2<004C>-5<005600030051>-9<0048>-16<0046>-2<0048>-12<0056>-14<0056>-3<004C>-5<0057>-19<0044>-3<0057>-3<0048>-12<005600030053>-6<004C0053>-13<0048>-11<004F004C0051>]TJ
ing the results to the 
Where-Object
 cmdlet to see if the required cmdlet is installed on the system. If 
the module exists on the system, the function uses the 
Import-Module
 cmdlet to import the module, 
and it returns 
$true
 to the calling code. This section of the script is shown here:
  
Finally, you need to handle the two other cases. If the module is not available, the 
Where-Object
[<0046>4<0050>-11<0047>1<004F>-7<0048>-10<00570003005A>-9<004C004F>1<004F00030051>-10<0052>-2<0057000300C0>-2<0051>-11<004700030044>-4<0051>4<005C>-41<0057>-2<004B>-2<004C0051>-11<004A>-8<001100030037>-7<004B>-2<004C>-5<005600030057>-2<0055>-12<004C>-5<004A>-7<004A>-7<0048>-10<0055>-26<005600030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<00570003>]TJ
else
 clause, where 
$false
 is returned to the calling 
code. If the module is already loaded, the second 
else
 clause returns 
$true
 to the script. This section of 
the script is shown here:
A simple use of the 
Get-MyModule
 function is to call the function and pass the name of a module 
to it. This example is actually shown in the last line of the 
Get-MyModule.ps1 script: 
When called in this manner, the 
Get-MyModule
 function will load the 
bitsTransfer module if it 
exists on your system and if it is not already loaded. If the module is already loaded, or if it is loaded 
by the function, 
$true
 is returned to the script. If the module does not exist, 
$false
 is returned. The use 
of the 
Get-MyModule
 function appears in Figure 7-9.
FIGURE 7-9
Use the 
Get-MyModule
 function to ensure a module exists prior to attempting to load it.
A better use of the 
Get-MyModule 
function is as a prerequisite check for a function that uses a 
particular module. Your syntax might look something like this:
Using a module from a share
Using 
[<004400030050>-9<0052>-13<0047>-3<0058>1<004F>-7<004800030049>-13<0055>-12<0052>-7<00500003004400030046>-1<0048>-10<00510057>-2<0055>-8<0044>-4<004F000300C0>-2<004F>-7<004800030056>-4<004B>-7<0044>-4<0055>-12<00480003004C>-5<005600030051>-9<005200030047004C>-3<0049>-39<0049>-7<0048>-10<0055>-12<0048>-10<0051>-1<005700030049>-12<0055>-12<0052>-7<005000030058>-6<0056>-3<004C0051>-11<004A0003004400030050>-9<0052>-13<0047>-3<0058>1<004F>-7<004800030049>-12<0055>-12<0052>-7<005000030052>-7<0051>-9<004800030052004900030057>-2<004B>-9<004800030057>-35<005A>-2<00520003>]TJ
default locations. When a module is placed in the %windir%System32WindowsPowerShellv1.0
[<0030>-8<0052>-13<0047>-3<0058>1<004F>-7<0048>-12<005600030049>-7<0052>-6<004F>-8<0047>-7<0048>-10<0055>39<000F0003004C>-5<00570003004C>-5<005600030044>1<0059>-5<0044>-2<004C004F>-5<0044>-4<0045>-8<004F>-7<004800030057>-1<005200030044>-4<004F>1<004F00030058>-6<0056>-12<0048>-10<0055>-26<0056>-19<00110003002C>1<00490003004400030050>-9<0052>-13<0047>-3<0058>1<004F>-7<00480003004C>-5<005600030053>-8<004F>-5<0044>-9<0046>-2<0048>-16<00470003004C005100030057>-2<004B>-9<004800030008>3<0038>-3<0056>-12<0048>-10<0055>-8<0033>3<0055>-12<0052>-1<00C0>-2<004F>-7<0048>4<0008>9<003F0030>-8<005C00030047>-5<0052>-13<0046>-2<0058>1<0050>-9<0048>-10<00510057>-19<0056>4<003F>]TJ
[<003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<0056>-6<0033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F>-23<003F0030>-8<0052>-13<0047>-3<0058>1<004F>-7<0048>-12<005600030049>-7<0052>-6<004F>-8<0047>-7<0048>-10<0055>39<000F0003004C>-5<00570003004C>-5<005600030052>-7<0051>-4<004F>-12<005C00030044>2<0059>-5<0044>-2<004C004F>-5<0044>-4<0045>-8<004F>-7<004800030057>-1<005200030057>-2<004B>-9<004800030056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<004600030058>-6<0056>-12<0048>-10<0055>43<001100030037>-7<004B>-9<004800030044>-11<0047>-11<0059>-5<0044>-4<00510057>-19<0044>-11<004A>-7<004800030052004900030053>-8<004F>-5<0044>-9<0046>4<004C0051>-11<004A0003>]TJ
[<0050>-9<0052>-13<0047>-3<0058>1<004F>-7<0048>-12<00560003004C005100030057>-2<004B>-9<004800030008>3<0038>-3<0056>-12<0048>-10<0055>-8<0033>3<0055>-12<0052>-1<00C0>-2<004F>-7<0048>4<00080003004F>-7<0052>-13<0046>-15<0044>-3<0057>-2<004C>-5<0052>-7<00510003004C>-5<005600030057>-2<004B>-7<0044>-3<005700030057>-2<004B>-9<004800030058>-6<0056>-12<0048>-10<005500030044>-6<0058>-5<0057>-1<0052>-7<0050>-7<0044>-3<0057>-2<004C>-3<0046>-15<0044>-4<004F>1<004F>-12<005C0003004B>-7<0044>-10<005600030053>-13<0048>-10<0055>-12<0050>-2<004C>-5<0056>-14<0056>-4<004C>-5<0052>-7<005100030057005200030053>-13<0048>-10<0055>-38<0049>-7<0052>-7<0055>-12<005000030057>-2<004B>-9<00480003>]TJ
installation; modules in the system location, on the other hand, require administrator rights. 
Speaking of installation of Windows PowerShell modules, in many cases the installation of a 
Windows PowerShell module is no more complicated than placing the 
[<000D>45<0011>-8<0053>-8<0056>-4<0050>19<0014000300C0>-2<004F>-7<00480003004C00510003004400030049>-7<0052>-6<004F>-8<0047>-7<0048>-10<00550003004C00510003>]TJ
the default user location. The key point is that the folder created under the Modules folder must 
have the same name as the module itself. When you install a module on a local computer, use the 
Copy-Modules.ps1 script to simplify the process of creating and naming the folders. 
When copying a Windows PowerShell module to a network-shared location, follow the same rules: 
make sure that the folder that contains the module has the same name as the module. In the follow
ing procedure, you22ll copy the 
ConversionModuleV6 module to a network share. 
Using a network-shared module
1.
Create a share on a networked server and assign appropriate permissions.
2.
Use the 
Get-ChildItem
 cmdlet for which 
dir
 is the alias to view the share and the associated 
modules. Here22s an example:
3.
Import the module by using the
Import-Module
 cmdlet and the 
UNC Universal Naming 
Convention path to the folder containing the module. The following command imports the 
module from the W8s504 server:
  
4.
Verify that the module has loaded properly by using the 
Get-Module
 cmdlet. This command 
appears here:
5.
Use the 
Get-Command
 cmdlet to see the commands exported by the module. This technique 
appears here 
gcm
 is an alias for the 
Get-Command
 cmdlet:
[<003C>49<0052>-9<005800030051>-9<0048>-16<0048>-16<00470003005700520003004E>12<0048>-16<0048>-10<00530003004C005100030050>-2<004C0051>-11<00470003004400030046>1<0052>-10<0058>1<0053>-8<004F>-7<004800030052004900030057>-2<004B>-2<004C0051>-11<004A>-6<0056>-19<001100030037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<00570003004C>-5<005600030057>-2<004B>-7<0044>-3<0057000300440003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030050>-9<0052>-13<0047>-3<0058>1<004F>-7<00480003004C>-5<00560003>]TJ
basically a script27in our particular application. If the script execution policy is set to the default level 
Restricted
, an error will be generated27even if the logged-on user is an administrator. Fortunately, 
the error that is returned informs you of that fact. Even if the execution policy is set to 
Restricted 
on a 
particular machine, you can always run a Windows PowerShell script or module if you start Windows 
PowerShell with the 
bypass
 option. The command to do this is shown here:
One of the really cool uses of a shared module is to permit centralization of Windows PowerShell 
[<0053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-12<005600030049>-7<0052>-7<005500030051>-9<0048>-10<0057>-35<005A>-2<0052>-7<0055>-12<004E>12<0048>-16<004700030058>-6<0056>-12<0048>-10<0055>-26<0056>-19<001100030037>55<005200030047>-5<005200030057>-2<004B>-2<004C>-5<0056>-20<000F00030057>-2<004B>-9<004800030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<004800030052>-7<005100030057>-2<004B>-9<00480003004F>-7<0052>-13<0046>-14<0044>-4<004F000300460052>-7<0050>-4<0053>-9<0058>-5<0057>-3<0048>-10<00550003005A>-2<0052>-9<0058>1<004F>-8<004700030056>-3<004C0050>-4<0053>-8<004F>-12<005C0003004C0050>-4<0053>-13<0052>-7<0055>-41<005700030057>-2<004B>-9<00480003>]TJ
shared module. In this way, you only need to modify one module in one location to permit updates 
for all the users on the network. 
Creating a module
[<0037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030057>-2<004B>-2<004C0051>-11<004A0003005C>1<0052>-9<00580003005A>-9<004C004F>1<004F00030053>-7<0055>-12<0052>-7<0045>-9<0044>-4<0045>-8<004F>-12<005C0003005A>-3<0044>-4<0051005700030057005200030047>-5<00520003004C>-5<005600030057>-1<005200030046>4<0055>-12<0048>-10<0044>-3<0057>-3<00480003004400030050>-9<0052>-13<0047>-3<0058>1<004F>-7<0048>-7<00110003003C>49<0052>-9<005800030046>-14<0044>-4<005100030046>4<0055>-12<0048>-10<0044>-3<0057>-3<00480003004400030050>-9<0052>-13<0047>-3<0058>1<004F>-7<00480003004C005100030057>-2<004B>-9<00480003>]TJ
Windows PowerShell ISE. The easiest way to create a module is to use functions you have previously 
[<005A>-9<0055>-12<004C>-5<0057>-31<0057>-3<0048>-10<0051>-14<001100030032>-11<0051>-9<004800030052004900030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030057>-2<004B>-2<004C0051>-11<004A>-6<005600030057>-1<005200030047>-5<00520003004C>-5<005600030057>-1<00520003004F>-7<0052>-13<0046>-14<0044>-3<0057>-3<004800030057>-2<004B>-9<004800030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051>-9<00560003005C>1<0052>-9<00580003005A>-9<004C>-5<0056>-4<004B00030057005200030056>-16<0057>-1<0052>-7<0055>-12<00480003004C005100030057>-2<004B>-9<004800030050>-9<0052>-13<0047>-3<0058>1<004F>-7<0048>-7<00110003003C>49<0052>-9<00580003>]TJ
can copy them directly into the Windows PowerShell ISE. This technique appears in Figure 7-10.
FIGURE 7-10
Using the Windows PowerShell ISE makes creating a new module as easy as copying and pasting 
[<0048>-11<005B>-13<004C>-10<0056>-20<0057>-7<004C>-5<0051>-15<004A00030049>-23<0058>-4<0051>-14<0046>-29<0057>-7<004C>-10<0052>-11<0051>-13<00560003004C>-5<0051>-5<0057>-5<00520003004400030051>-14<0048>-13<005A000300C0>-7<004F>-11<0048>-12<0011>]TJ
Once you have copied your functions into the new module, save it with the 
.psm1 extension. The 
basicFunctions.psm1 module appears here: 
BasicFunctions.psm1
  
You 
can control what is exported from the module by creating a manifest or you can control what 
the module exports by using the 
Export-ModuleMember
 cmdlet. If you place together related func
tions that you will more than likely want to use in a single session, you can avoid creating a manifest 
although you may still wish to create a manifest for documentation and for management purposes. 
In the BasicFunctions.psm1 module, there are two functions: one that convert numbers from bytes to a 
more easily understood numeric unit, and another function that returns basic computer information.
The 
Get-ComputerInfo
 function returns a custom object that contains information about the user, 
computer name, and computer domain. Once you have created and saved the module, you will need 
to install the module by copying it to your module store. You can do this manually by navigating 
to the module directory, creating a folder for the module, and placing a copy of the module in the 
folder. I prefer to use the 
Copy-Modules.ps1 script discussed earlier in this chapter. 
Once
 the module has been copied to its own directory installed, you can use the 
Import-Module
cmdlet to import it into the current Windows PowerShell session. If you are not sure of the name of 
the module, you can use the 
Get-Module
 cmdlet with the 
-ListAvailable
 switch, as shown here:
  
Once 
you have imported the module, you can use the 
Get-Command
 cmdlet with the
 -module
parameter to see what commands are exported by the module. 
Once you have added the functions from the module, you can use them directly from the 
Windows PowerShell prompt. Using the 
Get-ComputerInfo
 function is illustrated here:
Because
 the help tags were used when creating the functions, you can use the
Get-Help
 cmdlet 
to obtain information about using the function. In this manner, the function that was created in the 
module behaves exactly like a regular Windows PowerShell cmdlet. This includes tab expansion. 
  
The 
Get-OptimalSize
 function can even receive input from the pipeline, as shown here: 
Creating, installing, and importing a module
1.
[<0033>3<004F>-5<0044>-9<0046>-2<004800030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051>-9<00560003004C00510057>-1<00520003004400030057>-3<0048>-6<005B>-37<0057000300C0>-2<004F>-7<004800030044>-4<0051>-11<004700030056>-17<0044>1<0059>1<004800030057>-2<004B>-9<0048000300C0>-2<004F>-7<00480003005A>-9<004C>-5<0057>-2<004B0003004400030011>-8<0053>-8<0056>-4<0050>19<001400030048>-6<005B>-37<0057>-3<0048>-10<0051>-9<0056>-4<004C>-5<0052>-7<0051>-14<0011>]TJ
2.
Copy the newly created module containing the functions to the modules directory. Use the 
Copy-Modules.ps1 script to do this.
3.
Obtain a listing of available modules by using the 
Get-Modules
 cmdlet with the 
-ListAvailable
switched parameter.
4.
Optionally, import modules into your current Windows PowerShell session by using the 
Import-Module
 cmdlet.
5.
See what commands are available from the newly created module by using the 
Get-Command
cmdlet with the
 -module 
parameter.
6.
Use 
Get-Help
 to obtain information about the imported functions.
Use the functions like you would use any other cmdlet. 
Creating an advanced function: step-by-step exercises
In this exercise, you22ll explore creating an advanced function. You will use a template from the 
Windows PowerShell ISE to create the basic framework. Next, you will add help and functionality to 
the advanced function. Following this exercise, you will add the advanced function to a module and 
install the module on your system.
Creating an advanced function
1.
Start the Windows PowerShell ISE.
2.
Use the 
cmdlet advanced function 
snippet from the Windows PowerShell ISE to create the 
basic framework for an advanced function. 
3.
Move the comment-based help from outside the function body to inside the function body. 
The moved comment-based help appears here:
4.
Change the name of the function from 
Verb-Noun
 to 
Get-MyBios
. This change appears here:
5.
Modify the comment-based help. Fill in the synopsis, description, and example parameters. 
Add a comment for 
parameter. 
This revised comment-based help appears here:
  
6.
Add the 
requires 
statement and require Windows PowerShell version 3.0. This command 
appears here:
Modify the parameter name to 
computername. 
Add an 
alias 
attribute with a value of 
cn. 
[<0026>2<0052>-7<005100C0>-7<004A>-3<0058>1<0055>-12<004800030053>-9<0044>-4<0055>-8<0044>-4<0050>-9<0048>-10<0057>-3<0048>-10<005500030053>-7<0055>-12<0052>-7<0053>-13<0048>-10<0055>-41<0057>-2<004C>-5<0048>-12<005600030049>-7<0052>-7<00550003>]TJ
ValueFromPipeline 
and 
ParameterSetName. 
Constrain the 
computername 
parameter to be a string. The code to do this appears here:
8.
Remove the 
begin 
and 
end 
statements from the snippet.
Add a 
Switch 
statement that evaluates 
$PSCmdlet.ParameterSetName
. If 
ParameterSetName 
equals 
remote
, use the 
-classname 
and 
-computername 
parameters from the 
Get-CimInstance
cmdlet. Default to querying the 
Get-CimInstance
 cmdlet without using the 
-computername
parameter. The 
Switch
 statement appears here:
10.
Save the advanced function as Get-MyBios.ps1 in an easily accessible folder, because you22ll 
turn this into a module in the next exercise. 
11.
Inside the Windows PowerShell ISE, run the function. 
12.
In the command pane, call the 
Get-MyBios
 function with no parameters. You should receive 
back BIOS information from your local computer.
13.
Now call the 
Get-MyBios
 function with the 
cn 
alias and the name of a remote computer. You 
should receive BIOS information from the remote computer.
14.
Use 
help
 and view the full help from the advanced function. Sample output appears here:
  
This concludes this step-by-step exercise.
In the following exercise, you22ll explore creating a module.
Creating and installing a module
1.
Start the Windows PowerShell ISE.
2.
Open the 
[<002A>-15<0048>-10<0057>33<0010>-13<0030>-8<005C>-9<0025>-6<004C>-5<0052>-7<0056>-19<0011>-8<0053>-8<0056>8<0014000300C0>-2<004F>-7<00480003005C>1<0052>-9<005800030046>4<0055>-12<0048>-10<0044>-3<0057>-3<0048>-16<00470003004C005100030057>-2<004B>-9<004800030053>-7<0055>-12<0048>-8<0059>-12<004C>-5<0052>-9<0058>-6<005600030048>-6<005B>2<0048>-10<0055>-10<0046>4<004C>-5<0056>-12<004800030044>-4<0051>-11<0047000300460052>-7<0053>-3<005C00030057>-2<004B>-9<0048000300460052>-7<00510057>-3<0048>-10<00510057>-19<00560003004C00510057>-1<00520003>]TJ
an empty Windows PowerShell ISE script pane.
3.
Save the newly copied code as a module by specifying the .psm1
[<00C0>-2<004F>-7<004800030048>-6<005B>-37<0057>-3<0048>-10<0051>-9<0056>-3<004C>-5<0052>-7<0051>-14<001100030026>-11<0044>-4<004F>1<004F0003005C>1<0052>-9<0058>1<0055000300C0>-2<004F>-7<00480003>]TJ
[<0050>3<005C>-12<0045>-6<004C>-5<0052>-7<0056>-19<0011>-8<0053>-8<0056>-4<0050>19<0014>-10<001100030026>9<004B>-9<0052>-13<0052>-7<0056>-12<004800030057>-2<004B>-9<004800030036>-13<0044>1<0059>1<004800030024>-27<005600030052>-7<0053>-5<0057>-2<004C>-5<0052>-7<005100030049>-12<0055>-12<0052>-7<005000030057>-2<004B>-9<004800030029>-2<004C004F>-7<004800030050>-9<0048>-10<0051>-6<0058>-9<000F00030044>-3<0051>-11<004700030056>-17<0044>1<0059>1<004800030057>-2<004B>-9<0048000300C0>-2<004F>-7<00480003004C00510003004400030046>1<0052>-7<0051>4<0059>1<0048>-10<0051>-2<004C>-5<0048>-10<005100570003>]TJ
location.
4.
In your 
mybios.psm1 
[<00C0>-2<004F>-7<0048>-9<000F0003004D>-2<0058>-6<0056>-16<0057000300440049>-41<0057>-3<0048>-10<005500030057>-2<004B>-9<004800030048>-10<0051>-11<004700030052004900030057>-2<004B>-9<004800030056>-13<0046>4<0055>-12<004C0053>-5<005700030045>-7<004F>-7<0052>-13<0046>4<004E00030049>-7<0052>-7<005500030057>-2<004B>-9<00480003>]TJ
Get-MyBios 
function, 
use the 
New-Alias
 cmdlet to create a new alias named 
gmb
. Set the value of this alias to 
Get-
MyBios
. This command appears here:
5.
Add the 
Export-ModuleMember
 cmdlet to the script to export all aliases and functions from 
the mybios module. This command appears here:
6.
[<0036>-13<0044>1<0059>1<00480003005C>1<0052>-9<0058>1<005500030046>4<004B>-7<0044>-4<0051>-11<004A>-7<0048>-12<005600030044>-4<0051>-11<004700030046>4<004F>-7<0052>-7<0056>-12<004800030057>-2<004B>-9<004800030050>-9<0052>-13<0047>-3<0058>1<004F>-7<0048000300C0>-2<004F>-7<0048>-7<00110003>]TJ
Use the 
Copy-Modules 
script to create a modules folder named mybios in your current user22s 
directory and copy the module to that location.
8.
Open the Windows PowerShell console and use the 
Import-Module
 cmdlet to import the 
mybios
 module. This command appears here:
Use the 
Get-MyBios
 advanced function to return the BIOS information from the current 
computer.
10.
Use the 
Help
 function to retrieve complete help information from the advanced function. This 
command appears here:
11.
Pipeline the name of a remote computer to the 
Get-MyBios
 advanced function. This command 
appears here:
This concludes the exercise.
Chapter 7 quick reference
Do this
Display help for a command that is missing a parameter 
Use the 
HelpMessage
 parameter property.
Make a parameter mandatory
Use the 
Mandatory
 parameter property in the 
param
 sec
tion of the function.
Implement 
-verbose
 in a function
Use the 
[cmdletbinding]
 attribute and write the messages 
via the 
Write-Verbose
 cmdlet.
Implement the 
-whatif 
switched parameter in a function
Use the 
[cmdletbinding]
 attribute with the 
SupportsShouldProcess 
property.
[<0028>-4<0051>-16<0056>-13<0058>-6<0055>-19<004800030057>-9<004B>-14<0044>-10<005700030052>-14<0051>-11<004F>-19<005C00030047>-14<0048>-16<00C0>-9<0051>-16<0048>-23<004700030053>-16<0044>-11<0055>-15<0044>-11<0050>-16<0048>-17<0057>-10<0048>-17<0055>-32<005600030053>-16<0044>-17<0056>-21<005600030059>-12<0044>-11<004F>-11<0058>-14<0048>-19<005600030057>-8<005200030057>-9<004B>-16<00480003>]TJ
function 
Use the 
[cmdletbinding]
 attribute.
Group sets of parameters for ease of use and checking
Create a parameter set via the 
ParameterSetName 
param
eter property.
[<0024>-34<0056>-21<0056>-11<004C>-12<004A>-6<00510003004400030056>-10<0053>-20<0048>-23<0046>-3<004C>-12<00C0>-12<004600030053>-20<0052>-14<0056>-11<004C>-13<0057>-9<004C>-12<0052>-14<005100030057>-8<00520003004400030053>-16<0044>-11<0055>-15<0044>-11<0050>-16<0048>-17<0057>-10<0048>-17<0055>]TJ
Use the 
Position 
[<0053>-16<0044>-11<0055>-15<0044>-11<0050>-16<0048>-17<0057>-10<0048>-17<005500030053>-14<0055>-19<0052>-14<0053>-20<0048>-17<0055>-47<0057>-44<005C00030044>-11<0051>-18<004700030044>-17<0056>-21<0056>-11<004C>-12<004A>-6<00510003004400030056>-10<0053>-20<0048>-23<0046>-3<004C>-12<00C0>-12<00460003>]TJ
zero-based numeric position.
CHAPTER 8
Using the Windows PowerShell ISE
fter completing this chapter, you will be able to:
Understand the use of tab completion to complete cmdlet names, types, and paths.
Use code snippets to simplify programming.
Use the command pane to run or insert commands.
Use the Windows PowerShell ISE to connect to a remote system and run commands.
Run script commands without saving the script.
Write, save, and load a Windows PowerShell script.
Running the Windows PowerShell ISE
On 
Microsoft Windows 8, the Windows PowerShell ISE appears to be a bit hidden. In fact, on 
Windows Server 2012, it also is a bit hidden. However, on Windows Server 2012, a Windows 
PowerShell shortcut automatically appears on the desktop taskbar. Likewise, pinning 
Windows PowerShell to the Windows 8 desktop taskbar is a Windows PowerShell best practice. To 
start the Windows PowerShell ISE, you have a couple of choices. On the Start page of Windows Server 
2012, you can type 
PowerShell
, and both Windows PowerShell and the Windows PowerShell ISE 
appear as search results. However, on Windows 8 this is not the case. You must type 
PowerShell_ISE
[<0057>-1<0052000300C0>-2<0051>-11<004700030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F0003002C>-8<00360028>-17<00110003003C>49<0052>-10<005800030046>-14<0044>-4<005100030044>-4<004F>-8<0056>-12<00520003004F>-5<0044>-6<0058>1<0051>-9<0046>4<004B00030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F0003002C>-8<0036002800030045>-2<005C00030055>-11<004C>-5<004A>1<004B>-1<0057>33<0010>]TJ
clicking the Windows PowerShell icon and choosing either Windows PowerShell ISE or 
Run ISE As 
Administrator from the Tasks menu that appears. This Tasks menu appears in Figure 8-1.
FIGURE 8-1
Right-clicking the Windows PowerShell icon on the desktop taskbar brings up the 
Tasks menu, from 
which you can launch the Windows PowerShell ISE.
  
Inside the Windows PowerShell console, you only need to type 
 to launch the Windows 
PowerShell ISE. This shortcut permits quick access to the Windows PowerShell ISE when you need to 
type more than a few interactive commands.
avigating the Windows PowerShell ISE
Once 
the Windows PowerShell ISE launches, two panes appear. On the left side of the screen is an 
interactive Windows PowerShell console. On the right side of the screen is the 
Commands add-on. 
The Commands add-on is really a Windows PowerShell command explorer window. When using the 
Windows PowerShell ISE in an interactive fashion, the Commands add-on provides you the ability 
to build a command by using the mouse. Once you have built the command, click the 
Run button to 
copy the command to the console window and execute the command. This view of the Windows 
PowerShell ISE appears in Figure 8-2.
FIGURE 8-2
The Windows PowerShell ISE presents a Windows PowerShell console on the left and a Commands 
add-on on the right side of the screen.
Typing into the 
Name
input box causes the Commands add-on to search through all Windows 
PowerShell modules to retrieve a matching command. This is a great way to discover and locate 
commands. By default, the Commands add-on uses a 
wildcard search pattern. Therefore, typing 
wmi
[<0055>-12<0048>-10<0057>-8<0058>1<0055>-12<0051>-9<0056000300C0>-14<0059>1<004800030046>4<0050>-11<0047>1<004F>-7<0048>-10<0057>-19<005600030057>-2<004B>-7<0044>-3<00570003004C0051>-9<0046>4<004F>-4<0058>-7<0047>-7<004800030057>-2<004B>-7<0044>-3<00570003004F>-7<0048>-10<0057>-31<0057>-3<0048>-10<005500030053>-9<0044>-3<0057>-31<0057>-3<0048>-10<0055>-12<0051>-14<001100030037>-7<004B>-2<004C>-5<005600030044>-4<0053>-7<0053>-13<0048>-10<0044>-4<0055>-26<00560003004C005100030029>-2<004C>-5<004A>-3<0058>1<0055>-12<00480003001B>-12<0010>13<0016>-7<0011>]TJ
FIGURE 8-3
[<0037>-12<004B>-14<004800030026>-3<0052>-11<0050>-8<0050>-11<0044>-8<0051>-15<0047>-11<005600030044>-16<0047>-11<0047>-7<0010>-22<0052>-11<005100030058>-11<0056>-17<0048>-17<0056000300440003005A>-13<004C>-5<004F>-13<0047>-10<0046>-19<0044>-8<0055>-17<004700030056>-16<0048>-14<0044>-8<0055>-14<0046>-1<004B00030053>-14<0044>-7<0057>-35<0057>-8<0048>-15<0055>-16<005100030057>-5<0052000300C0>-7<0051>-15<004700030050>-11<0044>-8<0057>-6<0046>-1<004B>-7<004C>-5<0051>-15<004A00030046>-1<0050>-15<0047>-3<004F>-11<0048>-15<0057>-23<0056>-24<0011>]TJ
[<0032>-11<0051>-9<0046>-2<00480003005C>1<0052>-9<0058000300C0>-2<0051>-11<004700030057>-2<004B>-9<004800030046>4<0050>-11<0047>1<004F>-7<0048>-10<005700030057>-2<004B>-7<0044>-3<00570003004C0051>-1<0057>-3<0048>-10<0055>-12<0048>-12<0056>-16<0057>-19<00560003005C>1<0052>-9<0058>-9<000F00030056>-12<0048>-11<004F>-7<0048>-16<0046>-25<00570003004C>-5<005700030049>-12<0055>-12<0052>-7<005000030057>-2<004B>-9<0048000300C0>-2<004F>-6<0057>-3<0048>-10<0055>-12<0048>-16<00470003004F004C>-5<0056>-16<005700030052>1<004900030046>4<0050>-11<0047>1<004F>-7<0048>-10<005700030051>-7<0044>-4<0050>-9<0048>-12<0056>-19<001100030038>-2<0053>-13<0052>-7<00510003>]TJ
selection, the Commands pane changes to display the parameters for the selected cmdlet. Each 
parameter set appears on a different tab. Screen resolution really affects the usability of this feature. 
The greater the screen resolution, the more usable this feature becomes. With a small resolution, 
you have to scroll back and forth to see the parameter sets, and you have to scroll up and down to 
see the available parameters for a particular parameter set. In this view, it is easy to miss important 
parameters. In Figure 8-4, the 
Get-WmiObject
 cmdlet queries the 
Win32_Bios
 Windows Management 
Instrumentation WMI class. Upon entering the WMI class name in the 
Class
box, click the Run button 
[<0057>-1<005200030048>-6<005B>2<0048>-16<0046>-2<0058>-5<0057>-3<004800030057>-2<004B>-9<0048000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<0047>-8<001100030037>-7<004B>-9<0048000300460052>-7<0051>-9<0056>-12<0052>-6<004F>-7<004800030053>-9<0044>-4<0051>-9<004800030047004C>-5<0056>-4<0053>-8<004F>-5<0044>2<005C>-12<0056000300C0>-2<0055>-26<0056>-16<005700030057>-2<004B>-9<0048000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<0047>-9<000F00030044>-4<0051>-11<004700030057>-2<004B>-9<0048>-10<005100030057>-2<004B>-9<004800030052>-10<0058>-5<0057>-2<0053>-9<0058>-5<005700030049>-12<0055>-12<0052>-7<00500003>]TJ
running the command. 
ote
Using the
button inserts the command to the console, but does not execute 
the command. This is great for occasions when you want to look over the command prior 
to actually executing it. It also provides you with the chance to edit the command prior to 
execution.
  
FIGURE 8-4
[<0036>-15<0048>-15<004F>-11<0048>-21<0046>-29<005700030057>-7<004B>-14<004800030046>-4<0052>-11<0050>-8<0050>-11<0044>-8<0051>-15<004700030057>-5<005200030055>-22<0058>-4<005100030049>-17<0055>-17<0052>-11<005000030057>-6<004B>-14<004800030026>-3<0052>-11<0050>-8<0050>-11<0044>-8<0051>-15<0047>-11<005600030044>-15<0047>-11<0047>-7<0010>-22<0052>-11<0051>-19<000F000300C0>-7<004F>-4<004F00030052>-14<0058>-9<005700030057>-6<004B>-14<004800030055>-17<0048>-21<0054>-8<0058>-4<004C>-5<0055>-17<0048>-21<004700030053>-14<0044>-8<0055>-13<0044>-8<0050>-14<0048>-15<0057>-7<0048>-15<0055>-30<0056>-24<000F00030044>-8<0051>-15<004700030046>-1<004F>-5<004C>-8<0046>-1<004E0003>]TJ
Run to execute Windows PowerShell cmdlets inside the Windows PowerShell ISE.
Finding and running commands via the Commands add-on
1.
In the Name box of the Commands add-on, enter the command you are interested in running.
2.
[<0036>-11<0048>-11<004F>-7<0048>-16<0046>-25<005700030057>-2<004B>-9<0048000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<004700030049>-12<0055>-12<0052>-7<005000030057>-2<004B>-9<0048000300C0>-2<004F>-6<0057>-3<0048>-10<0055>-12<0048>-16<00470003004F004C>-5<0056>-16<0057>-20<0011>]TJ
3.
Enter the parameters in the 
Parameters For... 
parameter box.
4.
[<0026>8<004F004C>-3<0046>4<004E00030057>-2<004B>-9<0048000300350058>1<005100030045>-9<0058>-5<0057>-31<0057>-1<0052>-7<00510003005A>-9<004B>-9<0048>-10<0051000300C0>-2<0051>-2<004C>-5<0056>-4<004B>-9<0048>-16<0047>-8<0011>]TJ
Working with the script pane
Pressing 
the down arrow beside the word 
script
 in the upper-right corner of the console pane reveals 
a new script pane into which you can start entering a script. You can also obtain a new script pane by 
selecting New from the File menu, or clicking the small white piece-of-paper icon in the upper-left 
corner of the Windows PowerShell ISE. You can also use the keyboard shortcut 
Ctrl+N. 
Just because it is called the 
script pane
 does not mean that it requires you to enable script support 
[<0057>-1<005200030058>-6<0056>-12<00480003004C>-5<0057>-20<001100030024>-27<00560003004F>-7<0052>-7<0051>-11<004A00030044>-10<005600030057>-2<004B>-9<0048000300C0>-2<004F>-7<00480003004C>-5<005600030051>-9<0052>-2<005700030056>-17<0044>1<0059>1<0048>-16<0047>-9<000F0003005C>1<0052>-9<005800030046>-14<0044>-4<005100030048>-10<00510057>-3<0048>-10<0055000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<0047>-6<005600030057>-2<004B>-7<0044>-3<005700030044>-4<0055>-12<004800030044>-11<0056000300460052>-7<0050>-4<0053>-8<004F>-7<0048>-6<005B00030044>-10<00560003005C>1<0052>-10<00580003005A>-9<004C>-5<0056>-4<004B0003>]TJ
into the script pane, with script support restricted, and the code will run when you execute the script. 
[<0032>-11<0051>-9<0046>-2<004800030057>-2<004B>-9<0048000300C0>-2<004F>-7<00480003004C>-5<005600030056>-17<0044>1<0059>1<0048>-16<0047>-9<000F0003>1<004B>-9<0052>-3<005A>-2<0048>-8<0059>1<0048>-10<0055>39<000F0003>1<004C>-5<005700030045>-13<0048>-16<00460052>-7<0050>-9<0048>-12<00560003004400030056>-13<0046>4<0055>-12<004C0053>-5<0057>-20<000F0003>1<0044>-4<0051>-11<00470003005C>1<0052>-9<00580003005A>-9<004C004F>1<004F00030051>-9<0048>-16<0048>-16<004700030057>-1<005200030047>-7<0048>-10<0044>-4<004F0003005A>-9<004C>-5<0057>-2<004B00030057>-2<004B>-9<004800030056>-13<0046>4<0055>-12<004C0053>-5<00570003>1<0048>-6<005B>2<0048>-16<0046>-2<0058>-5<0057>-2<004C>-5<0052>-7<00510003>]TJ
policy at that point. 
You can still use the 
Commands add-on with the script pane, but it requires an extra step. Use 
the Commands add-on as described in the previous section, but instead of using the Run or the 
Insert buttons, use the 
Copy
button. Navigate to the appropriate section in the script pane, and then 
use the 
Paste command which you can access from the shortcut menu, from the Edit menu, by click
ing the 
Paste icon on the toolbar, or by simply pressing 
Ctrl+V. 
ote
If you click the 
button while the script pane is maximized, the command is 
inserted into the hidden console pane. Clicking Insert
a second time inserts the command 
[<004400030056>-10<0048>-14<0046>3<0052>-5<0051>-9<004700030057004C>2<0050>-7<004800030052>-5<005100030057004B>-7<004800030056>-15<0044>-2<0050>-7<004800030046>3<0052>-5<0050>-2<0050>-5<0044>-2<0051>-9<00470003004F>2<004C>2<0051>-7<00480003004C>2<005100030057004B>-7<00480003004B004C>-3<0047>-4<0047>-5<0048>-8<005100030046>3<0052>-5<0051>-7<0056>-10<0052>-4<004F>-5<004800030053>-7<0044>-2<0051>-7<0048>-5<001100030031>-5<005200030051>-7<00520057004C>-2<00C0>-3<0046>-12<0044>-1<0057004C>-3<0052>-5<005100030057004B>-5<0044>-1<00570003>]TJ
this occurs is presented.
To run 
commands present in the script pane, click the 
Run Script button the green triangle in the 
middle of the toolbar, press F5, or choose Run
from the File
menu. The commands from the script 
pane transfer to the console pane and then execute. Any output associated with the commands 
appears under the transferred commands. Once saved as a script, the commands no longer trans
fer to the command pane. Rather, the path to the script appears in the console pane along with any 
associated output.
You can continue to use the Commands add-on to build your commands as you pipeline the out
put from one cmdlet to another one. In Figure 8-5, the output from the 
Get-WmiObject
 cmdlet pipes 
to the 
Format-Table
 cmdlet. The properties chosen in the 
Format-Table
 cmdlet as well as the imple
mentation of the 
-Wrap 
[<0056>-18<005A>-9<004C>-5<0057>-1<0046>4<004B00030044>-4<0055>-12<0048000300460052>-7<005100C0>-7<004A>-3<0058>1<0055>-12<0048>-16<004700030059>-12<004C>-2<004400030057>-2<004B>-9<004800030026>2<0052>-7<0050>-4<0050>-7<0044>-4<0051>-11<0047>-6<005600030044>-11<0047>-7<0047>-2<0010>-18<0052>-7<0051>-14<00110003>]TJ
FIGURE 8-5
Use of the Commands add-on permits easy building of commands. 
  
ab expansion and IntelliSense
Novice 
[<0056>-13<0046>4<0055>-12<004C0053>-5<0057>-3<0048>-10<0055>-26<00560003005A>-9<004C004F>1<004F000300C0>-2<0051>-11<004700030057>-2<004B>-9<004800030026>2<0052>-7<0050>-4<0050>-7<0044>-4<0051>-11<0047>-6<005600030044>-11<0047>-7<0047>-2<0010>-18<0052>-7<005100030059>1<0048>-10<0055>-47<005C00030058>-6<0056>-12<0048>-8<0049>-18<0058>1<004F>-9<000F00030045>-9<0058>-5<00570003004C>-5<005700030047>-5<0052>-13<0048>-12<0056000300460052>-7<0051>-9<0056>-5<0058>1<0050>-9<004800030059>-5<0044>-4<004F>-4<0058>-3<0044>-4<0045>-8<004F>-7<004800030056>-13<0046>4<0055>-12<0048>-16<0048>-10<005100030055>-12<0048>-10<0044>-4<004F0003>]TJ
[<0048>-12<0056>-16<0057>-19<0044>-3<0057>-3<0048>-9<000F00030044>-3<0051>-11<00470003004C>-5<005700030055>-12<0048>-16<0054>-3<0058004C0055>-12<0048>-12<005600030057>-2<004B>-9<004800030058>-6<0056>-12<004800030052004900030057>-2<004B>-9<004800030050>-9<0052>-9<0058>-6<0056>-12<004800030057>-1<0052000300C0>-2<0051>-11<004700030044>-4<0051>-11<004700030046>4<0055>-12<0048>-10<0044>-3<0057>-3<0048000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<0047>-6<0056>-19<001100030029>-3<0052>-7<005500030044>-11<0047>-12<0059>-5<0044>-4<0051>-9<0046>-2<0048>-16<004700030056>-13<0046>4<0055>-12<004C0053>-5<0057>-3<0048>-10<0055>-26<0056>-20<000F00030057>-19<0044>-4<00450003>]TJ
expansion and IntelliSense are the keys to productivity. To turn off the 
Commands add-on, either click 
the 
 in the upper-right corner of the Commands add-on or deselect
 Show Commands Add-On from 
the View menu. Once you22ve deselected this, the Windows PowerShell ISE remembers your prefer
ence, and will not display the Commands add-on again until you reselect this option. 
IntelliSense provides pop-up help and options while you type, permitting rapid command devel
opment without requiring complete syntax knowledge. As you are typing a cmdlet name, IntelliSense 
supplies possible matches. Once you select the cmdlet, IntelliSense displays the complete syntax of 
the cmdlet. This appears in Figure 8-6. 
FIGURE 8-6
Once you select a particular cmdlet from the list, IntelliSense displays the complete syntax.
After selecting a cmdlet, if you type parameter names, IntelliSense displays the applicable 
parameters in a list. Once IntelliSense appears, use the up and down arrow keys to navigate within 
[<0057>-2<004B>-9<00480003004F004C>-5<0056>-16<0057>-20<001100030033>3<0055>-12<0048>-12<0056>-14<005600030028>3<0051>-1<0057>-3<0048>-10<005500030057>-1<005200030044>-9<00460046>-2<0048>-10<0053>-5<005700030057>-2<004B>-9<00480003004B>-2<004C>-5<004A>1<004B>-4<004F004C>-5<004A>1<004B>-1<0057>-3<0048>-16<004700030052>-7<0053>-5<0057>-2<004C>-5<0052>-7<0051>-14<00110003003C>49<0052>-10<005800030046>-14<0044>-4<005100030057>-2<004B>-9<0048>-10<0051000300C0>-2<004F>1<004F0003004C005100030055>-12<0048>-16<0054>-3<0058004C0055>-12<0048>-16<004700030059>-5<0044>-4<004F>-4<0058>-7<0048>-12<005600030049>-7<0052>-7<005500030053>-9<0044>-4<0055>-8<0044>-4<0050>]TJ
eters and go to the next parameter. Once again, as you approach a parameter position, IntelliSense 
displays the appropriate options in a list. This process continues until you complete the command. 
[<002C>-1<00510057>-3<0048>-11<004F>1<004F004C>2<0036>-11<0048>-10<0051>-9<0056>-12<004800030048>-8<0059>1<0048>-10<005100030053>-7<0055>-12<0052>-1<0059>-12<004C>-5<0047>-7<0048>-12<005600030048>-10<0051>-6<0058>1<005000030048>-6<005B>-8<0053>-9<0044>-4<0051>-9<0056>-3<004C>-5<0052>-7<0051>-14<000F00030044>-4<0051>-11<004700030057>-2<004B>-9<0048>-10<0055>-12<0048>-8<0049>-7<0052>-7<0055>-12<004800030047004C>-5<0056>-4<0053>-8<004F>-5<0044>2<005C>-12<005600030044>-4<004F>1<004F>-7<0052>-3<005A>-2<0048>-16<004700030048>-10<0051>-6<0058>1<005000030059>-5<0044>-4<004F>-4<0058>-7<0048>-12<005600030049>-7<0052>-7<005500030056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<0046>10<0003>]TJ
parameters. Figure 8-7 illustrates selecting the 
Property
 parameter from the IntelliSense list of 
optional parameters. 
FIGURE 8-7
IntelliSense displays parameters in a drop-down list. When you select a particular parameter, the data 
type of the property appears.
Working with Windows PowerShell ISE snippets
Snippets 
are pieces of code, or code fragments. They are designed to simplify routine coding tasks by 
permitting the insertion of boilerplate code directly into the script. Even experienced scripters love to 
use the Windows PowerShell ISE snippets because they are great time-savers. It takes just a little bit of 
familiarity with the snippets themselves, along with a bit of experience with the Windows PowerShell 
syntax. Once you have the requirements under your belt, you will be able to use the Windows 
PowerShell ISE snippets and create code faster than you previously believed was possible. The great 
thing is you can create your own snippets, and even share them with others via the
 TechNet wiki. 
Using Windows PowerShell ISE snippets to create code
To 
start the Windows PowerShell ISE snippets, use the 
Ctrl+J keystroke combination you can also use 
the mouse to choose
[<00030036>14<0057>-19<0044>-4<0055>-41<005700030036>1<0051>-2<004C0053>-7<0053>-13<0048>-10<0057>-19<005600030049>-12<0055>-12<0052>-7<005000030057>-2<004B>-9<004800030028>2<0047004C>-5<005700030050>-9<0048>-10<0051>-6<0058>28<000C>14<001100030032>-11<0051>-9<0046>-2<004800030057>-2<004B>-9<004800030056>-4<0051>-2<004C0053>-7<0053>-13<0048>-10<0057>-19<005600030044>-4<0053>-7<0053>-13<0048>-10<0044>-4<0055>39<000F00030057>-38<005C>-12<0053>-13<004800030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<00570003004F>-7<0048>-10<0057>-31<0057>-3<0048>-10<0055>-10<0003>]TJ
of the snippet name to quickly jump to the appropriate portion of the snippets you can also use the 
[<0050>-9<0052>-9<0058>-6<0056>-12<004800030057>-1<005200030051>-7<0044>1<0059>-12<004C>-5<004A>-3<0044>-3<0057>-3<004800030058>1<005300030044>-4<0051>-11<004700030047>-5<0052>-3<005A>-9<005100030057>-2<004B>-9<004800030056>-4<0051>-2<004C0053>-7<0053>-13<0048>-10<00570003004F004C>-5<0056>-16<0057>8<000C>14<001100030032>-11<0051>-9<0046>-2<00480003005C>1<0052>-9<00580003004B>-7<0044>1<0059>1<00480003004C>-5<0047>-7<0048>-10<0051>-1<0057>-2<004C>-5<00C0>-7<0048>-16<004700030057>-2<004B>-9<004800030056>-4<0051>-2<004C0053>-7<0053>-13<0048>-10<00570003005C>1<0052>-9<00580003005A>-9<004C>-5<0056>-4<004B00030057>-1<005200030058>-6<0056>-12<0048>-9<000F>-10<0003>]TJ
press Enter to place the snippet at the current insertion point in your Windows PowerShell script pane. 
The following two exercises go into greater depth about working with snippets. 
  
Creating a new function via Windows PowerShell ISE snippets
1.
Press Ctrl+J to start the Windows PowerShell ISE snippets.
2.
Type 
 to move to the 23F24 section of the Windows PowerShell ISE snippets. 
3.
Use the down arrow until you arrive at the simple 
function 
snippet.
4.
Press Enter to enter the simple 
function 
snippet into your code.
Using Windows PowerShell ISE snippets to create a simple function
1.
Start the Windows PowerShell ISE.
2.
Add a new script pane. To do this, press 
Ctrl+N.
3.
Start the Windows PowerShell ISE snippets by pressing Ctrl+J.
4.
Select the simple 
function
 snippet and add it to your script pane. Use the down arrow to select 
the snippet, and press Enter to insert it into your script.
5.
Move your insertion point to inside the script block for the function.
6.
Start the Windows PowerShell ISE snippets again by pressing Ctrl+J.
Select the 
switch
 statement by typing 
 to move to the 23Switch24
section of the snippet list. 
Press Enter to insert the snippet into your script block.
8.
Double-click $param1 and press Ctrl+C to copy the parameter name. Double-click value1 and 
press Ctrl+V to paste it.
Double-click $param2 to select it and press Ctrl+C to copy the parameter name. Double-click 
value3 to select it and press 
Ctrl+V to paste param2.
10.
Check your work; at this point, your code should appear as shown here:
11.
Delete the line that appears here, because it will not be used:
12.
Delete the line for the default parameter:
13.
Replace the 
 condition with the code to display the keys of the bound parameters collection. 
This line of code appears here:
14.
In the script block for 
param1
, add a line of code that describes the parameter and displays 
the value. The code appears here:
15.
In the script block for 
param2
, add a line of code that describes the parameter and displays 
the value. The code appears here:
The completed function appears here:
This concludes the procedure.
Creating new Windows PowerShell ISE snippets
After 
you spend a bit of time using Windows PowerShell ISE snippets, you will wonder how you ever 
existed previously. In that same instant, you will also begin to think in terms of new snippets. Luckily, it 
is very easy to create a new Windows PowerShell ISE snippet. In fact, there is even a cmdlet to do this: 
the 
New-IseSnippet
 cmdlet.
ote
To 
[<0046>6<0055>-10<0048>-7<0044>-1<0057>-1<004800030052>-4<005500030058>-4<0056>-10<00480003004400030058>-4<0056>-10<0048>-8<0055>-8<0010>-15<0047>-4<0048>-7<00C00051>-7<0048>-14<00470003003A>-14<004C>2<0051>-9<0047>-3<0052005A>-9<005600030033>8<0052005A>1<0048>-8<0055>-21<0036>3<004B>-7<0048>-9<004F>3<004F0003002C>-6<0036>2<002800030056>-1<0051004C>2<0053>-5<0053>-11<0048>-8<0057>-18<000F0003005C>3<0052>-7<005800030050>-4<0058>-4<0056>-14<005700030046>7<004B>-5<0044>-1<0051>-9<004A>-4<00480003>]TJ
[<0057004B>-7<004800030056>-10<0046>6<0055>-9<004C>2<0053>-3<005700030048>-4<005B>4<0048>-14<0046>1<0058>-3<0057004C>-3<0052>-5<005100030053>-11<0052>-4<004F>2<004C>-1<0046>-28<005C00030057>2<005200030053>-11<0048>-8<0055>-9<0050004C>-3<005700030057004B>-7<004800030048>-4<005B>4<0048>-14<0046>1<0058>-3<0057004C>-3<0052>-5<005100030052>3<004900030056>-10<0046>6<0055>-9<004C>2<0053>-3<0057>-16<0056>-17<001100030037>-5<004B004C>-3<00560003004C>-3<005600030045>-11<0048>-14<0046>-12<0044>-4<0058>-4<0056>-10<004800030058>-4<0056>-10<0048>-8<0055>-8<0010>-15<0047>-5<0048>-7<00C00051>-7<0048>-14<00470003>]TJ
[<0056>-1<0051004C>2<0053>-5<0053>-11<0048>-8<0057>-17<00560003004F>-5<0052>-8<0044>-9<004700030049>-10<0055>-10<0052>-5<00500003003B>-3<0030>-2<002F000300C0004F>-5<0048>-10<0056>-17<001100030035>1<0048>-8<0044>-9<0047>2<004C>2<0051>-9<004A00030044>-1<0051>-9<00470003004F>-5<0052>-8<0044>-9<0047>2<004C>2<0051>-9<004A000300C0004F>-5<0048>-10<00560003000B>30<0052>3<004900030044>-1<0051>7<005C00030057>-36<005C>-10<0053>-11<0048>23<000C00030055>-10<0048>-14<0054>-1<0058>2<004C>2<0055>-10<0048>-10<005600030057004B>-7<004800030056>-10<0046>6<0055>-9<004C>2<0053>-3<00570003>]TJ
execution policy to permit running scripts. To verify your script execution policy, use the 
Get-ExecutionPolicy
 cmdlet. To set the script execution policy, use the 
cmdlet. 
  
You can use the 
New-IseSnippet
 cmdlet to create a new Windows PowerShell ISE snippet. Once 
you create the snippet, it becomes immediately available in the Windows PowerShell ISE once you 
start the Windows PowerShell ISE snippets. The command syntax is simple, but the command takes 
a decent amount of space to complete. Only three parameters are required: 
Description
Text
, and 
Title
[<001100030037>-7<004B>-9<004800030051>-7<0044>-4<0050>-9<004800030052004900030057>-2<004B>-9<004800030056>-4<0051>-2<004C0053>-7<0053>-13<0048>-10<00570003004C>-5<005600030056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-7<0048>-16<004700030059>-12<004C>-2<004400030057>-2<004B>-9<00480003>]TJ
Title 
parameter. The snippet itself is typed into the 
Text 
parameter. A great way to simplify snippet creation is to place the snippet into a 
here-string
object, and then pass that value to the 
New-IseSnippet
 cmdlet. When you want your code to appear 
on multiple lines, use the 
 special character. Of course, doing this means your 
Text 
parameter must 
appear inside double quotation marks, not single quotes. The following code creates a new Windows 
[<0033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F0003002C>-8<0036002800030056>-3<0051>-2<004C0053>-7<0053>-13<0048>-10<005700030057>-2<004B>-7<0044>-3<00570003004B>-7<0044>-10<00560003004400030056>-3<004C0050>-4<0053>-8<004F004C>-5<00C0>-7<0048>-16<00470003>]TJ
switch 
syntax. It is a single logical line of code. 
Once you execute the 
New-IseSnippet
[<000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<0047>-9<000F0003004C>-5<005700030046>4<0055>-12<0048>-10<0044>-3<0057>-3<0048>-12<00560003004400030051>-9<0048>-9<005A00030056>-4<0051>-2<004C0053>-7<0053>-13<0048>-10<0057>-19<0056>-19<0011>-21<005B>-8<0050>-4<004F000300C0>-2<004F>-7<00480003004C005100030057>-2<004B>-9<004800030036>1<0051>-2<004C0053>-7<0053>-13<0048>-10<0057>-19<00560003>]TJ
directory within your WindowsPowerShell folder in your Documents folder. The simple 
switch
 snippet 
[<003B>-6<0030>-4<002F000300C0>-2<004F>-7<00480003004C>-5<005600030056>-4<004B>-9<0052>-3<005A>-9<00510003004C005100030029>-2<004C>-5<004A>-3<0058>1<0055>-12<00480003001B>-12<0010>-14<001B>-19<0011>]TJ
FIGURE 8-8
Windows PowerShell snippets are stored in a 
snippets.xml 
[<00C0>-7<004F>-11<00480003004C>-5<00510003005C>-4<0052>-14<0058>-4<00550003003A>-21<004C>-5<0051>-15<0047>-10<0052>-7<005A>-16<0056000300330052>-7<005A>-6<0048>-15<0055>-27<0036>-4<004B>-14<0048>-16<004F>-4<004F00030049>-12<0052>-11<004F>-13<0047>-11<0048>-15<0055>38<0011>]TJ
[<0038>-3<0056>-12<0048>-10<0055>-10<0010>-18<0047>-7<0048>-9<00C0>-2<0051>-9<0048>-16<004700030056>-3<0051>-2<004C0053>-7<0053>-13<0048>-10<0057>-19<005600030044>-4<0055>-12<004800030053>-13<0048>-10<0055>-12<0050>-7<0044>-4<0051>-9<0048>-10<00510057>1<00B3>-22<0057>-2<004B>-7<0044>-3<00570003004C>-5<0056>-20<000F00030057>-2<004B>-9<0048>-7<005C00030056>-5<0058>1<0055>-47<0059>-12<004C>-12<0059>1<004800030046>4<004F>-7<0052>-7<0056>-3<004C0051>-11<004A00030044>-4<0051>-11<004700030055>-12<0048>-16<0052>-7<0053>-13<0048>-10<0051>-2<004C0051>-11<004A00030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<00560003>]TJ
[<0033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F0003002C>-8<00360028>-17<001100030037>-7<004B>-9<0048>-7<005C00030044>-4<004F>-8<0056>-12<005200030056>-6<0058>1<0055>-47<0059>-12<004C>-12<0059>1<004800030055>-12<0048>-10<0045>-13<0052>-13<0052>-2<0057>-19<005600030045>-13<0048>-16<0046>-14<0044>-6<0058>-6<0056>-12<004800030057>-2<004B>-9<0048>-7<005C00030055>-12<0048>-12<0056>-3<004C>-5<0047>-7<004800030044>-10<00560003003B>-6<0030>-4<002F000300C0>-2<004F>-7<0048>-12<00560003004C00510003005C>1<0052>-9<0058>1<00550003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<0056>-6<0033>6<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F0003>]TJ
folder. 
[<0035>14<0048>2<0050>2<0052>13<0059>1<004C>13<0051>2<004A00030058>2<0056>-1<0048>2<0055>4<0010>-4<0047>7<0048>-1<00C0>12<0051>2<0048>-6<00470003003A>-3<004C>13<0051>2<0047>7<0052>10<005A>2<005600030033>15<0052>10<005A>10<0048>2<0055>-12<0036>9<004B>1<0048>1<004F>14<004F0003002C>8<0036>10<002800030056>6<0051>10<004C>13<0053>5<0053>-1<0048>-2<0057>-4<0056>]TJ
While 
there is a 
New-IseSnippet
 cmdlet and a 
Get-IseSnippet
 cmdlet, there is no 
Remove-IseSnippet
cmdlet. There is no need for one, really, because you can use 
Remove-Item
 instead. To delete all of 
your custom Windows PowerShell ISE snippets, use the 
Get-IseSnippet
 cmdlet to retrieve the snippets 
and the 
Remove-Item
 cmdlet to delete them. The command appears here:
If you do not want to delete all of your custom Windows PowerShell ISE snippets, use the 
Where-
Object
[<00030046>4<0050>-11<0047>1<004F>-7<0048>-10<005700030057>-1<0052000300C0>-2<004F>-6<0057>-3<0048>-10<005500030052>-7<0051>-4<004F>-12<005C00030057>-2<004B>-9<004800030052>-7<0051>-9<0048>-12<00560003005C>1<0052>-9<005800030047>-5<00520003005A>-9<004C>-5<0056>-4<004B00030057005200030047>-7<0048>-11<004F>-7<0048>-10<0057>-3<0048>-7<001100030037>-7<004B>-9<004800030049>-7<0052>-6<004F>1<004F>-7<0052>-3<005A>-9<004C0051>-11<004A00030058>-6<0056>-12<0048>-12<005600030057>-2<004B>-9<00480003>]TJ
Get-IseSnippet 
[<0046>4<0050>-11<0047>1<004F>-7<0048>-10<00570003005700520003004F004C>-5<0056>-16<005700030044>-4<004F>1<004F00030057>-2<004B>-9<004800030058>-6<0056>-12<0048>-10<0055>-10<0010>-18<0047>-7<0048>-9<00C0>-2<0051>-9<0048>-16<00470003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F0003002C>-8<0036002800030056>-3<0051>-2<004C0053>-7<0053>-13<0048>-10<0057>-19<005600030052>-7<005100030057>-2<004B>-9<004800030056>-21<005C>-12<0056>-16<0057>-3<0048>-10<0050>5<001D>]TJ
Mode                LastWriteTime     Length Name                                                 
----                -------------     ------ ----                                                 
-a---          7/1/2012   1:03 AM        653 bogus.snippets.ps1xml                                
-a---          7/1/2012   1:02 AM        653 mysnip.snippets.ps1xml                               
Next, use the 
Where-Object
 cmdlet 
 is an alias for the 
Where-Object
 to return all of the user-
[<0047>-7<0048>-9<00C0>-2<0051>-9<0048>-16<00470003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F0003002C>-8<0036002800030056>-3<0051>-2<004C0053>-7<0053>-13<0048>-10<0057>-19<005600030048>-6<005B>5<0046>-2<0048>-10<0053>-5<005700030057>-2<004B>-9<004800030052>-7<0051>-9<0048>-12<005600030057>-2<004B>-7<0044>-3<005700030046>1<0052>-7<00510057>-19<0044>-2<004C005100030057>-2<004B>-9<00480003005A>-2<0052>-7<0055>-13<00470003>]TJ
switch 
within the 
[<0051>-7<0044>-4<0050>-9<0048>-7<001100030037>-7<004B>-9<004800030056>-4<0051>-2<004C0053>-7<0053>-13<0048>-10<0057>-19<005600030057>-2<004B>-7<0044>-3<005700030050>-7<0044>-4<004E>12<00480003004C>-6<005700030057>-2<004B>-4<0055>-12<0052>-9<0058>-7<004A>1<004B00030057>-2<004B>-9<0048000300C0>-2<004F>-6<0057>-3<0048>-10<005500030044>-4<0055>-12<004800030053>-6<004C0053>-13<0048>-11<004F004C0051>-9<0048>-16<004700030057005200030057>-2<004B>-9<00480003>]TJ
Remove-Item
 cmdlet. In the 
code that follows, the
-whatif 
switch shows which snippets would be removed by the command. 
[<0032>-11<0051>-9<0046>-2<00480003005C>1<0052>-9<00580003004B>-7<0044>1<0059>1<0048000300460052>-7<005100C0>-2<0055>-12<0050>-9<0048>-16<004700030057>-2<004B>-7<0044>-3<005700030052>-7<0051>-4<004F>-12<005C00030057>-2<004B>-9<004800030056>-4<0051>-2<004C0053>-7<0053>-13<0048>-10<0057>-19<00560003005C>1<0052>-9<005800030047>-5<005200030051>-9<0052>-2<00570003005A>-2<0044>-4<005100570003004E>12<0048>-16<0048>-10<00530003005A>-9<004C004F>1<004F00030045>-13<004800030047>-7<0048>-11<004F>-7<0048>-10<0057>-3<0048>-16<0047>-9<000F00030055>-12<0048>-10<0050>-9<0052>-1<0059>1<004800030057>-2<004B>-9<00480003>]TJ
-whatif 
switch from the 
Remove-Item
[<00030046>4<0050>-11<0047>1<004F>-7<0048>-10<005700030044>-3<0051>-11<004700030055>-17<0058>1<005100030057>-2<004B>-9<0048000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<00470003004400030056>-12<0048>-16<00460052>-7<0051>-11<004700030057>-2<004C0050>-9<0048>-7<001100030037>55<0052000300460052>-7<005100C0>-2<0055>-12<00500003005A>-9<004B>-2<004C>-3<0046>4<004B0003>]TJ
snippets remain, use the 
Get-IseSnippet
 cmdlet to see which Windows PowerShell ISE snippets are left 
on the system. 
  
Mode                LastWriteTime     Length Name                                                 
----                -------------     ------ ----                                                 
Using the Commands add-on: step-by-step exercises
In this exercise, you will explore using the Commands add-on by looking for cmdlets related to WMI. 
You will then select the
Invoke-WmiMethod
 cmdlet from the list and create new processes. Following 
this exercise, you will use Windows PowerShell ISE snippets to create a WMI script.
Using the Commands add-on to use WMI methods
1.
Start the Windows PowerShell ISE.
2.
Use the Commands add-on to search for cmdlets related to WMI. 
3.
Select the 
Invoke-WmiMethod
 cmdlet from the list.
4.
In the
 class 
block, add the WMI class name
Win32_Process
5.
In the 
name 
block, enter the method name 
create.
6.
In the argument list, enter 
notepad
Click the Run button. In the output console, you should see the following command, and on 
the next line the output from the command. Sample output appears here:
8.
Modify the 
ArgumentList 
block by adding 
calc
 to the argument list. Use a semicolon to sepa
rate the arguments, as shown here:
Click the Run
button a second time to execute the revised command. 
10.
In the Commands add-on, look for cmdlets with the word 
process 
in the name. Select the 
Stop-Process
 cmdlet from the list of cmdlets.
11.
Choose the 
name 
parameter set in the 
parameters for Stop-Process 
block. 
12.
In the Name
box, type 
notepad
 and 
calc
. The command appears here:
13.
Click the Run
button to execute the command. 
14.
Under the 
name 
block showing the process-related cmdlets, choose the 
Get-Process
 cmdlet. 
15.
In the 
name 
parameter set, enter 
calc, notepad
16.
Click the Run
button to execute the command. 
Two errors should appear, stating that the 
calc 
and 
notepad 
processes aren22t running. The 
errors appear here:
This concludes the exercise. Leave the Windows PowerShell ISE console open for the next 
exercise.
In the following exercise, you will explore using Windows PowerShell ISE snippets to simplify script 
creation.
  
Using Windows PowerShell ISE snippets
1.
Start the Windows PowerShell ISE.
2.
Close the Commands add-on.
3.
Display the script pane. 
4.
Use the 
Get-WmiObject
 cmdlet to retrieve a listing of process objects from the local host. 
Store the returned process objects in a variable named 
$process
. As you type the command, 
ensure you use IntelliSense to reduce typing. You should be able to type 
Get-Wm
 and press 
Enter to select the 
Get-WmiObject
 cmdlet from the IntelliSense list. You should also be able 
to type 
-c
 and then press Enter to choose the 
-class
 parameter from the IntelliSense list. The 
complete command appears here:
5.
Use the 
foreach 
code snippet to walk through the collection of process objects stored in 
the 
$process
 variable. To do this, type Ctrl+J to start the code snippets. Once the snippet 
list appears, type 
 to quickly move to the 23F24 section of the snippets. To choose the 
foreach 
snippet, you can continue to type 
fore
 and then press Enter to add the 
foreach 
snippet to 
your code. It is easier, however, to use the down arrow once you are in the 23F24 section of the 
snippets. The complete 
foreach 
snippet appears here:
6.
Change the 
$collection 
variable in the 
foreach 
snippet to 
$process
 because that variable holds 
your collection of process objects. The easiest way to do this is to use the mouse and double-
click the 
$process
 variable on line 1 of your code. Doing this only selects the noun portion of 
variable name, not the dollar sign. So, the process is to double-click 
$process
, press Ctrl+C, 
double-click 
$collection
, and press Ctrl+V. The 
foreach 
snippet now appears as shown here:
Inside the script block portion of the 
foreach 
snippet, use the 
$item
 variable to display the 
name of each process object. The code to do this appears here:
8.
Run the code by either clicking the green triangle on the toolbar or pressing F5. The output 
should list the name of each process on your system. The completed code appears here:
This concludes the exercise.
Chapter 8 quick reference
Do this
Create a Windows PowerShell command without typing 
Use the Commands add-on.
[<0029>-9<004C>-7<0051>-18<00470003004400030056>-10<0053>-20<0048>-23<0046>-3<004C>-12<00C0>-12<00460003003A>-23<004C>-7<0051>-18<0047>-12<0052>-10<005A>-19<005600030033>-2<0052>-10<005A>-9<0048>-17<0055>-30<0036>-7<004B>-16<0048>-18<004F>-6<004F00030046>-7<0052>-14<0050>-11<0050>-14<0044>-11<0051>-18<0047>]TJ
Use the Commands add-on and type a search term in the 
Name 
box.
Quickly type a command in either the script pane or the 
console pane
Use IntelliSense and press Enter to use the selected 
command or parameter.
Run a script from the Windows PowerShell ISE
Press F5 to run the entire script.
[<0035>-7<0058>-6<005100030052>-14<0051>-11<004F>-19<005C0003004400030056>-10<0053>-20<0048>-23<0046>-3<004C>-12<00C0>-12<004600030056>-19<0048>-18<004F>-14<0048>-23<0046>-31<0057>-9<004C>-12<0052>-14<005100030052>-7<004900030057>-9<004B>-16<004800030056>-19<0046>-3<0055>-19<004C>-7<0053>-12<00570003>]TJ
Select the applicable portion of the script and press F8 to 
run the selection.
[<0026>1<0055>-19<0048>-17<0044>-10<0057>-10<00480003004400030058>-13<0056>-19<0048>-17<0055>-17<0010>-24<0047>-14<0048>-16<00C0>-9<0051>-16<0048>-23<00470003003A>-23<004C>-7<0051>-18<0047>-12<0052>-10<005A>-18<005600030033>-2<0052>-10<005A>-9<0048>-17<0055>-30<0036>-7<004B>-16<0048>-18<004F>-6<004F0003002C>-15<0036>-7<002800030056>-11<0051>-9<004C>-7<0053>-14<0053>-20<0048>-17<0057>]TJ
Use the 
New-IseSnippet 
cmdlet and enter the 
Title
Description
, and 
Text
 parameters.
[<0035>-9<0048>-17<0050>-16<0052>-8<0059>-6<004800030044>-11<004F>-6<004F00030058>-13<0056>-19<0048>-17<0055>-17<0010>-24<0047>-14<0048>-16<00C0>-9<0051>-16<0048>-23<00470003003A>-23<004C>-7<0051>-18<0047>-12<0052>-10<005A>-18<005600030033>-2<0052>-10<005A>-9<0048>-17<0055>-30<0036>-7<004B>-16<0048>-18<004F>-6<004F0003002C>-15<0036>-7<00280003>]TJ
snippets
Use the 
Get-ISESnippet 
cmdlet and pipeline the results to 
the 
Remove-Item 
cmdlet.
CHAPTER 9
Working with 
[<003A>1<004C>18<0051>6<0047>11<0052>15<005A>7<005600030033>20<0052>15<005A>14<0048>6<0055>-8<0036>14<004B>6<0048>5<004F>18<004F00030033>17<0055>1<0052>12<00C0>16<004F>10<00480056>]TJ
fter completing this chapter, you will be able to:
[<0038>-2<0051>-11<0047>-7<0048>-10<0055>-26<0056>-16<0057>-19<0044>-4<0051>-11<004700030057>-2<004B>-9<004800030047004C>-3<0049>-39<0049>-7<0048>-10<0055>-12<0048>-10<0051>-1<00570003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-12<0056>-19<0011>]TJ
Use 
New-Item 
[<0057>-1<005200030046>4<0055>-12<0048>-10<0044>-3<0057>-3<00480003004400030051>-9<0048>-9<005A0003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-7<0011>]TJ
Use the 
[<00070053>-15<0055>-19<0052>-21<00C0>-17<004F>-12<0048>]TJ
 automatic variable.
[<0027>-12<0048>-12<0056>-13<0046>4<0055>-12<004C0045>-13<004800030057>-2<004B>-9<004800030045>-13<0048>-12<0056>-16<005700030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<004800030057>-1<005200030053>-7<0055>-12<0052>-1<0059>-12<004C>-5<0047>-7<004800030056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<004600030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051>-7<0044>-4<004F004C>-5<0057>-38<005C>35<0011>]TJ
[<0036>1<004C005B00030027>1<004C>8<0049>-19<00490048>-5<0055>-5<0048>-5<0051>7<005700030033>14<0052>12<005A>12<0048>-5<0055>-7<0036004B>-1<0048>-5<004F>4<004F00030053>-1<0055>-6<0052>4<00C0>3<004F0048>-2<0056>]TJ
A Microsoft
[<0003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<004800030046>4<0055>-12<0048>-10<0044>-3<0057>-3<0048>-12<00560003004400030056>-16<0057>-19<0044>-4<0051>-11<0047>-3<0044>-4<0055>-13<0047004C>-7<005D>-1<0048>-16<004700030048>-10<0051>4<0059>-12<004C0055>-12<0052>-7<0051>-4<0050>-9<0048>-10<0051005700030045>-2<005C00030046>4<0055>-12<0048>-10<0044>-3<0057>-2<004C0051>-11<004A00030046>-1<0058>-6<0056>-16<0057>-1<0052>-7<00500003>]TJ
[<0049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051>-9<0056>-20<000F00030044>-4<004F004C>-2<0044>-10<0056>-12<0048>-12<0056>-20<000F00030033>-9<003600030047>1<0055>-12<004C>-12<0059>1<0048>-12<0056>-20<000F00030044>-3<0051>-11<004700030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<0048>-12<005600030058>1<0053>-13<0052>-7<005100030056>-16<0057>-19<0044>-4<0055>-41<0057>-8<0058>1<0053>1<00110003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-12<005600030044>-4<0055>-12<00480003004400030045>-6<004C>-5<00570003>]TJ
confusing27there are, in fact, six different ones. Both the Windows PowerShell console and the 
[<003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F0003002C>-8<003600280003004B>-7<0044>1<0059>1<004800030057>-2<004B>-9<0048>-9<004C005500030052>-3<005A>-9<005100030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-12<0056>-19<00110003002C>-1<005100030044>-11<0047>-7<0047004C>-5<0057>-2<004C>-5<0052>-7<0051>-14<000F00030057>-2<004B>-9<0048>-10<0055>-12<004800030044>-4<0055>-12<004800030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-12<005600030049>-7<0052>-7<005500030057>-2<004B>-9<004800030046>-2<0058>1<0055>-12<0055>-12<0048>-10<0051005700030058>-6<0056>-12<0048>-10<0055>39<000F0003>]TJ
[<0044>-10<00560003005A>-2<0048>-11<004F>1<004F00030044>-11<005600030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-12<005600030049>-7<0052>-7<005500030044>-4<004F>1<004F00030058>-6<0056>-12<0048>-10<0055>-26<0056>-19<001100030037>59<0044>-4<0045>-8<004F>-7<00480003001C>-24<0010>59<00140003004F004C>-5<0056>-16<0057>-19<005600030057>-2<004B>-9<004800030056>-4<004C>-9<005B00030047004C>-3<0049>-39<0049>-7<0048>-10<0055>-12<0048>-10<0051005700030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-12<005600030044>-4<0051>-11<004700030057>-2<004B>-9<0048>-9<004C005500030044>-11<0056>-14<0056>-12<0052>-13<0046>4<004C>-2<0044>-3<0057>-3<0048>-16<00470003004F>-7<0052>-13<0046>-14<0044>-3<0057>-2<004C>-5<0052>-7<0051>-9<0056>-19<00110003>]TJ
In the table, the automatic variable 
$home
 points to the usersusername directory on the system. 
The 
$pshome
 automatic variable points to the Windows PowerShell installation folder. This location 
typically is C:WindowsSystem32WindowsPowerShellv1.0 for compatibility reasons, the Windows 
PowerShell installation folder is in the v1.0 folder27even on Windows PowerShell 3.0. 
TABLE 9-1
[<0037>-10<004B>-12<004800030056>-6<004C>-11<005B00030047>-2<004C>-5<0049>-41<0049>-9<0048>-12<0055>-14<0048>-12<0051>-3<00570003003A>-18<004C>-2<0051>-13<0047>-7<0052>-5<005A>-14<005600030033>3<0052>-5<005A>-4<0048>-12<0055>-25<0036>-2<004B>-12<0048>-13<004F>-2<004F00030053>-9<0055>-14<0052>-4<00C0>-5<004F>-9<0048>-14<005600030044>-6<0051>-13<004700030057>-4<004B>-12<0048>-12<004C>-2<005500030053>-11<0044>-5<0057>-4<004B>-11<00560003>]TJ
Description 
Path
Current User, Current Host console
[<0007>17<002B>1<0052>2<00500048>29<003F>-6<003E>8<0030>1<005C>16<0003>16<0040>7<0027>-3<0052>-4<0046>7<0058>10<00500048>-1<0051>8<0057>-9<0056>13<003F>51<003A>-7<004C>9<0051>-2<0047>4<0052>6<005A>-3<0056>3<0033>14<0052>6<005A>7<0048>-1<0055>-14<0036>9<004B0048>-2<004F>10<004F>-14<003F>9<0033>11<0055>-3<0052>8<00C0>6<004F>2<0048>2<0011>1<0053>1<0056>16<0014>]TJ
Current User, All Hosts  
[<0007>1<002B>-15<0052>-14<0050>-16<0048>13<003F>-22<003E>-8<0030>-15<005C00030040>-9<0027>-19<0052>-20<0046>-9<0058>-6<0050>-16<0048>-17<0051>-8<0057>-25<0056>-3<003F>-7<0033>-5<0055>-19<0052>-8<00C0>-10<004F>-14<0048>-14<0011>-15<0053>-15<00560014>]TJ
All Users, Current Host console
[<0007>15<0033>1<0056>1<002B>-1<00520050>-2<0048>27<003F>7<0030>5<004C>4<0046>11<0055>-5<00520056>-5<0052>7<0049>-34<0057>-12<0011>-10<0033>12<0052>4<005A>5<0048>-3<0055>-16<0036>7<004B>-2<0048>-4<004F>8<004F>-17<0042>-23<00530055>-5<0052>6<00C0>4<004F00480011>-1<0053>-1<0056>14<0014>]TJ
All Users, All Hosts    
[<0007>15<0033>1<0056>1<002B>-1<00520050>-2<0048>27<003F>7<0033>9<0055>-5<0052>6<00C0>4<004F00480011>-1<0053>-1<0056>14<0014>]TJ
Current User, Current Host ISE
$Home[My ]DocumentsWindowsPowerShellMicrosoft.
[<0033>12<0052>4<005A>5<0048>-3<0055>-16<0036>7<004B>-2<0048>-4<004F>8<004F>5<002C>-1<0036>7<0028>-22<0042>-23<00530055>-5<0052>6<00C0>4<004F00480011>-1<0053>-1<0056>14<0014>]TJ
All Users, Current Host ISE
[<0007>15<0033>1<0056>1<002B>-1<00520050>-2<0048>27<003F>7<0030>5<004C>4<0046>11<0055>-5<00520056>-5<0052>7<0049>-34<0057>-12<0011>-10<0033>12<0052>4<005A>5<0048>-3<0055>-16<0036>7<004B>-2<0048>-4<004F>8<004F>5<002C>-1<0036>7<0028>-22<0042>-23<00530055>-5<0052>6<00C0>4<004F00480011>-1<0053>-1<0056>14<0014>]TJ
  
[<0038>14<0051>2<0047>7<0048>2<0055>-14<0056>1<0057>-8<0044>2<0051>2<0047>13<004C>13<0051>2<004A00030057>7<004B>1<004800030056>8<004C>3<005B00030047>13<004C>12<0049>-21<0049>2<0048>2<0055>-3<0048>2<0051>9<00570003003A>-3<004C>13<0051>2<0047>7<0052>10<005A>2<005600030033>15<0052>10<005A>10<0048>2<0055>-12<0036>9<004B>1<0048>1<004F>14<004F00030053>5<0055>-3<0052>8<00C0>12<004F>5<0048>-4<0056>]TJ
[<0037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030057>-2<004B>-2<004C0051>-11<004A00030057>-1<005200030047>-5<00520003004C005100030058>1<0051>-11<0047>-7<0048>-10<0055>-26<0056>-16<0057>-19<0044>-4<0051>-11<0047004C0051>-11<004A00030057>-2<004B>-9<004800030056>-4<004C>-9<005B00030047004C>-3<0049>-39<0049>-7<0048>-10<0055>-12<0048>-10<0051>-1<00570003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-12<00560003004C>-5<005600030057>-1<00520003004E>12<0048>-16<0048>-10<00530003004C005100030050>-2<004C0051>-11<00470003>]TJ
that the value of 
[<00070053>-15<0055>-19<0052>-21<00C0>-17<004F>-12<0048>]TJ
 changes depending on which Windows PowerShell host you use. As long 
[<0044>-10<00560003005C>1<0052>-10<005800030055>-12<0048>-10<0044>-4<004F004C>-7<005D>-1<00480003004C>-5<00570003004C>-5<00560003004400030050>-9<0052>-1<0059>-12<004C0051>-11<004A00030057>-19<0044>-4<0055>-12<004A>-7<0048>-10<0057>-20<000F0003005C>1<0052>-9<00580003005A>-9<004C004F>1<004F00030045>-13<0048000300C0>-2<0051>-9<0048>-7<00110003002C>-1<005100030050>-9<0052>-7<0056>-16<005700030046>-14<0044>-10<0056>-12<0048>-12<0056>-20<000F0003005A>-8<004B>-9<0048>-10<005100030057>-19<0044>-4<004F>1<004E>-14<004C0051>-11<004A00030044>-4<0045>-13<0052>-9<0058>-5<005700030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<00560003>]TJ
[<0033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-9<000F00030053>-13<0048>-16<0052>-7<0053>-8<004F>-7<004800030044>-4<0055>-12<004800030055>-12<0048>-8<0049>-7<0048>-10<0055>-12<0055>-12<004C0051>-11<004A00030057005200030057>-2<004B>-9<00480003>]TJ
Current User, 
[<0026>6<0058>1<0055>-12<0055>-12<0048>-10<005100570003002B>-8<0052>-7<0056>-16<005700030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-7<00110003002C>-1<005100030049>-9<0044>-9<0046>-25<0057>-20<000F0003004C>-3<004900030057>-2<004B>-9<0048>-10<0055>-12<00480003004C>-5<00560003>]TJ
[<0051>-9<005200030054>-3<0058>-3<0044>-4<004F004C>-5<00C0>-7<0048>-10<005500030049>-7<0052>-7<005500030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<00480003005A>-9<004C>-5<0057>-2<004B0003004C>-5<0057>-19<005600030044>-11<0056>-14<0056>-12<0052>-13<0046>4<004C>-2<0044>-3<0057>-3<0048>-16<004700030056>-13<00460052>-7<0053>-13<004800030052>-7<005500030047>-7<0048>-12<0056>-13<0046>4<0055>-12<004C0053>-5<0057>-2<004C>-5<0052>-7<0051>-14<000F0003004C>-5<00570003004C>-5<005600030056>-17<0044>-1<0049>-7<004800030057>-1<00520003>]TJ
[<0044>-10<0056>-14<0056>-6<0058>1<0050>-9<004800030057>-2<004B>-9<004800030055>-12<0048>-8<0049>-7<0048>-10<0055>-12<0048>-10<0051>-9<0046>-2<00480003004C>-5<005600030057>-1<005200030057>-2<004B>-9<004800030026>6<0058>1<0055>-12<0055>-12<0048>-10<0051005700030038>-3<0056>-12<0048>-10<0055>39<000F00030026>7<0058>1<0055>-12<0055>-12<0048>-10<0051>-1<00570003002B>-7<0052>-7<0056>-16<005700030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-7<00110003>]TJ
ote
[<0037>-5<004B>-7<00480003003A>-14<004C>2<0051>-9<0047>-3<0052005A>-9<005600030033>8<0052005A>1<0048>-8<0055>-21<0036>3<004B>-7<0048>-9<004F>3<004F00030053>-5<0055>-10<0052>1<00C0004F>-5<00480003000B>33<0044>-1<0051>6<005C00030052>-4<0051>-7<004800030052>3<004900030057004B>-7<004800030056>-1<004C>-7<005B>6<000C0003004C>-3<005600030056>-1<004C>2<0050>-2<0053>-5<004F>-10<005C000300440003003A>-13<004C>2<0051>-9<0047>-3<0052005A>-9<005600030033>8<0052005A>1<0048>-8<0055>-21<0036>3<004B>-7<0048>-9<004F>3<004F0003>]TJ
script. It has a special name, and it resides in a special place, but it is simply a script. In this 
[<0055>-10<0048>-14<004A>-1<0044>-2<0055>-10<0047>-7<000F0003004C>-3<00570003004C>-3<005600030056>-10<0052>-5<0055>-39<005700030052>3<00490003004F>2<004C>2<004E>14<004800030057004B>-7<004800030052>-4<004F>-6<00470010>13<0049>-7<0044>-8<0056>-1<004B004C>-3<0052>-5<0051>-7<0048>-14<004700030044>-4<0058>-3<0057>2<0052>-11<0048>-4<005B>4<0048>-14<0046>-13<0011>-6<0045>-7<0044>-1<005700030045>-7<0044>-1<0057>1<0046>6<004B000300C0004F>-5<0048>-5<001100030025>-10<0048>-14<0046>-12<0044>-4<0058>-4<0056>-10<004800030057004B>-7<00480003003A>-14<004C>2<0051>-9<0047>-3<0052005A>-9<00560003>]TJ
[<0033>8<0052005A>1<0048>-8<0055>-21<0036>3<004B>-7<0048>-9<004F>3<004F00030053>-5<0055>-10<0052>1<00C0004F>-5<00480003004C>-3<0056000300440003003A>-14<004C>2<0051>-9<0047>-3<0052005A>-9<005600030033>8<0052005A>1<0048>-8<0055>-21<0036>3<004B>-7<0048>-9<004F>3<004F00030056>-10<0046>6<0055>-9<004C>2<0053>-3<0057>-17<000F0003005C>3<0052>-7<005800030050>-4<0058>-4<0056>-14<005700030048>-8<0051>-5<0044>-2<0045>-5<004F>-5<004800030057004B>-7<004800030056>-10<0046>6<0055>-9<004C>2<0053>-3<005700030048>-4<005B>4<0048>-14<0046>1<0058>-3<0057004C>-3<0052>-5<00510003>]TJ
[<0053>-11<0052>-4<004F>2<004C>-1<0046>-28<005C00030053>-4<0055>-9<004C>-3<0052>-5<005500030057>2<005200030046>3<0052>-5<0051>2<00C0>-5<004A>-1<0058>3<0055>-9<004C>2<0051>-9<004A00030044>-1<0051>-9<004700030058>-4<0056>-1<004C>2<0051>-9<004A000300440003003A>-14<004C>2<0051>-9<0047>-3<0052005A>-9<005600030033>8<0052005A>1<0048>-8<0055>-21<0036>3<004B>-7<0048>-9<004F>3<004F00030053>-5<0055>-10<0052>1<00C0004F>-5<0048>-5<0011>]TJ
Examining the 
[<00070053>-6<0055>-14<0052>-13<00C0>-11<004F>-4<0048>]TJ
 variable
In 
Windows PowerShell, the 
[<00070053>-15<0055>-19<0052>-21<00C0>-17<004F>-12<0048>]TJ
 automatic variable contains the path to the Current User, Current 
[<002B>-8<0052>-7<0056>-16<00570003>1<0053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-7<00110003>1<0037>-7<004B>-2<004C>-5<00560003>1<0050>-7<0044>-4<004E>12<0048>-12<00560003>1<0056>-12<0048>-10<0051>-9<0056>-12<0048>-9<000F0003>1<0044>-4<0051>-11<00470003>1<004C>-5<00560003>1<00440003>1<004A>1<0055>-12<0048>-10<0044>-3<00570003>1<005A>-3<0044>2<005C0003>1<0057>-1<00520003>1<0048>-10<0044>-10<0056>-3<004C004F>-12<005C0003>1<0044>-9<00460046>-2<0048>-12<0056>-14<00560003>1<0057>-2<004B>-9<00480003>1<0053>-9<0044>-3<0057>-2<004B0003>1<0057>-1<00520003>1<0057>-2<004B>-9<00480003>1<0053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-7<00110003>1<0037>-7<004B>-9<00480003>1<0049>-7<0052>-6<004F>1<004F>-7<0052>-3<005A>-9<004C0051>-11<004A0003>]TJ
illustrates this technique from within the Windows PowerShell console:
Inside the Windows PowerShell ISE, when I query the 
[<00070053>-15<0055>-19<0052>-21<00C0>-17<004F>-12<0048>]TJ
 automatic variable, I receive the 
output appearing here:
To save you a bit of analyzing, the difference between the Windows PowerShell console Current 
[<0038>-3<0056>-12<0048>-10<0055>39<000F00030026>7<0058>1<0055>-12<0055>-12<0048>-10<0051>-1<00570003002B>-7<0052>-7<0056>-16<005700030053>-6<0055>-12<0052>-1<00C0>-2<004F>-7<004800030053>-9<0044>-3<0057>-2<004B00030044>-4<0051>-11<004700030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F0003002C>-8<0036002800030026>7<0058>1<0055>-12<0055>-12<0048>-10<0051005700030038>-3<0056>-12<0048>-10<0055>39<000F00030026>7<0058>1<0055>-12<0055>-12<0048>-10<005100570003002B>-7<0052>-7<0056>-16<005700030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<00480003>]TJ
path is three letters: 
ISE. 
ote
These three letters, 
ISE
[<000F00030052>3<0049>-40<0057>-1<0048>-8<005100030046>-12<0044>-4<0058>-4<0056>-10<00480003005C>3<0052>-7<005800030053>-4<0055>-10<0052>-5<0045>-5<004F>-5<0048>-8<0050>-7<0056>-17<00110003003A>-8<004B>-7<0048>-8<005100030050>-7<0052>-11<0047>2<004C>-1<0049>-46<005C>-10<004C>2<0051>-9<004A0003005C>3<0052>-7<0058>3<005500030053>-5<0055>-10<0052>1<00C0004F>-5<0048>-7<000F0003005C>3<0052>-7<00580003>]TJ
[<0050>-5<0044>4<005C00030045>-11<004800030056>-10<0048>-8<0057>-29<0057004C>2<0051>-9<004A00030056>-10<0052>-5<0050>-7<0048>-8<0057004B004C>2<0051>-9<004A0003004C>2<00510003005C>3<0052>-7<0058>3<00550003003A>-14<004C>2<0051>-9<0047>-3<0052005A>-9<005600030033>8<0052005A>1<0048>-8<0055>-21<0036>3<004B>-7<0048>-9<004F>3<004F00030046>2<0052>-5<0051>-7<0056>-10<0052>-4<004F>-5<004800030053>-5<0055>-10<0052>1<00C0004F>-5<0048>-7<000F00030044>-1<0051>-9<00470003004C>-3<00570003004C>-3<005600030051>-7<0052005700030044>4<0059>-3<0044004C>2<004F>]TJ
able inside the Windows PowerShell ISE.
[<0038>11<0051>6<0055>1<0044>6<0059>12<0048>-2<004F>10<004C>10<0051>-1<004A00030057>4<004B>-2<004800030047>10<004C>9<0049>-24<00490048>-1<0055>-6<0048>-1<0051>6<005700030053>2<0055>-6<0052>5<00C0>9<004F>2<0048>-7<0056>]TJ
You can pipeline the 
[<00070053>-15<0055>-19<0052>-21<00C0>-17<004F>-12<0048>]TJ
 variable to the 
Get-Member 
cmdlet and see additional properties that 
exist on the 
[<00070053>-15<0055>-19<0052>-21<00C0>-17<004F>-12<0048>]TJ
 variable. This technique appears here:
If accessing the 
[<00070053>-15<0055>-19<0052>-21<00C0>-17<004F>-12<0048>]TJ
 variable from within the Windows PowerShell console, the 
AllUsersCurrentHost 
and 
CurrentUserCurrentHost
 note properties refer to the Windows PowerShell console. If you 
access the 
[<00070053>-15<0055>-19<0052>-21<00C0>-16<004F>-12<0048>]TJ
 variable from within the Windows PowerShell ISE, the 
AllUsersCurrentHost
 and 
CurrentUserCurrentHost
[<00030051>-9<0052>-2<0057>-3<004800030053>-7<0055>-12<0052>-7<0053>-13<0048>-10<0055>-41<0057>-2<004C>-5<0048>-12<005600030055>-12<0048>-8<0049>-7<0048>-10<005500030057>-1<005200030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F0003002C>-8<0036002800030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-12<0056>-19<0011>10<0003>]TJ
Using the 
[<00070053>-6<0055>-14<0052>-13<00C0>-10<004F>-3<0048>]TJ
 variable to refer to more than the current host
When you reference the 
[<00070053>-15<0055>-19<0052>-21<00C0>-17<004F>-12<0048>]TJ
[<00030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<0048>-9<000F00030045>-2<005C00030047>-7<0048>-8<0049>-9<0044>-6<0058>1<004F>-6<00570003004C>-5<005700030055>-12<0048>-8<0049>-7<0048>-10<0055>-26<005600030057>-1<005200030057>-2<004B>-9<004800030026>6<0058>1<0055>-12<0055>-12<0048>-10<0051005700030038>-3<0056>-12<0048>-10<0055>39<000F00030026>7<0058>1<0055>-12<0055>-12<0048>-10<005100570003002B>-8<0052>-7<0056>-16<005700030053>-6<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-7<00110003>]TJ
If you pipeline the variable to the 
Format-List 
cmdlet, it still refers to the Current User, Current Host 
[<0053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-7<001100030037>-7<004B>-2<004C>-5<005600030057>-3<0048>-16<0046>4<004B>-4<0051>-2<004C>-5<0054>-3<0058>-7<004800030044>-4<0053>-7<0053>-13<0048>-10<0044>-4<0055>-26<00560003004B>-9<0048>-10<0055>-12<0048>5<001D>]TJ
This can lead to a bit of confusion, especially because the 
Get-Member
 cmdlet reveals the existence 
[<0052004900030050>-6<0058>1<004F>-6<0057>-2<004C0053>-8<004F>-7<004800030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-12<005600030044>-4<0051>-11<004700030050>-6<0058>1<004F>-6<0057>-2<004C0053>-8<004F>-7<004800030051>-9<0052>-2<0057>-3<004800030053>-7<0055>-12<0052>-7<0053>-13<0048>-10<0055>-41<0057>-2<004C>-5<0048>-12<0056>-19<001100030037>-7<004B>-9<00480003005A>-3<0044>2<005C00030057005200030056>-12<0048>-16<004800030044>-4<004F>1<004F00030052004900030057>-2<004B>-9<004800030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-12<005600030049>-7<0052>-7<005500030057>-2<004B>-9<004800030046>-2<0058>1<0055>-12<0055>-12<0048>-10<005100570003>]TJ
host is to use the
-force
 parameter27it reveals the hidden properties. The command illustrating this 
technique appears here:
[<0037>-7<004B>-9<0048000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<004700030057>-1<005200030047004C>-5<0056>-4<0053>-8<004F>-5<0044>2<005C00030057>-2<004B>-9<004800030059>-5<0044>-4<0055>-12<004C>-5<0052>-10<0058>-6<005600030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-12<005600030044>-4<0051>-11<004700030057>-2<004B>-9<004800030044>-11<0056>-14<0056>-12<0052>-13<0046>4<004C>-2<0044>-3<0057>-3<0048>-16<004700030052>-9<0058>-5<0057>-2<0053>-9<0058>-5<005700030049>-12<0055>-12<0052>-7<005000030057>-2<004B>-9<0048000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<004700030044>-4<0053>-7<0053>-13<0048>-10<0044>-4<00550003>]TJ
in Figure 9-1.
FIGURE 9-1
The 
[<00070053>-15<0055>-18<0052>-21<00C0>-16<004F>-12<0048>]TJ
[<00030059>-10<0044>-8<0055>-16<004C>-7<0044>-8<0045>-12<004F>-11<004800030046>-4<0052>-11<0051>-5<0057>-24<0044>-7<004C>-5<0051>-13<005600030057>-7<004B>-14<004800030053>-14<0044>-7<0057>-7<004B00030057>-5<005200030056>-17<0048>-12<0059>-4<0048>-15<0055>-13<0044>-9<004F00030047>-5<004C>-8<0049>-43<0049>-11<0048>-15<0055>-17<0048>-15<0051>-5<00570003003A>-20<004C>-5<0051>-15<0047>-10<0052>-7<005A>-16<0056000300330052>-7<005A>-6<0048>-15<0055>-28<0036>-4<004B>-14<0048>-15<004F>-4<004F00030053>-11<0055>-17<0052>-6<00C0>-7<004F>-11<0048>-17<0056>-24<0011>]TJ
[<002C>-1<00570003004C>-5<005600030053>-13<0052>-7<0056>-14<0056>-3<004C0045>-8<004F>-7<004800030057>-1<005200030047004C0055>-12<0048>-16<0046>-25<0057>-2<004F>-12<005C00030044>-9<00460046>-2<0048>-12<0056>-14<005600030048>-10<0044>-9<0046>4<004B00030052>1<004900030057>-2<004B>-9<0048>-12<0056>-12<004800030056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<004600030053>-7<0055>-12<0052>-7<0053>-13<0048>-10<0055>-41<0057>-2<004C>-5<0048>-12<0056>-26<00B3>-31<004D>-2<0058>-6<0056>-16<00570003004F004C004E>12<00480003005C>1<0052>-9<00580003005A>-2<0052>-9<0058>1<004F>-8<004700030044>-9<00460046>-2<0048>-12<0056>-14<005600030044>-4<0051>4<005C0003>]TJ
other property27via dotted notation. This technique appears here:
  
[<0037>-7<004B>-9<004800030053>-9<0044>-3<0057>-2<004B00030057005200030048>-10<0044>-9<0046>4<004B00030052004900030057>-2<004B>-9<004800030049>-7<0052>-10<0058>1<005500030047004C>-3<0049>-39<0049>-7<0048>-10<0055>-12<0048>-10<0051005700030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-12<005600030049>-7<0052>-7<005500030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F000300460052>-7<0051>-9<0056>-12<0052>-6<004F>-7<004800030044>-4<0053>-7<0053>-13<0048>-10<0044>-4<0055>-26<00560003004C00510003>]TJ
Figure 9-2.
FIGURE 9-2
Use dotted notation to access the various properties of the 
[<00070053>-15<0055>-18<0052>-21<00C0>-16<004F>-12<0048>]TJ
 variable.
[<0027>3<0048>-2<0057>7<0048>2<0055>2<0050>10<004C>13<0051>10<004C>13<0051>2<004A0003005A>4<004B>1<0048>-2<0057>7<004B>1<0048>2<00550003004400030056>6<0053>-1<0048>-4<0046>5<004C>12<00C0>10<004600030053>5<0055>-3<0052>7<00C0>12<004F>5<004800030048>4<005B>4<004C>6<0056>1<0057>-4<0056>]TJ
To 
[<0047>-7<0048>-10<0057>-3<0048>-10<0055>-12<0050>-2<004C0051>-9<00480003004C>-3<00490003004400030056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<004600030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<004800030048>-6<005B>-8<004C>-5<0056>-16<0057>-19<0056>-20<000F00030058>-6<0056>-12<004800030057>-2<004B>-9<00480003>]TJ
Test-Path
 cmdlet and the appropriate note property
the 
[<00070053>-15<0055>-19<0052>-21<00C0>-17<004F>-12<0048>]TJ
[<00030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<0048>-7<001100030029>-3<0052>-7<005500030048>-6<005B>-6<0044>-4<0050>-4<0053>-8<004F>-7<0048>-9<000F00030057005200030047>-7<0048>-10<0057>-3<0048>-10<0055>-12<0050>-2<004C0051>-9<00480003004C>-3<00490003004400030026>7<0058>1<0055>-12<0055>-12<0048>-10<0051005700030038>-3<0056>-12<0048>-10<0055>39<000F00030026>6<0058>1<0055>-12<0055>-12<0048>-10<0051>-1<00570003002B>-7<0052>-7<0056>-16<005700030053>-6<0055>-12<0052>-1<00C0>-2<004F>-7<004800030048>-6<005B>-8<004C>-5<0056>-16<0057>-19<0056>-20<000F0003005C>1<0052>-9<005800030046>-14<0044>-4<00510003>]TJ
use the 
[<00070053>-15<0055>-19<0052>-21<00C0>-17<004F>-12<0048>]TJ
[<00030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<00480003005A>-9<004C>-5<0057>-2<004B00030051>-9<005200030050>-9<0052>-13<0047004C>-5<00C0>-7<0048>-10<0055>39<000F00030052>-7<00550003005C>1<0052>-10<005800030046>-14<0044>-4<005100030058>-6<0056>-12<004800030057>-2<004B>-9<00480003>]TJ
CurrentUserCurrentHost
 note property. 
The following example illustrates both of these:
[<002C>-1<005100030057>-2<004B>-9<004800030056>-17<0044>-4<0050>-9<004800030050>-7<0044>-4<0051>-4<0051>-9<0048>-10<0055>39<000F00030057>-2<004B>-9<004800030052>-2<0057>-2<004B>-9<0048>-10<005500030057>-2<004B>-4<0055>-12<0048>-16<004800030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-12<005600030057>-2<004B>-7<0044>-3<005700030044>-3<0053>-7<0053>-8<004F>-12<005C00030057005200030057>-2<004B>-9<004800030046>-2<0058>1<0055>-12<0055>-12<0048>-10<0051>-1<00570003004B>-9<0052>-7<0056>-16<00570003000B>-17<004C005100030057>-2<004B>-2<004C>-5<005600030048>-6<005B>-6<0044>-4<0050>-4<0053>-8<004F>-7<0048>-9<000F0003002C00030044>-3<00500003>]TJ
using the Windows PowerShell console are determined not to exist. This appears in the code that 
follows:
[<0026>16<0055>-3<0048>-2<0044>3<0057>13<004C>13<0051>2<004A0003004400030051>2<0048>4<005A00030053>6<0055>-3<0052>7<00C0>12<004F>5<0048>]TJ
To 
[<0046>4<0055>-12<0048>-10<0044>-3<0057>-3<00480003004400030051>-9<0048>-9<005A00030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<004800030049>-7<0052>-7<005500030057>-2<004B>-9<004800030026>6<0058>1<0055>-12<0055>-12<0048>-10<0051>-1<005700030038>-3<0056>-12<0048>-10<0055>39<000F00030024>-10<004F>1<004F0003002B>-8<0052>-7<0056>-16<0057>-19<005600030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-9<000F>]TJ
use the 
CurrentUserAllHosts 
property of 
the 
[<00070053>-15<0055>-19<0052>-21<00C0>-17<004F>-12<0048>]TJ
 automatic variable and the
New-Item
 cmdlet. This technique appears here:
[<0037>55<005200030052>-7<0053>-13<0048>-10<005100030057>-2<004B>-9<004800030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<004800030049>-7<0052>-7<005500030048>-16<0047004C>-5<0057>-2<004C0051>-11<004A>-11<000F00030058>-6<0056>-12<004800030057>-2<004B>-9<00480003>]TJ
ise 
alias, as appears here:
[<0032>-11<0051>-9<0046>-2<00480003005C>1<0052>-9<005800030044>-4<0055>-12<0048000300C0>-2<0051>-2<004C>-5<0056>-4<004B>-9<0048>-16<004700030048>-16<0047004C>-5<0057>-2<004C0051>-11<004A00030057>-2<004B>-9<004800030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-9<000F00030056>-17<0044>1<0059>1<00480003004C>-5<0057>-20<000F00030046>4<004F>-7<0052>-7<0056>-12<004800030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F000300460052>-7<0051>-9<0056>-12<0052>-6<004F>-7<0048>-9<000F00030055>-12<0048>-16<0052>-7<0053>-13<0048>-10<00510003>]TJ
the Windows PowerShell console, and test that your changes work properly. 
[<0027>-1<0048>-4<0056>-1<004C004A>1<0051>-2<0003>-2<004600520051>-4<0056>-1<004C>-1<0047>-1<0048>-7<0055>6<0044>6<0057>-6<004C>1<00520051>-4<0056>-2<0003>-2<0049>-2<00520055>-2<0003>-2<0053>-3<0055>-8<0052>2<00C0>1<004F>-2<0048>-4<0056>]TJ
The 
[<00C0>-2<0055>-26<0056>-16<005700030057>-2<004B>-2<004C0051>-11<004A00030057>-1<005200030047>-5<00520003005A>-9<004B>-9<0048>-10<005100030047>-7<0048>-16<0046>4<004C>-5<0047004C0051>-11<004A0003004B>-9<0052>-3<005A00030057>-1<00520003004C0050>-4<0053>-8<004F>-7<0048>-10<0050>-9<0048>-10<005100570003005C>1<0052>-9<0058>1<00550003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<00480003004C>-5<005600030057>-1<005200030044>-4<0051>-7<0044>-4<004F>-12<005C>-31<005D>-1<00480003>]TJ
[<0057>-2<004B>-9<00480003005A>-3<0044>2<005C0003004C00510003005A>-9<004B>-2<004C>-3<0046>4<004B0003005C>1<0052>-9<005800030058>-6<0056>-12<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F>-9<001100030029>-3<0052>-7<005500030048>-6<005B>-6<0044>-4<0050>-4<0053>-8<004F>-7<0048>-9<000F0003004C>-3<00490003005C>1<0052>-9<005800030046>1<0052>-7<005100C0>-2<0051>-9<00480003005C>1<0052>-10<0058>1<0055>-26<0056>-12<0048>-11<004F>-3<004900030057>-1<005200030055>-17<0058>1<0051>-4<0051>-2<004C0051>-11<004A0003004400030049>-7<0048>-9<005A0003>]TJ
Windows PowerShell scripts from within the Windows PowerShell ISE, there is little reason to worry 
[<0044>-4<0045>-13<0052>-9<0058>-5<0057000300440003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F000300460052>-7<0051>-9<0056>-12<0052>-6<004F>-7<004800030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-7<00110003002C00490003005C>1<0052>-9<005800030058>-6<0056>-12<00480003004400030047004C>-3<0049>-39<0049>-7<0048>-10<0055>-12<0048>-10<005100570003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030056>-13<0046>4<0055>-12<004C0053>-5<0057>-2<004C0051>-11<004A0003>]TJ
environment than the Windows PowerShell ISE, but you also work interactively from the Windows 
[<0033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F000300460052>-7<0051>-9<0056>-12<0052>-6<004F>-7<0048>-9<000F0003005C>1<0052>-9<005800030050>-7<0044>2<005C00030051>-9<0048>-16<0048>-16<004700030057005200030044>-11<0047>-7<004700030056>-16<0057>-8<0058>-2<0049>-39<004900030057>-1<005200030057>-2<004B>-9<004800030052>-2<0057>-2<004B>-9<0048>-10<005500030056>-13<0046>4<0055>-12<004C0053>-5<0057>-2<004C0051>-11<004A00030048>-10<0051>4<0059>-12<004C0055>-12<0052>-7<0051>-4<0050>-9<0048>-10<0051>-1<0057>-32<00B7>26<005600030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<00480003000B>30<0044>-10<0056>-14<0056>-5<0058>1<0050>-2<004C0051>-11<004A0003>]TJ
[<004C>-5<00570003004B>-7<0044>-10<005600030052>-7<0051>-9<0048>21<000C>2<000F00030044>-10<00560003005A>-2<0048>-11<004F>1<004F00030044>-11<005600030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F000300460052>-7<0051>-9<0056>-12<0052>-6<004F>-7<004800030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-9<000F00030057005200030048>-10<0051>-7<0044>-4<0045>-8<004F>-7<00480003005C>1<0052>-9<005800030057005200030050>-7<0044>-2<004C0051>-1<0057>-19<0044>-2<004C00510003004400030046>1<0052>-7<0051>-9<0056>-3<004C>-5<0056>-16<0057>-3<0048>-10<005100570003>]TJ
environment. If you work extensively in both the scripting environment and the Windows PowerShell 
[<00460052>-7<0051>-9<0056>-12<0052>-6<004F>-7<0048>-9<000F00030044>-4<0051>-11<00470003005C>1<0052>-10<0058000300C0>-2<0051>-11<00470003005C>1<0052>-9<0058>1<0055>-26<0056>-12<0048>-11<004F>-3<004900030047>-7<0048>-12<0056>-4<004C0055>-12<004C0051>-11<004A00030046>-1<0048>-10<0055>-41<0057>-19<0044>-2<004C005100030050>-9<0052>-13<0047004C>-5<00C0>-5<0046>-14<0044>-3<0057>-2<004C>-5<0052>-7<0051>-9<005600030057>-1<005200030045>-13<0052>-2<0057>-2<004B00030048>-10<0051>4<0059>-12<004C0055>-12<0052>-7<0051>-4<0050>-9<0048>-10<0051>-1<0057>-19<0056>-20<000F00030057>-2<004B>-9<0048>-10<005100030057>-2<004B>-7<0044>-3<00570003004F>-7<0048>-10<0044>-11<0047>-6<005600030057>-1<00520003>]TJ
a different scenario. 
[<0037>-7<004B>-9<0048>-10<0055>-12<004800030044>-4<0055>-12<004800030057>-2<004B>-4<0055>-12<0048>-16<004800030047004C>-3<0049>-39<0049>-7<0048>-10<0055>-12<0048>-10<0051>-1<005700030051>-7<0044>-4<0050>-9<0048>-12<005600030058>-6<0056>-12<0048>-16<004700030049>-7<0052>-7<005500030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-12<0056>-19<001100030037>-7<004B>-9<004800030051>-7<0044>-4<0050>-9<0048>-12<005600030044>-4<0053>-7<0053>-13<0048>-10<0044>-4<00550003004C00510003>]TJ
[<0037>59<0044>-4<0045>-8<004F>-7<00480003001C>-24<0010>42<001500030044>-4<004F>-7<0052>-7<0051>-11<004A0003005A>-9<004C>-5<0057>-2<004B00030057>-2<004B>-9<004800030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<004800030058>-6<0056>-17<0044>-11<004A>-7<0048>-7<0011>]TJ
TABLE 9-2
[<003A>-18<004C>-2<0051>-13<0047>-7<0052>-5<005A>-14<005600030033>3<0052>-5<005A>-4<0048>-12<0055>-25<0036>-2<004B>-12<0048>-13<004F>-2<004F00030053>-9<0055>-14<0052>-4<00C0>-5<004F>-9<004800030051>-9<0044>-6<0050>-11<0048>-14<005600030044>-6<0051>-13<004700030051>-9<0044>-6<0050>-12<004800030058>-8<0056>-19<0044>-13<004A>-9<0048>]TJ
[<0033>-11<0055>-24<0052>-16<00C0>-17<004F>-20<004800030031>-17<0044>-18<0050>-20<0048>]TJ
Name Usage
[<0030004C0046>7<0055>-9<0052>-4<0056>-9<0052>3<0049>-38<0057>-17<0011>-14<0033>8<0052005A>1<0048>-7<0055>-20<0036>3<004B>-6<0048>-8<004F>4<004F>-21<0042>-27<0053>-4<0055>-9<0052>2<00C0004F>-4<0048>-4<0011>-5<0053>-5<0056>10<0014>]TJ
[<0035>-9<0048>-15<0049>-14<0048>-17<0055>-32<005600030057>-8<005200030053>-14<0055>-19<0052>-8<00C0>-10<004F>-14<0048>-19<00560003000B>19<0048>-16<004C>-13<0057>-9<004B>-16<0048>-17<005500030046>-9<0058>-6<0055>-18<0055>-19<0048>-17<0051>-8<005700030058>-13<0056>-19<0048>-17<005500030052>-14<005500030044>-11<004F>-6<004F00030058>-13<0056>-19<0048>-17<0055>-32<0056>20<000C00030049>-14<0052>-14<005500030057>-9<004B>-16<00480003003A>-23<004C>-7<0051>-18<0047>-12<0052>-10<005A>-19<00560003>]TJ
PowerShell console
[<00530055>-5<0052>6<00C0>4<004F00480011>-1<0053>-1<0056>14<0014>]TJ
[<0035>-9<0048>-15<0049>-14<0048>-17<0055>-32<005600030057>-8<005200030053>-14<0055>-19<0052>-8<00C0>-10<004F>-14<0048>-19<00560003000B>19<0048>-16<004C>-13<0057>-9<004B>-16<0048>-17<005500030046>-9<0058>-6<0055>-18<0055>-19<0048>-17<0051>-8<005700030058>-13<0056>-19<0048>-17<005500030052>-14<005500030044>-11<004F>-6<004F00030058>-13<0056>-19<0048>-17<0055>-32<0056>20<000C00030049>-14<0052>-14<005500030044>-11<004F>-6<004F0003003A>-23<004C>-7<0051>-18<0047>-12<0052>-10<005A>-18<00560003>]TJ
PowerShell hosts
[<0030004C0046>7<0055>-9<0052>-4<0056>-9<0052>3<0049>-38<0057>-17<0011>-14<0033>8<0052005A>1<0048>-7<0055>-20<0036>3<004B>-6<0048>-8<004F>4<004F>1<002C>-5<0036>3<0028>-26<0042>-27<0053>-4<0055>-9<0052>2<00C0004F>-4<0048>-4<0011>-5<0053>-5<0056>10<0014>]TJ
[<0035>-9<0048>-15<0049>-14<0048>-17<0055>-32<005600030057>-8<005200030053>-14<0055>-19<0052>-8<00C0>-10<004F>-14<0048>-19<00560003000B>19<0048>-16<004C>-13<0057>-9<004B>-16<0048>-17<005500030046>-9<0058>-6<0055>-18<0055>-19<0048>-17<0051>-8<005700030058>-13<0056>-19<0048>-17<005500030052>-14<005500030044>-11<004F>-6<004F00030058>-13<0056>-19<0048>-17<0055>-32<0056>20<000C00030049>-14<0052>-14<005500030057>-9<004B>-16<00480003003A>-23<004C>-7<0051>-18<0047>-12<0052>-10<005A>-19<00560003>]TJ
PowerShell ISE
[<0037>-7<004B>-9<004800030047004C>-5<0056>-16<0057>-2<004C0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<005100030045>-13<0048>-10<0057>-35<005A>-2<0048>-16<0048>-10<005100030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F0003002C>-8<0036002800030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-12<005600030044>-4<0051>-11<004700030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F000300460052>-7<0051>-9<0056>-12<0052>-6<004F>-7<00480003>]TJ
[<0053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-12<00560003004C>-5<005600030057>-2<004B>-9<00480003>]TJ
ISE
[<0003004C005100030057>-2<004B>-9<004800030051>-7<0044>-4<0050>-9<004800030052004900030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F0003002C>-8<0036002800030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-12<0056>-19<001100030037>-7<004B>-9<00480003004F>-7<0052>-13<0046>-14<0044>-3<0057>-2<004C>-5<0052>-7<005100030052>1<004900030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<00560003>]TJ
[<0033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<004800030047>-7<0048>-10<0057>-3<0048>-10<0055>-12<0050>-2<004C0051>-9<0048>-12<005600030057>-2<004B>-9<004800030056>-13<00460052>-7<0053>-6<004C0051>-11<004A0003000B>10<005A>-9<004B>-9<0048>-10<0057>-2<004B>-9<0048>-10<005500030057>-2<004B>-9<004800030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<004800030044>-4<0053>-7<0053>-8<004F004C>-5<0048>-12<005600030057>-1<005200030048>-9<004C>-5<0057>-2<004B>-9<0048>-10<005500030057>-2<004B>-9<004800030046>-2<0058>1<0055>-12<0055>-12<0048>-10<0051>-1<005700030058>-6<0056>-12<0048>-10<00550003>]TJ
[<0052>-7<005500030057>-1<005200030044>-4<004F>1<004F00030058>-6<0056>-12<0048>-10<0055>-26<0056>-19<001100030024>-10<004F>1<004F00030058>-6<0056>-12<0048>-10<005500030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-12<00560003000B>30<0044>-4<0051>4<005C00030052>-7<0051>-9<004800030052004900030057>-2<004B>-9<004800030057>-2<004B>-4<0055>-12<0048>-16<004800030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-12<005600030047>-7<0048>-10<0057>-19<0044>-2<004C004F>-7<0048>-16<00470003004C005100030037>59<0044>-4<0045>-8<004F>-7<00480003001C>-24<0010>42<0015>11<000C00030044>-3<0053>-7<0053>-13<0048>-10<0044>-4<00550003004C005100030057>-2<004B>-9<00480003>]TJ
  
Windowssystem32WindowsPowerShellv1.0 directory, a location referenced by the 
$pshome
 vari
able. The following illustrates using the 
$pshome
 variable to obtain this folder:
The folder containing the three different 
current user
[<0003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-12<00560003004C>-5<005600030057>-2<004B>-9<00480003>]TJ
WindowsPowerShell folder in the user22s mydocuments special folder. The location of the 
user22s mydocuments
special folder is obtained by using the 
GetFolderPath 
method from the 
System.Environment
 .NET Framework class. This technique appears here:
[<0037>59<0044>-4<0045>-8<004F>-7<00480003001C>-24<0010>13<001600030047>-7<0048>-10<0057>-19<0044>-2<004C004F>-8<00560003004400030059>-5<0044>-4<0055>-12<004C>-5<0048>-10<0057>-38<005C00030052>1<004900030058>-6<0056>-12<0048>-18<0010>-18<0046>-14<0044>-10<0056>-12<004800030056>-13<0046>-2<0048>-10<0051>-7<0044>-4<0055>-12<004C>-5<0052>-7<0056>-20<000F00030044>-3<0051>-11<004700030053>-13<0052>-4<004C0051>-1<0057>-19<005600030057>-1<005200030057>-2<004B>-9<004800030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<004800030057>-1<005200030058>-6<0056>-12<004800030049>-7<0052>-7<005500030056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<00460003>]TJ
purposes. 
TABLE 
9-3
[<0003003A>-18<004C>-2<0051>-13<0047>-7<0052>-5<005A>-14<005600030033>3<0052>-5<005A>-4<0048>-12<0055>-25<0036>-2<004B>-12<0048>-13<004F>-2<004F00030058>-9<0056>-19<0044>-13<004A>-9<004800030053>-11<0044>-5<0057>-33<0057>-5<0048>-12<0055>-14<0051>-11<0056>-22<000F00030053>-9<0055>-14<0052>-4<00C0>-5<004F>-9<004800030051>-9<0044>-6<0050>-12<0048>-14<0056>-22<000F00030044>-6<0051>-13<00470003004F>-9<0052>-15<0046>-17<0044>-5<0057>-4<004C>-7<0052>-9<0051>-11<0056>]TJ
Windows PowerShell use
[<002F>-21<0052>-18<0046>-25<0044>-12<0057>-24<004C>-16<0052>-18<005100030044>-18<0051>-20<004700030053>-20<0055>-24<0052>-16<00C0>-17<004F>-20<004800030051>-21<0044>-18<0050>-20<0048>]TJ
Near-exclusive Windows PowerShell console work as a 
non-admin user
MyDocuments
[<0030004C0046>7<0055>-9<0052>-4<0056>-9<0052>3<0049>-38<0057>-17<0011>-14<0033>8<0052005A>1<0048>-7<0055>-20<0036>3<004B>-6<0048>-8<004F>4<004F>-21<0042>-27<0053>-4<0055>-9<0052>2<00C0004F>-4<0048>-4<0011>-5<0053>-5<0056>10<0014>]TJ
Near-exclusive Windows PowerShell console work as an 
administrative user
$PSHome
[<0030004C0046>7<0055>-9<0052>-4<0056>-9<0052>3<0049>-38<0057>-17<0011>-14<0033>8<0052005A>1<0048>-7<0055>-20<0036>3<004B>-6<0048>-8<004F>4<004F>-21<0042>-27<0053>-4<0055>-9<0052>2<00C0004F>-4<0048>-4<0011>-5<0053>-5<0056>10<0014>]TJ
Near-exclusive Windows PowerShell ISE work as a non-
admin user
MyDocuments
[<0030004C0046>7<0055>-9<0052>-4<0056>-9<0052>3<0049>-38<0057>-17<0011>-14<0033>8<0052005A>1<0048>-7<0055>-20<0036>3<004B>-6<0048>-8<004F>4<004F>1<002C>-5<0036>3<0028>-26<0042>-27<0053>-4<0055>-9<0052>2<00C0004F>-4<0048>-4<0011>-5<0053>-5<0056>10<0014>]TJ
Near-exclusive Windows PowerShell ISE work as an 
administrative user
$PSHome
[<0030004C0046>7<0055>-9<0052>-4<0056>-9<0052>3<0049>-38<0057>-17<0011>-14<0033>8<0052005A>1<0048>-7<0055>-20<0036>3<004B>-6<0048>-8<004F>4<004F>1<002C>-5<0036>3<0028>-26<0042>-27<0053>-4<0055>-9<0052>2<00C0004F>-4<0048>-4<0011>-5<0053>-5<0056>10<0014>]TJ
Balanced Windows PowerShell work as a non-admin user
MyDocuments
[<00530055>-5<0052>6<00C0>4<004F00480011>-1<0053>-1<0056>14<0014>]TJ
Balanced Windows PowerShell work as an administrative 
user
$psHome
[<00530055>-5<0052>6<00C0>4<004F00480011>-1<0053>-1<0056>14<0014>]TJ
ote
Depending on how you perform administrative work, you may decide that you wish 
[<0057>2<005200030058>-4<0056>-10<00480003004400030026>9<0058>3<0055>-9<0055>-10<0048>-8<0051>2<005700030038>-1<0056>-10<0048>-8<005500030057>-36<005C>-10<0053>-11<004800030052>3<004900030053>-4<0055>-10<0052>1<00C0004F>-5<0048>-5<001100030037>-5<004B004C>-3<00560003005A>1<0052>-7<0058>4<004F>-6<004700030045>-11<004800030045>-11<0048>-14<0046>-12<0044>-4<0058>-4<0056>-10<00480003005C>3<0052>-7<00580003004F>-5<0052>-11<004A00030052>-4<00510003005A>-6<004C>-3<0057004B0003004400030056>-1<0053>-11<0048>-14<0046>7<004C>-2<00C0>-3<00460003>]TJ
account to perform administrative work. If your work requires that you log on with a num
[<0045>-11<0048>-8<005500030052>3<004900030047>2<004C>-1<0049>-37<0049>-5<0048>-8<0055>-10<0048>-8<0051>2<005700030058>-4<0056>-10<0048>-8<005500030044>-7<0046>2<0046>3<0052>-7<0058>3<0051>2<0057>-17<0056>-18<000F0003004C>-3<005700030050>-4<0044>-1<004E>14<0048>-10<005600030056>-10<0048>-8<0051>-7<0056>-10<004800030057>2<005200030058>-4<0056>-10<004800030044>-2<005100030024>-8<004F>3<004F00030038>-1<0056>-10<0048>-8<0055>-24<005600030057>-36<005C>-10<0053>-11<004800030052>3<004900030053>-4<0055>-10<0052>1<00C0004F>-5<0048>-5<0011>]TJ
[<0038>10<0056>7<004C>13<0051>2<004A00030052>8<0051>2<004800030052>8<005500030050>2<0052>8<0055>-3<004800030053>5<0055>-3<0052>7<00C0>12<004F>5<0048>-4<0056>]TJ
Many 
[<003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030058>-6<0056>-12<0048>-10<0055>-26<005600030048>-10<0051>-11<004700030058>1<005300030058>-6<0056>-3<004C0051>-11<004A00030050>-9<0052>-7<0055>-12<004800030057>-2<004B>-7<0044>-4<005100030052>-7<0051>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-51<00B3>-32<004C>-5<005700030050>-7<0044>2<005C0003>]TJ
not be intentional, but that is how it winds up. What happens is that they begin by creating a Current 
[<0038>-3<0056>-12<0048>-10<0055>39<000F00030026>7<0058>1<0055>-12<0055>-12<0048>-10<0051>-1<00570003002B>-7<0052>-7<0056>-16<005700030053>-6<0055>-12<0052>-1<00C0>-2<004F>-7<004800030059>-13<004C>-2<004400030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F0003>]TJ
[<00070053>-15<0055>-19<0052>-21<00C0>-17<004F>-12<0048>-9<0003>]TJ
variable. After adding a number of 
[<004C>-5<0057>-3<0048>-10<0050>-9<00560003004C005100030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-9<000F00030057>-2<004B>-9<004800030058>-6<0056>-12<0048>-10<005500030047>-7<0048>-16<0046>4<004C>-5<0047>-7<0048>-12<005600030057>-2<004B>-7<0044>-3<005700030057>-2<004B>-9<0048>-7<005C0003005A>-2<0052>-9<0058>1<004F>-8<00470003004F004C004E>12<004800030057>-2<004B>-9<004800030056>-17<0044>-4<0050>-9<004800030049>-7<0048>-10<0044>-3<0057>-8<0058>1<0055>-12<0048>-12<00560003004C00510003>]TJ
the Windows PowerShell console or the Windows PowerShell ISE27whichever one they did not use 
[<004C005100030057>-2<004B>-9<004800030045>-13<0048>-16<004A004C0051>-4<0051>-2<004C0051>-11<004A>-8<001100030037>-7<004B>-9<0048>-10<0051>-15<000F000300440049>-41<0057>-3<0048>-10<005500030046>4<0055>-12<0048>-10<0044>-3<0057>-2<004C0051>-11<004A00030044>-4<005100030044>-11<0047>-7<0047004C>-5<0057>-2<004C>-5<0052>-7<0051>-7<0044>-4<004F00030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-9<000F00030057>-2<004B>-9<0048>-7<005C00030056>-12<0052>-13<0052>-7<005100030055>-12<0048>-10<0044>-4<004F004C>-7<005D>-1<004800030057>-2<004B>-9<0048>-7<005C00030044>-4<0055>-12<004800030047>-4<0058>1<0053>-8<004F004C>-3<0046>-14<0044>-3<0057>-2<004C0051>-11<004A0003>]TJ
their work. In addition, various packages, such as the Script Explorer, add commands to the Windows 
[<0033>12<0052>4<005A>5<0048>-3<0055>-16<0036>8<004B>-2<0048>-4<004F>8<004F>7<0003>7<00530055>-5<0052>6<00C0>5<004F00480011>]TJ
[<0027>-12<0048>-10<0053>-13<0048>-10<0051>-11<0047004C0051>-11<004A00030052>-7<00510003004B>-9<0052>-3<005A00030050>-6<0058>-5<0046>4<004B0003005C>1<0052>-9<005800030044>-11<0047>-7<004700030057>-1<00520003005C>1<0052>-9<0058>1<00550003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-9<000F0003005C>1<0052>-9<005800030050>-7<0044>2<005C00030045>-13<004800030053>-13<0048>-10<0055>-38<0049>-7<0048>-16<0046>-25<0057>-2<004F>-12<005C000300C0>-2<0051>-9<00480003>]TJ
[<005A>-9<004C>-5<0057>-2<004B0003004B>-7<0044>1<0059>-13<004C0051>-11<004A00030050>-6<0058>1<004F>-6<0057>-2<004C0053>-8<004F>-7<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-12<0056>-19<00110003002C>1<00490003005C>1<0052>-9<0058>1<005500030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<004800030047>-5<0052>-13<0048>-12<005600030051>-9<0052>-2<00570003004B>-7<0044>1<0059>1<004800030059>1<0048>-10<0055>-47<005C00030050>-7<0044>-4<0051>4<005C0003004C>-5<0057>-3<0048>-10<0050>-9<00560003004C00510003>]TJ
[<004C>-5<0057>-20<000F00030058>-6<0056>-3<004C0051>-11<004A00030052>-7<0051>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<004800030049>-7<0052>-7<005500030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F000300460052>-7<0051>-9<0056>-12<0052>-6<004F>-7<004800030044>-4<0051>-11<004700030044>-4<0051>-9<0052>-2<0057>-2<004B>-9<0048>-10<005500030053>-7<0055>-12<0052>]TJ
[<00C0>-2<004F>-7<004800030049>-7<0052>-7<005500030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F0003002C>-8<0036002800030050>-7<0044>2<005C00030045>-13<00480003004400030053>-13<0048>-10<0055>-38<0049>-7<0048>-16<0046>-25<0057>-2<004F>-12<005C00030044>-9<00460046>-2<0048>-10<0053>-5<0057>-19<0044>-4<0045>-8<004F>-7<004800030056>-12<0052>-6<004F>-4<0058>-5<0057>-2<004C>-5<0052>-7<0051>-14<001100030036>2<004C0050>-4<0053>-8<004F004C>-3<0046>4<004C>-5<0057>-38<005C00030050>-7<0044>-4<004E>12<0048>-12<005600030057>-2<004B>-2<004C>-5<00560003>]TJ
approach work. For example, certain commands, such as the 
Start-Transcript 
cmdlet, do not work in 
the Windows PowerShell ISE. In addition, certain commands, such as those requiring 
Single-Threaded 
Apartment model STA, do not work by default in the Windows PowerShell console. By creating 
multiple 
[<00070053>-15<0055>-19<0052>-21<00C0>-17<004F>-12<0048>]TJ
[<00030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-12<00560003000B>12<0026>6<0058>1<0055>-12<0055>-12<0048>-10<0051005700030038>-3<0056>-12<0048>-10<0055>39<000F00030026>7<0058>1<0055>-12<0055>-12<0048>-10<0051>-1<00570003002B>-7<0052>-7<0056>-16<0057>8<000C>]TJ
and only editing them from the appropriate 
[<0048>-10<0051>4<0059>-12<004C0055>-12<0052>-7<0051>-4<0050>-9<0048>-10<00510057>-20<000F0003005C>1<0052>-9<005800030046>-14<0044>-4<00510003004A>1<0055>-12<0048>-10<0044>-3<0057>-2<004F>-12<005C00030055>-12<0048>-16<0047>-3<0058>-5<0046>-2<004800030057>-2<004B>-9<0048000300460052>-7<0050>-4<0053>-8<004F>-7<0048>-6<005B>-8<004C>-5<0057>-38<005C00030052>1<004900030057>-2<004B>-9<004800030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-18<0010>-18<0046>4<0055>-12<0048>-10<0044>-3<0057>-2<004C>-5<0052>-7<005100030053>-7<0055>-12<0052>-13<0046>-2<0048>-12<0056>-14<0056>-19<0011>]TJ
However, it will not be long before duplication leads to inconsistency, which leads to frustration, 
[<0044>-4<0051>-11<0047000300C0>-2<0051>-7<0044>-4<004F>1<004F>-12<005C0003004400030047>-6<0048>-12<0056>-3<004C0055>-12<004800030049>-7<0052>-7<0055000300460052>-7<0055>-12<0055>-12<0048>-16<0046>-25<0057>-2<004C>-5<0052>-7<005100030044>-4<0051>-11<004700030056>-12<0052>-6<004F>-4<0058>-5<0057>-2<004C>-5<0052>-7<0051>-14<00110003002400030045>-13<0048>-10<0057>-31<0057>-3<0048>-10<005500030044>-4<0053>-7<0053>-7<0055>-12<0052>-10<0044>-9<0046>4<004B0003004C>-5<005600030057>-1<005200030053>-8<004F>-5<0044>-4<005100030049>-7<0052>-7<005500030050>-6<0058>1<004F>-6<0057>-2<004C0053>-8<004F>-7<004800030048>-10<0051>4<0059>-12<004C0055>-12<0052>-7<0051>-4<0050>-9<0048>-10<00510057>-19<00560003>]TJ
from the beginning. The following list describes the advantages and disadvantages to using more 
[<0057>-2<004B>-7<0044>-4<005100030052>-7<0051>-9<004800030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-9<000F00030044>-4<004F>-7<0052>-7<0051>-11<004A0003005A>-9<004C>-5<0057>-2<004B00030057>-2<004B>-9<004800030056>-13<0046>-2<0048>-10<0051>-7<0044>-4<0055>-12<004C>-5<0052>-7<00560003004C00510003005A>-9<004B>-2<004C>-3<0046>4<004B0003005C>1<0052>-9<0058>4<00B7>53<004700030050>-9<0052>-7<0056>-16<00570003004F004C004E>12<0048>-11<004F>-12<005C00030047>-5<005200030057>-2<004B>-2<004C>-5<0056>-5<001D>]TJ
[<0024>-3<0047>-12<0059>-5<0044>-4<00510057>-19<0044>-11<004A>-7<0048>-12<005600030052004900030058>-6<0056>-4<004C0051>-11<004A00030050>-9<0052>-7<0055>-12<004800030057>-2<004B>-7<0044>-4<005100030052>-7<0051>-9<004800030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>5<001D>]TJ
It22s simple and hassle free
[<00070053>-15<0055>-19<0052>-21<00C0>-17<004F>-12<0048>]TJ
[<00030044>-4<004F>-9<005A>-3<0044>2<005C>-12<005600030055>-12<0048>-8<0049>-7<0048>-10<0055>-26<005600030057>-1<005200030057>-2<004B>-9<0048000300460052>-7<0055>-12<0055>-12<0048>-16<0046>-25<005700030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-7<0011>]TJ
It removes concern about incompatible commands.
Disadvantages:
It often means you22re duplicating effort.  
[<002C>-1<005700030046>-14<0044>-4<005100030046>-14<0044>-6<0058>-6<0056>-12<00480003004C0051>-9<00460052>-7<0051>-9<0056>-3<004C>-5<0056>-16<0057>-3<0048>-10<0051>-9<0046>4<004C>-5<0048>-12<005600030045>-13<0048>-10<0057>-35<005A>-2<0048>-16<0048>-10<005100030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-12<00560003000B>15<0049>-7<0052>-7<005500030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<0048>-12<0056>-20<000F00030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051>-9<0056>-20<000F00030033>-9<003600030047>1<0055>-12<004C>-12<0059>1<0048>-12<0056>-20<000F00030044>-3<0051>-11<004700030044>-4<004F004C>-2<0044>-10<0056>-12<0048>-12<0056>28<000C>]TJ
[<0030>-5<0044>-2<004C00510057>-3<0048>-10<0051>-7<0044>-4<0051>-9<0046>-2<004800030050>-7<0044>2<005C0003004C0051>-9<0046>4<0055>-12<0048>-10<0044>-10<0056>-12<004800030047>-3<0058>-7<004800030057>-1<005200030057>-2<004B>-9<004800030051>-6<0058>1<0050>-4<0045>-13<0048>-10<005500030052004900030053>-13<0052>-2<0057>-3<0048>-10<00510057>-2<004C>-2<0044>-4<004F00030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-12<0056>-19<0011>]TJ
Uses:
[<0038>-3<0056>-12<00480003005A>-9<004C>-5<0057>-2<004B0003004400030056>-3<004C0050>-4<0053>-8<004F>-7<004800030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-7<0011>]TJ
Use when you do not have administrator or non-elevated user requirements.
  
Using modules
If you
 need to customize both the Windows PowerShell console and the Windows PowerShell 
ISE or other Windows PowerShell host, and you need to log on with multiple credentials, your 
[<0051>-9<0048>-16<0048>-16<004700030049>-7<0052>-7<00550003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-12<00560003004C0051>-9<0046>4<0055>-12<0048>-10<0044>-10<0056>-12<0048>-12<005600030048>-6<005B>-8<0053>-13<0052>-7<0051>-9<0048>-10<00510057>-2<004C>-2<0044>-4<004F>1<004F>-12<005C>35<001100030024>12<0057>-31<0057>-3<0048>-10<0050>-4<0053>-5<0057>-2<004C0051>-11<004A00030057>-1<00520003004E>12<0048>-16<0048>-10<00530003004400030051>-6<0058>1<0050>-4<0045>-13<0048>-10<00550003>]TJ
[<0052004900030047004C>-3<0049>-39<0049>-7<0048>-10<0055>-12<0048>-10<005100570003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-12<00560003004C005100030056>-21<005C>-12<0051>-9<004600030054>-3<0058004C>-3<0046>4<004E>-14<004F>-12<005C00030045>-13<0048>-16<00460052>-7<0050>-9<0048>-12<00560003004400030050>-7<0044>-2<004C00510057>-3<0048>-10<0051>-7<0044>-4<0051>-9<0046>-2<004800030051>-2<004C>-5<004A>1<004B>-1<0057>-2<0050>-7<0044>-4<0055>-12<0048>-7<00110003>]TJ
This is especially true if you are prone to making quick additions to your Windows PowerShell 
[<0053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<004800030044>-11<00560003005C>1<0052>-9<005800030056>-12<0048>-16<00480003004400030053>-9<0044>-4<0055>-41<0057>-2<004C>-3<0046>-2<0058>1<004F>-5<0044>-4<005500030051>-9<0048>-16<0048>-16<0047>-8<00110003>]TJ
[<002C>-1<005100030044>-11<0047>-7<0047004C>-5<0057>-2<004C>-5<0052>-7<00510003005700520003004B>-7<0044>1<0059>-12<004C0051>-11<004A000300440003004F>-5<0044>-4<0055>-12<004A>-7<004800030051>-6<0058>1<0050>-4<0045>-13<0048>-10<005500030052004900030047004C>-3<0049>-39<0049>-7<0048>-10<0055>-12<0048>-10<0051005700030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-12<0056>-20<000F0003004C>-5<00570003004C>-5<005600030044>-4<004F>-8<0056>-12<005200030053>-13<0052>-7<0056>-14<0056>-4<004C0045>-8<004F>-7<004800030049>-7<0052>-7<0055000300440003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<00560003>]TJ
[<0033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<004800030057>-1<00520003004A>1<0055>-12<0052>-3<005A00030057>-1<00520003004C0051>-9<0052>-7<0055>-12<0047004C0051>-7<0044>-3<0057>-3<004800030053>-7<0055>-12<0052>-7<0053>-13<0052>-7<0055>-41<0057>-2<004C>-5<0052>-7<0051>-9<0056>-26<00B3>-49<0048>-12<0056>-4<0053>-13<0048>-16<0046>4<004C>-2<0044>-4<004F>1<004F>-12<005C0003005A>-9<004B>-9<0048>-10<00510003005C>1<0052>-10<005800030045>-13<0048>-16<004A004C005100030057005200030044>-11<0047>-7<004700030059>1<0048>-10<0055>-47<005C0003>]TJ
many nicely crafted Windows PowerShell functions and helper functions. One solution to the 
[<0053>-7<0055>-12<0052>-7<0045>-8<004F>-7<0048>-10<00500003000B>-16<004C005100030049>-9<0044>-9<0046>-25<0057>-20<000F00030057>-2<004B>-9<004800030045>-13<0048>-12<0056>-16<005700030056>-12<0052>-6<004F>-4<0058>-5<0057>-2<004C>-5<0052>-7<0051>26<000C00030057005200030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<004800030045>-8<004F>-7<0052>-10<0044>-3<00570003004C>-5<005600030057>-1<005200030058>-6<0056>-12<004800030050>-9<0052>-13<0047>-3<0058>1<004F>-7<0048>-12<0056>-4<001E00030050>3<005C0003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F0003>]TJ
[<002C>-8<0036002800030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<004800030058>-6<0056>-12<0048>-12<005600030049>-7<0052>-9<0058>1<005500030047004C>-3<0049>-39<0049>-7<0048>-10<0055>-12<0048>-10<0051>-1<005700030050>-9<0052>-13<0047>-3<0058>1<004F>-7<0048>-12<0056>-26<00B3>-22<0057>-2<004B>-9<004800030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<00480003004C>-6<0057>-19<0056>-12<0048>-11<004F>-3<0049000300460052>-7<0051>-9<0056>-3<004C>-5<0056>-16<0057>-19<005600030052004900030057>-2<004B>-9<00480003004F004C0051>-9<0048>-12<00560003004F>-7<0052>-10<0044>-11<0047004C0051>-11<004A00030057>-2<004B>-9<00480003>]TJ
modules for more information about modules, see Chapter 7, 23Creating Advanced Functions 
and Modules24.
[<0037>-7<004B>-9<004800030049>-7<0052>-6<004F>1<004F>-7<0052>-3<005A>-9<004C0051>-11<004A0003004F004C>-5<0056>-16<005700030047004C>-5<0056>-13<0046>-2<0058>-6<0056>-14<0056>-12<0048>-12<005600030057>-2<004B>-9<004800030044>-11<0047>-11<0059>-5<0044>-4<00510057>-19<0044>-11<004A>-7<0048>-12<0056>-20<000F00030047004C>-5<0056>-17<0044>-11<0047>-12<0059>-5<0044>-4<00510057>-19<0044>-11<004A>-7<0048>-12<0056>-20<000F00030044>-3<0051>-11<004700030058>-6<0056>-12<0048>-12<005600030052004900030057>-2<004B>-9<004800030052>-7<0051>-9<0048>-18<0010>-4<0053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<004800030044>-4<0053>-7<0053>-7<0055>-12<0052>-10<0044>-9<0046>4<004B>5<001D>]TJ
[<0024>-3<0047>-12<0059>-5<0044>-4<00510057>-19<0044>-11<004A>-7<0048>-12<005600030052004900030058>-6<0056>-4<004C0051>-11<004A00030052>-7<0051>-9<004800030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>5<001D>]TJ
It requires less work.
[<002C>-1<0057>-32<00B7>26<005600030048>-10<0044>-10<0056>-21<005C0003005700520003004E>12<0048>-16<0048>-10<005300030047004C>-3<0049>-39<0049>-7<0048>-10<0055>-12<0048>-10<0051005700030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-12<00560003004C005100030056>-21<005C>-12<0051>-9<0046>-15<0011>]TJ
It allows you to achieve consistency between different Windows PowerShell environments.
[<002C>-1<0057>-32<00B7>26<005600030053>-13<0052>-7<0055>-41<0057>-19<0044>-4<0045>-8<004F>-7<0048>3<001E00030057>-2<004B>-9<004800030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<004800030046>-14<0044>-4<005100030050>-9<0052>-7<0055>-12<004800030048>-10<0044>-10<0056>-4<004C004F>-12<005C00030057>-2<0055>-8<0044>1<0059>1<0048>-11<004F00030057>-1<005200030047004C>-3<0049>-39<0049>-7<0048>-10<0055>-12<0048>-10<0051005700030050>-7<0044>-9<0046>4<004B>-2<004C0051>-9<0048>-12<0056>-19<0011>]TJ
Disadvantages:
It22s complex to set up.
It requires more planning.
[<00070053>-15<0055>-19<0052>-21<00C0>-17<004F>-12<0048>-9<0003>]TJ
does not point to the correct location.
Uses:
[<0038>-3<0056>-12<00480003005A>-9<004C>-5<0057>-2<004B00030050>-9<0052>-7<0055>-12<0048000300460052>-7<0050>-4<0053>-8<004F>-7<0048>-6<005B00030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-12<0056>-19<0011>]TJ
Use when your work requires multiple user accounts or multiple Windows PowerShell 
hosts.
Use if your work takes you to different computers or virtual machines.
ote
[<0037>-5<004B>-7<004800030044>-2<0053>-5<0053>-5<0055>-10<0052>-8<0044>-7<0046>6<004B00030052>3<004900030046>3<0052>-5<0051>2<0057>-17<0044004C>2<0051004C>2<0051>-9<004A00030049>-16<0058>3<0051>-7<0046>-23<0057004C>-3<0052>-5<0051>-5<0044>-2<004F>2<004C>-3<0057>-36<005C00030049>-4<0052>-5<00550003004400030053>-4<0055>-10<0052>1<00C0004F>-5<00480003004C>2<0051>-7<0056>-1<004C>-3<0047>-4<004800030050>-7<0052>-11<0047>-1<0058>4<004F>-5<0048>-10<005600030044>-2<0051>-9<004700030057004B>-7<0048>-8<00510003004F>-5<0052>-8<0044>-9<0047>]TJ
[<004C>2<0051>-9<004A00030057004B>-7<004800030050>-7<0052>-11<0047>-1<0058>4<004F>-5<0048>-10<005600030049>-10<0055>-10<0052>-5<005000030057004B>-7<004800030053>-5<0055>-10<0052>1<00C0004F>-5<0048000300C0004F>-5<004800030044>-2<0053>-5<0053>-11<0048>-7<0044>-2<0055>-24<00560003004C>2<005100030057004B>-7<0048000300B4>12<0026>11<0055>-10<0048>-8<0044>-1<0057>-1<004800030044000300350048>-7<0044>-2<004F>3<004F>-10<005C00030026>4<0052>-11<0052>-4<004F00030033>8<0052005A>1<0048>-8<0055>-21<0036>3<004B>-7<0048>-9<004F>3<004F0003002C>-6<0036>2<00280003>]TJ
[<0033>5<0055>-10<0052>1<00C0004F>-5<0048>2<00B500030044>-2<0055>-39<0057004C>-1<0046>6<004F>-5<004800030052>-5<005100030057004B>-7<00480003002B>-7<0048>-5<005C00030036>-8<0046>6<0055>-9<004C>2<0053>-3<0057004C>2<0051>-9<004A0003002A>-9<0058>-9<005C>-2<000400030045>-6<004F>-5<0052>-11<004A>-9<000F0003004400570003>]TJ
Using the 
[<0024>1<004F>14<004F00030038>10<0056>-1<0048>2<0055>-14<0056>-7<000F00030024>1<004F>13<004F0003002B>8<0052>2<0056>1<0057>-4<005600030053>5<0055>-3<0052>8<00C0>12<004F>5<0048>]TJ
[<0032>-11<0051>-9<00480003005A>-3<0044>2<005C00030057005200030058>-6<0056>-12<00480003004400030056>-3<004C0051>-11<004A>1<004F>-7<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<00480003004C>-5<005600030057>-1<005200030053>-10<0058>-5<005700030048>-8<0059>1<0048>-10<0055>-47<005C>-41<0057>-2<004B>-2<004C0051>-11<004A0003004C00510057>-1<005200030057>-2<004B>-9<004800030024>-11<004F>1<004F00030038>-4<0056>-12<0048>-10<0055>-26<0056>-20<000F00030024>-10<004F>1<004F0003002B>-8<0052>-7<0056>-16<0057>-19<00560003>]TJ
[<0053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-7<00110003002C0003004E>-14<0051>-9<0052>-3<005A00030056>-12<0052>-7<0050>-9<0048000300460052>-7<0050>-4<0053>-9<0044>-4<0051>-2<004C>-5<0048>-12<005600030057>-2<004B>-7<0044>-3<005700030046>4<0055>-12<0048>-10<0044>-3<0057>-3<00480003004400030056>-16<0057>-19<0044>-4<0051>-11<0047>-3<0044>-4<0055>-13<00470003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<004800030049>-7<0052>-7<005500030048>-8<0059>1<0048>-10<0055>-47<005C>1<0052>-7<0051>-9<00480003004C00510003>]TJ
the company, and they use the All Users, All Hosts
[<0053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<004800030044>-11<00560003004400030050>-9<0048>-10<0044>-4<0051>-9<005600030052004900030056>-16<0057>-19<0044>-4<0051>-11<0047>-3<0044>-4<0055>-12<0047004C>-7<005D>-4<004C0051>-11<004A00030057>-2<004B>-9<0048>-9<004C00550003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<00560003>]TJ
PowerShell environment. The changes go in during the image-build process, and therefore the pro
[<00C0>-2<004F>-7<0048>-12<005600030044>-4<0055>-12<004800030044>1<0059>-5<0044>-2<004C004F>-5<0044>-4<0045>-8<004F>-7<004800030057>-1<005200030050>-7<0044>-9<0046>4<004B>-2<004C0051>-9<0048>-12<005600030045>-10<0058004C004F>-6<005700030049>-12<0055>-12<0052>-7<005000030057>-2<004B>-7<0044>-3<00570003004C0050>-7<0044>-11<004A>-7<0048>-7<00110003>]TJ
Advantages of using the All Users, All Hosts
[<00530055>-5<0052>6<00C0>5<004F0048>12<001D>]TJ
It22s simple; you can use one location for everything, especially when added during the build 
process.
[<0032>-11<0051>-9<0048000300C0>-2<004F>-7<004800030044>-1<0049>-39<0049>-7<0048>-16<0046>-25<0057>-19<005600030044>-4<004F>1<004F0003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030058>-6<0056>-12<0048>-10<0055>-26<005600030044>-4<0051>-11<00470003004B>-9<0052>-7<0056>-16<0057>-19<0056>-19<0011>]TJ
[<002C>-1<005700030044>2<0059>1<0052>-4<004C>-5<0047>-6<0056000300460052>-7<005100C1>-3<004C>-3<0046>-25<005700030045>-13<0048>-10<0057>-35<005A>-2<0048>-16<0048>-10<005100030044>-11<0047>1<0050>-2<004C005100030058>-6<0056>-12<0048>-10<0055>-26<005600030044>-4<0051>-11<004700030051>-9<0052>-7<0051>-7<0010>2<0044>-11<0047>1<0050>-2<004C005100030058>-6<0056>-12<0048>-10<0055>-26<0056>-20<000F00030056>-3<004C0051>-9<0046>-2<004800030045>-13<0052>-2<0057>-2<004B00030057>-37<005C>-12<0053>-13<0048>-12<005600030052004900030058>-6<0056>-12<0048>-10<0055>-26<005600030058>-6<0056>-12<00480003>]TJ
[<0057>-2<004B>-9<004800030056>-17<0044>-4<0050>-9<004800030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-7<0011>]TJ
[<0007>9<0053>-6<0055>-10<0052>-12<00C0>-8<004F>-3<0048>-14<0011>-52<0024>-15<004F>-3<004F0038>-1<0056>1<0048>-6<0055>-21<0056>-25<0024>-15<004F>-3<004F>-8<002B>-8<00520056>-11<0057>-16<00560003>]TJ
[<0044>-4<004F>-9<005A>-3<0044>2<005C>-12<005600030053>-13<0052>-4<004C0051>-1<0057>-19<005600030057>-1<005200030057>-2<004B>-9<0048000300460052>-7<0055>-12<0055>-12<0048>-16<0046>-25<0057000300C0>-2<004F>-7<0048>-7<0011>]TJ
[<002C>-1<0057>-32<00B7>26<00560003004A>1<0055>-12<0048>-10<0044>-3<005700030049>-7<0052>-7<005500030046>-2<0048>-10<00510057>-2<0055>-8<0044>-4<004F00030050>-7<0044>-4<0051>-7<0044>-11<004A>-7<0048>-10<0050>-9<0048>-10<00510057>1<00B3>-48<0052>-7<0051>-9<0048000300C0>-2<004F>-7<00480003004C>-5<005600030058>-6<0056>-12<0048>-16<004700030049>-7<0052>-7<005500030044>-4<004F>1<004F00030058>-6<0056>-12<0048>-10<0055>-26<00560003005200490003004400030050>-7<0044>-9<0046>4<004B>-2<004C0051>-9<0048>-7<0011>]TJ
Disadvantages:
[<003C>49<0052>-9<005800030050>-6<0058>-6<0056>-16<00570003004B>-7<0044>1<0059>1<004800030044>-11<0047>1<0050>-2<004C005100030055>-11<004C>-5<004A>1<004B>-1<0057>-19<005600030052>-7<005100030057>-2<004B>-9<004800030046>-2<0058>1<0055>-12<0055>-12<0048>-10<0051005700030050>-7<0044>-9<0046>4<004B>-2<004C0051>-9<004800030057>-1<005200030050>-7<0044>-4<004E>12<004800030046>4<004B>-7<0044>-4<0051>-11<004A>-7<0048>-12<005600030057>-1<005200030057>-2<004B>-9<0048000300C0>-2<004F>-7<0048>-7<0011>]TJ
It provides no distinction between different hosts27some commands will not work in ISE 
and others will not work in the Windows PowerShell console.
It makes no distinction between admin users and non-admin users. Non-admin users will 
not be able to run certain commands.
[<0037>-7<004B>-9<0048000300C0>-2<004F>-7<0048>-12<005600030044>-4<0055>-12<004800030047004C>-5<0056>-16<0057>-2<0055>-12<004C0045>-9<0058>-5<0057>-3<0048>-16<004700030044>-4<0050>-9<0052>-7<0051>-11<004A00030053>-13<0052>-2<0057>-3<0048>-10<00510057>-2<004C>-2<0044>-4<004F>1<004F>-12<005C00030057>-2<004B>-9<0052>-10<0058>-6<0056>-17<0044>-4<0051>-11<0047>-6<005600030052004900030047004C>-3<0049>-39<0049>-7<0048>-10<0055>-12<0048>-10<0051005700030050>-7<0044>-9<0046>4<004B>-2<004C0051>-9<0048>-12<0056>-19<001100030037>55<005200030050>-7<0044>-4<004E>12<004800030052>-7<0051>-9<00480003>]TJ
[<0046>4<004B>-7<0044>-4<0051>-11<004A>-7<004800030057>-1<00520003004400030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-9<000F0003005C>1<0052>-10<005800030050>-6<0058>-6<0056>-16<005700030046>1<0052>-7<0053>-3<005C00030044000300C0>-2<004F>-7<004800030057>-1<005200030044>-4<004F>1<004F00030050>-7<0044>-9<0046>4<004B>-2<004C0051>-9<0048>-12<005600030058>-6<0056>-4<004C0051>-11<004A00030057>-2<004B>-7<0044>-3<005700030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<00480003000B>30<0044>-4<004F>-6<0057>-2<004B>-9<0052>-9<0058>-7<004A>1<004B0003005C>1<0052>-10<00580003>]TJ
can use group policy to assist in this endeavor. This can be a major problem for computers 
such as laptops that connect only occasionally to the network. It is also a problem when 
attempting to use a shutdown script on a Windows 8 device because Windows 8 devices 
do not perform a true shutdown.
  
Uses:
[<0038>-3<0056>-12<004800030049>-7<0052>-7<00550003005C>1<0052>-9<0058>1<005500030053>-13<0048>-10<0055>-26<0056>-12<0052>-7<0051>-7<0044>-4<004F00030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<00480003005A>-9<004B>-9<0048>-10<005100030047>-3<0058>-5<0057>-2<004C>-5<0048>-12<005600030055>-12<0048>-16<0054>-3<0058004C0055>-12<004800030045>-13<0052>-2<0057>-2<004B00030048>-11<004F>-7<0048>-8<0059>-5<0044>-3<0057>-2<004C>-5<0052>-7<005100030044>-4<0051>-11<004700030051>-9<0052>-7<0051>-6<0010>-19<0048>-11<004F>-7<0048>-8<0059>-5<0044>-3<0057>-2<004C>-5<0052>-7<00510003005200490003>]TJ
permissions across multiple Windows PowerShell hosts.
Use as part of a standard image build to deploy static functionality to numerous machines 
and users.
[<0038>10<0056>7<004C>13<0051>2<004A0003005C>15<0052>2<0058>13<005500030052>10<005A>4<0051000300C0>12<004F>5<0048>]TJ
Because
[<00030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<00480003004C>-5<0056000300440003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030056>-13<0046>4<0055>-12<004C0053>-5<00570003000B>10<005A>-9<004C>-5<0057>-2<004B00030057>-2<004B>-9<004800030044>-11<0047>-7<0047>-7<0048>-16<004700030045>-13<0048>-10<0051>-9<0048>-9<00C0>-7<005700030052>1<00490003>]TJ
having a special name and residing in a special location, it means that anything that can be accom
[<0053>-8<004F004C>-5<0056>-4<004B>-9<0048>-16<00470003004C0051000300440003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030056>-13<0046>4<0055>-12<004C0053>-5<005700030046>-14<0044>-4<005100030045>-13<004800030044>-9<004600460052>-7<0050>-4<0053>-8<004F004C>-5<0056>-4<004B>-9<0048>-16<00470003004C0051000300440003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-7<00110003002400030050>-6<0058>-5<0046>4<004B0003>]TJ
[<0045>-13<0048>-10<0057>-31<0057>-3<0048>-10<005500030044>-4<0053>-7<0053>-7<0055>-12<0052>-10<0044>-9<0046>4<004B00030057>-1<005200030047>-7<0048>-10<0044>-4<004F004C0051>-11<004A0003005A>-9<004C>-5<0057>-2<004B0003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-12<00560003004C>-5<005600030057>-1<00520003004E>12<0048>-16<0048>-10<005300030057>-2<004B>-9<004800030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<00480003004C>-5<0057>-19<0056>-12<0048>-11<004F>-3<004900030044>-10<005600030056>-4<004C0050>-4<0053>-8<004F>-7<004800030044>-11<00560003>]TJ
possible, but bring in the functionality you require via other means. One way to do this is to add the 
[<0053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<00480003004C0051>2<0049>-7<0052>-7<0055>-12<0050>-7<0044>-3<0057>-2<004C>-5<0052>-7<00510003005C>1<0052>-9<005800030055>-12<0048>-16<0054>-3<0058004C0055>-12<004800030057>-1<005200030044000300C0>-2<004F>-7<0048>-7<001100030036>14<0057>-1<0052>-7<0055>-12<004800030057>-2<004B>-7<0044>-3<0057000300C0>-2<004F>-7<00480003004C00510003004400030046>-1<0048>-10<00510057>-2<0055>-8<0044>-4<004F0003004F>-7<0052>-13<0046>-14<0044>-3<0057>-2<004C>-5<0052>-7<0051>-14<000F00030044>-3<0051>-11<004700030057>-2<004B>-9<0048>-10<005100030047>-5<0052>-2<0057>33<0010>-4<0056>-12<0052>-9<0058>1<0055>-10<0046>-2<00480003004C>-5<00570003005700520003>]TJ
[<0057>5<004B>-2<0048>7<0003>7<00530055>-5<0052>6<00C0>5<004F00480011>]TJ
[<00380056>-2<004C>4<0051>-7<004A0003004400030026>-2<0048>-7<0051>-1<0057>-2<0055>-5<0044>-7<004F00030033>3<0055>-12<0052>-2<00C0>2<004F>-4<004800030036>-9<0046>-8<0055>-8<004C>4<0053>-6<0057>]TJ
1.
[<0026>8<0055>-12<0048>-10<0044>-3<0057>-3<0048000300440003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030056>-13<0046>4<0055>-12<004C0053>-5<005700030046>1<0052>-7<00510057>-19<0044>-2<004C0051>-2<004C0051>-11<004A00030057>-2<004B>-9<004800030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<00480003004C0051>2<0049>-7<0052>-7<0055>-12<0050>-7<0044>-3<0057>-2<004C>-5<0052>-7<00510003005C>1<0052>-10<005800030055>-12<0048>-16<0054>-3<0058004C0055>-12<0048>-7<00110003002C>-1<0051>-9<0046>4<004F>-4<0058>-7<0047>-7<00480003>]TJ
aliases, variables, functions, Windows PowerShell drives, and commands to execute on 
Windows PowerShell startup.
2.
[<002C>-1<005100030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>6<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<004800030056>-13<0046>4<0055>-12<004C0053>-5<00570003005700520003004B>-9<0052>-7<0056>-16<005700030057>-2<004B>-9<004800030046>-2<0048>-10<0051>-1<0057>-2<0055>-8<0044>-4<004F00030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-9<000F00030047>-5<0052>-2<0057>33<0010>-4<0056>-12<0052>-10<0058>1<0055>-10<0046>-2<004800030057>-2<004B>-9<004800030046>-2<0048>-10<00510057>-2<0055>-8<0044>-4<004F0003>]TJ
[<0053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048000300C0>-2<004F>-7<0048>-7<001100030037>-7<004B>-9<004800030049>-7<0052>-6<004F>1<004F>-7<0052>-3<005A>-9<004C0051>-11<004A000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<0047>-9<000F00030053>-7<004F>-5<0044>-9<0046>-2<0048>-16<00470003004C005100030057>-2<004B>-9<00480003>]TJ
[<00070053>-15<0055>-19<0052>-21<00C0>-17<004F>-12<0048>-9<0003>]TJ
script, brings in functionality stored 
[<004C0051000300440003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030056>-13<0046>4<0055>-12<004C0053>-5<005700030051>-7<0044>-4<0050>-9<0048>-16<004700030050>3<005C>-12<0053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-7<0011>-8<0053>-8<0056>8<001400030057>-2<004B>-7<0044>-3<005700030055>-12<0048>-12<0056>-3<004C>-5<0047>-7<0048>-12<00560003004C00510003004400030056>-3<004B>-7<0044>-4<0055>-12<0048>-16<004700030049>-7<0052>-6<004F>-8<0047>-7<0048>-10<005500030051>-7<0044>-4<0050>-9<0048>-16<00470003>]TJ
c:fso.
[<0032>-11<0051>-9<004800030052004900030057>-2<004B>-9<004800030044>-11<0047>-11<0059>-5<0044>-4<00510057>-19<0044>-11<004A>-7<0048>-12<005600030052004900030058>-6<0056>-3<004C0051>-11<004A0003004400030046>-1<0048>-10<00510057>-2<0055>-8<0044>-4<004F0003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030056>-13<0046>4<0055>-12<004C0053>-5<005700030057005200030056>-16<0057>-1<0052>-7<0055>-12<00480003005C>1<0052>-9<0058>1<005500030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<00480003004C0051>2<0049>-7<0052>-7<0055>-12<0050>-7<0044>]TJ
[<0057>-2<004C>-5<0052>-7<00510003004C>-5<005600030057>-2<004B>-7<0044>-3<005700030052>-7<0051>-4<004F>-12<005C00030052>-7<0051>-9<00480003004F>-7<0052>-13<0046>-14<0044>-3<0057>-2<004C>-5<0052>-7<005100030055>-12<0048>-16<0054>-3<0058004C0055>-12<0048>-12<005600030058>1<0053>-15<0047>-3<0044>-3<0057>-2<004C0051>-11<004A0003005A>-9<004B>-9<0048>-10<00510003005C>1<0052>-10<005800030044>-11<0047>-7<004700030044>-11<0047>-7<0047004C>-5<0057>-2<004C>-5<0052>-7<0051>-7<0044>-4<004F00030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051>-7<0044>-4<004F004C>-5<0057>-38<005C0003005700520003005C>1<0052>-9<0058>1<005500030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-7<00110003>]TJ
In addition, if folder permissions permit, the central Windows PowerShell script becomes available to 
any user for any host on the local machine. If you store this central Windows PowerShell script on a 
[<0051>-9<0048>-10<0057>-35<005A>-2<0052>-7<0055>-12<004E000300C0>-2<004F>-7<004800030056>-4<004B>-7<0044>-4<0055>-12<0048>-9<000F0003005C>1<0052>-9<005800030052>-7<0051>-4<004F>-12<005C00030051>-9<0048>-16<0048>-16<004700030057005200030058>1<0053>-15<0047>-3<0044>-3<0057>-3<004800030052>-7<0051>-9<0048000300C0>-2<004F>-7<004800030049>-7<0052>-7<005500030057>-2<004B>-9<004800030048>-10<00510057>-2<004C0055>-12<004800030051>-9<0048>-10<0057>-35<005A>-2<0052>-7<0055>-12<004E>-26<00110003>]TJ
[<0024>-3<0047>-12<0059>-5<0044>-4<00510057>-19<0044>-11<004A>-7<0048>-12<005600030052004900030058>-6<0056>-4<004C0051>-11<004A0003004400030046>-1<0048>-10<0051>-1<0057>-2<0055>-8<0044>-4<004F00030056>-13<0046>4<0055>-12<004C0053>-5<005700030049>-7<0052>-7<00550003004400030033>6<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>5<001D>]TJ
[<002C>-1<005700030053>-7<0055>-12<0052>-1<0059>-12<004C>-5<0047>-7<0048>-12<005600030052>-7<0051>-9<004800030053>-8<004F>-5<0044>-9<0046>-2<004800030057>-1<005200030050>-9<0052>-13<0047004C>-3<0049>-48<005C00030057>-2<004B>-9<004800030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-9<000F00030052>-6<005500030044>-4<004F>1<004F00030058>-6<0056>-12<0048>-10<0055>-26<005600030044>-4<0051>-11<004700030044>-4<004F>1<004F0003004B>-10<0052>-7<0056>-16<0057>-19<00560003004B>-7<0044>1<0059>-12<004C0051>-11<004A00030044>-9<00460046>-2<0048>-12<0056>-14<005600030057>-1<00520003>]TJ
[<0057>-2<004B>-9<0048000300C0>-2<004F>-7<0048>-7<0011>]TJ
It22s easy to keep functionality synchronized among all Windows PowerShell hosts and 
users.
[<002C>-1<005700030050>-7<0044>-4<004E>12<0048>-12<00560003004C>-6<005700030053>-13<0052>-7<0056>-14<0056>-4<004C0045>-8<004F>-7<004800030057>-1<00520003004B>-7<0044>1<0059>1<004800030052>-7<0051>-9<004800030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<004800030049>-7<0052>-7<005500030057>-2<004B>-9<004800030048>-10<00510057>-2<004C0055>-12<004800030051>-9<0048>-10<0057>-35<005A>-2<0052>-7<0055>-12<004E>-26<0011>]TJ
Disadvantages:
[<002C>-1<0057>-32<00B7>26<005600030050>-9<0052>-7<0055>-12<0048000300460052>-7<0050>-4<0053>-8<004F004C>-3<0046>-15<0044>-3<0057>-3<0048>-16<004700030047>-3<0058>-7<004800030057>-1<005200030050>-6<0058>1<004F>-5<0057>-2<004C0053>-8<004F>-7<0048000300C0>-2<004F>-7<0048>-12<0056>-19<0011>]TJ
[<002C>-1<005700030053>-7<0055>-12<0052>-1<0059>-12<004C>-5<0047>-7<0048>-12<005600030051>-9<005200030044>-9<00460046>-2<0048>-12<0056>-14<005600030057>-1<005200030057>-2<004B>-9<004800030046>-2<0048>-10<00510057>-2<0055>-8<0044>-4<004F000300C0>-2<004F>-7<0048>-9<000F0003005A>-9<004B>-2<004C>-3<0046>4<004B00030050>-9<0048>-10<0044>-4<0051>-9<00560003005C>1<0052>-9<00580003005A>-2<0052>-7<0051>8<00B7>-5<00570003004B>-7<0044>1<0059>1<00480003004400030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<004800030049>-7<0052>-7<005500030050>-7<0044>-9<0046>4<004B>-2<004C0051>-9<0048>-12<00560003>]TJ
without network access.
[<002C>-1<00570003004C>-5<005600030053>-13<0052>-7<0056>-14<0056>-3<004C0045>-8<004F>-7<004800030057>-2<004B>-7<0044>-3<005700030051>-9<0052>-7<0051>-6<0010>-4<0055>-12<0052>-6<004F>-7<0048>-18<0010>-4<0056>-4<0053>-13<0048>-16<0046>4<004C>-4<00C0>-5<0046000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<0047>-6<00560003005A>-9<004C004F>1<004F00030045>-13<0048>-16<00460052>-7<0050>-9<004800030044>1<0059>-5<0044>-2<004C004F>-5<0044>-4<0045>-8<004F>-7<004800030057>-1<005200030058>-6<0056>-12<0048>-10<0055>-26<0056>-19<0011>]TJ
[<0029>-2<004C004F>-6<0057>-3<0048>-10<0055>-12<004C0051>-11<004A00030052>-9<0058>-5<005700030056>-3<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<0046000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<0047>-6<005600030049>-7<0052>-7<005500030056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<00460003004B>-9<0052>-7<0056>-16<0057>-19<005600030045>-13<0048>-16<00460052>-7<0050>-9<0048>-12<005600030050>-9<0052>-7<0055>-12<0048000300460052>-7<0050>-4<0053>-8<004F>-7<0048>-6<005B>-18<0011>]TJ
One central script becomes very complicated to maintain when it grows to hundreds of 
lines.
Uses:
Use to provide basic functionality among multiple hosts and multiple users.
Use for a single user who wants to duplicate capabilities between Windows PowerShell 
hosts.
[<0038>-3<0056>-12<004800030057>-1<005200030053>-7<0055>-12<0052>-1<0059>-12<004C>-5<0047>-7<00480003004400030056>-3<004C0051>-11<004A>1<004F>-7<004800030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<004800030049>-7<0052>-7<005500030051>-9<0048>-10<0057>-35<005A>-2<0052>-7<0055>-12<004E>12<0048>-16<0047000300460052>-7<0050>-4<0053>-9<0058>-5<0057>-3<0048>-10<0055>-26<005600030059>-12<004C>-2<004400030044000300C0>-2<004F>-7<004800030056>-4<004B>-7<0044>-4<0055>-12<0048>-7<0011>]TJ
Grouping similar functionality into a module
One 
[<0052004900030057>-2<004B>-9<004800030050>-7<0044>-2<004C00510003005A>-2<0044>2<005C>-12<005600030057>-1<005200030046>4<004F>-7<0048>-10<0044>-4<005100030058>1<00530003005C>1<0052>-9<0058>1<00550003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<00480003004C>-5<005600030057>-1<00520003004A>1<0055>-12<0052>-9<0058>1<005300030055>-12<0048>-11<004F>-5<0044>-3<0057>-3<0048>-16<00470003004C>-5<0057>-3<0048>-10<0050>-9<00560003004C00510057>-1<00520003>]TJ
[<0050>-9<0052>-13<0047>-3<0058>1<004F>-7<0048>-12<0056>-19<001100030029>-3<0052>-7<005500030048>-6<005B>-6<0044>-4<0050>-4<0053>-8<004F>-7<0048>-9<000F00030056>-5<0058>1<0053>-7<0053>-13<0052>-7<0056>-12<00480003005C>1<0052>-10<0058>1<00550003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048000300460052>-7<00510057>-19<0044>-2<004C0051>-9<00560003004400030049>-7<0048>-9<005A00030058>-5<0057>-2<004C004F004C>-5<0057>-38<005C00030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051>-9<005600030056>-6<0058>-5<0046>4<004B0003>]TJ
as the following:
A function to determine admin rights 
A function to determine if the computer is a laptop or a desktop
A function to determine if the host is the Windows PowerShell ISE or the Windows PowerShell 
console
A function to determine if the computer is 32 bit or 64 bit
[<002400030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<00510003005700520003005A>-9<0055>-12<004C>-5<0057>-3<004800030057>-1<00520003004400030057>-3<0048>-10<0050>-4<0053>-13<0052>-7<0055>-8<0044>-4<0055>-47<005C000300C0>-2<004F>-7<0048>]TJ
All of the preceding functions relate to the central theme of being utility types of functions. They 
[<0044>-4<0055>-12<004800030051>-9<0052>-2<005700030056>-3<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<004600030057>-1<005200030052>-7<0051>-9<004800030057>-3<0048>-16<0046>4<004B>-4<0051>-9<0052>-6<004F>-7<0052>-13<004A>-12<005C>34<000F00030044>-4<0051>-11<004700030044>-4<0055>-12<00480003004C005100030049>-9<0044>-9<0046>-25<00570003004B>-9<0048>-11<004F>1<0053>-13<0048>-10<005500030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051>-9<0056>-20<000F00030058>-6<0056>-12<0048>-8<0049>-18<0058>1<004F0003004C0051000300440003005A>-8<004C>-5<0047>-7<004800030059>-5<0044>-4<0055>-12<004C>-5<0048>-10<0057>-38<005C00030052>1<004900030056>-13<0046>4<0055>-12<004C0053>-5<0057>-19<00560003>]TJ
and applications. It is also true that as useful as these utilities are, you might not need to use them 
everywhere, at all times. This is the advantage of moving the functionality into a module27you can 
easily load and unload them as required.
  
[<003A>3<004B>1<0048>2<0055>-3<004800030057>10<005200030056>1<0057>9<0052>8<0055>-3<004800030057>7<004B>1<004800030053>5<0055>-3<0052>8<00C0>12<004F>5<0048>]TJ
module
If you run your system as a non-elevated user, do not use the user module location for modules that 
require elevation of privileges. This will be an exercise in futility, because once you elevate the user 
[<0044>-9<004600460052>-9<0058>1<0051>-1<00570003005700520003004C0051>-9<0046>4<004F>-4<0058>-7<0047>-7<004800030044>-11<0047>1<0050>-2<004C005100030055>-11<004C>-5<004A>1<004B>-1<0057>-19<0056>-20<000F0003005C>1<0052>-9<0058>1<005500030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<004800030056>-4<004B>-2<004C>-3<0049>-41<0057>-19<005600030057>-1<005200030044>-4<0051>-9<0052>-2<0057>-2<004B>-9<0048>-10<00550003004F>-7<0052>-13<0046>-15<0044>-3<0057>-2<004C>-5<0052>-7<0051>-14<000F00030044>-4<0051>-11<004700030057>-2<004B>-9<0048>-10<00510003005C>1<0052>-9<005800030047>-5<005200030051>-9<0052>-2<00570003004B>-7<0044>1<0059>1<00480003>]TJ
access to the module you were attempting to access. 
Therefore, it makes sense to store modules requiring admin rights in the system32 directory 
hierarchy. Keep in mind that updates to admin modules will also require elevation and therefore could 
[<0044>-11<0047>-7<00470003004400030045>-6<004C>-5<005700030052>1<0049000300460052>-7<0050>-4<0053>-8<004F004C>-3<0046>-14<0044>-3<0057>-2<004C>-5<0052>-7<0051>-14<001100030036>14<0057>-1<0052>-7<0055>-12<004800030050>-9<0052>-13<0047>-3<0058>1<004F>-7<0048>-12<005600030057>-2<004B>-7<0044>-3<005700030047>-5<005200030051>-9<0052>-2<005700030055>-12<0048>-16<0054>-3<0058004C0055>-12<004800030044>-11<0047>1<0050>-2<004C005100030055>-11<004C>-5<004A>1<004B>-1<0057>-19<00560003004C005100030057>-2<004B>-9<004800030058>-6<0056>-12<0048>-10<005500030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<004800030050>-9<0052>-13<0047>-3<0058>1<004F>-7<00480003>]TJ
location. When modules reside in one of the two default locations, Windows PowerShell automatically 
picks up on them and displays them when you use the 
ListAvailable 
command, as shown here:
However, this does not mean you are limited to modules from only the default locations. If you are 
[<0046>-2<0048>-10<0051>-1<0057>-2<0055>-8<0044>-4<004F004C>-7<005D>-5<004C0051>-11<004A0003005C>1<0052>-9<0058>1<00550003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<004800030044>-4<0051>-11<004700030056>-16<0057>-1<0052>-7<0055>-12<004C0051>-11<004A0003004C>-5<005700030052>-7<00510003004400030056>-3<004B>-7<0044>-4<0055>-12<0048>-16<004700030051>-9<0048>-10<0057>-35<005A>-2<0052>-7<0055>-12<004E00030047>1<0055>-12<004C>-12<0059>1<0048>-9<000F0003004C>-5<005700030050>-7<0044>-4<004E>12<0048>-12<005600030056>-12<0048>-10<0051>-9<0056>-12<00480003>]TJ
to likewise store the module and module manifest in the shared network location as well. 
ote
[<002E>12<0048>-14<0048>-8<00530003004C>3<005100030050004C>2<0051>-9<004700030057004B>-5<0044>-1<005700030057004B>-7<00480003003A>-14<004C>2<0051>-9<0047>-3<0052005A>-9<005600030033>8<0052005A>1<0048>-8<0055>-21<0036>3<004B>-7<0048>-9<004F>3<004F00030053>-5<0055>-10<0052>1<00C0004F>-5<00480003004C>-3<00560003004400030056>-10<0046>6<0055>-9<004C>2<0053>-3<0057>-18<000F00030044>-8<00560003004C>-3<0056000300440003003A>-14<004C>2<0051>-9<0047>-3<0052005A>-9<00560003>]TJ
PowerShell module. Therefore, your script execution policy impacts the ability to run scripts 
and to load modules from a shared network location. Even if you have a script execu
tion policy of 
, if you have not added the network share to Internet Explorer22s 
trusted sites, you will be prompted each time you open Windows PowerShell. You can use 
group policy to set the Internet Explorer trusted sites for your domain, or you can add them 
manually. You may also want to examine code signing for your scripts.
[<0026>5<0055>-5<0048>-4<0044>8<0057>-4<004C>3<0051>-3<004A0003004400030053>-1<0055>-6<0052>4<00C0>3<004F0048>8<001D00030056>7<0057>2<0048>-5<0053>-1<0010>11<0045>11<005C>27<0010>16<0056>7<0057>2<0048>-5<005300030048>7<005B>14<0048>-5<0055>-4<0046>-4<004C>1<00560048>-2<0056>]TJ
In this exercise, you22ll use the 
New-Item 
[<0046>4<0050>-11<0047>1<004F>-7<0048>-10<005700030057005200030046>4<0055>-12<0048>-10<0044>-3<0057>-3<00480003004400030051>-9<0048>-9<005A0003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-7<00110003003C>49<0052>-9<0058>3<00B6>8<004F>1<004F0003>]TJ
also use the 
Get-ExecutionPolicy
 cmdlet to ensure script execution is enabled on your local system. 
[<003C>49<0052>-9<0058>4<00B7>7<004F>1<004F00030044>-4<004F>-8<0056>-12<005200030046>4<0055>-12<0048>-10<0044>-3<0057>-3<00480003004400030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<005100030057005200030048>-16<0047004C>-5<00570003005C>1<0052>-9<0058>1<00550003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-7<00110003002C>-1<005100030057>-2<004B>-9<004800030051>-9<0048>-6<005B>-37<005700030048>-6<005B>2<0048>-10<0055>-10<0046>4<004C>-5<0056>-12<0048>-9<000F0003005C>1<0052>-9<0058>4<00B7>7<004F>1<004F00030044>-11<0047>-7<00470003>]TJ
[<0044>-11<0047>-7<0047004C>-5<0057>-2<004C>-5<0052>-7<0051>-7<0044>-4<004F00030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051>-7<0044>-4<004F004C>-5<0057>-38<005C00030057005200030057>-2<004B>-9<004800030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-7<0011>]TJ
[<0026>7<0055>-12<0048>-11<0044>-6<0057>4<004C>4<0051>-7<004A0003004400030045>-7<0044>-16<0056>-2<004C00460003003A>-12<004C>4<0051>-7<0047>-3<0052>1<005A>-7<005600030033>5<0052>1<005A0048>-7<0055>-21<0036004B>-8<0048>-8<004F>4<004F00030053>-4<0055>-12<0052>-2<00C0>2<004F>-4<0048>]TJ
1.
Start the Windows PowerShell console.
2.
Use the 
Test-Path
[<00030046>4<0050>-11<0047>1<004F>-7<0048>-10<005700030057005200030047>-7<0048>-10<0057>-3<0048>-10<0055>-12<0050>-2<004C0051>-9<00480003004C>-3<0049000300440003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F000300460052>-7<0051>-9<0056>-12<0052>-6<004F>-7<004800030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<004800030048>-6<005B>-8<004C>-5<0056>-16<0057>-19<0056>-19<001100030037>-7<004B>-2<004C>-5<00560003>]TJ
command appears here: 
3.
[<002C00490003004400030053>-6<0055>-12<0052>-1<00C0>-2<004F>-7<004800030048>-6<005B>-8<004C>-5<0056>-16<0057>-19<0056>-20<000F00030050>-6<0044>-4<004E>12<00480003004400030045>-9<0044>-9<0046>4<004E>-12<0058>1<0053000300460052>-7<0053>-2<005C00030052004900030057>-2<004B>-9<004800030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<004800030045>-3<005C00030058>-6<0056>-4<004C0051>-11<004A00030057>-2<004B>-9<00480003>]TJ
Copy-Item
 cmdlet. The com
[<0050>-7<0044>-4<0051>-11<004700030044>-4<0053>-7<0053>-13<0048>-10<0044>-4<0055>-12<004C0051>-11<004A0003004B>-9<0048>-10<0055>-12<0048000300460052>-7<0053>-6<004C>-5<0048>-12<005600030057>-2<004B>-9<004800030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<004800030057>-1<005200030057>-2<004B>-9<00480003>]TJ
[<0053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-13<0025>-11<0044>-9<0046>4<004E>-12<0058>1<0053>1<0011>-8<0053>-8<0056>8<0014000300C0>-2<004F>-7<00480003004C005100030057>-2<004B>-9<004800030026>-6<001D>3<003F>11<0049>-23<0056>-12<005200030049>-7<0052>-6<004F>-8<0047>-7<0048>-10<0055>44<00110003>]TJ
4.
[<0027>-12<0048>-11<004F>-7<0048>-10<0057>-3<004800030057>-2<004B>-9<004800030048>-6<005B>-8<004C>-5<0056>-16<0057>-2<004C0051>-11<004A00030007>7<0053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048000300C0>-2<004F>-7<004800030045>-3<005C00030058>-6<0056>-3<004C0051>-11<004A00030057>-2<004B>-9<00480003>]TJ
Remove-Item
 cmdlet. The command to do this 
appears here:
5.
Use the 
Test-Path
[<00030046>4<0050>-11<0047>1<004F>-7<0048>-10<005700030057005200030048>-10<0051>-9<0056>-6<0058>1<0055>-12<004800030057>-2<004B>-9<004800030007>7<0053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048000300C0>-2<004F>-7<00480003004C>-5<005600030053>-7<0055>-12<0052>-7<0053>-13<0048>-10<0055>-12<004F>-12<005C00030055>-12<0048>-10<0050>-9<0052>-1<0059>1<0048>-16<0047>-8<001100030037>-7<004B>-9<0048000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<004700030057005200030047>-5<00520003>]TJ
this appears here:
6.
Use the 
New-Item
[<00030046>4<0050>-11<0047>1<004F>-7<0048>-10<005700030057005200030046>4<0055>-12<0048>-10<0044>-3<0057>-3<00480003004400030051>-9<0048>-9<005A0003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F000300460052>-7<0051>-9<0056>-12<0052>-6<004F>-7<004800030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-7<001100030038>-3<0056>-12<004800030057>-2<004B>-9<00480003>]TJ
[<00070053>-15<0055>-19<0052>-21<00C0>-17<004F>-12<0048>]TJ
[<00030044>-6<0058>-5<0057>-1<0052>-7<0050>-7<0044>-3<0057>-2<004C>-3<004600030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<004800030057>-1<005200030055>-12<0048>-8<0049>-7<0048>-10<005500030057>-1<005200030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F000300460052>-7<0051>-9<0056>-12<0052>-6<004F>-7<004800030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<004800030049>-7<0052>-7<005500030057>-2<004B>-9<004800030046>-2<0058>1<0055>-12<0055>-12<0048>-10<005100570003>]TJ
user. Use the 
-force
 switched parameter to avoid any prompting. Specify an 
ItemType 
[<00C0>-8<004F>-3<00480003>]TJ
to 
[<0048>-10<0051>-9<0056>-5<0058>1<0055>-12<004800030057>-2<004B>-7<0044>-3<0057000300440003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F000300C0>-2<004F>-7<00480003004C>-5<005600030053>-7<0055>-12<0052>-7<0053>-13<0048>-10<0055>-12<004F>-12<005C00030046>4<0055>-12<0048>-10<0044>-3<0057>-3<0048>-16<0047>-8<001100030037>-7<004B>-9<0048000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<004700030057005200030044>-9<004600460052>-7<0050>-4<0053>-8<004F004C>-5<0056>-4<004B00030057>-2<004B>-9<0048>-12<0056>-12<00480003>]TJ
tasks appears here: 
[<0037>-7<004B>-9<004800030052>-10<0058>-5<0057>-2<0053>-9<0058>-5<005700030049>-12<0055>-12<0052>-7<005000030057>-2<004B>-9<0048000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<004700030057>-1<005200030046>4<0055>-12<0048>-10<0044>-3<0057>-3<0048000300440003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<004800030049>-7<0052>-7<005500030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<00560003>]TJ
PowerShell console host and the current user appears here:
[<0032>-11<0053>-13<0048>-10<005100030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F000300460052>-7<0051>-9<0056>-12<0052>-6<004F>-7<004800030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<00480003004C005100030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F0003002C>-8<00360028>-17<001100030037>55<005200030047>-5<005200030057>-2<004B>-2<004C>-5<0056>-20<000F00030057>-37<005C>-12<0053>-13<00480003>]TJ
the command appearing here:
8.
Create a function named
[<0036>-36<0048>-46<00570010>-54<0033>-28<0055>-42<0052>-44<00C0>-40<004F>-35<0048>-32<0003>]TJ
that opens the Windows PowerShell Current User, Current 
[<002B>-8<0052>-7<0056>-16<005700030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<004800030049>-7<0052>-7<005500030048>-16<0047004C>-5<0057>-2<004C0051>-11<004A0003004C005100030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F0003002C>-8<00360028>-17<001100030037>55<005200030047>-5<005200030057>-2<004B>-2<004C>-5<0056>-20<000F00030045>-13<0048>-16<004A004C005100030045>-2<005C00030058>-6<0056>-4<004C0051>-11<004A00030057>-2<004B>-9<00480003>]TJ
function
keyword, and then assign the name 
[<0036>-36<0048>-46<00570010>-54<0033>-28<0055>-42<0052>-44<00C0>-40<004F>-35<0048>-32<0003>]TJ
to the function. These commands appear here:
Add the Windows PowerShell code to the 
[<0036>-36<0048>-46<00570010>-54<0033>-28<0055>-42<0052>-44<00C0>-40<004F>-35<0048>]TJ
[<00030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<005100030057005200030052>-7<0053>-13<0048>-10<005100030057>-2<004B>-9<004800030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<004800030049>-7<0052>-7<005500030048>-16<0047004C>-5<0057>-2<004C0051>-11<004A0003004C00510003>]TJ
the Windows PowerShell ISE. The command to do this appears here:
  
10.
[<0036>-13<0044>1<0059>1<004800030057>-2<004B>-9<004800030051>-9<0048>-9<005A>-9<004F>-12<005C00030050>-9<0052>-13<0047004C>-5<00C0>-7<0048>-16<004700030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<004800030044>-4<0051>-11<004700030046>4<004F>-7<0052>-7<0056>-12<004800030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F0003002C>-8<00360028>-17<00110003>]TJ
11.
Close the Windows PowerShell console. 
12.
Open the Windows PowerShell console and look for errors.
13.
Test the 
[<0036>-36<0048>-46<00570010>-54<0033>-28<0055>-42<0052>-44<00C0>-40<004F>-35<0048>-32<0003>]TJ
function by typing the command that appears here into the Windows 
PowerShell console:
[<0037>-7<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F000300460052>-7<0051>-9<0056>-12<0052>-6<004F>-7<004800030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<004800030049>-7<0052>-7<005500030057>-2<004B>-9<004800030046>-2<0058>1<0055>-12<0055>-12<0048>-10<0051>-1<005700030058>-6<0056>-12<0048>-10<005500030056>-4<004B>-9<0052>-9<0058>1<004F>-8<004700030052>-7<0053>-13<0048>-10<00510003004C005100030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<00560003>]TJ
PowerShell ISE. The 
[<0036>-36<0048>-46<00570010>-54<0033>-28<0055>-42<0052>-44<00C0>-40<004F>-35<0048>]TJ
[<00030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<005100030056>-3<004B>-9<0052>-10<0058>1<004F>-8<004700030045>-13<004800030057>-2<004B>-9<004800030052>-7<0051>-4<004F>-12<005C00030057>-2<004B>-2<004C0051>-11<004A0003004C005100030057>-2<004B>-9<004800030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048000300C0>-2<004F>-7<0048>-7<0011>]TJ
This concludes the exercise.
In the following exercise, you will add a variable, an alias, and a Windows PowerShell drive to your 
[<003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-7<0011>]TJ
[<0024>1<0047>-4<0047>3<004C>4<0051>-7<004A00030053>-4<0055>-12<0052>-2<00C0>2<004F>-4<004800030049>-11<0058>3<0051>-6<0046>-17<0057>4<004C0052>-2<0051>-7<0044>-7<004F>3<004C>1<0057>-33<005C>]TJ
1.
Start the Windows PowerShell console.
2.
Call the 
[<0036>-36<0048>-46<00570010>-54<0033>-28<0055>-42<0052>-44<00C0>-40<004F>-35<0048>-32<0003>]TJ
function you added this function to your Windows PowerShell console 
[<0053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<004800030047>-3<0058>1<0055>-12<004C0051>-11<004A00030057>-2<004B>-9<004800030053>-7<0055>-12<0048>-8<0059>-12<004C>-5<0052>-9<0058>-6<005600030048>-6<005B>2<0048>-10<0055>-10<0046>4<004C>-5<0056>-12<0048>20<000C>14<001100030037>-7<004B>-9<0048000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<004700030057005200030047>-5<005200030057>-2<004B>-2<004C>-5<005600030044>-4<0053>-7<0053>-13<0048>-10<0044>-4<0055>-26<00560003004B>-9<0048>-10<0055>-12<0048>5<001D>]TJ
3.
[<0024>-3<0047>-7<0047000300460052>-7<0050>-4<0050>-9<0048>-10<0051005700030056>-12<0048>-16<0046>-25<0057>-2<004C>-5<0052>-7<0051>-9<005600030044>-3<005700030057>-2<004B>-9<004800030057>-1<0052>-7<005300030052004900030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<004800030049>-7<0052>-7<005500030057>-2<004B>-9<004800030049>-7<0052>-6<004F>1<004F>-7<0052>-3<005A>-9<004C0051>-11<004A00030049>-7<0052>-10<0058>1<00550003>]TJ
sections: 
Variables
Aliases
PS Drives
, and 
Functions
. The code to do this appears here:
4.
[<0026>8<0055>-12<0048>-10<0044>-3<0057>-3<004800030057>-2<004B>-4<0055>-12<0048>-16<004800030051>-9<0048>-9<005A00030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<0048>-12<0056>-19<001100030037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<00480003004C>-5<00560003>]TJ
MyDocuments
the second variable is 
[<0026>9<00520051>8<0056>8<0052004F>4<0048>-4<0033>11<0055>-3<0052>-5<00C0>-1<004F>4<0048>]TJ
and the third variable is 
[<002C>-15<0036>-6<0028>-7<00330055>-14<0052>-16<00C0>-12<004F>-7<0048>]TJ
Use the code appearing here to assign the 
proper values to these variables:
5.
Create two new aliases. One alias is named 
gh 
and refers to the 
Get-Help
 cmdlet. The second 
alias is named 
and refers to the
Invoke-History
 cmdlet. The code to do this appears here:
6.
[<0026>8<0055>-12<0048>-10<0044>-3<0057>-3<004800030057>-35<005A>-2<005200030051>-9<0048>-9<005A00030033>-9<003600030047>1<0055>-12<004C>-12<0059>1<0048>-12<0056>-19<001100030037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030033>-9<003600030047>1<0055>-12<004C>-12<0059>1<004800030055>-12<0048>-8<0049>-7<0048>-10<0055>-26<005600030057>-1<005200030057>-2<004B>-9<00480003>]TJ
HKEY_CLASSES_ROOT location of the 
registry. The second PS drive refers to the current user22s 
my 
location. The code to create these 
two PS drives appears here:
Following the 
[<0036>-36<0048>-46<00570010>-54<0033>-28<0055>-42<0052>-44<00C0>-40<004F>-35<0048>-32<0003>]TJ
function, add another comment for commands. This code appears 
here:
8.
[<0024>-3<0047>-7<004700030057>-2<004B>-4<0055>-12<0048>-16<0048000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<0047>-6<0056>-19<001100030037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030046>1<0052>-7<0050>-4<0050>-7<0044>-4<0051>-11<004700030056>-16<0057>-19<0044>-4<0055>-41<0057>-19<005600030057>-2<004B>-9<004800030057>-2<0055>-8<0044>-4<0051>-9<0056>-13<0046>4<0055>-12<004C0053>-5<005700030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051>-7<0044>-4<004F004C>-5<0057>-38<005C>34<000F00030057>-2<004B>-9<004800030056>-12<0048>-16<00460052>-7<0051>-11<004700030056>-12<0048>-10<0057>-19<00560003>]TJ
the working location to the root of drive C, and the last clears the Windows PowerShell con
sole. These three commands appear here:
[<0036>-13<0044>1<0059>1<004800030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<004800030044>-4<0051>-11<004700030046>4<004F>-7<0052>-7<0056>-12<004800030052>-10<0058>-5<005700030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>6<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F0003002C>-8<00360028>-16<001100030026>8<004F>-7<0052>-7<0056>-12<004800030057>-2<004B>-9<00480003>]TJ
Windows PowerShell console as well. Open the Windows PowerShell console and look for 
errors. Test each of the newly created features to ensure they work. The commands to test the 
[<0053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<004800030044>-4<0053>-7<0053>-13<0048>-10<0044>-4<00550003004B>-9<0048>-10<0055>-12<0048>5<001D>]TJ
This concludes the exercise.
  
Chapter 9 quick reference
Do this
[<0027>-19<0048>-17<0057>-10<0048>-17<0055>-19<0050>-9<004C>-7<0051>-16<004800030057>-9<004B>-16<004800030048>-13<005B>-15<004C>-12<0056>-23<0057>-10<0048>-17<0051>-16<0046>-9<004800030052>-7<0049000300440003003A>-22<004C>-7<0051>-18<0047>-12<0052>-10<005A>-18<005600030033>-2<0052>-10<005A>-9<0048>-17<0055>-30<0036>-7<004B>-16<0048>-18<004F>-6<004F00030053>-14<0055>-19<0052>-8<00C0>-10<004F>-14<00480003>]TJ
Use the 
Test-Path
 cmdlet and supply the 
[<00070053>-15<0055>-19<0052>-21<00C0>-16<004F>-12<0048>]TJ
 auto
matic variable.
[<0026>1<0055>-19<0048>-17<0044>-10<0057>-10<0048000300440003003A>-23<004C>-7<0051>-18<0047>-12<0052>-10<005A>-19<005600030033>-2<0052>-10<005A>-9<0048>-17<0055>-30<0036>-7<004B>-16<0048>-18<004F>-6<004F00030053>-14<0055>-19<0052>-8<00C0>-10<004F>-14<0048>]TJ
Use the 
New-Item
 cmdlet and supply a value of 
[<00C0>-14<004F>-10<00480003>]TJ
for the 
item type. Use the 
-force 
switch to avoid prompting.
[<0024>-10<0047>-14<00470003004C>-12<0057>-10<0048>-17<0050>-16<005600030057>-8<0052000300440003003A>-23<004C>-7<0051>-18<0047>-12<0052>-10<005A>-18<005600030033>-2<0052>-10<005A>-9<0048>-17<0055>-30<0036>-7<004B>-16<0048>-18<004F>-6<004F00030053>-14<0055>-19<0052>-8<00C0>-10<004F>-14<004800030057>-9<004B>-14<0044>-10<005700030044>-11<004F>-6<004F00030058>-13<0056>-19<0048>-17<0055>-32<00560003>]TJ
will use
[<0038>-10<0056>-19<004800030057>-9<004B>-16<004800030024>-18<004F>-6<004F00030038>-11<0056>-19<0048>-17<0055>-32<0056>-26<000F00030024>-17<004F>-6<004F0003002B>-15<0052>-14<0056>-23<0057>-25<005600030053>-14<0055>-19<0052>-8<00C0>-10<004F>-14<0048>-14<00110003>]TJ
[<0032>-18<0045>-12<0057>-26<0044>-9<004C>-7<005100030057>-9<004B>-16<004800030053>-16<0044>-10<0057>-9<004B00030057>-8<005200030057>-9<004B>-16<004800030024>-18<004F>-6<004F00030038>-11<0056>-19<0048>-17<0055>-32<0056>-26<000F00030024>-17<004F>-6<004F0003002B>-15<0052>-14<0056>-23<0057>-25<005600030053>-14<0055>-19<0052>-8<00C0>-10<004F>-14<0048>]TJ
Use the 
[<00070053>-15<0055>-19<0052>-21<00C0>-16<004F>-12<0048>]TJ
 automatic variable and choose the 
AllUsersAllHosts
 property. 
[<0024>-10<0047>-14<00470003004C>-12<0057>-10<0048>-17<0050>-16<005600030057>-8<0052000300440003003A>-23<004C>-7<0051>-18<0047>-12<0052>-10<005A>-18<005600030033>-2<0052>-10<005A>-9<0048>-17<0055>-30<0036>-7<004B>-16<0048>-18<004F>-6<004F00030053>-14<0055>-19<0052>-8<00C0>-10<004F>-14<004800030057>-9<004B>-14<0044>-10<005700030057>-9<004B>-16<004800030046>-9<0058>-6<0055>]TJ
rent user will use 
[<0038>-10<0056>-19<004800030057>-9<004B>-16<004800030026>-1<0058>-6<0055>-19<0055>-19<0048>-17<0051>-8<005700030038>-10<0056>-19<0048>-17<0055>31<000F00030024>-17<004F>-6<004F0003002B>-15<0052>-14<0056>-23<0057>-25<005600030053>-14<0055>-19<0052>-8<00C0>-10<004F>-14<0048>-14<0011>]TJ
[<0032>-18<0045>-12<0057>-26<0044>-9<004C>-7<005100030057>-9<004B>-16<004800030053>-16<0044>-10<0057>-9<004B00030057>-8<005200030057>-9<004B>-16<004800030026>-1<0058>-6<0055>-19<0055>-19<0048>-17<0051>-8<005700030038>-10<0056>-19<0048>-17<0055>31<000F00030024>-17<004F>-6<004F0003002B>-15<0052>-14<0056>-23<0057>-25<005600030053>-14<0055>-19<0052>-8<00C0>-10<004F>-14<0048>]TJ
Use the 
[<00070053>-15<0055>-19<0052>-21<00C0>-16<004F>-12<0048>]TJ
 automatic variable and choose the 
CurrentUserAllHosts
 property.
[<0028>-5<0047>-7<004C>-13<00570003004400030056>-10<0053>-20<0048>-23<0046>-3<004C>-12<00C0>-12<00460003003A>-23<004C>-7<0051>-18<0047>-12<0052>-10<005A>-19<005600030033>-2<0052>-10<005A>-9<0048>-17<0055>-30<0036>-7<004B>-16<0048>-18<004F>-6<004F00030053>-14<0055>-19<0052>-8<00C0>-10<004F>-14<0048>]TJ
From the Windows PowerShell console, type 
ISE
and 
specify the path to the required Windows PowerShell 
[<0053>-14<0055>-19<0052>-8<00C0>-10<004F>-14<004800030045>-10<005C00030058>-13<0056>-11<004C>-7<0051>-18<004A00030057>-9<004B>-16<00480003>]TJ
[<00070053>-15<0055>-19<0052>-21<00C0>-16<004F>-12<0048>]TJ
 automatic variable and the 
appropriate property.
CHAPTER 10
Using WMI
fter completing this chapter, you will be able to:
Understand the concept of WMI namespaces.
Use the WMI namespaces.
Navigate the WMI namespaces.
Understand the use of WMI providers.
Discover classes supplied by WMI providers.
Use the 
Get-WmiObject
 cmdlet to perform simple WMI queries.
Produce a listing of all WMI classes.
[<0033>5<0048>-10<0055>-38<0049>-7<0052>-7<0055>-12<005000030056>-12<0048>-10<0044>-4<0055>-10<0046>4<004B>-9<0048>-12<005600030057>-1<0052000300C0>-2<0051>-11<00470003003A>-7<0030>-4<002C00030046>4<004F>-5<0044>-10<0056>-14<0056>-12<0048>-12<0056>-19<0011>]TJ
The inclusion 
of Microsoft Windows Management Instrumentation WMI in virtually every operat
ing system released by Microsoft since Windows NT 4.0 should give you an idea of the importance 
of this underlying technology. From a network management perspective, many useful tasks can be 
accomplished using just Windows PowerShell, but to begin to truly unleash the power of scripting, 
you need to bring in additional tools. This is where WMI comes into play. WMI provides access to 
many powerful ways of managing Windows systems. This section will dive into the pieces that make 
up WMI. It will discuss at several concepts27namespaces, providers, and classes27and show how these 
concepts can aid in leveraging WMI in your Windows PowerShell scripts. All the scripts mentioned in 
this chapter are available via the Microsoft Script Center Script Repository.
Each new version of Windows introduces improvements to WMI, including new WMI classes, as 
well as new capabilities for existing WMI classes. In products such as Microsoft Exchange Server, 
Microsoft SQL Server, and Microsoft Internet Information Services to mention a few, support for 
WMI continues to grow and expand. Some of the tasks you can perform with WMI follow:
[<0035>-2<0048>-10<0053>-13<0052>-7<0055>-41<005700030052>-7<005100030047>1<0055>-12<004C>-12<0059>1<0048000300460052>-7<0051>-1<00C0>-7<004A>-3<0058>1<0055>-8<0044>-3<0057>-2<004C>-5<0052>-7<005100030049>-7<0052>-7<00550003004F>-7<0052>-13<0046>-14<0044>-4<004F>1<004F>-12<005C00030044>-3<0057>-31<0057>-19<0044>-9<0046>4<004B>-9<0048>-16<004700030047>1<0055>-12<004C>-12<0059>1<0048>-12<0056>-20<000F00030044>-3<0051>-11<004700030049>-7<0052>-7<005500030050>-7<0044>-4<0053>-7<0053>-13<0048>-16<004700030047>1<0055>-12<004C>-12<0059>1<0048>-12<0056>-19<0011>]TJ
Report on available memory, both physical and virtual.
Back up the event log.
Modify the registry.
  
Schedule tasks
Share folders
Switch from a static to a dynamic IP address
Enable or disable a network adapter
Defragment a hard disk drive
Understanding the WMI model
WMI 
is a 
hierarchical namespace
, in which the layers build on one another, like the 
Lightweight 
[<0027>-8<004C0055>-12<0048>-16<0046>-25<0057>-1<0052>-7<0055>-47<005C0003002400460046>-2<0048>-12<0056>-14<005600030033>3<0055>-12<0052>-2<0057>-1<0052>-13<00460052>-6<004F0003000B>-8<002F>-6<0027>18<0024>-7<0033>7<000C00030047004C0055>-12<0048>-16<0046>-25<0057>-1<0052>-7<0055>-47<005C00030058>-6<0056>-12<0048>-16<00470003004C0051000300240046>-25<0057>-2<004C>-12<0059>1<004800030027>-8<004C0055>-12<0048>-16<0046>-25<0057>-1<0052>-7<0055>-47<005C>34<000F00030052>-7<005500030057>-2<004B>-9<0048000300C0>-2<004F>-7<004800030056>-21<005C>-12<0056>-16<0057>-3<0048>-10<005000030056>-16<0057>-2<0055>-17<0058>-5<0046>-25<0057>-8<0058>1<0055>-12<004800030052>-7<00510003>]TJ
your hard drive. Although it is true that WMI is a hierarchical namespace, the term by itself does not 
really convey the richness of WMI. The WMI model has three sections27resources, infrastructure, and 
consumers27with the following uses:
WMI resources
[<0035>-2<0048>-12<0056>-12<0052>-9<0058>1<0055>-10<0046>-2<0048>-12<00560003004C0051>-9<0046>4<004F>-4<0058>-7<0047>-7<004800030044>-4<0051>4<005C>-41<0057>-2<004B>-2<004C0051>-11<004A00030057>-2<004B>-7<0044>-3<005700030046>-14<0044>-4<005100030045>-13<004800030044>-9<00460046>-2<0048>-12<0056>-14<0056>-12<0048>-16<004700030045>-2<005C00030058>-6<0056>-3<004C0051>-11<004A0003003A>-7<0030>-4<002C>-43<00B3>-22<0057>-2<004B>-9<0048000300C0>-2<004F>-7<00480003>]TJ
[<0056>-21<005C>-12<0056>-16<0057>-3<0048>-10<0050>-14<000F00030051>-9<0048>-10<0057>-35<005A>-2<0052>-7<0055>-12<004E>12<0048>-16<0047000300460052>-7<0050>-4<0053>-13<0052>-7<0051>-9<0048>-10<00510057>-19<0056>-20<000F00030048>-8<0059>1<0048>-10<005100570003004F>-7<0052>-13<004A>-6<0056>-20<000F000300C0>-2<004F>-7<0048>-12<0056>-20<000F00030049>-7<0052>-6<004F>-8<0047>-7<0048>-10<0055>-26<0056>-20<000F00030047004C>-5<0056>-4<004E>-31<0056>-20<000F00030024>1<0046>-25<0057>-2<004C>-12<0059>1<004800030027>-8<004C0055>-12<0048>-16<0046>-25<0057>-1<0052>-7<0055>-47<005C>34<000F00030044>-3<0051>-11<004700030056>-12<005200030052>-7<0051>-14<0011>]TJ
WMI infrastructure
The infrastructure comprises three parts: the WMI service, the WMI 
repository, and the WMI providers. Of these parts, WMI providers are the most important 
because they provide the means for WMI to gather needed information.
WMI consumers
A consumer provides a prepackaged way to process data from WMI. A 
consumer can be a PowerShell cmdlet, a VBScript script, an enterprise management software 
package, or some other tool or utility that executes WMI queries.
Working with objects and namespaces
Let22s 
go back to the idea of a namespace introduced earlier in this chapter. You can think of a 
namespace
[<00030044>-10<0056000300440003005A>-2<0044>2<005C00030057005200030052>-7<0055>-12<004A>-3<0044>-4<0051>-2<004C>-7<005D>-1<004800030052>-7<0055000300460052>-6<004F>1<004F>-7<0048>-16<0046>-25<005700030047>-3<0044>-3<0057>-19<004400030055>-12<0048>-11<004F>-5<0044>-3<0057>-3<0048>-16<004700030057005200030056>-4<004C0050>-2<004C004F>-5<0044>-4<00550003004C>-6<0057>-3<0048>-10<0050>-9<0056>-19<001100030039>-17<004C>-5<0056>-5<0058>-3<0044>-4<004F004C>-7<005D>-1<004800030044>-4<005100030052>-6<004F>-8<0047>-2<0010>11<0049>-9<0044>-10<0056>-4<004B>-2<004C>-5<0052>-7<0051>-9<0048>-16<0047000300C0>-2<004F>]TJ
ing cabinet. Each drawer can represent a particular namespace. Inside this drawer are hanging folders 
that collect information related to a subset of what the drawer actually holds. For example, at home 
[<004C005100030050>3<005C000300C0>-2<004F004C0051>-11<004A00030046>-14<0044>-4<0045>-6<004C0051>-9<0048>-10<0057>-20<000F0003002C0003004B>-7<0044>1<0059>1<00480003004400030047>1<0055>-8<0044>-3<005A>-2<0048>-10<005500030055>-12<0048>-12<0056>-12<0048>-10<0055>-47<0059>1<0048>-16<004700030049>-7<0052>-7<00550003004C0051>2<0049>-7<0052>-7<0055>-12<0050>-7<0044>-3<0057>-2<004C>-5<0052>-7<005100030055>-12<0048>-11<004F>-5<0044>-3<0057>-3<0048>-16<004700030057005200030050>3<005C0003005A>-2<0052>-13<0052>-13<0047>-9<005A>-2<0052>-7<0055>-12<004E>-14<004C0051>-11<004A000300570052>-13<0052>-6<004F>-8<0056>-19<00110003002C>-1<0051>-9<0056>-3<004C>-5<0047>-7<00480003>]TJ
this particular drawer are hanging folders for my table saw, my planer, my joiner, my dust collector, 
and so on. In the folder for the table saw is information about the motor, the blades, and the various 
accessories I purchased for the saw such as an overarm blade guard.
WMI 
[<0052>-7<0055>-13<004A>-3<0044>-4<0051>-2<004C>-7<005D>-1<0048>-12<005600030057>-2<004B>-9<004800030051>-7<0044>-4<0050>-9<0048>-12<0056>-4<0053>-9<0044>-9<0046>-2<0048>-12<00560003004C00510003004400030056>-3<004C0050>-2<004C004F>-5<0044>-4<005500030049>-9<0044>-10<0056>-4<004B>-2<004C>-5<0052>-7<005100030057005200030057>-2<004B>-9<0048000300C0>-2<004F004C0051>-11<004A00030046>-14<0044>-4<0045>-6<004C0051>-9<0048>-10<0057>-19<005600030047>-7<0048>-12<0056>-13<0046>4<0055>-12<004C0045>-13<0048>-16<004700030053>-7<0055>-12<0048>-8<0059>-12<004C>-5<0052>-10<0058>-6<0056>-5<004F>-12<005C>35<00110003002C>-1<00570003>]TJ
[<004C>-5<005600030053>-13<0052>-7<0056>-14<0056>-3<004C0045>-8<004F>-7<004800030057>-1<005200030048>-6<005B>-37<0057>-3<0048>-10<0051>-11<004700030057>-2<004B>-9<0048000300C0>-2<004F004C0051>-11<004A00030046>-14<0044>-4<0045>-6<004C0051>-9<0048>-10<005700030044>-4<0051>-7<0044>-4<004F>-7<0052>-13<004A>-12<005C0003005700520003004C0051>-9<0046>4<004F>-4<0058>-7<0047>-7<004800030057>-2<004B>-9<004800030057>-2<004B>-4<0055>-12<0048>-16<0048000300460052>-7<0050>-4<0053>-13<0052>-7<0051>-9<0048>-10<00510057>-19<00560003005200490003003A>-7<0030>-4<002C0003005A>-9<004C>-5<0057>-2<004B0003005A>-9<004B>-2<004C>-3<0046>4<004B0003>]TJ
you will work. The three components are namespaces, providers, and classes. The namespaces are the 
[<00C0>-2<004F>-7<004800030046>-14<0044>-4<0045>-6<004C0051>-9<0048>-10<0057>-19<0056>-19<001100030037>-7<004B>-9<004800030053>-7<0055>-12<0052>-1<0059>-12<004C>-5<0047>-7<0048>-10<0055>-26<005600030044>-4<0055>-12<004800030057>-2<004B>-9<004800030047>1<0055>-8<0044>-3<005A>-2<0048>-10<0055>-26<00560003004C005100030057>-2<004B>-9<0048000300C0>-2<004F>-7<004800030046>-14<0044>-4<0045>-6<004C0051>-9<0048>-10<0057>-20<001100030037>-7<004B>-9<004800030049>-7<0052>-6<004F>-8<0047>-7<0048>-10<0055>-26<00560003004C005100030057>-2<004B>-9<004800030047>1<0055>-8<0044>-3<005A>-2<0048>-10<0055>-26<005600030052004900030057>-2<004B>-9<0048000300C0>-2<004F>-7<00480003>]TJ
cabinet are the WMI classes. These namespaces appear in Figure 10-1.
FIGURE 10-1
WMI namespaces viewed in the WMI 
Control Properties dialog box.
Namespaces can contain other namespaces, as well as other objects, and these objects contain 
properties you can manipulate. Let22s use a WMI command to illustrate the organization of the WMI 
namespaces. In the command that follows, the 
Get-WmiObject
 cmdlet is used to make the connec
tion into WMI. The 
-class
[<00030044>-4<0055>-13<004A>-3<0058>1<0050>-9<0048>-10<0051005700030056>-3<0053>-13<0048>-16<0046>4<004C>-5<00C0>-7<0048>-12<005600030057>-2<004B>-9<004800030051>-7<0044>-4<0050>-9<004800030052004900030057>-2<004B>-9<004800030046>4<004F>-5<0044>-10<0056>-14<0056>-19<00110003002C>-1<005100030057>-2<004B>-2<004C>-5<005600030048>-6<005B>-6<0044>-4<0050>-4<0053>-8<004F>-7<0048>-9<000F00030057>-2<004B>-9<004800030046>4<004F>-5<0044>-10<0056>-14<005600030051>-7<0044>-4<0050>-9<00480003>]TJ
is 
__Namespace 
the WMI class from which all WMI namespaces derive. Yes, you read that class name 
correctly27it is the word 
namespace 
preceded by two underscore characters a double underscore is 
[<0058>-6<0056>-12<0048>-16<004700030049>-7<0052>-7<005500030044>-4<004F>1<004F0003003A>-7<0030>-4<002C00030056>-21<005C>-12<0056>-16<0057>-3<0048>-10<005000030046>4<004F>-5<0044>-10<0056>-14<0056>-12<0048>-12<005600030045>-13<0048>-16<0046>-14<0044>-6<0058>-6<0056>-12<00480003004C>-5<005700030050>-7<0044>-4<004E>12<0048>-12<005600030057>-2<004B>-9<0048>-10<005000030048>-9<0044>-10<0056>-21<005C000300570052000300C0>-2<0051>-11<00470003004C005100030056>-12<0052>-7<0055>-41<0057>-3<0048>-16<00470003004F004C>-5<0056>-16<0057>-19<0056>-4<001E00030057>-2<004B>-9<004800030047>-5<0052>-10<0058>1<0045>-8<004F>-7<004800030058>1<0051>-11<0047>-7<0048>-10<0055>]TJ
score, when sorted, rises to the top of the list. The
-namespace
 argument is 
root 
[<0045>-13<0048>-16<0046>-14<0044>-6<0058>-6<0056>-12<00480003004C>-5<005700030056>-3<0053>-13<0048>-16<0046>4<004C>-5<00C0>-7<0048>-12<00560003>]TJ
the root level the top namespace in the WMI namespace hierarchy. The 
Get-WmiObject
 line of code 
appears here:
The command and the associated output appear in Figure 10-2.
  
FIGURE 10-2
Namespace output obtained via the 
Get-WmiObject
 cmdlet.
When the 
Get-WmiObject
 cmdlet runs, it returns a collection of management objects. These 
objects contain a number of system properties, and therefore the cmdlet displays some com
plex output. Fixing the output requires the use of the 
Select-Object
 cmdlet and selection of the 
name 
property. Because of nesting one namespace inside another namespace, the previous 
Get-WmiObject 
[<00460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<004700030055>-12<0048>-10<0057>-8<0058>1<0055>-12<0051>-9<00560003004400030053>-13<0052>-7<0055>-41<0057>-2<004C>-5<0052>-7<005100030052004900030057>-2<004B>-9<004800030051>-7<0044>-4<0050>-9<0048>-12<0056>-4<0053>-9<0044>-9<0046>-2<0048>-12<005600030052>-7<005100030057>-2<004B>-9<0048000300460052>-7<0050>-4<0053>-9<0058>-5<0057>-3<0048>-10<0055>44<001100030037>55<0052000300C0>-11<005B00030057>-2<004B>-2<004C>-5<005600030056>-3<004C>-5<0057>-8<0058>]TJ
ation, you must use a function. In the 
Get-WmiNameSpace
[<00030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051>-14<000F0003005C>1<0052>-10<0058000300C0>-2<0055>-26<0056>-16<005700030046>4<0055>-12<0048>-10<0044>-3<0057>-3<004800030044000300460052>-9<0058>1<0053>-8<004F>-7<0048000300520049>10<0003>]TJ
input parameters: 
namespace 
and 
computer.
 The default values of these parameters are 
root 
for the 
root of the WMI namespace, and 
localhost
, which refers to the local computer. This portion of the 
function appears here:
It is possible to change the behavior of the 
Get-WmiNameSpace 
function by passing new values 
when calling the function. 
ote
When performing a WMI query against a remote computer, the user account per
forming the connection must be a member of the local administrators group on the remote 
machine. One way to accomplish this is to right-click the Windows PowerShell icon and 
select Run As Administrator from the menu that appears.
An example of calling the 
Get-WmiNameSpace
 function with alternate parameter values 
appears here:
The 
Get-WmiObject
 cmdlet command looks for instances of the 
__NameSpace 
class on the 
[<00460052>-7<0050>-4<0053>-9<0058>-5<0057>-3<0048>-10<005500030044>-4<0051>-11<00470003004C005100030057>-2<004B>-9<004800030051>-7<0044>-4<0050>-9<0048>-12<0056>-4<0053>-9<0044>-9<0046>-2<004800030056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-7<0048>-16<00470003005A>-9<004B>-9<0048>-10<005100030046>-14<0044>-4<004F>1<004F004C0051>-11<004A00030057>-2<004B>-9<004800030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051>-14<001100030032>-11<0051>-9<004800030057>-2<004B>-2<004C0051>-11<004A00030057>-2<004B>-7<0044>-3<00570003004C>-5<00560003004C00510057>-3<0048>-10<0055>-12<0048>-12<0056>-16<0057>-2<004C0051>-11<004A0003>]TJ
is the use of a 
custom error action
27a requirement due to a possible lack of rights on some of the 
namespaces. If you set the value of 
erroraction 
to 
silentlycontinue
, any error generated, including
Access Denied, does not appear, and the script ignores the error and continues to run. Without this 
[<0046>4<004B>-7<0044>-4<0051>-11<004A>-7<0048>-9<000F00030057>-2<004B>-9<004800030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<00510003005A>-2<0052>-9<0058>1<004F>-8<00470003004B>-7<0044>-4<004F>-6<005700030044>-3<005700030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<00570003002400460046>-2<0048>-12<0056>-14<005600030027>-12<0048>-10<0051>-2<004C>-5<0048>-16<004700030048>-10<0055>-12<0055>-12<0052>-7<0055>39<000F00030052>-6<005500030045>-3<005C00030047>-7<0048>-8<0049>-9<0044>-6<0058>1<004F>-6<0057>-20<000F0003004F>-7<0052>-2<0057>-19<00560003005200490003002400460046>-2<0048>-12<0056>-14<005600030027>-12<0048>-10<0051>-2<004C>-5<0048>-16<00470003>]TJ
[<0048>-10<0055>-12<0055>-12<0052>-7<0055>-26<00560003005A>-2<0052>-9<0058>1<004F>-8<004700030046>4<004F>-4<0058>-5<0057>-31<0057>-3<0048>-10<005500030057>-2<004B>-9<004800030052>-10<0058>-5<0057>-2<0053>-9<0058>-5<00570003005A>-9<004C0051>-11<0047>-5<0052>-3<005A00030044>-4<0051>-11<004700030050>-7<0044>-4<004E>12<004800030057>-2<004B>-9<004800030055>-12<0048>-12<0056>-5<0058>1<004F>-5<0057>-19<005600030047004C>-3<0049>-41<00C0>-5<0046>-2<0058>1<004F>-6<005700030057005200030055>-12<0048>-10<0044>-11<0047>-8<001100030037>-7<004B>-2<004C>-5<005600030053>-13<0052>-7<0055>-41<0057>-2<004C>-5<0052>-7<005100030052004900030057>-2<004B>-9<00480003>]TJ
Get-WmiNameSpace
 function appears here:
[<0037>-7<004B>-9<004800030055>-12<0048>-12<0056>-5<0058>1<004F>-6<0057>-19<005600030049>-13<0055>-12<0052>-7<005000030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<00570003>]TJ
Get-WmiObject 
command pass down the pipeline to a 
Foreach-Object 
cmdlet. Inside the associated 
process 
script block, the 
Join-Path 
cmdlet builds up a new namespace 
string using the 
namespace 
and 
name 
properties. The function skips any namespaces that contain 
the word 
directory 
to make the script run faster and to ignore any LDAP-type classes contained in 
the RootDirectoryLDAP WMI namespace. Once created, the new namespace name passes to the 
Get-WmiObject 
cmdlet, where a new query executes. This portion of the function appears here:
The complete 
Get-WmiNameSpace
 function appears here: 
  
An example of calling the 
Get-WmiNameSpace
 function, along with a sample of the output, 
appears in Figure 10-3.
FIGURE 10-3
WMI namespaces revealed by the 
Get-WmiNameSpace
 function.
So what does all this mean? It means that there are more than a dozen different WMI namespaces. 
Each of those WMI namespaces provides information about your computers. Understanding that the 
[<0047004C>-3<0049>-39<0049>-7<0048>-10<0055>-12<0048>-10<0051>-1<005700030051>-7<0044>-4<0050>-9<0048>-12<0056>-4<0053>-9<0044>-9<0046>-2<0048>-12<005600030048>-6<005B>-8<004C>-5<0056>-16<00570003004C>-5<005600030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030056>-16<0057>-3<0048>-10<005300030057>-1<005200030045>-13<0048>-9<004C0051>-11<004A00030044>-4<0045>-8<004F>-7<004800030057>-1<005200030051>-7<0044>1<0059>-12<004C>-5<004A>-3<0044>-3<0057>-3<00480003003A>-7<0030>-4<002C00030057>-1<0052000300C0>-2<0051>-11<004700030057>-2<004B>-9<004800030051>-9<0048>-16<0048>-16<0047>-7<0048>-16<00470003004C0051>2<0049>-7<0052>-7<0055>]TJ
mation. Often, students and others new to PowerShell or VBScript work on a WMI script to make the 
script perform a certain action, which is a great way to learn scripting. However, what they often do 
not know is which namespace they need to connect to so that they can accomplish their task. When 
[<002C00030057>-3<0048>-11<004F>1<004F00030057>-2<004B>-9<0048>-10<00500003005A>-9<004B>-2<004C>-3<0046>4<004B00030051>-7<0044>-4<0050>-9<0048>-12<0056>-4<0053>-9<0044>-9<0046>-2<004800030057>-1<00520003005A>-2<0052>-7<0055>-12<004E0003005A>-9<004C>-5<0057>-2<004B>-14<000F00030057>-2<004B>-9<0048>-7<005C00030056>-12<0052>-7<0050>-9<0048>-10<0057>-2<004C0050>-9<0048>-12<005600030055>-12<0048>-10<0053>-8<004F>-12<005C>34<000F000300B4>-22<0037>-7<004B>-7<0044>-3<0057>-32<00B7>26<0056000300C0>-2<0051>-9<004800030049>-7<0052>-7<00550003005C>1<0052>-9<0058>-9<000F00030045>-9<0058>-5<00570003004B>-9<0052>-3<005A00030047>-5<00520003002C0003>]TJ
know that the such-and-such namespace even exists?24 By using the 
Get-WmiNameSpace
 function, 
you can easily generate a list of namespaces installed on a particular machine; and armed with that 
information, you can search on MSDN 
http://msdn.microsoft.com/library/default.asp
 to see what 
information the namespace is able to provide.
Listing WMI providers
Understanding
 the namespace assists the network administrator with judiciously applying WMI script
ing to his or her network duties. However, as mentioned earlier, to access information through WMI, 
you must have access to a WMI provider. After implementing the provider, you can gain access to the 
information the provider makes available. 
ote
Keep in mind that in nearly every case, installation of providers happens in the back
[<004A>3<0055>-10<0052>-7<0058>3<0051>-9<004700030059>-10<004C004400030052>-4<0053>-11<0048>-8<0055>-6<0044>-1<0057004C>2<0051>-9<004A00030056>-19<005C>-10<0056>-14<0057>-1<0048>-8<005000030046>3<0052>-5<0051>2<00C0>-5<004A>-1<0058>3<0055>-6<0044>-1<0057004C>-3<0052>-5<005100030052>-4<005500030050>-5<0044>-2<0051>-5<0044>-9<004A>-5<0048>-8<0050>-7<0048>-8<0051>2<005700030044>-1<0053>-4<0053>-5<004F>2<004C>-1<0046>-12<0044>-1<0057004C>-3<0052>-5<00510003004C>3<0051>-7<0056>-14<0057>-17<0044>-2<004F>3<004F>-3<0044>-1<0057004C>-3<0052>-5<0051>-12<001100030029>-1<0052>-5<00550003>]TJ
example, addition of new roles and features to server SKUs often installs new WMI provid
ers and their attendant WMI classes.
WMI bases providers on a template class, or a system class called _
_provider
. Armed with this infor
mation, you can look for instances of the
__provider
 class, and you will have a list of all the providers 
that reside in your WMI namespace. This is exactly what the 
Get-WmiProvider
 function does.
The 
Get-WmiProvider
 function begins by assigning the string 
Rootcimv2
 to the 
$wmiNS
 variable. 
This value will be used with the 
Get-WmiObject
 cmdlet to specify where the WMI query will take 
place. 
The 
Get-WmiObject
 cmdlet queries WMI. The 
class
 parameter limits the WMI query to the 
__provider
 class. The
-namespace
 argument tells the 
Get-WmiObject
 cmdlet to look only in the 
Rootcimv2 WMI namespace. The array of objects returned from the 
Get-WmiObject
 cmdlet pipelines 
to the 
Sort-Object
 cmdlet, where the listing of objects is alphabetized based on the 
name
 property. 
After this process is completed, the reorganized objects pipeline to the 
Select-Object
 cmdlet, where 
the name of each provider is displayed. The complete 
Get-WmiProvider 
function appears here:
Get-WmiProvider
Working with WMI classes
In 
addition to working with namespaces, the inquisitive network administrator may want to explore 
the concept of classes. In WMI parlance, you have core classes, common classes, and dynamic classes. 
Core classes
 represent managed objects that apply to all areas of management. These classes provide 
  
a basic vocabulary for analyzing and describing managed systems. Two examples of core classes are 
parameters and the 
SystemSecurity
 class. 
Common classes
 are extensions to the core classes and rep
[<0055>8<0048>-12<0056>-12<0048>-10<0051>-1<005700030050>-7<0044>-4<0051>-7<0044>-11<004A>-7<0048>-16<004700030052>-7<0045>-6<004D>-5<0048>-16<0046>-25<0057>-19<005600030057>-2<004B>-7<0044>-3<005700030044>-4<0053>-7<0053>-8<004F>-12<005C00030057>-1<005200030056>-4<0053>-13<0048>-16<0046>4<004C>-4<00C0>-5<004600030050>-7<0044>-4<0051>-7<0044>-11<004A>-7<0048>-10<0050>-9<0048>-10<0051005700030044>-4<0055>-12<0048>-10<0044>-10<0056>-19<00110003002B>-8<0052>-3<005A>-2<0048>-8<0059>1<0048>-10<0055>39<000F000300460052>-7<0050>-4<0050>-9<0052>-7<005100030046>4<004F>-5<0044>-10<0056>-14<0056>-12<0048>-12<005600030044>-4<0055>-12<0048>20<0003>]TJ
independent of a particular implementation or technology. The 
CIM_UnitaryComputerSystem
 class is 
an example of a common class. Network administrators do not use core and common classes because 
they serve as templates from which other classes derive, and as such are mainly of interest to devel
opers of management applications. The reason IT professionals need to know about the core and 
[<00460052>-7<0050>-4<0050>-9<0052>-7<005100030046>4<004F>-5<0044>-10<0056>-14<0056>-12<0048>-12<00560003004C>-5<005600030057>-1<005200030044>1<0059>1<0052>-4<004C>-5<0047000300460052>-7<0051>2<0049>-18<0058>-6<0056>-4<004C>-5<0052>-7<00510003005A>-9<004B>-9<0048>-10<00510003004C>-5<005700030046>1<0052>-7<0050>-9<0048>-12<005600030057>-2<004C0050>-9<004800030057>-1<0052000300C0>-2<0051>-11<004700030058>-6<0056>-17<0044>-4<0045>-8<004F>-7<00480003003A>-7<0030>-4<002C00030046>4<004F>-5<0044>-10<0056>-14<0056>-12<0048>-12<0056>-19<0011>]TJ
Many of the classes stored in Rootcimv2, therefore, are abstract classes and are of use as tem
plates used in creating other WMI classes. However, a few classes in Rootcimv2 are dynamic classes 
used to hold actual information. The important aspect to remember about 
dynamic classes
 is that 
providers generate instances of a dynamic class, and therefore dynamic WMI classes are more likely 
to retrieve live data from the system.
To produce 
a simple listing of WMI classes, you can use the 
Get-WmiObject
 cmdlet and specify the 
-list
 argument. This code appears here:
Partial output from the previous command is shown here:
[<0032>-11<0051>-9<004800030052004900030057>-2<004B>-9<004800030045>-6<004C>-5<004A00030053>-7<0055>-12<0052>-7<0045>-8<004F>-7<0048>-10<0050>-9<00560003005A>-9<004C>-5<0057>-2<004B0003003A>-7<0030>-4<002C0003004C>-5<0056000300C0>-2<0051>-11<0047004C0051>-11<004A00030057>-2<004B>-9<00480003003A>-7<0030>-4<002C00030046>4<004F>-5<0044>-10<0056>-14<005600030051>-9<0048>-16<0048>-16<0047>-7<0048>-16<004700030057>-1<005200030056>-12<0052>-6<004F>-12<0059>1<00480003004400030053>-9<0044>-4<0055>-41<0057>-2<004C>-3<0046>-2<0058>1<004F>-5<0044>-4<005500030053>-7<0055>-12<0052>-7<0045>-8<004F>-7<0048>-10<0050>-14<00110003>]TJ
With literally thousands of WMI classes installed on even a basic Windows installation, searching 
[<0057>-2<004B>-4<0055>-12<0052>-9<0058>-7<004A>1<004B00030044>-4<004F>1<004F00030057>-2<004B>-9<004800030046>4<004F>-5<0044>-10<0056>-14<0056>-12<0048>-12<00560003004C>-5<005600030047004C>-3<0049>-40<00C0>-5<0046>-2<0058>1<004F>-5<005700030044>-3<005700030045>-13<0048>-12<0056>-16<0057>-20<00110003003A>-10<004B>-2<004C004F>-7<00480003004C>-6<00570003004C>-5<005600030053>-13<0052>-7<0056>-14<0056>-3<004C0045>-8<004F>-7<004800030057>-1<005200030056>-12<0048>-10<0044>-4<0055>-10<0046>4<004B00030030>-7<00360027>-8<0031>-17<000F0003004400030049>-9<0044>-10<0056>-16<0057>-3<0048>-10<005500030056>-12<0052>-6<004F>-4<0058>-5<0057>-2<004C>-5<0052>-7<00510003004C>-5<005600030057>-1<00520003>]TJ
use Windows PowerShell itself. As just shown, using the 
-list 
switched parameter produces a listing of 
all the WMI classes in a particular namespace. It would be possible to combine this feature with the 
Get-WmiNameSpace
 function examined earlier to produce a listing of every WMI class on a computer27
but that would only compound an already complicated situation. 
A better solution is to stay focused on a single WMI namespace, and to use wildcard characters to 
[<0044>-10<0056>-14<0056>-4<004C>-5<0056>-16<00570003004C0051000300C0>-2<0051>-11<0047004C0051>-11<004A00030044>-4<0053>-7<0053>-7<0055>-12<0052>-7<0053>-7<0055>-12<004C>-2<0044>-3<0057>-3<00480003003A>-7<0030>-4<002C00030046>4<004F>-5<0044>-10<0056>-14<0056>-12<0048>-12<0056>-19<001100030029>-3<0052>-7<005500030048>-6<005B>-6<0044>-4<0050>-4<0053>-8<004F>-7<0048>-9<000F0003005C>1<0052>-9<005800030046>-14<0044>-4<005100030058>-6<0056>-12<004800030057>-2<004B>-9<00480003005A>-9<004C004F>-8<0047>-5<0046>-14<0044>-4<0055>-12<004700030053>-9<0044>-3<0057>-31<0057>-3<0048>-10<0055>-12<00510003>]TJ
"*bios*"
 to 
[<00C0>-2<0051>-11<004700030044>-4<004F>1<004F0003003A>-7<0030>-4<002C00030046>4<004F>-5<0044>-10<0056>-14<0056>-12<0048>-12<005600030057>-2<004B>-7<0044>-3<005700030046>1<0052>-7<00510057>-19<0044>-2<004C005100030057>-2<004B>-9<00480003004F>-7<0048>-10<0057>-31<0057>-3<0048>-10<0055>-26<00560003>]TJ
bios 
in the class name. The code that follows accomplishes 
this task:
The command and associated output appear in Figure 10-4.
FIGURE 10-4
Listing of WMI classes containing the pattern 
bios
 in the class name.
In the output shown in Figure 10-4, not all of the WMI classes will return data. In fact, you should 
not use all of the classes for direct query, because querying abstract classes is not supported. 
[<0031>-9<0048>-8<0059>1<0048>-10<0055>-41<0057>-2<004B>-9<0048>-11<004F>-7<0048>-12<0056>-14<0056>-20<000F00030056>-12<0052>-7<0050>-9<004800030052004900030057>-2<004B>-9<004800030046>4<004F>-5<0044>-10<0056>-14<0056>-12<0048>-12<005600030044>-4<0055>-12<004800030058>-6<0056>-12<0048>-8<0049>-18<0058>1<004F>6<001E00030056>-12<0052>-7<0050>-9<004800030052004900030057>-2<004B>-9<004800030046>4<004F>-5<0044>-10<0056>-14<0056>-12<0048>-12<005600030056>-12<0052>-6<004F>-12<0059>1<00480003004400030056>-3<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<004600030053>-7<0055>-12<0052>-7<0045>-8<004F>-7<0048>-10<0050>-14<0011000300B4>-35<003A>-10<004B>-2<004C>-3<0046>4<004B0003>]TJ
ones should you use?24 you may ask. A simple answer27not completely accurate, but something to get 
you started27is to use only the WMI classes that begin with 
win32.
 You can easily modify the previous 
Get-WMIObject
 query to return only WMI classes that begin with 
win32. 
A regular expression pat
[<0057>-3<0048>-10<0055>-12<00510003004F>-7<0052>-13<0052>-7<004E>-31<005600030044>-3<005700030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030053>-13<0052>-7<0056>-3<004C>-5<0057>-2<004C>-5<0052>-7<005100030052>1<004900030048>-10<0044>-9<0046>4<004B0003003A>-7<0030>-4<002C00030046>4<004F>-5<0044>-10<0056>-14<005600030051>-7<0044>-4<0050>-9<004800030057>-1<005200030047>-7<0048>-10<0057>-3<0048>-10<0055>-12<0050>-2<004C0051>-9<00480003004C>-3<004900030057>-2<004B>-9<004800030046>4<004B>-7<0044>-4<0055>-8<0044>-9<0046>-25<0057>-3<0048>-10<0055>-26<00560003>]TJ
win32
 appear. 
The special character 
 tells the 
match 
operator to begin looking at the beginning of the string. The 
revised code appears here:
It is also possible to simplify the preceding code by taking advantage of command aliases and 
[<0057>-2<004B>-9<004800030056>-4<004C0050>-4<0053>-8<004F004C>-5<00C0>-7<0048>-16<00470003>]TJ
Where-Object
 syntax. In the code that follows, 
gwmi 
is an alias for the 
Get-WmiObject 
cmdlet. The 
symbol is an alias for the 
Where-Object 
cmdlet, and the 
name 
property from the 
returned 
ManagementClass 
objects is examined from each instance crossing the pipeline to see if the 
regular expression pattern match appears. The shorter syntax appears here:
Only a few WMI classes are returned from the preceding command. It is now time to query each 
WMI class to determine the WMI classes that might be useful. It is certainly possible to choose a 
class from the list and to query it directly. If you use the 
gwmi 
alias for the 
Get-WmiObject 
cmdlet, 
this doesn22t require much typing. Here is the command to return BIOS information from the local 
computer:
  
[<002C>-1<00570003004C>-5<005600030044>-4<004F>-8<0056>-12<005200030053>-13<0052>-7<0056>-14<0056>-3<004C0045>-8<004F>-7<004800030057>-1<005200030053>-6<004C0053>-13<0048>-11<004F004C0051>-9<004800030057>-2<004B>-9<004800030055>-12<0048>-12<0056>-5<0058>1<004F>-6<0057>-19<005600030052004900030057>-2<004B>-9<004800030054>-3<0058>-7<0048>-10<0055>-47<005C000300570052000300C0>-2<0051>-11<00470003003A>-7<0030>-4<002C00030046>4<004F>-5<0044>-10<0056>-14<0056>-12<0048>-12<005600030057>-1<005200030044000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<004700030057>-1<005200030054>-3<0058>-7<0048>-10<0055>-47<005C0003>]TJ
the WMI classes. The long form of the command using complete cmdlet names appears follow
ing. Keep in mind that this is a single-line command that appears here on two different lines for 
readability. 
The short form of the command uses the alias 
gwmi
 for 
Get-WmiObject
 for the 
Where-Object
[<0046>4<0050>-11<0047>1<004F>-7<0048>-10<0057>-20<000F00030044>-10<00560003005A>-2<0048>-11<004F>1<004F00030044>-11<005600030057>-2<004B>-9<004800030056>-4<004C0050>-4<0053>-8<004F004C>-5<00C0>-7<0048>-16<00470003>]TJ
Where-Object 
syntax, and 
 for the 
ForEach-Object
 cmdlet. The 
shortened command appears here:
Exploring WMI objects
1.
Open the Windows PowerShell console. 
2.
Use the 
Get-WmiObject
[<00030046>4<0050>-11<0047>1<004F>-7<0048>-10<0057000300570052000300C0>-2<0051>-11<00470003003A>-7<0030>-4<002C00030046>4<004F>-5<0044>-10<0056>-14<0056>-12<0048>-12<005600030057>-2<004B>-7<0044>-3<005700030046>1<0052>-7<00510057>-19<0044>-2<004C005100030057>-2<004B>-9<004800030056>-16<0057>-2<0055>-12<004C0051>-11<004A0003>]TJ
bios 
in their name. 
Use the alias 
gwmi 
for the 
Get-WmiObject 
cmdlet. The command appears here: 
3.
Use the 
Get-WmiObject 
cmdlet to query the 
Win32_Bios
 WMI class. This command appears 
here:
4.
Store the results of the previous query in a variable named 
. Press the up arrow key to 
retrieve the previous command instead of retyping everything. This command appears here:
5.
View the contents of the 
 variable. This command appears here:
6.
Pipeline the results stored in the 
 variable to the 
Get-Member 
cmdlet. To do this, press the 
up arrow key to retrieve the previous command. Use the alias 
gm 
instead of typing the com
plete 
Get-Member 
cmdlet name. The command appears here:
Pipeline the results of the 
Get-WmiObject 
command to the 
Get-Member 
cmdlet. To do this, 
press the up arrow key twice to retrieve the previous command. Use the alias 
gm 
instead of 
typing the complete 
Get-Member 
cmdlet name. The command appears here:
8.
Compare the results of the two 
Get-Member 
commands; the output should be the same.
Use the 
Select-Object 
cmdlet to view all of the information available from the 
Win32_Bios
 WMI 
class; choose all of the properties by using the 
 wildcard character. Use the alias 
select 
for the 
Select-Object 
cmdlet. The command appears here:
10.
This completes the procedure.
Querying WMI
In 
most situations, when you use WMI, you are performing some sort of query. Even when you are 
going to set a particular property, you still need to execute a query to return a data set that enables 
[<005C>1<0052>-9<005800030057005200030053>-13<0048>-10<0055>-38<0049>-7<0052>-7<0055>-12<005000030057>-2<004B>-9<0048000300460052>-7<0051>-1<00C0>-7<004A>-3<0058>1<0055>-8<0044>-3<0057>-2<004C>-5<0052>-7<0051>-14<00110003000B>-3<00240003>]TJ
data set
 includes the data that comes back to you as the result of 
a query27that is, it is a set of data. In this section, you will examine use of the 
Get-WmiObject 
cmdlet 
to query WMI.
Using the 
Get-WmiObject
[<00030046>-8<0050>-9<0047>4<004F>-4<0048>-11<005700030057005200030054>-1<0058>-3<0048>-7<0055>-44<005C0003004400030056>-3<0053>-10<0048>-13<0046>-4<004C>2<00C000460003003A>-1<0030>4<002C00030046>-9<004F>-5<0044>-16<0056>-10<0056>]TJ
1.
Connect 
to WMI by using the 
Get-WmiObject 
cmdlet.
2.
Specify a valid WMI class name to query. 
3.
Specify a value for the namespace; omit the
-namespace
 parameter to use the default root
cimv2 namespace.
4.
Specify a value for the 
-computername 
parameter; omit the 
-computername 
parameter to use 
the default value of 
localhost.
Windows PowerShell makes it easy to query WMI. In fact, at its most basic level, the only thing 
required is 
gwmi 
the alias for the 
Get-WmiObject 
cmdlet and the WMI class name, and possibly the 
name of the WMI namespace if using a non-default namespace. An example of this simple syntax 
appears here, along with the associated output:
As shown in the 23Exploring WMI objects24 procedure in the preceding section, however, there are 
more properties available in the 
Win32_Bios
[<0003003A>-7<0030>-4<002C00030046>4<004F>-5<0044>-10<0056>-14<005600030057>-2<004B>-7<0044>-4<005100030057>-2<004B>-9<0048000300C0>-14<0059>1<004800030047004C>-5<0056>-4<0053>-8<004F>-5<0044>2<005C>1<0048>-16<00470003004C005100030057>-2<004B>-9<004800030052>-10<0058>-5<0057>-2<0053>-9<0058>-5<00570003004D>-2<0058>-6<0056>-16<00570003>]TJ
shown. The command displays this limited output because a custom view of the 
Win32_Bios
 class 
[<0047>-7<0048>-9<00C0>-2<0051>-9<0048>-16<00470003004C005100030057>-2<004B>-9<004800030037>53<005C>-12<0053>-13<0048>-12<0056>-19<0011>-8<0053>-8<0056>8<0014>-21<005B>-8<0050>-4<004F000300C0>-2<004F>-7<004800030055>-12<0048>-12<0056>-3<004C>-5<0047>-7<0048>-12<00560003004C005100030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F0003004B>-10<0052>-7<0050>-9<004800030047004C0055>-12<0048>-16<0046>-25<0057>-1<0052>-7<0055>-47<005C00030052>-7<00510003005C>1<0052>-9<0058>1<005500030056>-21<005C>-12<0056>-16<0057>-3<0048>-10<0050>-14<00110003>]TJ
  
The following command uses the 
Select-String 
cmdlet to search the 
[<0037>53<005C>-12<0053>-13<0048>-12<0056>-19<0011>-8<0053>-8<0056>8<0014>-21<005B>-8<0050>-4<004F000300C0>-2<004F>-7<004800030057>-1<005200030056>-12<0048>-16<00480003004C>-3<004900030057>-2<004B>-9<0048>-10<0055>-12<00480003004C>-5<00560003>]TJ
any reference to the WMI class 
Win32_Bios
In Figure 10-5, the results of several 
Select-String 
commands are displayed when a special format 
exists for a particular WMI class. The last query, for the 
Win32_CurrentTime
 WMI class, does not return 
any results, indicating that no special formatting exists for this class. 
FIGURE 10-5
The results of using 
Select-String
[<00030057>-5<005200030056>-17<0048>-14<0044>-8<0055>-14<0046>-1<004B00030057>-7<004B>-14<004800030049>-11<0052>-11<0055>-16<0050>-11<0044>-8<00570003003B>-11<0030>-9<002F000300C0>-7<004F>-11<0048>-17<005600030049>-12<0052>-11<005500030056>-8<0053>-17<0048>-21<0046>-1<004C>-7<0044>-9<004F00030049>-12<0052>-11<0055>-16<0050>-11<0044>-8<0057>-35<0057>-7<004C>-5<0051>-15<004A0003004C>-5<0051>-13<0056>-20<0057>-7<0055>-22<0058>-10<0046>-29<0057>-7<004C>-10<0052>-11<0051>-13<0056>-24<0011>]TJ
The previous 
Select-String 
queries indicate that there is special formatting for the 
Win32_Bios
Win32_DesktopMonitor
Win32_Service
Win32_Process
, and
Win32_Processor
 WMI classes. The 
[<0037>53<005C>-12<0053>-13<0048>-12<0056>-19<0011>-8<0053>-8<0056>8<0014>-21<005B>-8<0050>-4<004F000300C0>-2<004F>-7<0048000300460052>-7<00510057>-19<0044>-2<004C0051>-9<00560003004C0051>2<0049>-7<0052>-7<0055>-12<0050>-7<0044>-3<0057>-2<004C>-5<0052>-7<005100030057>-2<004B>-7<0044>-3<005700030057>-3<0048>-11<004F>1<004F>-8<00560003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F0003004B>-9<0052>-3<005A00030057>-1<005200030047004C>-5<0056>-4<0053>-8<004F>-5<0044>2<005C0003004400030053>-9<0044>-4<0055>-41<0057>-2<004C>-3<0046>-2<0058>1<004F>-5<0044>-4<00550003>]TJ
WMI class. When an instance of the 
Win32_Bios
 WMI class appears, Windows PowerShell uses the 
DefaultDisplayPropertySet 
[<00460052>-7<0051>-1<00C0>-7<004A>-3<0058>1<0055>-8<0044>-3<0057>-2<004C>-5<0052>-7<005100030057005200030047004C>-5<0056>-4<0053>-8<004F>-5<0044>2<005C00030052>-7<0051>-4<004F>-12<005C000300C0>-14<0059>1<004800030053>-7<0055>-12<0052>-7<0053>-13<0048>-10<0055>-41<0057>-2<004C>-5<0048>-12<00560003000B>-17<004C>-3<0049000300440003>]TJ
<view>
[<000300460052>-7<005100C0>-7<004A>-3<0058>1<0055>-8<0044>-3<0057>-2<004C>-5<0052>-7<00510003004C>-5<00560003>]TJ
[<0047>-7<0048>-9<00C0>-2<0051>-9<0048>-16<0047>-9<000F0003004C>-5<005700030057>-2<0055>-17<0058>1<0050>-4<0053>-8<005600030057>-2<004B>-9<004800030047>-7<0048>-8<0049>-9<0044>-6<0058>1<004F>-6<005700030053>-7<0055>-12<0052>-7<0053>-13<0048>-10<0055>-41<0057>-38<005C00030056>-12<0048>-10<0057>8<000C>14<001100030037>-7<004B>-9<004800030053>-13<0052>-7<0055>-41<0057>-2<004C>-5<0052>-7<005100030052>1<004900030057>-2<004B>-9<004800030037>53<005C>-12<0053>-13<0048>-12<0056>-19<0011>-8<0053>-8<0056>8<0014>-21<005B>-8<0050>-4<004F000300C0>-2<004F>-7<004800030057>-2<004B>-7<0044>-3<005700030047>-6<0048>-10<0057>-19<0044>-2<004C004F>-8<005600030057>-2<004B>-9<0048>-12<0056>-12<0048000300C0>-14<0059>1<00480003>]TJ
properties appears here:
[<0037>-7<004B>-9<0048000300460052>-7<0050>-4<0053>-8<004F>-7<0048>-10<0057>-3<004800030057>-38<005C>-12<0053>-13<004800030047>-7<0048>-9<00C0>-2<0051>-2<004C>-5<0057>-2<004C>-5<0052>-7<005100030049>-7<0052>-7<005500030057>-2<004B>-9<00480003>]TJ
Win32_Bios 
WMI class appears in Figure 10-6.
FIGURE 10-6
[<0037>-12<004B>-14<004800030037>47<005C>-17<0053>-17<0048>-17<0056>-24<0011>-13<0053>-12<0056>3<0014>-26<005B>-13<0050>-9<004F000300C0>-7<004F>-11<004800030046>-4<0052>-11<0051>-5<0057>-7<0055>-17<0052>-11<004F>-12<00560003005A>-13<004B>-7<004C>-8<0046>-1<004B00030053>-11<0055>-17<0052>-11<0053>-17<0048>-15<0055>-45<0057>-7<004C>-10<0048>-17<005600030044>-8<0055>-17<004800030047>-5<004C>-10<0056>-8<0053>-12<004F>-9<0044>-3<005C>-4<0048>-21<004700030049>-11<0052>-11<005500030056>-8<0053>-17<0048>-21<0046>-1<004C>-9<00C0>-10<00460003003A>-12<0030>-9<002C00030046>-1<004F>-9<0044>-15<0056>-18<0056>-17<0048>-17<0056>-24<0011>]TJ
Special formatting instructions for the 
Win32_Bios
 WMI class indicate that there is an alternate 
property set available27a property set that is in addition to the 
DefaultDisplayPropertySet. 
This 
additional property set, named 
PSStatus
, contains four properties. The four properties appear in the 
PropertySet 
description shown here: 
Finding the 
psstatus 
property set is more than a simple academic exercise, because the 
psstatus 
property set can be used directly with Windows PowerShell cmdlets such as 
Select-Object 
select
 is an 
alias,
 Format-List 
 is an alias,
and 
Format-Table 
 is an alias. The following commands illustrate 
the technique of using the 
psstatus 
property set to control data output:
  
Unfortunately, you cannot use the alternate property set 
psstatus 
to select the properties via the 
property 
parameter. Therefore, the command that appears here fails:
Figure 10-7 shows the previous commands utilizing the 
psstatus 
property set, along with the asso
ciated output.
FIGURE 10-7
Use of the 
psstatus
 property set, illustrated by various commands.
Querying the 
Win32_Desktop
 class
1.
Open 
the Windows PowerShell console.
2.
Use the 
Get-WmiObject 
[<0046>4<0050>-11<0047>1<004F>-7<0048>-10<005700030057005200030054>-3<0058>-7<0048>-10<0055>-47<005C0003004C0051>2<0049>-7<0052>-7<0055>-12<0050>-7<0044>-3<0057>-2<004C>-5<0052>-7<005100030044>-4<0045>-13<0052>-9<0058>-5<005700030047>-7<0048>-12<0056>-4<004E>-35<0057>-1<0052>-7<005300030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-12<005600030056>-16<0057>-1<0052>-7<0055>-12<0048>-16<004700030052>-7<00510003005C>1<0052>-9<0058>1<00550003>]TJ
local computer. To do this, use the 
Win32_Desktop
 WMI class, and use the alias 
gwmi
 instead 
of typing 
Get-WmiObject. 
Select only the 
name 
property by using the 
Select-Object 
cmdlet. 
Use the alias 
select
 instead of typing the 
Select-Object 
cmdlet name. The command appears 
here:
3.
[<0028>-28<005B>2<0048>-16<0046>-2<0058>-5<0057>-3<004800030057>-2<004B>-9<0048000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<0047>-8<00110003003C>49<0052>-9<0058>1<005500030052>-9<0058>-5<0057>-2<0053>-9<0058>-5<00570003005A>-9<004C004F>1<004F00030052>-7<0051>-4<004F>-12<005C00030046>1<0052>-7<0051>-1<0057>-19<0044>-2<004C005100030057>-2<004B>-9<004800030051>-7<0044>-4<0050>-9<004800030052004900030048>-10<0044>-9<0046>4<004B00030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<004800030056>-16<0057>-1<0052>-7<0055>-12<0048>-16<004700030052>-7<00510003005C>1<0052>-9<0058>1<00550003>]TJ
machine. It will be similar to output that appears here:
4.
To retrieve the name of the screen saver, add the property 
ScreenSaverExecutable
 to the 
Select-Object 
command. This is shown here:
5.
Run the command. Your output will appear something like the following:
6.
To identify whether the screen saver is secure, you need to query the 
ScreenSaverSecure
 prop
[<0048>-10<0055>-41<0057>-38<005C>35<001100030037>-7<004B>-2<004C>-5<005600030050>-9<0052>-13<0047004C>-5<00C0>-7<0048>-16<00470003004F004C0051>-9<0048000300520049000300460052>-13<0047>-7<00480003004C>-5<005600030056>-4<004B>-9<0052>-3<005A>-9<00510003004B>-9<0048>-10<0055>-12<0048>5<001D>]TJ
Run the command. Your output will appear something like the following:
8.
To identify the screen saver timeout values, you need to query the 
ScreenSaverTimeout
 prop
[<0048>-10<0055>-41<0057>-38<005C>35<001100030037>-7<004B>-9<004800030050>-9<0052>-13<0047004C>-5<00C0>-7<0048>-16<0047000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<004700030044>-4<0053>-7<0053>-13<0048>-10<0044>-4<0055>-26<00560003004B>-9<0048>-10<0055>-12<0048>5<001D>]TJ
Run the command. The output will appear something like the following:
10.
If you want to retrieve all the properties related to screen savers, you can use a wildcard aster
[<004C>-5<0056>-4<004E00030056>-13<0046>4<0055>-12<0048>-16<0048>-10<0051>-6<0010>4<00C0>-2<004F>-6<0057>-3<0048>-10<005500030053>-9<0044>-3<0057>-31<0057>-3<0048>-10<0055>-12<0051>-14<001100030027>-11<0048>-11<004F>-7<0048>-10<0057>-3<004800030057>-2<004B>-9<004800030057>-2<004B>-4<0055>-12<0048>-16<004800030056>-13<0046>4<0055>-12<0048>-16<0048>-10<005100030056>-17<0044>1<0059>1<0048>-10<005500030053>-7<0055>-12<0052>-7<0053>-13<0048>-10<0055>-41<0057>-2<004C>-5<0048>-12<005600030044>-4<0051>-11<004700030055>-12<0048>-10<0053>-8<004F>-5<0044>-9<0046>-2<004800030057>-2<004B>-9<0048>-10<00500003005A>-9<004C>-5<0057>-2<004B00030057>-2<004B>-9<00480003>]TJ
Screen* 
wildcard pattern. The revised command appears here:
11.
Run the command. The output will appear similar to that shown here:
  
This concludes the procedure.
Obtaining service information: step-by-step exercises
In this exercise, you will explore the use of the 
Get-Service 
cmdlet as you retrieve service information 
[<0049>-12<0055>-12<0052>-7<00500003005C>1<0052>-9<0058>1<0055000300460052>-7<0050>-4<0053>-9<0058>-5<0057>-3<0048>-10<0055>43<00110003003C>49<0052>-9<00580003005A>-9<004C004F>1<004F00030056>-12<0052>-7<0055>-41<005700030044>-4<0051>-11<0047000300C0>-2<004F>-5<0057>-3<0048>-10<005500030057>-2<004B>-9<004800030052>-10<0058>-5<0057>-2<0053>-9<0058>-5<005700030049>-12<0055>-12<0052>-7<005000030057>-2<004B>-9<00480003>]TJ
Get-Service
 cmdlet. In the second 
exercise, you will use WMI to retrieve similar information. You should compare the two techniques for 
ease of use and completeness of data.
Obtaining Windows Service information by using the 
Get-Service
 cmdlet
1.
Start the Windows PowerShell console.
2.
From the Windows PowerShell prompt, use the 
Get-Service
 cmdlet to obtain a listing of all the 
services and their associated status. This is shown here:
A partial listing of the output from this command is shown here:
3.
Use the 
Sort-Object
 cmdlet to sort the listing of services. Specify the 
status
 property for 
Sort-Object
. To sort the data based upon status, pipeline the results of the 
Get-Service
 cmdlet 
into the 
Sort-Object
 cmdlet. Use the 
sort
 alias for the 
Sort-Object
 cmdlet to reduce the amount 
of typing. The results are shown here:
Partial output from this command is shown here:
4.
Use the 
Get-Service
 cmdlet to produce a listing of services. Sort the resulting list of services 
alphabetically by name. To do this, use the 
Sort-Object
 cmdlet to sort the listing of services by 
the 
name
 property. Pipeline the object returned by the 
Get-Service
 cmdlet into the 
Sort-Object
cmdlet. The command to do this, using the 
sort
 alias for 
Sort-Object
, is shown here:
Partial output of this command is shown here:
5.
Use the 
Get-Service
 cmdlet to produce a listing of services. Sort the objects returned by both 
the name and the status of the service. The command to do this is shown here:
Partial output of this command is shown here:
6.
Use the 
Get-Service
 cmdlet to return an object containing service information. Pipeline the 
resulting object into a 
Where-Object
 cmdlet. Look for the word 
server 
in the display name. The 
resulting command is shown here:
  
The resulting listing is shown here:
Use the 
Get-Service
 cmdlet to retrieve a listing of service objects. Pipeline the resulting objects 
to the 
Where-Object
 cmdlet. Use the 
-equals
 argument to return an object that represents the 
Bits service. The code that does this is shown here:
8.
Press the up arrow key to retrieve the previous command that retrieves the Bits service. Store 
the resulting object in a variable called 
. This code is shown here:
Pipeline the object contained in the 
 variable into the 
Get-Member
 cmdlet. You can use the 
 alias to simplify typing. This code is shown here:
10.
Using the object contained in the 
 variable, obtain the status of the Bits service. The code 
that does this is shown here:
11.
If the Bits service is running, then stop it. To do so, use the 
Stop-Service
 cmdlet. Instead of 
pipelining the object in the 
 variable, you use the 
-inputobject
 argument from the 
Stop-
Service 
cmdlet. The code to do this is shown here:
12.
If the Bits service stops, then use the 
Start-Service
 cmdlet instead of the 
Stop-Service
 cmdlet. 
Use the 
-inputobject
 argument to supply the object contained in the 
 variable to the cmdlet. 
This is shown here:
13.
Query the 
status
 property of the object contained in the 
[<00030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<004800030057>-1<0052000300460052>-7<005100C0>-2<0055>-12<005000030057>-2<004B>-7<0044>-3<005700030057>-2<004B>-9<004800030025>-6<004C>-5<0057>-19<00560003>]TJ
service22s status has changed. This is shown here:
ote
If you are working with a service that has its startup type set to Disabled, then 
PowerShell will not be able to start it and will return an error. If you do not have admin 
rights, Windows PowerShell will be unable to stop the service.
This concludes this step-by-step exercise. 
In the following exercise, you will explore the use of the 
Win32_Service 
WMI class by using the 
Get-
WmiObject 
cmdlet as you retrieve service information from your computer.
Using WMI for service information
1.
Start the Windows PowerShell console.
2.
From the Windows PowerShell prompt, use the 
Get-WmiObject 
cmdlet to obtain a listing of all 
the services and their associated statuses. Use the 
gwmi
 alias instead of typing 
Get-WmiObject. 
The command to do this is shown here:
A partial listing of the output from this command is shown here:
  
3.
Use the 
Sort-Object
 cmdlet to sort the listing of services. Specify the 
state
 property for the 
Sort-Object
 cmdlet. To sort the service information based upon the 
state
 of the service, pipe
line the results of the 
Get-WmiObject
 cmdlet into the 
Sort-Object
 cmdlet. Use the 
sort
 alias for 
the 
Sort-Object
 cmdlet to reduce the amount of typing. The results are shown here:
Partial output from this command is shown here:
4.
Use the 
Get-WmiObject 
cmdlet to produce a listing of services. Sort the resulting list of ser
vices alphabetically by 
DisplayName
. To do this, use the 
Sort-Object
 cmdlet to sort the listing 
of services by the 
name
 property. Pipeline the object returned by the 
Get-WMIObject 
cmdlet 
into the 
Sort-Object
 cmdlet. The command to do this, using the 
sort
 alias for 
Sort-Object
, is 
shown here:
Notice that the output does not appear to actually be sorted by the 
DisplayName 
property. 
[<0037>-7<004B>-9<0048>-10<0055>-12<004800030044>-4<0055>-12<004800030057>-35<005A>-2<005200030053>-7<0055>-12<0052>-7<0045>-8<004F>-7<0048>-10<0050>-9<005600030044>-3<00570003005A>-1<0052>-7<0055>-12<004E>-26<001100030037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<00570003004C>-5<005600030057>-2<004B>-7<0044>-3<005700030057>-2<004B>-9<0048>-10<0055>-12<00480003004C>-5<00560003004400030047004C>-3<0049>-39<0049>-7<0048>-10<0055>-12<0048>-10<0051>-9<0046>-2<004800030045>-13<0048>-10<0057>-35<005A>-2<0048>-16<0048>-10<005100030057>-2<004B>-9<00480003>]TJ
name 
prop
erty and the 
DisplayName 
property. The second problem is that the 
DisplayName 
property is 
not displayed by default. Partial output of this command appears here:
5.
Produce a service listing that is sorted by 
DisplayName. 
This time, use the 
Select-Object 
cmdlet 
to display both the 
state 
and the 
DisplayName 
properties. Use the 
gwmi
sort
, and 
select
aliases to reduce typing. The command appears here: 
Sample of the output from the previous command appears here:
6.
Use the 
Get-WmiObject
 cmdlet to return an object containing service information. 
Pipeline the resulting object into a 
Where-Object
 cmdlet. Look for the word 
server 
in the 
display name. The resulting command is shown here:
The resulting listing is shown here:
  
Use the 
Get-WMIObject
 cmdlet to retrieve a listing of service objects. Pipeline the resulting 
object to 
Where-Object
. Use the
-equals
 argument to return an object that represents the Bits 
service. The code that does this is shown here:
8.
Press the up arrow key to retrieve the command that retrieves the Bits service. Store the 
resulting object in a variable called 
. This code is shown here:
Pipeline the object contained in the 
 variable into the 
Get-Member
 cmdlet. You can use the 
 alias to simplify typing. This code is shown here:
10.
Using the object contained in the 
 variable, obtain the status of the Bits service. The code 
that does this is shown here:
11.
If the Bits service is running, then stop it. To do so, use the 
StopService
 method. Instead of 
pipelining the object in the 
 variable, you use dotted notation. The code to do this is shown 
here:
12.
If the Bits service stops, you will see a 
ReturnValue 
of 0. If you see a 
ReturnValue 
of 2, it means 
that access is denied, and you will need to start the Windows PowerShell console with admin 
rights to stop the service. Query the 
state
 property of the object contained in the 
 variable 
[<0057>-1<0052000300460052>-7<005100C0>-2<0055>-12<005000030057>-2<004B>-7<0044>-3<005700030057>-2<004B>-9<004800030025>-6<004C>-5<0057>-19<005600030056>-12<0048>-10<0055>-47<0059>-12<004C>-3<0046>-2<0048>-1<00B7>26<005600030056>-16<0057>-19<0044>-3<0057>-8<0058>-6<00560003004B>-7<0044>-10<005600030046>4<004B>-7<0044>-4<0051>-11<004A>-7<0048>-16<0047>-8<001100030037>-7<004B>-2<004C>-5<00560003004C>-5<005600030056>-4<004B>-9<0052>-3<005A>-9<00510003004B>-9<0048>-10<0055>-12<0048>5<001D>]TJ
13.
If you do not refresh the object stored in the 
 variable, the original state
is reported27
regardless of whether the command has completed or not. To refresh the data stored in the 
 variable, run the WMI query again. The code to do this appears here:
14.
If the Bits service is stopped, go ahead and start it back up by using the 
StartService 
method. 
The code to do this appears here:
This concludes this step-by-step exercise. 
Chapter 10 quick reference
Do this
Find the default WMI namespace on a computer
Use the Advanced tab in the WMI Control Properties 
dialog box.
Browse WMI classes on a computer
Use the
 Get-WmiObject
 cmdlet with the 
-list
 argument. 
Use a wildcard for the WMI class name.
Make a connection into WMI
Use the 
Get-WmiObject
 cmdlet in your script.
Use a shortcut name for the local computer
Use a dot . and assign it to the variable holding the com
puter name in the script.
Find detailed information about all WMI classes on a 
computer
Use the Platform SDK information found in the MSDN 
library 
http://msdn2.microsoft.com/en-us/library/
aa394582.aspx
List all the namespaces on a computer
Query for a class named 
__NameSpace
List all providers installed in a particular namespace
Query for a class named 
__Win32Provider
List all the classes in a particular namespace on a 
computer
Use the 
-list
 argument for the 
Get-WmiObject
 cmdlet.
Quickly retrieve similarly named properties from a class
Use the 
Select-Object
 cmdlet and supply a wildcard aster
isk 
 for the 
-property
 argument.
CHAPTER 11
Querying WMI
fter completing this chapter, you will be able to:
Understand the different methods for querying WMI.
Use the 
Select-Object
 cmdlet to create a custom object from a WMI query.
[<0026>2<0052>-7<005100C0>-7<004A>-3<0058>1<0055>-12<004800030057>-2<004B>-9<004800030010>]TJ
[<00C0>-1<004F0057>7<0048>1<0055>]TJ
 argument to limit information returned by WMI.
[<0026>2<0052>-7<005100C0>-7<004A>-3<0058>1<0055>-12<004800030057>-2<004B>-9<00480003003A>-7<0030>-4<002C00030054>-3<0058>-7<0048>-10<0055>-47<005C00030057005200030055>-12<0048>-10<0057>-8<0058>1<0055>-12<005100030056>-12<0048>-11<004F>-7<0048>-16<0046>-25<0057>-3<0048>-16<004700030053>-7<0055>-12<0052>-7<0053>-13<0048>-10<0055>-41<0057>-2<004C>-5<0048>-12<0056>-19<0011>]TJ
Use the 
Where-Object
[<00030046>4<0050>-11<0047>1<004F>-7<0048>-10<0057000300570052000300C0>-2<004F>-6<0057>-3<0048>-10<00550003004C0051>2<0049>-7<0052>-7<0055>-12<0050>-7<0044>-3<0057>-2<004C>-5<0052>-7<005100030055>-12<0048>-10<0057>-8<0058>1<0055>-12<0051>-9<0048>-16<004700030049>-12<0055>-12<0052>-7<00500003003A>-7<0030>-4<002C>-16<0011>]TJ
[<002F>-10<0048>-8<0059>1<0048>-10<0055>-8<0044>-11<004A>-7<004800030045>-13<0052>-2<0057>-2<004B0003004B>-7<0044>-4<0055>-13<0047>-9<005A>-3<0044>-4<0055>-12<004800030046>4<004F>-5<0044>-10<0056>-14<0056>-12<0048>-12<005600030044>-4<0051>-11<004700030056>-21<005C>-12<0056>-16<0057>-3<0048>-10<005000030046>4<004F>-5<0044>-10<0056>-14<0056>-12<0048>-12<005600030057>-1<0052000300460052>-7<005100C0>-7<004A>-3<0058>1<0055>-12<004800030050>-7<0044>-9<0046>4<004B>-2<004C0051>-9<0048>-12<0056>-19<0011>]TJ
After network administrators and consultants get their hands on a couple of Microsoft Windows 
Management Instrumentation WMI scripts, they begin to arrange all kinds of scenarios for use. This 
is both a good thing and a bad thing. The good thing is that WMI is powerful technology that can 
quickly solve many real problems. The bad thing is that a poorly written WMI script can adversely 
affect the performance of everything it touches27from client machines logging on to the network 
[<0049>-7<0052>-7<005500030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030057>-2<004C0050>-9<004800030057>-1<00520003004B>-6<0058>-7<004A>-7<00480003004C0051>2<0049>-12<0055>-8<0044>-10<0056>-16<0057>-2<0055>-17<0058>-5<0046>-25<0057>-8<0058>1<0055>-12<004800030056>-12<0048>-10<0055>-47<0059>1<0048>-10<0055>-26<005600030057>-2<004B>-7<0044>-3<005700030053>-7<0055>-12<0052>-1<0059>-12<004C>-5<0047>-7<004800030057>-2<004B>-9<004800030045>-9<0044>-10<0056>-3<004C>-5<005600030049>-7<0052>-7<005500030050>-2<004C>-5<0056>-14<0056>-4<004C>-5<0052>-7<0051>-6<0010>-18<0046>4<0055>-12<004C>-5<0057>-2<004C>-3<0046>-14<0044>-4<004F00030051>-9<0048>-10<0057>-35<005A>-2<0052>-7<0055>-12<004E>12<0048>-16<00470003>]TJ
applications. This chapter will examine the fundamentals of querying WMI in an effective man
ner. Along the way, it will examine some of the more useful WMI classes and add to your Windows 
PowerShell skills. 
Alternate ways to connect to WMI
Chapter 10, 23Using WMI,24 examined the basics of the 
Get-WmiObject
[<00030046>4<0050>-11<0047>1<004F>-7<0048>-10<005700030057005200030052>-7<0045>-5<0057>-19<0044>-2<004C005100030056>-3<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<00460003>]TJ
information. When you make a connection to WMI, it is important to realize there are default values 
utilized for the WMI connection.
The default values are stored in the following registry location: HKEY_LOCAL_MACHINE 
SOFTWAREMicrosoftWBEMScripting. There are two keys: DEFAULT IMPERSONATION LEVEL and 
DEFAULT NAMESPACE. 
DEFAULT IMPERSONATION LEVEL is set to a value of 3, which means that 
WMI impersonates the logged-on user and therefore uses the logged-on user name, credentials, and 
rights. The default namespace is Rootcimv2, which means that for many of the tasks you will need to 
  
perform, the classes are immediately available. Use the 
Get-ItemProperty 
cmdlet to verify the default 
[<003A>-7<0030>-4<002C000300460052>-7<005100C0>-7<004A>-3<0058>1<0055>-8<0044>-3<0057>-2<004C>-5<0052>-7<005100030052>-7<0051000300440003004F>-6<0052>-13<0046>-14<0044>-4<004F000300460052>-7<0050>-4<0053>-9<0058>-5<0057>-3<0048>-10<0055>44<001100030037>-7<004B>-2<004C>-5<0056000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<004700030044>-4<0053>-7<0053>-13<0048>-10<0044>-4<0055>-26<00560003004B>-9<0048>-10<0055>-12<0048>5<001D>]TJ
In Figure 11-1, the 
Get-ItemProperty 
cmdlet retrieves the default WMI settings on a local computer. 
Next, the 
Invoke-Command 
cmdlet retrieves the same information from a remote computer named 
[<003A>-16<004C0051>-10<001B>-12<0010>-31<0026>7<0014>-10<001100030025>-12<0052>-2<0057>-2<004B00030057>-2<004B>-9<0048000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<0047>-6<005600030044>-4<0051>-11<004700030057>-2<004B>-9<004800030052>-10<0058>-5<0057>-2<0053>-9<0058>-5<005700030049>-12<0055>-12<0052>-7<005000030057>-2<004B>-9<0048000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<0047>-6<005600030044>-4<0053>-7<0053>-13<0048>-10<0044>-4<00550003004C005100030057>-2<004B>-9<0048000300C0>-7<004A>-3<0058>1<0055>-12<0048>-7<0011>]TJ
FIGURE 11-1
Use of the 
Get-ItemProperty
 cmdlet to verify default WMI settings.
In reality, a default namespace of root/cimv2 and a default impersonation level of
 impersonate 
are 
good defaults. The default computer is the local machine, so you do not need to specify the com
puter name when you are simply running against the local machine.
Use default WMI values to simplify your WMI scripts. If you only want to return infor
mation from the local machine, the WMI class resides in the default namespace, and you 
intend to impersonate the logged-on user, then the defaults are perfect. The defaults are 
[<00C00051>-7<00480003005A>-7<004B>-7<0048>-8<00510003005C>3<0052>-7<005800030044>-1<0055>-10<00480003004F>-5<0052>-11<004A>-4<004A>-5<0048>-14<004700030052>-4<005100030057>2<00520003004400030050>-4<0044>-7<0046>6<004B004C>2<0051>-7<00480003005A>-7<004C>-3<0057004B00030044>-1<005100030044>-7<0046>2<0046>3<0052>-7<0058>3<0051>2<005700030057004B>-5<0044>-1<00570003004B>-4<0044>-8<005600030053>-11<0048>-8<0055>-9<0050004C>-3<0056>-12<0056>-1<004C>-3<0052>-5<005100030057>2<005200030044>-7<0046>2<0046>1<0048>-10<0056>-12<00560003>]TJ
the information you need. The following command illustrates obtaining BIOS information 
from the local computer.
SmallBios.ps1
When you use the 
Get-WmiObject
 cmdlet and only supply the name of the WMI class, then you are 
relying on the default values: default computer, default WMI namespace, and default impersonation 
level. The 
SmallBios.ps1 script produces the information shown here, which is the main information 
you would want to see about the BIOS: the version, name, serial number, and maker.
The amazing thing is that you can obtain such useful information by typing about 15 characters 
on the keyboard using tab completion. Doing this in VBScript would require much more typing. 
However, if you want to retrieve different information from the 
WIN32_Bios
 WMI class, or if you 
would like to see a different kind of output, then you will need to work with the
Format
 cmdlets, 
Select-Object
, or 
Out-GridView
. This technique appears in the procedure.
etrieving properties
1.
Open the Windows PowerShell console.
2.
Use the 
Get-WmiObject
 cmdlet to retrieve the default properties of the 
WIN32_
ComputerSystem
 WMI class:
The results, with the default properties, are shown here:
3.
If you are only interested in the name and the make and model of the computer, then you 
will need to pipeline the results into a 
Format-List
 cmdlet and choose only the properties you 
wish. This revised command is shown here:
The results are shown here:
4.
If you are interested in all the properties from the 
WIN32_ComputerSystem
 class, you have 
[<0056>-12<0048>-8<0059>1<0048>-10<0055>-8<0044>-4<004F00030052>-7<0053>-5<0057>-2<004C>-5<0052>-7<0051>-9<0056>-19<001100030037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<00570003004C>-5<005600030057>-1<005200030058>-6<0056>-12<004800030057>-2<004B>-9<004800030058>1<005300030044>-4<0055>-12<0055>-12<0052>-3<005A0003004E>12<0048>-7<005C00030044>-4<0051>-11<004700030050>-9<0052>-13<0047004C>-3<0049>-48<005C00030057>-2<004B>-9<00480003>]TJ
Format-List
 cmdlet. Instead 
of choosing three properties, use an 
asterisk *. This revised command is shown here:
  
5.
The results from this command are shown following. Notice, however, that although the 
[<0055>-12<0048>-12<0056>-5<0058>1<004F>-6<0057>-19<005600030056>-12<0048>-16<0048>-10<00500003004C0050>-4<0053>-7<0055>-12<0048>-12<0056>-14<0056>-3<004C>-12<0059>1<004800030044>-3<0057000300C0>-2<0055>-26<0056>-16<0057>-20<000F00030057>-2<004B>-9<0048>-7<005C00030054>-3<0058004C>-3<0046>4<004E>-14<004F>-12<005C00030047>-7<0048>-16<004A>-7<0048>-10<0051>-9<0048>-10<0055>-8<0044>-3<0057>-3<00480003004C00510057>-1<005200030056>-12<0048>-16<0048>-10<0050>-2<004C0051>-11<004A>1<004F>-12<005C00030050>-9<0048>-10<0044>-4<0051>-2<004C0051>-11<004A>1<004F>-7<0048>-12<0056>-14<005600030047>1<0055>-12<004C>-12<0059>1<0048>-11<004F>-9<00110003>]TJ
Note the number of classes that begin with double underscore, such as 
__CLASS
. These are 
system properties that get attached to every WMI class when they are created. Although use
ful to WMI gurus, they are less exciting to normal network administrators.
6.
To remove the system properties from the list, use the up arrow key to retrieve the 
Get-WmiObject win32_computersystem | Format-List *
 command. Delete the asterisk in the 
Format-List
 command and replace it with an expression that limits the results to property 
names that are returned to only those that begin with the letters 
 through 
. This command 
is shown here:
To see a listing of properties that begin with the letter 
, use the up arrow key to retrieve the 
Get-WmiObject win32_computersystem | Format-List [a-z]*
 command and change the 
Format-
List
 cmdlet to retrieve only properties that begin with the letter 
. To do this, substitute 
 for 
[a-z]*
. The revised command is shown here:
8.
Retrieve a listing of all the properties and their values that begin with either the letter 
 or 
the letter 
 from the 
WIN32_computersystem
 WMI class. Use the up arrow key to retrieve the 
previous 
Get-WmiObject win32_computersystem | Format-List D*
 command. Use a comma to 
separate the 
 from the previous command. The revised command is shown here:
This concludes the procedure.
After you use the 
 cmdlet for a while, you may get tired of using tab 
completion and having to type 
. It may be easier to use the default alias of 
gwmi
. This alias can be discovered by using the following command:
  
Working with disk drives
1.
Open the Windows PowerShell console.
2.
Use the 
gwmi
[<00030044>-4<004F004C>-2<0044>-10<005600030057>-1<005200030055>-12<0048>-10<0057>-2<0055>-12<004C>-5<0048>-8<0059>1<004800030057>-2<004B>-9<004800030047>-7<0048>-8<0049>-9<0044>-6<0058>1<004F>-6<005700030053>-6<0055>-12<0052>-7<0053>-13<0048>-10<0055>-41<0057>-2<004C>-5<0048>-12<005600030049>-7<0052>-7<005500030048>-10<0044>-9<0046>4<004B00030047>1<0055>-12<004C>-12<0059>1<004800030047>-7<0048>-9<00C0>-2<0051>-9<0048>-16<004700030052>-7<00510003005C>1<0052>-9<0058>1<005500030056>-21<005C>-12<0056>-16<0057>-3<0048>-10<0050>-14<001100030037>55<00520003>]TJ
do this, use the
WIN32_LogicalDisk
 WMI class. This command is shown here:
The results of the
gwmi win32_logicaldisk
 command are shown here:
3.
To limit the disks returned by the WMI query to only local disk drives, you can supply a value 
of 3 for the 
DriveType
 property. Use the up arrow key to retrieve the previous command. Add 
the 
DriveType
 property to the
[<0010>-5<00C0>-1<004F0057>7<0048>1<0055>]TJ
 parameter of the 
Get-WMIObject
 cmdlet with a value of 3. 
This revised command is shown here:
The resulting output from the 
[<004A>-5<005A>-7<0050>-3<004C0003005A>-6<004C>-2<0051>10<0016>1<0015>-27<0042>-30<004F>-3<0052>-8<004A>-1<004C>-2<0046>5<0044>-5<004F>-3<0047>-6<004C>2<0056>4<004E00030010>-12<00C0>-8<004F>-7<00570048>-6<005500030047>-5<0055>-6<004C>-3<0059>2<0048>-14<0057>-34<005C>-20<0053>-10<0048>8<0020>35<0016>]TJ
 command is shown 
here:
4.
[<0032>-11<0053>-13<0048>-10<005100030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F0003002C>-8<0036002800030052>-7<005500030056>-12<0052>-7<0050>-9<004800030052>-2<0057>-2<004B>-9<0048>-10<005500030056>-13<0046>4<0055>-12<004C0053>-5<005700030048>-16<0047004C>-5<0057>-1<0052>-7<0055>39<000F00030044>-3<0051>-11<004700030056>-17<0044>1<0059>1<004800030057>-2<004B>-9<0048000300C0>-2<004F>-7<004800030044>-10<00560003>]TJ
<yourname>
Logical Disk.ps1.
5.
Use the up arrow key in PowerShell to retrieve the 
[<004A>-5<005A>-7<0050>-3<004C0003005A>-6<004C>-2<0051>10<0016>1<0015>-27<0042>-30<004F>-3<0052>-8<004A>-1<004C>-2<0046>5<0044>-5<004F>-3<0047>-6<004C>2<0056>4<004E00030010>-12<00C0>-8<004F>-7<00570048>-6<005500030047>-5<0055>-6<004C>-3<0059>2<0048>-14<0057>-34<005C>-20<0053>-10<0048>8<0020>35<0016>]TJ
command. Highlight it with your mouse and press Enter.
6.
Paste the command into the 
<yourname>
LogicalDisk.ps1 script.
Declare a variable called 
$objDisk
 at the top of your script. This command is shown here:
8.
Use the 
$objDisk
 variable to hold the object returned by the command you copied from your 
PowerShell console. As you are planning on saving the script, replace the 
gwmi
 alias with the 
actual name of the cmdlet. The resulting command is shown here:
Use the 
Measure-Object
 cmdlet to retrieve the minimum and the maximum values for the 
freespace
 property. To do this, pipeline the previous object into the 
Measure-Object
 cmdlet. 
Specify
 freespace
 for the
-property
 argument, and use the 
-minimum
 and 
-maximum
 switches. 
Use the pipe character to break your code into two lines. This command is shown here:
10.
Print out the resulting object that is contained in the 
$objDisk
 variable. This command is 
shown here:
The resulting printout on my computer is shown here:
11.
To dispose of the empty properties, pipeline the previous command into a 
Select-Object
 cmd
let. Select the property and the 
minimum
 and 
maximum
 properties. Use the pipe character to 
break your code into multiple lines The revised command is shown here:
12.
Save and run the script. Notice how the output is spread over the console. To tighten up the 
display, pipeline the resulting object into the
Format-Table
 cmdlet. Use the 
-autosize
 switch. 
The revised command is shown here:
  
13.
Save and run the script. The output on my computer is shown here:
ote
The
 WMI class property 
 can have a value of 0 to 6 
inclusive. The most useful of these values are as follows: 3 local disk, 4 network drive, 5 
compact disk, and 6 RAM disk.
ell me everything about everything!
[<003A004B>-9<0048>-10<005100030051>-9<0052>-1<0059>-12<004C>-3<0046>-2<0048>-12<0056000300C0>-2<0055>-26<0056>-16<00570003005A>-9<0055>-12<004C>-5<0057>-3<00480003003A>-7<0030>-4<002C00030056>-13<0046>4<0055>-12<004C0053>-5<0057>-19<0056>-20<000F00030057>-2<004B>-9<0048>-7<005C00030051>-9<0048>-10<0044>-4<0055>-12<004F>-12<005C00030044>-4<004F>1<004F00030045>-13<0048>-16<004A004C005100030045>-3<005C00030044>-10<0056>-4<004E>-14<004C0051>-11<004A00030049>-7<0052>-7<005500030048>-8<0059>1<0048>-10<0055>-47<005C00030053>-7<0055>-12<0052>-7<0053>-13<0048>-10<0055>-41<0057>-38<005C00030049>-12<0055>-12<0052>-7<0050>-10<0003>]TJ
every instance of a class. That is, the queries will essentially say, 23Tell me everything about every 
process.24 This is also referred to as the infamous 
 query. This approach can often return 
an overwhelming amount of data, particularly when you are querying a class such as installed 
software or processes and threads. Rarely would one need to have so much data. Typically, when 
looking for installed software, you22re looking for information about a 
 software package.
There are, however, several occasions when you may want to use the 23Tell me everything 
about all instances of a particular class24 query, including the following:
During development of a script to see representative data
When troubleshooting a more directed query27for example, when you22re possibly trying 
[<0057>-1<0052000300C0>-2<004F>-6<0057>-3<0048>-10<005500030052>-7<005100030044000300C0>-7<0048>-11<004F>-8<004700030057>-2<004B>-7<0044>-3<005700030047>-5<0052>-13<0048>-12<005600030051>-9<0052>-2<005700030048>-6<005B>-8<004C>-5<0056>-16<0057>]TJ
When the returned items are so few that being more precise doesn22t make sense.
To return all information from all instances, perform the following steps:
1.
Make a connection to WMI by using the
 cmdlet.
2.
Use the 
query
 argument to supply the WQL query to the 
 cmdlet.
3.
In the query, use the 
 statement to choose everything: 
4.
In the query, use the 
 statement to indicate the class from which you wish to 
retrieve data. For example, 
In the next script, you22ll make a connection to the default namespace in WMI and return all the 
information about all the shares on a local machine. Reviewing the 
shares on your system is actually 
good practice, because in the past, numerous worms have propagated through unsecured shares, 
and you might have unused shares around. For example, a user might create a share for a friend and 
then forget to delete it. In the script that follows, called ListShares.ps1, all the information about 
shares present on the machine are reported. The information returned by ListShares.ps1 will include 
the properties for the 
WIN32_Share
 class that appear in Table 11-1.
ListShares.Ps1
TABLE 11-1
Win32_Share
 properties
Data type
Property
Meaning
Boolean
AllowMaximum
Allow maximum number of connec
tions? True or false
String 
Caption
Short one-line description
String 
Description
Description
Datetime 
InstallDate
When the share was created 
optional
Uint32 
MaximumAllowed
Number of concurrent connec
tions allowed only valid when 
AllowMaximum
 is set to 
false
String 
Name
Share name
String 
Path
Physical path to the share
String 
Status
Current status of the share degraded, 
OK, or failed
Uint32 
Type
[<0037>44<005C>-19<0053>-20<004800030052>-7<004900030055>-19<0048>-19<0056>-19<0052>-16<0058>-6<0055>-17<0046>-9<004800030056>-11<004B>-14<0044>-11<0055>-19<0048>-23<00470003000B>20<0047>-7<004C>-12<0056>-11<004E>-40<000F000300C0>-9<004F>-14<0048>-16<000F0003>]TJ
printer, etc.
Quick check
Q.
What is the syntax for a query that returns all properties of a given WMI object?
Select * from <WMI class name>
 returns all properties of a given object.
Q.
What is one reason for using 
Select *
 instead of a more directed query?
In troubleshooting, 
Select *
 is useful because it returns any available data. In addition, 
Select 
 is useful for trying to characterize the data that might be returned from a query.
  
Selective data from all instances
The next level of sophistication from using 
Select *
 is to return only the properties you are interested 
[<004C0051>-14<001100030037>-7<004B>-2<004C>-5<00560003004C>-5<00560003004400030050>-9<0052>-7<0055>-12<004800030048>-8<0049>-41<00C0>-5<0046>4<004C>-5<0048>-10<0051005700030056>-16<0057>-2<0055>-8<0044>-3<0057>-3<0048>-16<004A>-12<005C00030057>-2<004B>-7<0044>-4<005100030055>-12<0048>-10<0057>-8<0058>1<0055>-12<0051>-2<004C0051>-11<004A00030048>-8<0059>1<0048>-10<0055>-47<005C>-41<0057>-2<004B>-2<004C0051>-11<004A00030049>-12<0055>-12<0052>-7<00500003004400030046>4<004F>-5<0044>-10<0056>-14<0056>-19<001100030029>-3<0052>-7<00550003004C0051>-9<0056>-16<0057>-19<0044>-4<0051>-9<0046>-2<0048>-9<000F0003004C005100030057>-2<004B>-9<004800030053>-7<0055>-12<0048>-8<0059>-12<004C>]TJ
ous example, you entered 
Select *
 and were returned a lot of data you may not necessarily have been 
interested in. Suppose you want to know only what shares are on each machine.
[<0037>55<005200030056>-12<0048>-11<004F>-7<0048>-16<0046>-25<005700030056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<004600030047>-3<0044>-3<0057>-19<0044>-14<000F00030053>-13<0048>-10<0055>-38<0049>-7<0052>-7<0055>-12<005000030057>-2<004B>-9<004800030049>-7<0052>-6<004F>1<004F>-7<0052>-3<005A>-9<004C0051>-11<004A00030056>-16<0057>-3<0048>-10<0053>-8<0056>-5<001D>]TJ
1.
Make a connection to WMI by using the 
Get-WmiObject
 cmdlet.
2.
Use the 
-query
 argument to supply the WMI query to the 
Get-WmiObject
 cmdlet.
3.
In the query, use the 
Select
[<00030056>-16<0057>-19<0044>-3<0057>-3<0048>-10<0050>-9<0048>-10<0051005700030057005200030046>4<004B>-9<0052>-13<0052>-7<0056>-12<004800030057>-2<004B>-9<004800030056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<004600030053>-7<0055>-12<0052>-7<0053>-13<0048>-10<0055>-41<0057>-38<005C0003005C>1<0052>-9<005800030044>-4<0055>-12<00480003004C0051>-1<0057>-3<0048>-10<0055>-12<0048>-12<0056>-16<0057>-3<0048>-16<00470003004C0051>-39<00B3>]TJ
for example, 
Select name.
4.
In the query, use the 
From
 statement to indicate the class from which you want to retrieve 
data27for example, 
From Win32_Share.
[<0032>-11<0051>-4<004F>-12<005C00030057>-35<005A>-2<005200030056>-4<0050>-7<0044>-4<004F>1<004F00030046>4<004B>-7<0044>-4<0051>-11<004A>-7<0048>-12<00560003004C005100030057>-2<004B>-9<00480003002F>-9<004C>-5<0056>-16<0057>-14<0036>1<004B>-7<0044>-4<0055>-12<0048>-12<0056>-19<0011>-8<0053>-8<0056>8<001400030056>-13<0046>4<0055>-12<004C0053>-5<005700030044>-4<0055>-12<004800030055>-12<0048>-16<0054>-3<0058004C0055>-12<0048>-16<004700030057005200030048>-10<0051>-7<0044>-4<0045>-8<004F>-7<00480003004A>-3<0044>-4<0055>-12<0051>-9<0048>-10<0055>-12<004C0051>-11<004A00030056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<004600030047>-3<0044>-3<0057>-19<00440003>]TJ
through the WMI script. In place of the asterisk in the 
Select
 statement assigned at the beginning of 
the script, substitute the property you want. In this case, only the name of the shares is required.
The second change is to eliminate all unwanted properties from the 
Output
 section. The strange 
thing here is the way that PowerShell works. In the 
Select
 statement, you selected only the 
name
[<0053>-7<0055>-12<0052>-7<0053>-13<0048>-10<0055>-41<0057>-38<005C>35<00110003002B>-7<0052>-3<005A>-2<0048>-8<0059>1<0048>-10<0055>39<000F0003004C>-3<00490003005C>1<0052>-9<00580003005A>-2<0048>-10<0055>-12<004800030057>-1<005200030053>-7<0055>-12<004C0051005700030052>-9<0058>-5<005700030057>-2<004B>-9<004800030055>-12<0048>-12<0056>-6<0058>1<004F>-6<0057>-19<00560003005A>-9<004C>-5<0057>-2<004B>-9<0052>-9<0058>-5<005700030049>-18<0058>1<0055>-41<0057>-2<004B>-9<0048>-10<005500030055>-12<0048>-9<00C0>-2<0051>-9<0048>-10<0050>-9<0048>-10<00510057>-20<000F0003005C>1<0052>-9<00580003005A>-2<0052>-9<0058>1<004F>-8<004700030055>-12<0048>-10<0057>-2<0055>-12<004C>-5<0048>-8<0059>1<00480003>]TJ
unwanted system properties as well. By using the 
Format-List
 cmdlet and selecting only the property 
[<0051>-7<0044>-4<0050>-9<0048>-9<000F0003005C>1<0052>-9<005800030048>-11<004F004C0050>-2<004C0051>-7<0044>-3<0057>-3<004800030057>-2<004B>-9<004800030058>1<0051005A>-3<0044>-4<0051>-1<0057>-3<0048>-16<004700030048>-6<005B>5<0046>-2<0048>-12<0056>-14<0056>-19<00110003002B>-9<0048>-10<0055>-12<00480003004C>-5<005600030057>-2<004B>-9<004800030050>-9<0052>-13<0047004C>-5<00C0>-7<0048>-16<00470003002F>-9<004C>-5<0056>-16<0057>-2<0031>-5<0044>-4<0050>-9<0048>-20<0032>-11<0051>-4<004F>-12<005C>-23<0036>1<004B>-7<0044>-4<0055>-12<0048>-12<0056>-19<0011>-8<0053>-8<0056>8<001400030056>-13<0046>4<0055>-12<004C0053>-5<0057>-16<001D>]TJ
List
ameOnlyShares.Ps1
Selecting multiple properties
If you22re interested in only a certain number of properties, you can use 
Select
 to specify that. All you 
[<004B>-7<0044>1<0059>1<004800030057>-1<005200030047>-5<00520003004C>-5<005600030056>-12<0048>-10<0053>-9<0044>-4<0055>-8<0044>-3<0057>-3<004800030057>-2<004B>-9<004800030053>-7<0055>-12<0052>-7<0053>-13<0048>-10<0055>-41<0057>-2<004C>-5<0048>-12<005600030045>-3<005C0003004400030046>1<0052>-7<0050>-4<0050>-7<0044>-14<0011000300360058>1<0053>-7<0053>-13<0052>-7<0056>-12<00480003005C>1<0052>-9<005800030055>-17<0058>1<005100030057>-2<004B>-9<004800030053>-7<0055>-12<0048>-16<0046>-2<0048>-16<0047004C0051>-11<004A00030056>-12<0046>4<0055>-12<004C0053>-5<005700030044>-4<0051>-11<0047000300C0>-2<0051>-11<0047000300440003>]TJ
number of undocumented shares on one of the servers27you might want a little bit more informa
tion, such as the path to the share and how many people are allowed to connect to it. By default, 
when a share is created, the 23maximum allowed24 bit is set, which basically says anyone who has rights 
to the share can connect. This can be a problem, because if too many people connect to a share, 
they can degrade the performance of the server. To preclude such an eventuality, I always specify 
a maximum number of connections to the server. The commands to list these properties are in the 
ListNamePathShare.ps1 script, which follows.
ote
I occasionally see people asking whether spaces or capitalization in the property list 
[<0050>-5<0044>-1<0057>-29<0057>-1<0048>-8<0055>46<00110003002C>1<005100030049>-7<0044>-7<0046>-23<0057>-18<000F0003005A>-6<004B>-7<0048>-8<00510003002C000300C0>1<0055>-24<0056>-14<005700030056>-14<0057>-17<0044>-2<0055>-39<0057>-1<0048>-14<00470003005A>-6<0055>-9<004C>-3<0057004C>2<0051>-9<004A00030056>-10<0046>6<0055>-9<004C>2<0053>-3<0057>-17<005600030044>-2<0051>-9<004700030057004B>-7<0048>-5<005C00030049>-7<0044004C>2<004F>-5<0048>-14<0047>-7<000F0003002C00030052>3<0049>-40<0057>-1<0048>-8<005100030050>-7<0052>-11<0047>2<004C>-2<00C0>-5<0048>-14<004700030056>-1<0053>-7<0044>-7<0046>7<004C>2<0051>-9<004A0003>]TJ
and capitalization in feeble attempts to make the script work. Spacing and capitalization 
do 
not matter
 for WMI properties.
List
amePathShare.ps1
Working with running processes
1.
Open the Windows PowerShell console.
2.
Use the 
Get-Process
 cmdlet to obtain a listing of processes on your machine. 
A portion of the results from the command is shown here:
3.
To return information about the Explorer process, use the
-name
 argument. This command is 
shown here:
The results of this command are shown here:
4.
Use the 
Get-WmiObject
 cmdlet to retrieve information about processes on the machine. Pipe 
the results into the 
more
 function, as shown here:
  
5.
Notice that the results go on for page after page. The last few lines of one of those pages is 
shown here:
6.
To retrieve information only about the Explorer.exe process, use the 
[<0010>-5<00C0>-1<004F0057>7<0048>1<0055>]TJ
 argument and 
specify that the 
name
 property is equal to 
Explorer.exe
. The revised command is shown here:
To display a table that is similar to the one produced by 
Get-Process,
 use the up arrow key to 
retrieve the previous
Get-WmiObject
 command. Copy it to the clipboard by selecting it with 
the mouse and then pasting it into Notepad or some other script editor. Pipeline the results 
into the 
Format-Table
 cmdlet and choose the appropriate properties, as shown following. 
Saving this command into a script makes it easier to work with later. It also makes it easier to 
write the script by breaking the lines instead of requiring you to type one long command. I 
called the script ExplorerProcess.ps1, and it is shown here:
This concludes the working with running processes procedure.
Caution
When using the 
 argument of the 
 cmdlet, pay attention to 
the use of 
quotation marks. The 
 argument is surrounded by double quotation marks. 
The value being supplied for the property is surrounded by single quotes27for example, 
-Filter "name='explorer.exe'"
. This can cause a lot of frustration if not followed exactly.
dding logging
1.
Open the Windows PowerShell console.
2.
Use the alias for the 
Get-WmiObject
 cmdlet and supply the 
WIN32_logicalDisk
 class as the 
argument to it. Use the 
[<0055>-12<0048>-16<0047004C0055>-12<0048>-16<0046>-25<0057>-2<004C>-5<0052>-7<005100030044>-4<0055>-12<0055>-12<0052>-3<005A0003000B>58<0021>83<000C00030057005200030055>-12<0048>-16<0047004C0055>-12<0048>-16<0046>-25<005700030052>-9<0058>-5<0057>-2<0053>-9<0058>-5<005700030057005200030044000300C0>-2<004F>-7<004800030046>-14<0044>-4<004F>1<004F>-7<0048>-16<0047>]TJ
 Diskinfo.txt. 
[<0033>3<004F>-5<0044>-9<0046>-2<004800030057>-2<004B>-2<004C>-5<0056000300C0>-2<004F>-7<00480003004C005100030057>-2<004B>-9<004800030026>-6<001D>3<003F0030>-8<005C>-41<0057>-3<0048>-12<0056>-16<005700030049>-7<0052>-6<004F>-8<0047>-7<0048>-10<0055>44<001100030037>-7<004B>-2<004C>-5<0056000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<00470003004C>-5<005600030056>-4<004B>-9<0052>-3<005A>-9<00510003004B>-9<0048>-10<0055>-12<0048>5<001D>]TJ
3.
Use the up arrow key and retrieve the previous command. This time, change the class name to 
WIN32_OperatingSystem
[<00030044>-4<0051>-11<004700030046>-14<0044>-4<004F>1<004F00030057>-2<004B>-9<004800030057>-3<0048>-6<005B>-37<0057000300C0>-2<004F>-7<00480003>]TJ
OSinfo.txt. This command is shown here:
4.
Use the up arrow key and retrieve the previous 
gwmi WIN32_OperatingSystem 
command. 
Change the WMI class to 
WIN32_ComputerSystem
 and use two redirection arrows >> 
[<0057>-1<005200030046>-14<0044>-6<0058>-6<0056>-12<004800030057>-2<004B>-9<004800030052>-10<0058>-5<0057>-2<0053>-9<0058>-5<005700030057005200030044>-4<0053>-7<0053>-13<0048>-10<0051>-11<004700030057>-1<005200030057>-2<004B>-9<0048000300C0>-2<004F>-7<0048>-7<001100030038>-3<0056>-12<004800030031>-7<0052>-2<0057>-3<0048>-10<0053>-9<0044>-11<004700030057>-1<005200030052>-7<0053>-13<0048>-10<005100030057>-2<004B>-9<0048000300C0>-2<004F>-7<0048>-9<000F00030045>-9<0058>-5<00570003004C0051>-9<0046>4<004F>-4<0058>-7<0047>-7<004800030057>-2<004B>-9<00480003>]TJ
Get-WmiObject 
gwmi
 command, separated by a semicolon. This is illustrated next. I22ve con
tinued the command to the next line using the 
grave accent character ` for readability.
This concludes the procedure.
Quick check
Q.
[<0037>55<005200030056>-12<0048>-11<004F>-7<0048>-16<0046>-25<005700030056>-3<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<004600030053>-7<0055>-12<0052>-7<0053>-13<0048>-10<0055>-41<0057>-2<004C>-5<0048>-12<005600030049>-12<0055>-12<0052>-7<005000030044>-3<005100030052>-7<0045>-6<004D>-5<0048>-16<0046>-25<0057>-20<000F0003005A>-8<004B>-7<0044>-3<005700030047>-5<00520003005C>1<0052>-10<005800030051>-9<0048>-16<0048>-16<004700030057005200030047>-5<005200030052>-7<005100030057>-2<004B>-9<00480003>]TJ
 line?
[<003C>49<0052>-9<005800030051>-9<0048>-16<0048>-16<004700030057005200030056>-12<0048>-10<0053>-9<0044>-4<0055>-8<0044>-3<0057>-3<004800030057>-2<004B>-9<004800030056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<004600030053>-7<0055>-12<0052>-7<0053>-13<0048>-10<0055>-41<0057>-2<004C>-5<0048>-12<005600030052004900030044>-4<005100030052>-7<0045>-6<004D>-5<0048>-16<0046>-25<00570003005A>-9<004C>-5<0057>-2<004B0003004400030046>1<0052>-7<0050>-4<0050>-7<004400030052>-7<005100030057>-2<004B>-9<00480003>]TJ
 line of 
the 
 method.
Q.
To avoid error messages, what must be done when selecting individual properties on the 
Select
 line?
[<0028>3<0055>-12<0055>-12<0052>-7<0055>-26<005600030046>-15<0044>-4<005100030045>-13<004800030044>1<0059>1<0052>-4<004C>-5<0047>-7<0048>-16<00470003004C>-3<00490003005C>1<0052>-10<005800030050>-7<0044>-4<004E>12<004800030056>-6<0058>1<0055>-12<004800030048>-10<0044>-9<0046>4<004B00030053>-7<0055>-12<0052>-7<0053>-13<0048>-10<0055>-41<0057>-38<005C00030058>-6<0056>-12<0048>-16<00470003004C>-5<005600030056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-7<0048>-16<004700030052>-7<005100030057>-2<004B>-9<00480003>]TJ
[<004F004C0051>-9<0048>-7<001100030029>-3<0052>-7<005500030048>-6<005B>-6<0044>-4<0050>-4<0053>-8<004F>-7<0048>-9<000F00030057>-2<004B>-9<00480003003A>-7<0030>-4<002C00030054>-3<0058>-7<0048>-10<0055>-47<005C0003004C>-5<00560003004D>-2<0058>-6<0056>-16<00570003004F004C004E>12<00480003004400030053>-9<0044>-4<0053>-13<0048>-10<005500030045>-9<0044>-11<004A00030057>-2<004B>-7<0044>-3<00570003004A>-6<0048>-10<0057>-19<0056000300C0>-2<004F>1<004F>-7<0048>-16<00470003005A>-9<004C>-5<0057>-2<004B0003004C>-5<0057>-3<0048>-10<0050>-9<005600030057>-2<004B>-7<0044>-3<00570003>]TJ
are picked up using the 
 statement. If you do not put something in the paper bag, 
you cannot pull anything out of it. In the same manner, if you do not select a property, you 
cannot later print or sort on that property. This is exactly the way that an SQL 
 state
ment works.
Q.
What can you check for in your script if it fails with an 23object does not support this method 
or property24 error?
If you are getting this type of error message, you might want to ensure you have referenced 
the property in your 
 statement before to trying to work with it in an 
 section. 
In addition, you may want to check to ensure that the property actually exists.
[<0026>16<004B>3<00520052>2<0056>7<004C>13<0051>2<004A00030056>6<0053>-1<0048>-4<0046>5<004C>12<00C0>10<00460003004C>13<0051>-1<0056>1<0057>-8<0044>2<0051>3<0046>5<0048>-4<0056>]TJ
[<002C>-1<005100030050>-7<0044>-4<0051>4<005C00030056>-3<004C>-5<0057>-8<0058>-3<0044>-3<0057>-2<004C>-5<0052>-7<0051>-9<0056>-20<000F0003005C>1<0052>-10<00580003005A>-9<004C004F>1<004F0003005A>-3<0044>-4<005100570003005700520003004F004C0050>-2<004C>-5<005700030057>-2<004B>-9<004800030047>-3<0044>-3<0057>-19<00440003005C>1<0052>-9<005800030055>-12<0048>-10<0057>-8<0058>1<0055>-12<00510003005700520003004400030056>-3<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<00460003004C0051>-9<0056>-16<0057>-19<0044>-4<0051>-9<0046>-2<00480003005200490003004400030053>-9<0044>-4<0055>-41<0057>-2<004C>-3<0046>-2<0058>1<004F>-5<0044>-4<00550003>]TJ
WMI class in the data set. If you go back to your query and add a 
Where
 clause to the 
Select
 state
ment, you22ll be able to greatly reduce the amount of information returned by the query. Notice that 
  
in the value associated with the WMI query, you added a dependency that indicated you wanted only 
information with share name 
. This value is not case sensitive, but it must be surrounded with single 
quotation marks, as you can see in the 
WMI Query
 string in the following script. These 
single quota
tion marks are important because they tell WMI that the value is a string value and not some other 
programmatic item. Because the addition of the 
Where
 statement was the only thing you really added 
[<0057>-1<005200030057>-2<004B>-9<00480003002F>-9<004C>-5<0056>-16<0057>-14<0036>1<004B>-7<0044>-4<0055>-12<0048>-12<0056>-19<0011>-8<0053>-8<0056>8<001400030056>-13<0046>4<0055>-12<004C0053>-5<0057>-20<000F0003002C0003005A>-1<0052>-7<0051>9<00B7>-5<005700030053>-7<0055>-12<0052>-1<0059>-12<004C>-5<0047>-7<0048000300440003004F>-7<0052>-7<0051>-11<004A00030047004C>-5<0056>-13<0046>-2<0058>-6<0056>-14<0056>-3<004C>-5<0052>-7<005100030052004900030057>-2<004B>-9<00480003002F>-9<004C>-5<0056>-16<0057>-14<0036>1<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<0046>-7<0036>1<004B>-7<0044>-4<0055>-12<0048>-12<0056>-19<0011>-8<0053>-8<0056>8<001400030056>-13<0046>4<0055>-12<004C0053>-5<0057>-20<0011>]TJ
[<0037>55<00520003004F004C0050>-2<004C>-5<005700030056>-3<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<004600030047>-3<0044>-3<0057>-19<0044>-15<000F00030047>-5<005200030057>-2<004B>-9<004800030049>-7<0052>-6<004F>1<004F>-7<0052>-3<005A>-9<004C0051>-11<004A>8<001D>]TJ
1.
Make a connection to WMI by using the 
Get-WmiObject 
cmdlet.
2.
Use the 
Select
 statement in the 
WMI Query
[<00030044>-4<0055>-13<004A>-3<0058>1<0050>-9<0048>-10<0051005700030057005200030046>4<004B>-9<0052>-13<0052>-7<0056>-12<004800030057>-2<004B>-9<004800030056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<004600030053>-7<0055>-12<0052>-7<0053>-13<0048>-10<0055>-41<0057>-38<005C0003005C>1<0052>-9<005800030044>-4<0055>-12<00480003>]TJ
interested in27for example, 
Select name.
3.
Use the 
From
 statement in the 
WMI Query
 argument to indicate the class from which you 
want to retrieve data27for example, 
From Win32_Share.
4.
Add a 
Where
 clause in the 
WMI Query
 argument to further limit the data set that is returned. 
[<0030>-5<0044>-4<004E>12<004800030056>-6<0058>1<0055>-12<004800030057>-2<004B>-9<004800030053>-7<0055>-12<0052>-7<0053>-13<0048>-10<0055>-41<0057>-2<004C>-5<0048>-12<005600030056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-7<0048>-16<00470003004C005100030057>-2<004B>-9<00480003>]TJ
Where
[<00030046>4<004F>-5<0044>-6<0058>-6<0056>-12<004800030044>-4<0055>-12<0048000300C0>-2<0055>-26<0056>-16<005700030050>-9<0048>-10<0051>-1<0057>-2<004C>-5<0052>-7<0051>-9<0048>-16<00470003004C005100030057>-2<004B>-9<00480003>]TJ
Select
 state
ment27for example, 
Where name.
5.
Add an evaluation operator. You can use the 
equal sign =, or the
 less-than < or 
greater-than 
> symbols27for example, 
Where name = 'C$'
Eliminating the 
WMI Query
 argument
1.
Open the Windows PowerShell ISE or the Windows PowerShell script editor.
2.
Declare a variable called 
$strComputer
 and assign the WMI 
shortcut dot . to it. The shortcut 
dot means, 23Connect to the WMI service on the local computer.24 This command is shown here:
3.
Declare another variable and call it 
$wmiClass
. Assign the string 
WIN32_Share
 to the variable. 
This code is shown here:
4.
Declare a variable and call it 
$wmiFilter
. This variable will be used to hold the string that will 
[<00460052>-7<0051>-1<0057>-19<0044>-2<004C005100030057>-2<004B>-9<00480003003A>-7<0030>-4<002C000300C0>-2<004F>-6<0057>-3<0048>-10<005500030057>-1<005200030045>-13<004800030058>-6<0056>-12<0048>-16<00470003005A>-9<004C>-5<0057>-2<004B00030057>-2<004B>-9<00480003>]TJ
Get-WmiObject
 command. The variable and the 
associated string value are shown here:
5.
Declare a variable called 
objWMIServices
 and assign the object that is returned from the 
Get-WmiObject
 cmdlet to the variable. Specify the 
-computer
 argument and supply the value 
contained in the 
$strComputer
 variable to it. At the end of the line, use the 
grave accent char
acter ` to indicate line continuation. This line of code is shown here:
6.
Use the 
-class
 argument to supply the class name for the WMI query to the 
Get-WmiObject
cmdlet. The class name to query is contained in the 
$wmiClass
 variable. On the same line, 
use the 
[<0010>-5<00C0>-1<004F0057>7<0048>1<0055>]TJ
[<00030044>-4<0055>-13<004A>-3<0058>1<0050>-9<0048>-10<0051005700030057005200030056>-6<0058>1<0053>-7<0053>-8<004F>-12<005C00030057>-2<004B>-9<0048000300C0>-2<004F>-6<0057>-3<0048>-10<005500030056>-16<0057>-2<0055>-12<004C0051>-11<004A000300460052>-7<00510057>-19<0044>-2<004C0051>-9<0048>-16<00470003004C005100030057>-2<004B>-9<00480003>]TJ
$wmiFilter
 variable to the 
Get-WmiObject
 cmdlet. This line of code is shown here:
On the next line, use the object contained in the 
$objWMIServices
 variable and pipeline it to 
the 
Format-List
 cmdlet. Use the asterisk to tell the
Format-List
 cmdlet you wish to retrieve all 
properties. This line of code is shown here:
The completed script is shown here:
Sample output is shown here:
8.
If your results are not similar, compare your script with the 
ShareNoQuery.ps1 script.
This completes the procedure.
Utilizing an operator
One of the nice things you can do is use greater-than and less-than operators in your evaluation 
clause. What is so great about greater-than? It makes working with some alphabetic and numeric 
characters easy. If you work on a server that hosts home directories for users which are often named 
after their user names, you can easily produce a list of all home directories from the letters 
 through 
 by using the 
 operation. Keep in mind that 
D$
 is greater than 
, and if you really want shares 
that begin with the letter 
, then you can specify 23greater than or equal to E.24 This command would 
look like 
>='E'
  
ListGreater
hanShares.ps1
Identifying service accounts
1.
Open Notepad or some other script editor.
2.
[<0032>-11<005100030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<00570003004F004C0051>-9<0048>-9<000F00030047>-7<0048>-16<0046>4<004F>-5<0044>-4<0055>-12<00480003004400030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<004800030046>-14<0044>-4<004F>1<004F>-7<0048>-16<00470003>]TJ
$strComputer
. Use the dot . WMI shortcut to point 
to the local computer. This line of code is shown here:
3.
On the next line, declare a variable called 
$wmiNS
. Assign the string 
Rootcimv2
 to the vari
able. This will cause the WMI query to use the Rootcimv2 WMI namespace. This line of code is 
shown here:
4.
On the next line, declare a variable called 
$wmiQuery
. You will select only the 
startname
 prop
erty and the 
name
 property from the 
WIN32_Service
 WMI class. This line of code is shown 
here:
5.
On the next line, declare the 
$objWMIServices
 variable. Use the 
$objWMIServices
 variable to 
hold the object that comes back from using the 
Get-WmiObject
 cmdlet. Use the 
-computer
argument of the 
Get-WmiObject
 cmdlet to point the query to the local computer. To do this, 
use the dot . value that is contained in the variable 
$strComputer
. Because you will continue 
the command on the next line, use the grave accent character ` to tell Windows PowerShell 
to continue the command on the next line. The code that does this is shown here:
6.
Use the 
-namespace
 argument of the 
Get-WmiObject
 cmdlet to specify the WMI namespace 
[<0056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-7<0048>-16<00470003004C005100030057>-2<004B>-9<00480003>]TJ
$wmiNS
 variable. Use the 
-query
 argument of the 
Get- WmiObject
 cmdlet to 
specify the WMI query contained in the variable 
$wmiQuery
. This code is shown here:
Use the object that comes back from the 
Get-WmiObject
 cmdlet that is contained in the 
$objWMIServices
 variable and pipeline it into the 
Sort-Object
 cmdlet. Use the 
Sort-Object
[<0046>4<0050>-11<0047>1<004F>-7<0048>-10<005700030057005200030056>-12<0052>-7<0055>-41<005700030057>-2<004B>-9<00480003004F004C>-5<0056>-16<0057000300C0>-2<0055>-26<0056>-16<005700030045>-2<005C00030057>-2<004B>-9<00480003>]TJ
startName
 property and second by the 
name
 property. Place 
the pipe character at the end of the line because you will pipeline this object into another 
cmdlet. The code that does this is shown here:
8.
Finally, you will receive the pipelined object into the 
Format-List
[<00030046>4<0050>-11<0047>1<004F>-7<0048>-10<0057>-20<00110003003C>49<0052>-9<0058000300C0>-2<0055>-26<0056>-16<005700030049>-7<0052>-7<0055>-12<0050>-7<0044>-3<005700030057>-2<004B>-9<00480003>]TJ
list by the 
name
 property from 
WIN32_Service
 and then print out the 
startName
. This code is 
shown here:
The completed script is shown here:
Save the script as 
<yourname>
IdentifyServiceAccounts.ps1. Run the script. You should see 
output similar that shown here. If not, compare your script to the
 IdentifyServiceAccounts.ps1 
script.
This completes the procedure.
Logging service accounts
1.
Open the IdentifyServiceAccounts.ps1 script in Notepad or your favorite script editor. Save the 
script as 
<yourname>
IdentifyServiceAccountsLogged.ps1.
2.
Declare a new variable called 
$strFile
. This variable will be used for the 
[<0010>-5<00C0>-1<004F>4<0048>-4<0033>12<00440057>4<004B>]TJ
 argument of 
the 
Out-File
 cmdlet. Assign the string 
C:MytestServiceAccounts.txt
 to the 
$strFile
 variable. 
This code is shown here:
  
3.
Under the line of code where you declared the 
$strFile
 variable, use the 
New-Variable
 cmd
let to create a constant called 
constASCII
. When you assign the 
constASCII
 value to the 
-name
 argument of the 
New-Variable
 cmdlet, remember to leave off the dollar sign. Use 
the 
-value
 argument of the 
New-Variable
 cmdlet to assign a value of 
ASCII
 to the 
constASCII
constant. Use the 
-option
 argument and supply 
constant
 as the value for the argument. The 
completed command is shown here:
4.
At the end of the 
Format-List
 line, place the 
pipe character |. This is shown here:
5.
On the next line, use the 
Out-File
[<00030046>4<0050>-11<0047>1<004F>-7<0048>-10<005700030057005200030053>-7<0055>-12<0052>-13<0047>-3<0058>-5<0046>-2<004800030044>-4<005100030052>-9<0058>-5<0057>-2<0053>-9<0058>-5<0057000300C0>-2<004F>-7<0048000300460052>-7<00510057>-19<0044>-2<004C0051>-2<004C0051>-11<004A00030057>-2<004B>-9<004800030055>-12<0048>-12<0056>-5<0058>1<004F>-6<0057>-19<00560003>]TJ
of the previous command. Use the 
[<0010>-5<00C0>-1<004F>4<00480053>-3<00440057>4<004B>]TJ
[<00030044>-4<0055>-13<004A>-3<0058>1<0050>-9<0048>-10<0051005700030057005200030056>-4<0053>-13<0048>-16<0046>4<004C>-3<0049>-48<005C00030057>-2<004B>-9<004800030053>-9<0044>-3<0057>-2<004B00030044>-4<0051>-11<0047000300C0>-2<004F>-7<004800030051>-7<0044>-4<0050>-9<004800030057>-1<00520003>]TJ
create. Use the value contained in the 
$strFile
[<00030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<0048>-7<001100030037>55<005200030048>-10<0051>-9<0056>-5<0058>1<0055>-12<004800030057>-2<004B>-7<0044>-3<005700030057>-2<004B>-9<004800030052>-10<0058>-5<0057>-2<0053>-9<0058>-5<0057000300C0>-2<004F>-7<00480003004C>-5<005600030048>-10<0044>-10<0056>-3<004C004F>-12<005C0003>]TJ
read, use ASCII encoding. To do this, use the 
-encoding
 argument of the 
Out-File
 cmdlet and 
supply the value contained in the 
$constASCII
 variable. Use the grave accent character ` to 
indicate the command will continue to the next line. The resulting code is shown here:
6.
On the next line, use two arguments of the 
Out-File
[<00030046>4<0050>-11<0047>1<004F>-7<0048>-10<0057>-20<001100030037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030044>-4<0055>-12<004A>-3<0058>1<0050>-9<0048>-10<0051005700030057>-3<0048>-11<004F>1<004F>-8<00560003>]TJ
Out-File 
[<0057>-1<005200030044>-4<0053>-7<0053>-13<0048>-10<0051>-11<004700030057>-1<005200030044000300C0>-2<004F>-7<00480003004C>-3<00490003004C>-5<005700030048>-6<005B>-8<004C>-5<0056>-16<0057>-19<0056>-19<001100030037>-7<004B>-9<004800030056>-12<0048>-16<00460052>-7<0051>-11<004700030044>-4<0055>-13<004A>-3<0058>1<0050>-9<0048>-10<0051005700030057>-3<0048>-11<004F>1<004F>-8<00560003>]TJ
Out-File 
not to overwrite any existing 
[<00C0>-2<004F>-7<0048>-12<0056>-19<001100030037>-7<004B>-2<004C>-5<0056000300460052>-13<0047>-7<00480003004C>-5<005600030056>-4<004B>-9<0052>-3<005A>-9<00510003004B>-9<0048>-10<0055>-12<0048>5<001D>]TJ
[<0036>-13<0044>1<0059>1<004800030044>-4<0051>-11<004700030055>-17<0058>1<00510003005C>1<0052>-9<0058>1<005500030056>-13<0046>4<0055>-12<004C0053>-5<0057>-20<00110003003C>49<0052>-9<005800030056>-3<004B>-9<0052>-9<0058>1<004F>-8<004700030056>-12<0048>-16<004800030044000300C0>-2<004F>-7<004800030046>-15<0044>-4<004F>1<004F>-7<0048>-16<00470003>]TJ
ServiceAccounts.txt in your Mytest direc
[<0057>-1<0052>-7<0055>-47<005C00030052>-7<005100030047>1<0055>-12<004C>-12<0059>1<004800030026>-30<001100030037>-7<004B>-9<0048000300460052>-7<00510057>-3<0048>-10<00510057>-19<005600030052004900030057>-2<004B>-9<0048000300C0>-2<004F>-7<00480003005A>-9<004C004F>1<004F00030045>-13<004800030056>-4<004C0050>-2<004C004F>-5<0044>-4<005500030057>-1<005200030057>-2<004B>-9<004800030052>-10<0058>-5<0057>-2<0053>-9<0058>-5<005700030056>-3<004B>-9<0052>-3<005A>-9<00510003004B>-9<0048>-10<0055>-12<0048>5<001D>]TJ
8.
[<002C>-32<00490003005C>1<0052>-9<005800030047>-5<005200030051>-9<0052>-2<0057000300C0>-2<0051>-11<004700030052>-9<0058>-5<0057>-2<0053>-9<0058>-5<005700030056>-3<004C0050>-2<004C004F>-5<0044>-4<005500030057>-1<005200030057>-2<004B>-2<004C>-5<0056>-20<000F000300460052>-7<0050>-4<0053>-9<0044>-4<0055>-12<00480003005C>1<0052>-9<0058>1<005500030056>-13<0046>4<0055>-12<004C0053>-5<00570003005A>-9<004C>-5<0057>-2<004B0003002C>-10<0047>-7<0048>-10<0051>-1<0057>-2<004C>-3<0049>-48<005C>-23<0036>-11<0048>-10<0055>-47<0059>-12<004C>-3<0046>-2<0048>-12<0024004600460052>-9<0058>1<0051>-1<0057>-19<0056>-6<002F>-8<0052>-13<004A>-7<004A>-7<0048>-16<0047>-8<0011>-8<0053>-8<0056>8<0014>-10<0011>]TJ
This concludes the procedure.
Where is the 
where
To more easily modify the 
Where
 clause in a WMI query, substitute the 
Where
 clause with a vari
[<0044>-4<0045>-8<004F>-7<0048>-7<001100030037>-7<004B>-2<004C>-5<0056000300460052>-7<0051>-1<00C0>-7<004A>-3<0058>1<0055>-8<0044>-3<0057>-2<004C>-5<0052>-7<005100030046>-14<0044>-4<005100030045>-13<004800030050>-9<0052>-13<0047004C>-5<00C0>-7<0048>-16<00470003005700520003004C0051>-9<0046>4<004F>-4<0058>-7<0047>-7<0048000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<0047>-2<0010>-5<004F004C0051>-9<00480003004C0051>-4<0053>-9<0058>-5<005700030044>-10<00560003005A>-2<0048>-11<004F>1<004F>-9<001100030037>-7<004B>-2<004C>-5<00560003004C>-5<005600030056>-4<004B>-9<0052>-3<005A>-9<00510003004C005100030057>-2<004B>-9<00480003>]TJ
[<002F>-9<004C>-5<0056>-16<0057>-14<0036>1<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<0046>-2<003A>-10<004B>-9<0048>-10<0055>-12<0048>-7<0011>-8<0053>-8<0056>8<001400030056>-13<0046>4<0055>-12<004C0053>-5<0057>-20<000F0003005A>-9<004B>-2<004C>-3<0046>4<004B00030049>-7<0052>-6<004F>1<004F>-7<0052>-3<005A>-12<0056>-19<0011>]TJ
[<002F>2<004C>4<00560057>-2<0036>7<0053>-2<0048>-5<0046>3<004C>9<00C0>8<0046>10<003A>1<004B00480055>-4<0048>4<0011>2<00530056>18<0014>]TJ
Quick check
Q.
[<0037>55<00520003004F004C0050>-2<004C>-5<005700030057>-2<004B>-9<004800030056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<004600030047>-3<0044>-3<0057>-19<004400030055>-12<0048>-10<0057>-8<0058>1<0055>-12<0051>-9<0048>-16<004700030045>-2<005C0003004400030054>-3<0058>-7<0048>-10<0055>-47<005C>34<000F0003005A>-9<004B>-7<0044>-3<00570003003A>2<0034>-9<002F00030057>-3<0048>-16<0046>4<004B>-4<0051>-2<004C>-5<0054>-3<0058>-7<004800030046>-14<0044>-4<005100030045>-13<004800030058>-6<0056>-12<0048>-16<0047>14<0022>]TJ
 clause of the 
[<00030044>-4<0055>-13<004A>-3<0058>1<0050>-9<0048>-10<005100570003004C>-5<005600030059>1<0048>-10<0055>-47<005C00030053>-13<0052>-3<005A>-2<0048>-10<0055>-38<0049>-18<0058>1<004F0003004C00510003004F004C0050>-2<004C>-5<0057>-2<004C0051>-11<004A00030057>-2<004B>-9<004800030056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<004600030047>-3<0044>-3<0057>-19<00440003>]TJ
returned by a query.
Q.
What are three possible operators that can be employed in creating powerful 
clauses for WMI queries?
The equal sign = and the greater-than and the less-than symbols > and < can be used to 
evaluate the data before returning the data set.
Shortening the syntax
Windows PowerShell is a great tool to use interactively from the command line. The short syntax, 
cmdlet and function parameters, and shortcut aliases to common cmdlets all work together to create 
[<004400030053>-13<0052>-3<005A>-2<0048>-10<0055>-38<0049>-18<0058>1<004F000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<0047>-2<0010>-5<004F004C0051>-9<004800030048>-10<0051>4<0059>-12<004C0055>-12<0052>-7<0051>-4<0050>-9<0048>-10<00510057>-20<00110003003A>-7<0030>-4<002C00030044>-4<004F>-8<0056>-12<005200030045>-13<0048>-10<0051>-9<0048>-9<00C0>-7<0057>-19<005600030049>-12<0055>-12<0052>-7<005000030057>-2<004B>-2<004C>-5<005600030052>-7<0053>-5<0057>-2<004C0050>-2<004C>-7<005D>-18<0044>-3<0057>-2<004C>-5<0052>-7<0051>-14<001100030035>-3<0044>-3<0057>-2<004B>-9<0048>-10<005500030057>-2<004B>-7<0044>-4<005100030057>-37<005C>-12<0053>]TJ
ing complete WQL 
select 
statements and 
where 
clauses and storing them into a variable, and then 
using the 
query 
parameter from the 
Get-WMIObject
, you can use the 
-property 
and 
[<0010>-12<00C0>-8<004F>-7<00570048>-6<00550003>]TJ
parameters 
from the cmdlet. Use the 
-property 
parameter to replace the property names normally supplied as 
part of the 
select 
clause, and the 
[<0010>-5<00C0>-1<004F0057>7<0048>1<0055>]TJ
 parameter to replace the portion of code usually contained in 
the 
where 
clause of the WQL statement. 
  
Using the 
-property
 parameter
In the code that follows, the traditional WQL 
select 
statement retrieves the 
name
 and 
handle
properties from the 
WIN32_Process
 WMI class. The 
$query
 variable stores the WQL query, and the 
Get-WmiObject 
command utilizes this query to retrieve the desired information from the WMI class. 
You can obtain the exact same information in a single line by using the 
-class 
parameter to 
specify the WMI class name and the 
-property 
parameter to specify the two properties from the 
WIN32_Process
 WMI class to select. The revised code appears here: 
The difference between the two commands27the one that uses the WQL syntax and the one that 
supplies values directly for parameters27is not in the information returned, but rather the approach 
to using the 
Get-WmiObject 
cmdlet. For some people, the WQL syntax may be more natural, and for 
others, the use of direct parameters may be easier. On the back end, WMI treats both types of com
mands in the same manner. 
It is possible to shorten the length of the WQL type of command by supplying the WQL query 
directly to the 
query 
parameter. This technique appears here:
For short WQL queries, this technique is perfectly valid; however, for longer WQL queries that 
extend to multiple lines of code, it is more readable to store the query in a variable and supply the 
variable to the 
query 
parameter instead of using the query directly. 
Using the 
[<0010>-5<00C0>-6<004F>-2<00570048>-7<0055>]TJ
 parameter
The 
[<0010>-5<00C0>-1<004F0057>7<0048>1<0055>]TJ
 parameter of the 
Get-WmiObject 
cmdlet replaces the 
where 
clause of a WQL query. For 
example, in the code that follows, the WQL query chooses the 
name
 and 
handle
 properties from the 
WIN32_Process
 WMI class, where the name of the process begins with a letter greater than 
 in the 
alphabet
 The WQL query stored in the 
$query
 variable executes via the 
Get-WmiObject 
cmdlet, and 
the results pipeline to the 
Format-Table 
cmdlet, where the column22s name and handle are automati
[<0046>-14<0044>-4<004F>1<004F>-12<005C00030056>-3<004C>-7<005D>-1<0048>-16<0047000300570052000300C0>-8<005700030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F000300460052>-7<0051>-9<0056>-12<0052>-6<004F>-7<0048>-7<001100030037>-7<004B>-9<0048000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<0047>-6<005600030044>-4<0053>-7<0053>-13<0048>-10<0044>-4<00550003004B>-9<0048>-10<0055>-12<0048>5<001D>]TJ
To perform the exact same WMI query by using the parameters of the 
Get-WmiObject 
cmdlet 
instead of composing a WQL query, you simply use the property names that follow the 
select 
state
[<0050>-9<0048>-10<005100570003004C005100030057>-2<004B>-9<004800030052>-7<0055>-12<004C>-5<004A004C0051>-7<0044>-4<004F0003003A>1<0034>-9<002F00030054>-3<0058>-7<0048>-10<0055>-47<005C>34<000F00030044>-10<00560003005A>-2<0048>-11<004F>1<004F00030044>-11<005600030057>-2<004B>-9<0048000300C0>-2<004F>-5<0057>-3<0048>-10<005500030057>-2<004B>-7<0044>-3<005700030049>-7<0052>-6<004F>1<004F>-7<0052>-3<005A>-12<005600030057>-2<004B>-9<00480003>]TJ
where 
clause. The resulting com
mand appears here:
To display succinct output from the previous command, pipeline the results to the 
Format-Table 
cmdlet and select the two properties named in the 
properties 
parameter, and use the 
-autosize 
switch 
to tighten up the output in the Windows PowerShell console. The revised commands, along with the 
associated output, appear in Figure 11-2.
FIGURE 11-2
WMI output derived from a WQL query and use of the 
Get-WmiObject 
parameters.
Working with software: step-by-step exercises
[<002C>-1<005100030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030048>-6<005B>2<0048>-10<0055>-10<0046>4<004C>-5<0056>-12<0048>-9<000F0003005C>1<0052>-10<00580003005A>-9<004C004F>1<004F00030048>-7<005B>-8<0053>-8<004F>-7<0052>-7<0055>-12<004800030057>-2<004B>-9<004800030058>-6<0056>-12<00480003005200490003>]TJ
WIN32_product
 and classes provided by the Windows 
installer provider. In the second exercise, you will work with the environment provider.
[<00380056>-2<004C>4<0051>-7<004A0003003A>-1<0030>4<002C000300570052000300C0>3<0051>-7<00470003004C>4<0051>-10<0056>-8<0057>-17<0044>-7<004F>4<004F>-4<0048>-15<004700030056>-9<0052>-1<0049>-31<0057>-30<005A0044>-7<0055>-12<0048>]TJ
1.
Open the Windows PowerShell ISE or your favorite script editor.
2.
At the top of your script, declare a variable called 
$strComputer
. Assign the WMI shortcut dot 
character . to indicate you want to connect to WMI on your local machine. This line of code is 
shown here:
3.
On the next line, declare the variable 
$wmiNS
, which will be used to hold the WMI namespace 
for your query. Assign the string 
Rootcimv2
 to the variable. This line of code is shown here:
  
4.
On the next line, you will use the variable 
$wmiQuery
 to hold your WMI query. This query will 
select everything from the 
WIN32_product
 WMI class. This code is shown here:
5.
Because this query can take a rather long time to complete depending on the speed of your 
machine, CPU load, and number of installed applications, use the 
Write-Host
 cmdlet to inform 
the user that the script could take a while to run. As long as you22re using 
Write-Host
, let22s have 
a little fun and specify the 
-foregroundcolor
 argument of the 
Write-Host
 cmdlet, which will 
change the color of your font. I chose blue, but you can choose any color you wish. Use the
escape sequence to specify a new line at the end of your command. I used the grave accent 
character ` to break the line of code for readability, but this certainly is not necessary for you. 
The completed code is shown here:
6.
On the next line, use the variable 
$objWMIServices
 to hold the object that is returned by 
the 
Get-WmiObject
 cmdlet. Supply the 
-computer
 argument with the value contained in the 
$strComputer
 variable. Use the grave accent to continue to the next line. This code is shown 
here:
On the next line, use the
-namespace
 argument to specify the WMI namespace for the WMI 
query. Use the value contained in the 
$wmiNS
 variable. Use the 
-query
 argument to supply the 
WMI query contained in the 
$wmiQuery
 variable to the 
Get
WmiObject 
cmdlet. This line of 
code is shown here:
8.
Use the 
for 
statement to print out a progress indicator. Use the variable
 as the counter. 
Continue counting until the value of 
 is less than or equal to the value of the 
count
 prop
erty of the 
IwbemObjectSet
 object contained in the 
$objWMIServices
 variable. If you need to 
review the use of the 
for 
statement, refer to Chapter 5. The 
for
 statement code is shown here:
The code that will be run as a result of the 
for
 statement uses the 
Write-Host
 cmdlet. You will 
write 23/24 to the console. To keep the 
Write-Host
 cmdlet from writing everything on a new line, 
use the 
-noNewLine
[<00030044>-4<0055>-13<004A>-3<0058>1<0050>-9<0048>-10<00510057>-20<001100030037>55<005200030050>-7<0044>-4<004E>12<004800030057>-2<004B>-9<004800030053>-7<0055>-12<0052>-13<004A>1<0055>-12<0048>-12<0056>-14<005600030045>-9<0044>-4<005500030047004C>-3<0049>-39<0049>-7<0048>-10<0055>-12<0048>-10<0051005700030049>-12<0055>-12<0052>-7<005000030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030053>-7<0055>-12<0052>-7<0050>-4<0053>-5<0057>-20<000F00030058>-6<0056>-12<00480003>]TJ
the 
-foregroundcolor
 argument and specify an appropriate color. I chose red. This line of code 
is shown here:
10.
Use the 
Write-Host
 cmdlet to print out the number of installed applications on the machine. 
To make the value a little easier to read, use two 
 escape sequences to produce two blank 
lines from the progress indicator. This line of code is shown here:
11.
Save and run your script. Call it <yourname>CountInstalledApplications.ps1. You should see 
output similar to that shown here. If you do not, compare it with CountInstalledApplications.ps1.
12.
Now you22ll add a timer to your script to see how long it takes to execute. On the fourth line of 
your script, under the 
$wmiQuery
 line, declare a variable called 
$dteStart
 and assign the date 
object that is returned by the 
Get-Date
 cmdlet to it. This line of code is shown here:
13.
At the end of your script, under the last 
Write-Host
 command, declare a variable called 
$dteEnd
 and assign the date object that is returned by the 
Get-Date
 cmdlet to it. This line of 
code is shown here:
14.
Declare a variable called 
$dteDiff
 and assign the date object that is returned by the 
New-
TimeSpan
 cmdlet to it. Use the 
New-TimeSpan
 cmdlet to subtract the two date objects 
contained in the 
$dteStart
 and 
$dteEnd
 variables. The 
$dteStart
[<00030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<00480003005A>-9<004C004F>1<004F0003004A>-5<0052000300C0>-2<0055>-26<0056>-16<0057>-20<001100030037>-7<004B>-2<004C>-5<0056000300460052>-7<0050>]TJ
mand is shown here:
15.
Use the 
Write-Host
 cmdlet to print out the total number of seconds it took for the script to 
run. This value is contained in the 
totalSeconds
 property of the date object held in the 
$dteDiff
variable. This command is shown here:
  
16.
Save your script as 
<yourname>
CountInstalledApplicationsTimed.ps1. Run your script and 
compare your output with that shown here. If your results are not similar, then compare your 
script with the CountInstalledApplicationsTimed.ps1 script.
This concludes the exercise.
In the following exercise, you22ll explore Windows environment variables.
Windows environment variables
1.
Open Windows PowerShell.
2.
Use the 
Get-WmiObject
 cmdlet to view the common properties of the 
WIN32_Environment
WMI class. Use the 
gwmi
 alias to make it easier to type. This command is shown here:
Partial output from this command is shown here:
3.
To view all the properties of the 
WIN32_Environment
 class, pipeline the object returned by 
the 
Get-WmiObject
 cmdlet to the 
Format-List
 cmdlet while specifying the asterisk. Use the up 
arrow key to retrieve the previous 
gwmi
 command. This command is shown here:
The output from the previous command will be similar to that shown here:
4.
Scroll through the results returned by the previous command, and examine the properties and 
their associated values. 
Name
UserName
, and 
VariableValue
 are the most important variables 
from the class. Use the up arrow key to retrieve the previous 
gwmi 
command and change 
Format-List
 to 
Format-Table
. After the 
Format-Table
 cmdlet, type the three variables you want 
to retrieve: 
Name
VariableValue
, and 
Username
. This command is shown here:
5.
The results from this command will be similar to the partial results shown here:
6.
Use the up arrow key to retrieve the previous 
gwmi
 command, and delete the variable 
user
Name
 and the trailing comma. This command is shown here:
The results from this command will be similar to those shown here:
Notice how the spacing is a little strange. To correct this, use the up arrow key to retrieve the 
previous command. Add the
-autosize
 argument to the 
Format-Table
 command. You can use 
[<0057>-19<0044>-4<0045000300460052>-7<0050>-4<0053>-8<004F>-7<0048>-10<0057>-2<004C>-5<0052>-7<0051000300570052000300C0>-2<0051>-2<004C>-5<0056>-4<004B00030057>-2<004B>-9<0048000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<004700030045>-2<005C00030057>-37<005C>-12<0053>-6<004C0051>-11<004A0003>]TJ
-a <tab>
. The completed command is shown 
here:
8.
Now that you have a nicely formatted list, you22ll compare the results with those produced by 
the environment provider. To do this, you22ll use the Env PS drive. Use the 
Set-Location
 cmdlet 
to set your location to the Env PS drive. The command to do this is shown here. You can, of 
course, use the 
sl 
alias if you prefer.
Use the
Get-ChildItem
 cmdlet to produce a listing of all the environment variables on the 
computer. The command to do this is shown here:
  
Partial output from the 
Get-ChildItem
 cmdlet is shown here:
10.
Set your location back to drive C. The command to do this is shown here:
11.
Retrieve the alias for the 
Get-History
 cmdlet. To do this, use the 
Get-Alias
 cmdlet and pipe 
the resulting object to the 
Where-Object
. Use the special variable 
$_ 
to indicate the current 
pipeline object, and look for a match to the 
[<0047>5<0048>-12<00C0>-1<0051>4<004C0057>4<004C>2<00520051>]TJ
 property that is equal to the 
Get-History
cmdlet. The command to do this is shown here:
[<0037>-7<004B>-9<004800030055>-12<0048>-12<0056>-5<0058>1<004F>-6<0057>-2<004C0051>-11<004A00030052>-9<0058>-5<0057>-2<0053>-9<0058>-5<0057>-20<000F00030056>-3<004B>-9<0052>-3<005A>-9<00510003004B>-9<0048>-10<0055>-12<0048>-9<000F00030057>-3<0048>-11<004F>1<004F>-8<00560003005C>1<0052>-10<005800030057>-2<004B>-9<0048>-10<0055>-12<004800030044>-4<0055>-12<004800030057>-2<004B>-4<0055>-12<0048>-16<004800030044>-4<004F004C>-2<0044>-10<0056>-12<0048>-12<005600030047>-7<0048>-9<00C0>-2<0051>-9<0048>-16<004700030049>-7<0052>-7<00550003>]TJ
Get-History
12.
Use the up arrow key and retrieve the previous 
Get-Alias
[<000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<0047>-8<001100030026>9<004B>-7<0044>-4<0051>-11<004A>-7<004800030057>-2<004B>-9<004800030047>-7<0048>-9<00C0>-2<0051>-2<004C>-5<0057>-2<004C>-5<0052>-7<00510003>]TJ
from 
Get-History
 to 
Invoke-History
. This command is shown here:
13.
[<0037>-7<004B>-9<004800030055>-12<0048>-12<0056>-5<0058>1<004F>-6<0057>-2<004C0051>-11<004A00030052>-9<0058>-5<0057>-2<0053>-9<0058>-5<0057>-20<000F00030056>-3<004B>-9<0052>-3<005A>-9<00510003004B>-9<0048>-10<0055>-12<0048>-9<000F00030057>-3<0048>-11<004F>1<004F>-8<00560003005C>1<0052>-10<005800030057>-2<004B>-9<0048>-10<0055>-12<004800030044>-4<0055>-12<004800030057>-35<005A>-2<005200030044>-4<004F004C>-2<0044>-10<0056>-12<0048>-12<005600030047>-7<0048>-9<00C0>-2<0051>-9<0048>-16<004700030049>-7<0052>-7<00550003>]TJ
Get-History
14.
Use the 
Get-History
 cmdlet to retrieve a listing of all the commands you have typed into 
Windows PowerShell. I prefer to use 
ghy 
for 
Get-History
 because of similarity with 
ihy
 for 
Invoke-History
. The 
Get-History
 command using 
ghy
 is shown here:
15.
Examine the output from the 
Get-History
 cmdlet. You will see a list similar to the one shown 
here:
16.
Produce the listing of environment variables by using the Environment PS drive. This time, you 
will do it in a single command. Use 
Set-Location
 to set the location to the Env PS drive. Then 
continue the command by using a semicolon and then 
Get-ChildItem
 to produce the list. Use 
the 
 alias and the
gci
 alias to type this command. The command is shown here:
17.
Note that your PS drive is still set to the Env PS drive. Use the 
Set-Location
 cmdlet to change 
back to the C PS drive. This command is shown here:
18.
Use the up arrow key to bring up the 
sl env:;gci
 command, and this time, add another semico
lon and another 
 command to change back to the C PS drive. The revised command is shown 
here:
You should now have output similar to that shown here, and you should also be back at the C 
PS drive.
  
19.
Now use the 
ghy
 alias to retrieve a history of your commands. Identify the command that 
contains your previous 
gwmi
 command that uses 
Format-Table
 with the 
-autosize
 argument. 
This command is shown here:
20.
Use the
ihy
[<00030044>-4<004F004C>-2<0044>-10<005600030057>-1<00520003004C0051>4<0059>1<0052>-7<004E>12<004800030057>-2<004B>-9<00480003004B>-2<004C>-5<0056>-16<0057>-1<0052>-7<0055>-47<005C000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<004700030057>-2<004B>-7<0044>-3<005700030046>1<0052>-7<0055>-12<0055>-12<0048>-12<0056>-4<0053>-13<0052>-7<0051>-11<0047>-6<005600030057>-1<005200030057>-2<004B>-9<0048000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<00470003004C>-5<0047>-7<0048>-10<00510057>-2<004C>-5<00C0>-7<0048>-16<00470003>]TJ
in step 19. For me, the command is 
ihy 5
, as shown here:
21.
[<003A>-10<004B>-9<0048>-10<005100030057>-2<004B>-9<0048000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<004700030055>-17<0058>1<0051>-9<0056>-20<000F0003004C>-5<005700030053>-6<0055>-12<004C00510057>-19<005600030052>-10<0058>-5<005700030057>-2<004B>-9<004800030059>-5<0044>-4<004F>-4<0058>-7<004800030052004900030057>-2<004B>-9<0048000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<00470003005C>1<0052>-10<005800030044>-4<0055>-12<004800030055>-17<0058>1<0051>-4<0051>-2<004C0051>-11<004A00030052>-7<005100030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<00570003>]TJ
line. After this, you obtain the results normally associated with the command. Partial output is 
shown here:
22.
Scroll up in the Windows PowerShell console, and compare the output from the 
gwmi
 com
mand you just ran with the output from the 
sl env:;gci
 command.
This concludes this exercise. 
Commands used are stored in the 
[<0032>-1<0051>1<0048>6<0036>24<0057>7<00480053>1<0029>18<0058>11<0055>-31<0057>8<004B>1<00480055>-9<003A>-6<004C>10<0051>-1<0047>5<0052>7<005A>-2<0056>4<0028>13<0051>14<0059>-2<004C>10<0055>-2<0052>3<0051>6<0050>1<00480051>10<0057>-10<0011>22<0057>-24<005B>-27<0057>10<0003>10<00C0>8<004F>3<0048>3<0011>]TJ
Chapter 11 quick reference 
Do this
Simplify connecting to WMI while using default security 
permissions
Use the 
Get-WmiObject
 cmdlet.
Control security when making a remote connection 
Specify the impersonation levels in your script.
Allow a script to use the credentials of the person launch
ing the script
Use the 
impersonate
 impersonation level.
Allow a script to load a driver
Use the 
loadDriver
 privilege.
Control security when making a remote connection 
Specify the impersonation levels in your script.
Get rid of system properties when printing out all proper
ties of a WMI class
Use the 
Format-List
 cmdlet and specify that the 
-property
argument must be in the range of 
[a-z]*
Get the current date and time
Use the 
Get-Date
 cmdlet.
Subtract two dates
Use the 
New-TimeSpan
 cmdlet. Supply two date objects 
as arguments.
Retrieve a listing of all commands typed during a 
Windows PowerShell session
Use the 
Get-History
 cmdlet.
Run a command from the Windows PowerShell session 
history
Use the 
Invoke-History
 cmdlet.
Retrieve the minimum and maximum values from an 
object
Use the 
Measure-Object
 cmdlet while specifying the 
-property
 argument as well as the 
-minimum
 and 
-maximum
arguments.
Produce paged output from a long-scrolling command
Pipeline the resulting object from the command into the 
more
 function.
CHAPTER 12
emoting WMI
fter completing this chapter, you will be able to:
Use native WMI remoting to connect to a remote system.
Use Windows PowerShell remoting to run WMI commands on a remote system.
Use the CIM cmdlets to run WMI classes on a remote system.
Receive the results of remote WMI commands.
Run WMI remote commands as a job.
Using WMI against remote systems
Microsoft Windows Management Instrumentation WMI remoting is an essential part of Windows 
PowerShell. In fact, way back in Windows PowerShell 1.0, WMI remoting was one of the primary ways 
[<0052004900030050>-7<0044>-4<004E>-14<004C0051>-11<004A000300460052>-7<005100C0>-7<004A>-3<0058>1<0055>-8<0044>-3<0057>-2<004C>-5<0052>-7<005100030046>4<004B>-7<0044>-4<0051>-11<004A>-7<0048>-12<005600030052>-7<005100030055>-12<0048>-10<0050>-9<0052>-2<0057>-3<004800030056>-21<005C>-12<0056>-16<0057>-3<0048>-10<0050>-9<0056>-19<00110003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030036>-11<0048>-10<0055>-47<0059>1<0048>-10<0055000300150013>14<0014>-7<001500030053>-13<0048>-10<0055>-12<0050>-2<004C>-5<0057>-19<005600030055>-12<0048>-10<0050>-9<0052>-2<0057>-3<00480003003A>-7<0030>-4<002C00030045>-3<005C0003>]TJ
default. The Windows 8 client does not. The best way to manage the Windows 8 client is to use group 
[<0053>-13<0052>-6<004F004C>-3<0046>-30<005C00030057005200030053>-13<0048>-10<0055>-12<0050>-2<004C>-5<005700030057>-2<004B>-9<004800030058>-6<0056>-12<00480003005200490003003A>-7<0030>-4<002C0003004C0051>-4<0045>-13<0052>-9<0058>1<0051>-11<0047>-8<00110003002E>10<0048>-16<0048>-10<00530003004C005100030050>-2<004C0051>-11<0047>-9<000F00030057>-2<004B>-9<00480003004C>-5<0056>-14<0056>-6<0058>-7<00480003004B>-9<0048>-10<0055>-12<00480003004C>-5<005600030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<0056000300C0>-2<0055>-12<0048>-9<005A>-3<0044>-4<004F>1<004F>-9<000F00030051>-9<0052>-2<00570003>]TJ
WMI itself. 
[<0037>-7<004B>-9<004800030056>-16<0057>-3<0048>-10<0053>-8<005600030057>-1<005200030058>-6<0056>-12<00480003004A>1<0055>-12<0052>-10<0058>1<005300030053>-13<0052>-6<004F004C>-3<0046>-30<005C000300570052000300460052>-7<0051>-1<00C0>-7<004A>-3<0058>1<0055>-12<00480003003A>-7<0030>-4<002C00030044>-4<0053>-7<0053>-13<0048>-10<0044>-4<00550003004B>-9<0048>-10<0055>-12<0048>5<001D>]TJ
1.
Open the group policy management console.
2.
[<0028>-28<005B>-8<0053>-9<0044>-4<0051>-11<004700030057>-2<004B>-9<004800030026>2<0052>-7<0050>-4<0053>-9<0058>-5<0057>-3<0048>-10<005500030026>2<0052>-7<005100C0>-7<004A0003005F00030033>6<0052>-6<004F004C>-3<0046>4<004C>-5<0048>-12<00560003005F0003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030036>-11<0048>-10<0057>-31<0057>-2<004C0051>-11<004A>-6<00560003005F00030036>-10<0048>-16<0046>-2<0058>1<0055>-12<004C>-5<0057>-38<005C00030036>-11<0048>-10<0057>-31<0057>-2<004C0051>-11<004A>-6<00560003005F0003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<00560003>]TJ
Firewall With Advanced Security | Windows Firewall With Advanced Security | Inbound Rules 
node.
3.
Right-click in the working area and choose New Rule.
4.
[<0026>8<004B>-9<0052>-13<0052>-7<0056>-12<004800030057>-2<004B>-9<004800030033>3<0055>-12<0048>-16<0047>-7<0048>-9<00C0>-2<0051>-9<0048>-16<004700030052>-7<0053>-5<0057>-2<004C>-5<0052>-7<0051>-14<000F00030044>-3<0051>-11<004700030056>-12<0048>-11<004F>-7<0048>-16<0046>-25<00570003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030030>-6<0044>-4<0051>-7<0044>-11<004A>-7<0048>-10<0050>-9<0048>-10<005100570003002C>-1<0051>-9<0056>-16<0057>-2<0055>-17<0058>1<0050>-9<0048>-10<00510057>-19<0044>-3<0057>-2<004C>-5<0052>-7<00510003000B>-45<003A>-7<0030>-4<002C>-7<000C00030049>-12<0055>-12<0052>-7<00500003>]TJ
the drop-down list.
5.
There are a number of options here, but you should start with one: the WMI-In option with 
[<0057>-2<004B>-9<004800030027>-12<0052>-7<0050>-7<0044>-2<004C005100030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<004800030059>-5<0044>-4<004F>-4<0058>-7<0048>-7<00110003002C>1<00490003005C>1<0052>-10<005800030044>-4<0055>-12<0048>-10<0051>9<00B7>-5<005700030056>-5<0058>1<0055>-12<00480003005A>-9<004B>-7<0044>-3<00570003005C>1<0052>-9<005800030051>-9<0048>-16<0048>-16<0047>-9<000F00030057>-2<004B>-9<0048>-10<00510003004D>-2<0058>-6<0056>-16<005700030055>-12<0048>-10<0050>-9<0048>-10<0050>-4<0045>-13<0048>-10<00550003005C>1<0052>-9<005800030046>-14<0044>-4<005100030046>1<0052>-7<0050>-9<00480003>]TJ
back and add the others later. Click Next.
6.
[<0024>-11<004F>1<004F>-7<0052>-3<005A00030057>-2<004B>-9<0048000300460052>-7<0051>-4<0051>-9<0048>-16<0046>-25<0057>-2<004C>-5<0052>-7<0051000300570052000300C0>-2<0051>-2<004C>-5<0056>-4<004B>-14<0011>]TJ
  
[<0038>-2<00510057>-2<004C004F00030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<0056000300C0>-2<0055>-12<0048>-9<005A>-3<0044>-4<004F>1<004F00030053>-13<0048>-10<0055>-12<0050>-2<004C>-5<0057>-19<00560003003A>-7<0030>-4<002C000300460052>-7<0051>-4<0051>-9<0048>-16<0046>-25<0057>-2<004C>-5<0052>-7<0051>-14<000F00030044>-3<0057>-31<0057>-3<0048>-10<0050>-4<0053>-5<0057>-19<005600030057>-1<0052000300460052>-7<0051>-4<0051>-9<0048>-16<0046>-25<005700030055>-12<0048>-12<0056>-6<0058>1<004F>-6<00570003004C005100030044>]TJ
 remote pro
cedure call RPC error. This error appears here, where an attempt to connect to a computer named 
[<005A>-12<001B>-11<0046>3<0018>-3<0013>-31<001700030049>-9<0044>-2<004C004F>-8<005600030047>-3<0058>-7<004800030057>-1<005200030057>-2<004B>-9<0048000300C0>-2<0055>-12<0048>-9<005A>-3<0044>-4<004F>1<004F00030051>-9<0052>-2<005700030053>-13<0048>-10<0055>-12<0050>-2<004C>-5<0057>-31<0057>-2<004C0051>-11<004A0003003A>-7<0030>-4<002C00030057>-2<0055>-8<0044>-1<0049>-40<00C0>-5<004600030057>-1<005200030053>-9<0044>-10<0056>-14<0056>-19<0011>]TJ
Additionally, the remote caller must be a member of the local administrators group on the target 
machine. By default, members of the Domain Admin group are placed into the local administrators 
group when the system joins the domain. If you attempt to make a remote WMI connection without 
membership in the local admin group on the target system, an Access Denied
error is raised. This 
error appears as follows when a user attempts to connect to a remote system without permission:
Important
[<0033>9<0044>4<005C00030046>6<004F>-5<0052>-5<0056>-10<004800030044>-1<0057>-29<0057>-1<0048>-8<0051>2<0057004C>-3<0052>-5<005100030057>2<005200030057004B>-7<004800030056>-1<0053>-11<0048>-14<0046>7<004C>-2<00C0>-3<004600030048>-8<0055>-9<0055>-10<0052>-5<0055>-24<005600030055>-10<0048>-8<0057>-6<0058>3<0055>-9<0051>-7<0048>-14<004700030045005C0003003A>-5<0030>-2<002C0003005A>-7<004B>-7<0048>-8<0051000300440057>-29<0057>-1<0048>-8<0050>-1<0053>-3<0057004C>2<0051>-9<004A00030057>2<00520003>]TJ
[<0050>-5<0044>-2<004E>14<00480003004400030055>-10<0048>-8<0050>-7<00520057>-1<004800030046>3<0052>-5<0051>-2<0051>-7<0048>-14<0046>-23<0057004C>-3<0052>-5<0051>-11<001100030037>-5<004B>-7<004800030048>-8<0055>-9<0055>-10<0052>-5<005500030057>-1<0048>-9<004F>3<004F>-5<00560003005C>3<0052>-7<00580003004C>-1<004900030057004B>-7<004800030053>-5<0055>-10<0052>-5<0045>-5<004F>-5<0048>-8<00500003004C>-3<005600030055>-10<0048>-9<004F>-3<0044>-1<0057>-1<0048>-14<004700030057>2<005200030057004B>-7<0048000300C00055>-10<0048>-7<005A0044>-2<004F>3<004F00030052>-5<00550003>]TJ
security access. This information is vital in making remote WMI work.
Supplying alternate credentials for the remote connection
A low-level user can make a remote WMI connection by supplying credentials that have local admin 
rights on the target system. The 
Get-WMIObject
 Windows PowerShell cmdlet accepts a credential 
object. There are two common ways of supplying the credential object for the remote connection. 
[<0037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<00570003005A>-3<0044>2<005C0003004C>-5<005600030057>-1<005200030057>-38<005C>-12<0053>-13<004800030057>-2<004B>-9<004800030047>-5<0052>-7<0050>-7<0044>-2<004C005100030044>-4<0051>-11<004700030057>-2<004B>-9<004800030058>-6<0056>-12<0048>-10<005500030051>-7<0044>-4<0050>-9<004800030059>-5<0044>-4<004F>-4<0058>-7<0048>-12<005600030047004C0055>-12<0048>-16<0046>-25<0057>-2<004F>-12<005C0003004C0051>-1<0057>-1<005200030057>-2<004B>-9<00480003>]TJ
credential 
parameter. 
When the 
Get-WMIObject
 cmdlet runs, it prompts for the password. The syntax of this command 
appears here:
When you run the command, a dialog box appears prompting for the password to use for the con
nection. Once supplied, the command continues. The dialog box appears in Figure 12-1.
FIGURE 12-1
When run with the 
credential 
parameter, the 
Get-WMIObject
 cmdlet prompts for the account 
password.
Storing the credentials for a remote connection
There is only one problem with supplying the credential directly to the 
credential 
parameter for the 
Get-WMIObject
 cmdlet27it requires you to supply the credential each time you run the command. 
This requirement is enforced when you use the up arrow key to retrieve the command, as well as for 
any subsequent connections to the same remote system. 
When opening a Windows PowerShell console session that may involve connection to numerous 
remote systems, or even multiple connections to the same system, it makes sense to store the creden
tial object in a variable for the duration of the Windows PowerShell session. To store your credentials 
for later consumption, use the 
Get-Credential 
Windows PowerShell cmdlet to retrieve your credentials 
and store the resulting credential object in a variable. If you work with multiple systems with different 
passwords, it makes sense to create variables that will facilitate remembering which credentials go to 
which system. Remember that the Windows PowerShell console has tab expansion; therefore, it is not 
necessary to use short cryptic variable names just to reduce typing. The command appearing here 
obtains a credential object and stores the resulting object in the 
$credential
 variable.
The use of the credential object to make a remote WMI connection appears here:
When the same query must be executed against remote systems that use the same credential, 
the 
Get-WMIObject
 cmdlet makes it easy to execute the command. The following code runs the 
same query with the same credentials against three different systems. The remote computers are a 
  
combination of three Windows Server 2012 and Windows 2008 R2 servers. The commands and the 
related output appear here:
One problem with the preceding output is that it does not contain the name of the remote system. 
The returned WMI object contains the name of the system in the 
__Server
 variable, but the default 
display does not include this information. Therefore, a
Select-Object
 cmdlet which has an alias of 
select
 is required to pick up the 
__server 
property. The revised command and associated output 
appear here:
Besides just using WMI remoting, Windows PowerShell also permits using Windows PowerShell 
remoting. The advantage to using Windows PowerShell remoting is that in addition to permit
ting WMI to connect to remote systems with elevated permissions, Windows PowerShell remoting 
also permits running WMI commands with alternate credentials from within the same Windows 
PowerShell session against the local computer. WMI does not support alternate credentials for a local 
connection, but Windows PowerShell remoting does. In the code that follows, the 
Get-WMIObject
cmdlet queries the 
WIN32_loggedonuser
 WMI class. It returns only the antecedent property from this 
association class. The results show that the logged-on user is iammreded. Next, the credentials of 
the administrator account are retrieved via the 
Get-Credential 
Windows PowerShell cmdlet and stored 
in the 
$credential 
variable. The
invoke-Command 
cmdlet runs the 
Get-WMIObject
 cmdlet and queries 
the 
WIN32_loggedonuser
 WMI class against the local machine using the administrator credentials. The 
results reveal all of the logged-on users, not merely the non-admin user, illustrating the different user 
context that was used for the query.
Using Windows PowerShell remoting to run WMI
Use of the 
Get-WMIObject
 cmdlet is a requirement for using WMI to talk to down-level systems27
systems that will not even run Windows PowerShell 2.0. There are several disadvantages to using 
native 
WMI remoting. These appear here:
[<003A>-7<0030>-4<002C00030055>-12<0048>-10<0050>-9<0052>-2<0057>-2<004C0051>-11<004A00030055>-12<0048>-16<0054>-3<0058004C0055>-12<0048>-12<005600030056>-4<0053>-13<0048>-16<0046>4<004C>-2<0044>-4<004F000300C0>-2<0055>-12<0048>-9<005A>-3<0044>-4<004F>1<004F00030055>-17<0058>1<004F>-7<0048>-12<005600030057>-1<005200030053>-13<0048>-10<0055>-12<0050>-2<004C>-5<005700030044>-9<00460046>-2<0048>-12<0056>-14<005600030057>-1<005200030046>4<004F004C>-5<0048>-10<0051>-1<005700030056>-21<005C>-12<0056>-16<0057>-3<0048>-10<0050>-9<0056>-19<0011>]TJ
[<0003003A>-7<0030>-4<002C00030055>-12<0048>-10<0050>-9<0052>-2<0057>-2<004C0051>-11<004A00030055>-12<0048>-16<0054>-3<0058004C0055>-12<0048>-12<005600030052>-7<0053>-13<0048>-10<0051>-2<004C0051>-11<004A00030050>-6<0058>1<004F>-6<0057>-2<004C0053>-8<004F>-7<00480003004B>-9<0052>-6<004F>-7<0048>-12<00560003004C005100030057>-2<004B>-9<0048000300C0>-2<0055>-12<0048>-9<005A>-3<0044>-4<004F>1<004F>-9<0011>]TJ
WMI remoting requires local administrator rights.
WMI remoting provides no support for alternate credentials on a local connection.
WMI remoting output does not return the name of the target system by default.
  
Beginning with Windows PowerShell 2.0, you can use Windows PowerShell remoting to run your 
[<003A>-7<0030>-4<002C000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<0047>-6<0056>-19<001100030038>-3<0056>-4<004C0051>-11<004A0003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>6<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030055>-12<0048>-10<0050>-9<0052>-2<0057>-2<004C0051>-11<004A>-11<000F0003005C>1<0052>-9<005800030046>-14<0044>-4<0051000300460052>-7<005100C0>-7<004A>-3<0058>1<0055>-12<004800030047004C>-3<0049>-39<0049>-7<0048>-10<0055>-12<0048>-10<0051005700030044>-9<00460046>-2<0048>-12<0056>-14<005600030055>-12<004C>-5<004A>1<004B>-1<0057>-19<00560003>]TJ
for the remote endpoint that do not require admin rights on the remote system. In addition, use of 
Enable-PSRemoting
[<00030056>-3<004C0050>-4<0053>-8<004F004C>-5<00C0>-7<0048>-12<0056000300460052>-7<005100C0>-7<004A>-3<0058>1<0055>-8<0044>-3<0057>-2<004C>-5<0052>-7<005100030052004900030057>-2<004B>-9<0048000300C0>-2<0055>-12<0048>-9<005A>-3<0044>-4<004F>1<004F00030044>-4<0051>-11<004700030057>-2<004B>-9<004800030056>-12<0048>-10<0055>-47<0059>-12<004C>-3<0046>-2<0048>-12<0056>-19<00110003002C>-1<005100030044>-11<0047>-7<0047004C>-5<0057>-2<004C>-5<0052>-7<0051>-14<000F0003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<00560003>]TJ
PowerShell remoting requires that only a single port be open, not the wide range of ports required by 
the WMI protocols RPC and DCOM. In addition, Windows PowerShell remoting supports alternate 
credentials for a local connection. For more information about Windows PowerShell remoting, see 
Chapter 4, 23Using PowerShell Remoting and Jobs24. 
In the code appearing here, the 
Get-Credential
 cmdlet stores a credential object in the 
$credential 
variable. Next, this credential is used with the 
Invoke-Command
 cmdlet to run a script block contain
ing a WMI command. The results return to the Windows PowerShell console.
Use Windows PowerShell remoting to communicate to any system that runs Windows PowerShell 
2.0 or Windows PowerShell 3.0. As shown here, you can run WMI commands against remote systems 
with a single command, and engage multiple operating systems. The nice thing is the inclusion of 
the 
PSComputerName
 property. Because the 
Invoke-Command
 cmdlet accepts an array of computer 
names, the command is very simple. 
Using CIM classes to query WMI classes
There are several ways of using the Common Information Model CIM classes to perform remote 
WMI queries. The most basic way is to use the 
Get-CimInstance 
cmdlet. In fact, this generic method 
[<004C>-5<005600030055>-12<0048>-16<0054>-3<0058004C0055>-12<0048>-16<00470003004C>-3<004900030051>-9<005200030056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<004600030026>12<002C>-4<00300003004C0050>-4<0053>-8<004F>-7<0048>-10<0050>-9<0048>-10<0051>-1<0057>-19<0044>-3<0057>-2<004C>-5<0052>-7<005100030046>4<004F>-5<0044>-10<0056>-14<005600030048>-6<005B>-8<004C>-5<0056>-16<0057>-19<0056>-19<001100030037>-7<004B>-9<0048>-10<0055>-12<004800030044>-4<0055>-12<004800030056>-16<0057>-3<0048>-10<0053>-8<005600030055>-12<0048>-16<0054>-3<0058004C0055>-12<0048>-16<004700030057005200030058>-6<0056>-12<004800030057>-2<004B>-9<00480003>]TJ
Get-CimInstance
 cmdlet to query a remote system. These steps appear here.
Using CIM to query remote WMI data
Use the 
New-CimSession
 cmdlet to create a new CIM session. Store the returned session in a variable.
Supply the stored CIM session from the variable to the 
-cimsession 
parameter when querying with 
the 
Get-CIMInstance
 cmdlet.
In the code that appears here, the 
New-CimSession
 cmdlet creates a new CIM session with a target 
computer of W8s504 and a user name of Iammredadministrator. The cmdlet returns a CIM session 
that it stores in the 
$w8s504
 variable. Next, the 
Get-CimInstance
 cmdlet uses the CIM session to con
nect to the remote w8s504 system and to return the data from the 
Win32_bios
 WMI class. The output 
is displayed in the Windows PowerShell console. 
Besides automatically returning the target computer name, 
Get-CimInstance
 automatically 
converts the date from a UTC string to a 
datetime
 type. As shown here, an extra step is required to 
convert the WMI UTC string to a 
datetime
 type:
  
However, if you use the 
Get-CIMInstance
 cmdlet, CIM automatically converts the UTC string to a 
datetime
 type. This appears here:
As long as the credentials work, you can create a new CIM session connection for multiple com
puters, and even for multiple operating systems. This works because the 
-computername 
parameter 
of the 
New-CIMSession
 cmdlet accepts an array of computer names. In the code appearing here, the 
New-CIMSession
 cmdlet creates a new CIM session with two target computers and the same creden
tials. It then stores the returned CIM session in the 
$cn
 variable. Next, the 
Get-CimInstance
 cmdlet 
queries the 
Win32_OperatingSystem
 WMI class from the CIM session stored in the 
$cn
 variable. The 
code and the results from the code appear here:
Working with remote results
When working with remote systems, it may be important to consider the network bandwidth and the 
[<00460052>-7<0056>-16<005700030052004900030055>-12<0048>-10<0053>-13<0048>-10<0044>-3<0057>-3<0048>-16<0047>1<004F>-12<005C00030055>-12<0048>-10<0057>-2<0055>-12<004C>-5<0048>-8<0059>-12<004C0051>-11<004A00030058>1<005100C0>-2<004F>-6<0057>-3<0048>-10<0055>-12<0048>-16<004700030047>-3<0044>-3<0057>-19<0044>-14<001100030037>-7<004B>-9<0048>-10<0055>-12<004800030044>-4<0055>-12<004800030045>-9<0044>-10<0056>-3<004C>-3<0046>-14<0044>-4<004F>1<004F>-12<005C00030057>-35<005A>-2<005200030046>4<004B>-9<0052>-4<004C>-3<0046>-2<0048>-12<0056>-26<00B3>-22<0057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030046>4<004B>-9<0052>-4<004C>-3<0046>-2<00480003004C0051>4<0059>1<0052>-6<004F>-12<0059>1<0048>-12<00560003>]TJ
gathering the information and storing it in a local variable. Using this technique, you incur the band
width cost once, and you can use the same data in multiple ways without incurring the bandwidth hit 
again. But if your data changes rapidly, this technique does not help much.
Important
In potentially bandwidth-constrained situations, it is a best practice to store 
data retrieved locally to facilitate reuse of the information at a later time. The easiest place 
to store the data is in a variable, but do not forget about storing the data in XML for a more 
persisted storage. Using the
 cmdlet is extremely easy and preserves the data 
relationships well.
In the command appearing here, the 
Get-CimInstance
 cmdlet retrieves all of the process informa
tion from the remote computer session stored in the 
$session
 variable. The process information is 
stored in the 
$process
 variable. Next, the data is explored and the name and process IDs returned. 
  
Upon examining the data, the next command returns only processes with the name svchost.exe. 
Once again, the data is displayed in a table. 
Now a different property needs to be added to the data27the 
commandline
 property, which is 
used to launch the process. This information provides clues as to what process runs in the particular 
svchost.exe process. The command appears here:
Now, home in on the data a bit more to see which of the svchost.exe processes requires the largest 
working set size
of memory, and is using the most kernel mode time
The answer to the question of 
which instance uses most resources appears in the code is shown here:
[<0037>-7<004B>-9<004800030056>-12<0048>-16<00460052>-7<0051>-11<004700030044>-4<0053>-7<0053>-7<0055>-12<0052>-10<0044>-9<0046>4<004B0003004C0051>4<0059>1<0052>-6<004F>-12<0059>1<0048>-12<0056000300C0>-2<004F>-6<0057>-3<0048>-10<0055>-12<004C0051>-11<004A00030057>-2<004B>-9<004800030047>-3<0044>-3<0057>-19<004400030044>-3<005700030057>-2<004B>-9<004800030056>-12<0052>-10<0058>1<0055>-10<0046>-2<004800030044>-4<0051>-11<004700030052>-7<0051>-4<004F>-12<005C00030055>-12<0048>-10<0057>-8<0058>1<0055>-12<0051>-2<004C0051>-11<004A00030057>-2<004B>-9<004800030051>-9<0048>-16<0048>-16<0047>-7<0048>-16<00470003004C0051>2<0049>-7<0052>-7<0055>]TJ
[<0050>-7<0044>-3<0057>-2<004C>-5<0052>-7<005100030057005200030057>-2<004B>-9<00480003004F>-7<0052>-13<0046>-14<0044>-4<004F00030046>4<004F004C>-5<0048>-10<0051>-1<005700030050>-7<0044>-9<0046>4<004B>-2<004C0051>-9<0048>-7<001100030037>-7<004B>-9<0048>-10<0055>-12<004800030044>-4<0055>-12<004800030057>-35<005A>-2<00520003005A>-3<0044>2<005C>-12<005600030052004900030047>-5<0052>-4<004C0051>-11<004A00030057>-2<004B>-2<004C>-5<0056>-5<001D00030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<00570003004C>-5<005600030057>-1<005200030058>-6<0056>-12<004800030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<00560003>]TJ
PowerShell
property 
and 
[<00C0>-8<004F>-7<00570048>-6<00550003>]TJ
parameters to reduce the data returned; the second is to use a native 
WQL query to reduce the data. 
educing data via Windows PowerShell parameters
[<0037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030050>-9<0048>-10<0057>-2<004B>-9<0052>-13<004700030057>-1<005200030055>-12<0048>-16<0047>-3<0058>-5<0046>-2<004800030047>-3<0044>-3<0057>-19<004400030044>-4<0051>-11<0047000300C0>-2<004F>-5<0057>-3<0048>-10<00550003004C>-5<005700030044>-3<005700030057>-2<004B>-9<004800030056>-12<0052>-9<0058>1<0055>-10<0046>-2<00480003004C0051>4<0059>1<0052>-6<004F>-12<0059>1<0048>-12<005600030058>-6<0056>-3<004C0051>-11<004A00030057>-35<005A>-2<00520003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F0003>]TJ
[<0053>-9<0044>-4<0055>-8<0044>-4<0050>-9<0048>-10<0057>-3<0048>-10<0055>-26<0056>-19<001100030037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030053>-9<0044>-4<0055>-8<0044>-4<0050>-9<0048>-10<0057>-3<0048>-10<0055>39<000F00030057>-2<004B>-9<00480003>]TJ
-property 
parameter, reduces properties returned, but it does 
not reduce instances. The second parameter, the 
[<0010>-5<00C0>-1<004F0057>7<0048>1<0055>]TJ
 parameter, reduces the instances returned, but 
does not reduce the number of properties. For example, the code that follows retrieves only the name 
and the start mode of services on a remote server named w8s504. The command executes as the 
administrator from the domain. 
The command that follows uses the previously created session on the remote computer named 
w8s504, and this time it introduces the 
[<0010>-5<00C0>-1<004F0057>7<0048>1<0055>]TJ
 parameter as well. Now the command returns the name 
and start mode of only the running services on the remote system. The services are sorted by start 
mode, and a table displays the results. The command and the associated output appear here:
  
You can obtain the same results by using a WQL query. The easiest way to do this is to create a 
new variable named 
$query
 to hold the WQL query. In the WQL query, choose the WMI properties 
and the WMI class name, and limit the instances to only those that are running. Next, supply the 
WMI query stored in the 
$query
 variable to the
-query
 parameter of the 
Get-CimInstance
 cmdlet. 
The parameter sets do not permit use of the 
-query
 parameter at the same time as the use of the 
-classname 
parameter or the 
-property
 or 
[<0010>-5<00C0>-1<004F0057>7<0048>1<0055>]TJ
 parameter. Once the change is made, the sorting and 
formatting of the output is the same. The results, as expected, are the same as well. The code and the 
output associated with the code appear here:
  
Running WMI jobs
If DCOM is not an issue and you are using the 
Get-WMIObject
 cmdlet to work with remote sys
tems, it is easy to run a remote WMI job. To do this, use the 
Get-WMIObject
 cmdlet and specify the 
-asjob 
parameter. Once you do this, use the 
Get-Job
 cmdlet to check on the status of the job, and 
use 
Receive-Job
 to receive the job results. For more information about Windows PowerShell remot
ing and jobs, see Chapter 4. In the following code, the 
Get-WMIObject
 cmdlet retrieves information 
from the 
Win32_Bios
 WMI class from a machine named dc3. The 
-asjob 
switched parameter is used to 
ensure that the command runs as a job. The output is a 
pswmijob
 object. 
The 
Get-Job
 cmdlet is used to retrieve the status of the WMI job. From the output appearing here, 
it is apparent that the job with an ID of 2 has completed, and that the job has more data to deliver. 
As with any other job in Windows PowerShell, to receive the results of the WMI job, use the 
Receive-Job
 cmdlet. This appears here:
If you do not have DCOM and RPC access to the remote system, you can use the 
Invoke-Command
cmdlet to run the WMI command on the remote system as a job. To do this, use the 
-asjob 
parameter on 
the 
Invoke-Command
[<00030046>4<0050>-11<0047>1<004F>-7<0048>-10<0057>-20<001100030037>-7<004B>-2<004C>-5<005600030057>-3<0048>-16<0046>4<004B>-4<0051>-2<004C>-5<0054>-3<0058>-7<004800030044>-4<0053>-7<0053>-13<0048>-10<0044>-4<0055>-26<00560003004B>-9<0048>-10<0055>-12<0048>-9<000F0003005A>-9<004B>-9<0048>-10<0055>-12<0048000300C0>-2<0055>-26<0056>-16<005700030057>-2<004B>-9<00480003>]TJ
Get-Credential
 cmdlet creates 
a new credential object for the remote system. The 
Invoke-Command
 cmdlet uses Windows PowerShell 
remoting to connect to the remote system and query WMI by using the
Get-WMIObject
 cmdlet to ask 
for information from the 
WIN32_Service
 class. The 
-asjob 
parameter causes the query to occur as a job. 
The 
Get-Job
 cmdlet queries for the status of job 4, and as shown following, the job has completed 
and it has more data. Notice this time that the job is of type 
remotejob
, not 
wmijob
, as was created 
earlier. Next, the 
Receive-Job
 cmdlet is used to receive the results of the WMI query. The 
-keep 
switch 
tells Windows PowerShell to retain the results for further analysis.
You can also use the CIM
cmdlets as jobs by using the 
Invoke-Command
 cmdlet. The following 
example uses 
Get-Credential
 to retrieve a credential object. Next, the 
Invoke-Command
 cmdlet runs 
the 
Get-CimInstance
 cmdlet on a remote computer named w8s504. The command runs as a job. The 
Get-Job
 cmdlet checks on the status of the job, and the 
Receive-Job
 cmdlet retrieves the results. The 
code and output appear here:
  
Using Windows PowerShell remoting and WMI: 
Step-by-step exercises
In this exercise, you will practice using Windows PowerShell remoting to run remote commands. For 
the purpose of this exercise, you can use your local computer, but commands designed to fail in the 
exercise will more than likely succeed instead of creating the errors appearing here. 
Using PowerShell remoting to retrieve remote information
1.
Log on to your computer with a user account that does not have administrator rights. 
2.
Open the Windows PowerShell console.
3.
Use the 
Get-CimInstance
 cmdlet to retrieve process information from a remote system that 
has WMI remoting enabled on it. Do not supply alternate credentials. The command appears 
here:
4.
The command fails due to an Access Denied error. Now create a new CIM session to the 
remote system and connect with alternate credentials. Store the CIM session in a variable 
named 
$session
. This command appears following. Use a remote system accessible to you and 
credentials appropriate to that system.
5.
Use the stored CIM session from the 
$session
 variable to retrieve process information from the 
remote system. The command appears here:
6.
Use the stored CIM session from the 
$session
 variable to retrieve the name and the status of 
all services on the remote system. Sort the output by state, and format a table with the name 
and the state. The command appears here:
Use the 
Get-WMIObject
 cmdlet to run a WMI command on a remote system. Use the 
Win32_
Bios
 WMI class and target the same remote system you used earlier. Specify appropriate 
credentials for the connection. Here is an example:
8.
Use Windows PowerShell remoting by using the 
Invoke-Command
 cmdlet to run a WMI 
command against a remote system. Use the credentials you stored earlier. Use the 
Get-
CimInstance
 cmdlet to retrieve BIOS information from WMI. The command appears here:
This concludes the exercise. Leave the Windows PowerShell console open for the next exercise.
In the following exercise, you will create and receive Windows PowerShell jobs.
Creating and receiving WMI jobs
1.
Open the Windows PowerShell console as a non-elevated user.
2.
Use the 
Get-WMIObject
 cmdlet to retrieve BIOS information from a remote system. Use the 
-asjob 
parameter to run the command as a job. Use the credentials you stored in the 
$creden
tial
 variable in the previous exercise.
3.
Check on the success or failure of the job by using the 
Get-Job
 cmdlet. Make sure you use the 
job ID from the previous command. A sample appears here:
4.
If the job was successful, receive the results of the job by using the 
Receive-Job
 cmdlet. Do 
not bother with storing the results in a variable or keeping the results because you will not 
need them.
5.
Create a new PowerShell session object by using the 
New-PSSession
 cmdlet. Store the results 
in a variable named 
$psSession
. The command appears following. Use appropriate computer 
names and credentials for your network.
6.
Use the 
Invoke-Command
 cmdlet to make the 
Get-WMIObject
 cmdlet retrieve BIOS informa
tion from the remote system. Use the session information stored in the 
$psSession
 variable. 
Make sure you use the 
-asjob 
parameter with the command. The command appears here:
  
Use the 
Get-Job
 cmdlet with the job ID returned by the previous command to check on the 
status of the job. The command will be similar to the one shown here:
8.
Use the 
Receive-Job
 cmdlet to retrieve the results of the WMI command. Store the returned 
information in a variable named 
$bios
. The command appears here ensure you use the job ID 
number from your system:
Now query the BIOS version by accessing the 
version
 property from the 
$bios
 variable. This 
appears here:
This concludes the exercise.
Chapter 12 quick reference 
Do this
Retrieve WMI information from a remote legacy system 
Use the 
Get-WMIObject
 cmdlet and specify credentials as 
needed, and the target system.
Retrieve WMI information from a Windows 8 system or a 
Windows Server 2012 system
Use the 
Get-CimInstance
 cmdlet and specify the target 
computer and WMI class.
Run a WMI command on multiple Windows 8 or Windows 
Server 2012 computers
Use the 
New-CIMSession
 cmdlet to create a CIM session 
for the multiple systems. Then specify that session for 
Get-CimInstance
Filter returning WMI data
Use the 
[<0010>-4<00C0004F0057>7<0048>1<0055>]TJ
 parameter with either 
Get-WMIObject
 or 
Get-CimInstance
Reduce the number of returned properties 
Use the 
property
 parameter with either 
Get-WMIObject
or 
Get-CimInstance
Use a legacy WQL type of query
Use the 
-query
 parameter with either 
Get-WMIObject
 or 
Get-CimInstance
Retrieve the WMI results with a job
Use the S
tart-Job
 and 
Receive-Job
 cmdlets with 
Get-
CimInstance
 or the
 -asjob
 parameter with 
Get-WmiObject
CHAPTER 13
Calling WMI Methods 
on WMI Classes
fter completing this chapter, you will be able to:
Use WMI cmdlets to execute instance methods.
Use WMI cmdlets to execute static methods.
Using WMI cmdlets to execute instance methods
There are actually several ways to call Microsoft Windows Management Instrumentation WMI 
methods in Windows PowerShell. One reason for this is that some WMI methods are 
instance meth
ods
, which means they only work on an instance of a class. Other methods are 
static methods
, which 
mean they do not operate on an instance of the class. For example, the 
Terminate 
method from 
the 
WIN32_Process
[<00030046>4<004F>-5<0044>-10<0056>-14<00560003004C>-5<005600030044>-4<00510003004C0051>-9<0056>-16<0057>-19<0044>-4<0051>-9<0046>-2<004800030050>-9<0048>-10<0057>-2<004B>-9<0052>-13<0047>-35<00B3>-32<004C>-5<00570003005A>-9<004C004F>1<004F00030052>-7<0051>-4<004F>-12<005C00030052>-7<0053>-13<0048>-10<0055>-8<0044>-3<0057>-3<004800030044>-11<004A>-3<0044>-2<004C0051>-9<0056>-16<00570003004400030056>-3<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<00460003004C0051>-9<0056>-16<0057>-19<0044>-4<0051>-9<0046>-2<004800030052004900030057>-2<004B>-9<00480003>]TJ
WIN32_Process
 class. If you do not have a reference to a process, you cannot terminate the process27
which makes sense. On the other hand, if you want to 
create 
a new instance of a 
WIN32_Process
 class, 
you do not grab a reference to an instance of the class. For example, you do not grab an instance of 
a running Calculator process to create a new instance of a Notepad process. Therefore, you need a 
static method that is always available. 
[<002F>-10<0048>-10<0057>-32<00B7>26<005600030048>-6<005B>-6<0044>-4<0050>-2<004C0051>-9<004800030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030052>1<004900030057>-2<004B>-9<0048>-12<0056>-12<004800030057>-35<005A>-2<005200030044>-4<0053>-7<0053>-7<0055>-12<0052>-10<0044>-9<0046>4<004B>-9<0048>-12<0056>-26<00B3>-40<0058>-6<0056>-4<004C0051>-11<004A0003004C0051>-9<0056>-16<0057>-19<0044>-4<0051>-9<0046>-2<004800030050>-9<0048>-10<0057>-2<004B>-9<0052>-13<0047>-6<0056>-26<00B3>-36<005A>-9<004C>-5<0057>-2<004B0003004400030056>-3<004B>-9<0052>-7<0055>-41<005700030048>-6<005B>-6<0044>-4<0050>-4<0053>-8<004F>-7<0048>-7<00110003>]TJ
First, create an instance of notepad.exe. Then use the 
Get-WmiObject
 cmdlet to view the process. As 
you may recall from earlier chapters, 
gwmi
 is an alias for 
Get-WmiObject
. This appears here:
  
Once you have the instance of the Notepad process you want to terminate, there are at least four 
choices to stop the process: 
You can call the method directly using 
dotted notation because there is only one instance of 
notepad.
You can store the reference in a variable and then terminate it directly.
You can use the 
Invoke-WmiMethod
 cmdlet.
You can use the 
[wmi]
 type accelerator. 
These techniques are described in the following sections. 
Using the 
terminate 
method directly
Notice that each time the method is called, a 
ReturnValue
 property is returned from the method call. 
This value is used to determine if the method completed successfully. Return codes are documented 
for the 
terminate
 method on MSDN each method has its return codes detailed on MSDN.
Because there is only one instance of the notepad.exe process running on the system, it is possible 
to use the group-and-dot process. 
Grouping characters
 that is, opening and closing parentheses 
placed around the expression return an instance of the object. From there, you can directly call the 
terminate 
method by using dotted notation. An example of this syntax appears next. This technique 
works in the same manner when there is more than one instance of the object.
The second way of calling the 
terminate 
method directly is to use WMI to return an instance of the 
object, store the returned object in a variable, and then call the method via dotted notation. 
To directly call an instance method, use the 
Get-WmiObject
 cmdlet to return objects containing 
an instance method, and store the returned object in a variable. Once stored, instance methods are 
directly available to you.
  
The example that follows uses the group-and-dot dotted notation to call the method. In this 
example, two instances of the notepad.exe process start. The 
Get-WmiObject
 cmdlet returns both 
instances of the process and stores them in a variable. Next, dotted notation calls the 
terminate 
method. This technique of calling the method is new for Windows PowerShell 3.0. In Windows 
PowerShell 2.0, a direct call to the 
terminate 
method fails because the object contained in the variable 
is an array. 
ote
Tab expansion does not enumerate the 
object is an array; therefore, this is one instance where you will need to type out the entire 
method name.
Using the 
Invoke-WmiMethod
 cmdlet
If you want to use the 
Invoke-WmiMethod
 Windows PowerShell cmdlet to call an instance method, 
you must pass a path to the instance to be operated upon. The easiest way to obtain the path to 
[<0057>-2<004B>-9<00480003004C0051>-9<0056>-16<0057>-19<0044>-4<0051>-9<0046>-2<00480003004C>-5<005600030057>-1<0052000300C0>-2<0055>-26<0056>-16<005700030053>-13<0048>-10<0055>-38<0049>-7<0052>-7<0055>-12<0050000300440003003A>-7<0030>-4<002C00030054>-3<0058>-7<0048>-10<0055>-47<005C>34<000F00030044>-3<0051>-11<004700030057>-2<004B>-9<0048>-10<005100030057005200030058>-6<0056>-12<004800030057>-2<004B>-9<00480003>]TJ
RelPath
 system property. The 
RelPath
 system property contains the relative path to the instance of the class. In the example that 
appears here, an instance of the notepad.exe process starts. Next, the 
Get-WmiObject
 cmdlet retrieves 
an instance of the process. Next, the 
__RELPATH
 system property is retrieved from the object stored 
in the 
 variable. 
If working against a remote machine, you will want the complete path to the instance. The com
plete path includes the machine name and the WMI namespace, as well as the class and the key to the 
class. The complete path appears in the 
Path
 system property as shown following. Do not get con
fused; the 
WIN32_Process
 WMI class also contains a 
path
 property. The complete path to the current 
notepad.exe
process stored in the 
 variable appears here:
If you have multiple instances of the notepad.exe
process stored in the 
 variable, you can still 
access the 
__path
 and 
__relpath
 properties. This appears here:
[<0024>-27<005600030056>-4<004B>-9<0052>-3<005A>-9<005100030049>-7<0052>-6<004F>1<004F>-7<0052>-3<005A>-9<004C0051>-11<004A>-11<000F000300C0>-2<0055>-26<0056>-16<005700030046>4<0055>-12<0048>-10<0044>-3<0057>-3<004800030044>-4<00510003004C0051>-9<0056>-16<0057>-19<0044>-4<0051>-9<0046>-2<004800030052004900030057>-2<004B>-9<004800030031>-7<0052>-2<0057>-3<0048>-10<0053>-9<0044>-11<004700030053>-7<0055>-12<0052>-13<0046>-2<0048>-12<0056>-14<0056>-20<000F00030058>-6<0056>-12<004800030057>-2<004B>-9<00480003>]TJ
Get-WmiObject
 cmdlet 
to retrieve that instance of the process, display the value of the
RELPATH
 property, and then call 
the 
Invoke-WmiMethod
 cmdlet. When calling the
Invoke-WmiMethod
 cmdlet, pass the path to the 
instance and the name of the method to use. This appears in the following commands:
  
Using the 
[wmi]
 type accelerator
Another way to call an instance method is to use the 
[wmi]
 type accelerator. The 
[wmi]
 type accelera
tor works with WMI instances. Therefore, if you pass a path to the 
[wmi]
 type accelerator, you can call 
instance methods directly. For this example, start an instance of the Notepad process. Next, use the 
Get-WmiObject
 cmdlet to retrieve all instances of Notepad there is only one instance. Next, pass the 
value of the __
RELPATH
 system property to the 
[wmi]
 type accelerator. This command returns the 
entire instance of the 
WIN32_Process
 class. That is, it returns all properties and methods that are avail
able. All of the properties associated with the 
WIN32_Process
 WMI class the same properties shown 
[<0048>-10<0044>-4<0055>-12<004F004C>-5<0048>-10<0055>6<000C00030049>-7<0052>-7<005500030057>-2<004B>-9<004800030056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<00460003004C0051>-9<0056>-16<0057>-19<0044>-4<0051>-9<0046>-2<00480003005200490003>]TJ
WIN32_Process
 are available via the __
RelPath
 system property 
keep in mind that 
__RelPath
 is preceded with two underscores27a double underscore27not one. To 
see this object in action, select only the 
name
 property from the object and display it on the screen. 
[<0037>55<005200030057>-2<004B>-2<004C>-5<005600030053>-13<0052>-4<004C00510057>-20<000F0003005C>1<0052>-9<005800030046>-14<0044>-4<005100030055>-12<0048>-10<0057>-2<0055>-12<004C>-5<0048>-8<0059>1<00480003004400030056>-3<0053>-13<0048>-16<0046>4<004C>-4<00C0>-5<00460003004C0051>-9<0056>-16<0057>-19<0044>-4<0051>-9<0046>-2<0048000300520049000300440003>]TJ
WIN32_Process
 WMI class via the 
[wmi]
 type 
accelerator. Therefore, it is time to call the 
Terminate
 method. This technique appears here, along with 
the associated output:
Using WMI to work with static methods
When working with WMI and Windows PowerShell, it is common to think about using the 
Get-WmiObject
 cmdlet. Unfortunately, when using the 
Get-WmiObject
 cmdlet with the 
Win32_
SecurityDescriptorHelper
 class, nothing happens. When you attempt to pipeline the results to 
Get-
Member
, an error is produced. The two commands appear here note that 
gwmi
 is an alias for 
Get-
WmiObject
, and 
 is an alias for 
Get-Member
Look up the class in the 
Windows Management Instrumentation Tester WbemTest. The WbemTest 
[<0058>-5<0057>-2<004C004F004C>-5<0057>-38<005C00030044>-4<004F>-9<005A>-3<0044>2<005C>-12<005600030048>-6<005B>-8<004C>-5<0056>-16<0057>-19<00560003005A>-9<004C>-5<0057>-2<004B0003003A>-7<0030>-4<002C>-16<001100030037>55<0052000300C0>-2<0051>-11<00470003004C>-5<0057>-20<000F0003005C>1<0052>-9<005800030046>-14<0044>-4<005100030057>-37<005C>-12<0053>-13<00480003>]TJ
WbemTest
 from within Windows PowerShell. 
From WbemTest, you can see that 
Win32_SecurityDescriptorHelper
 is a dynamic class, and that there 
are many methods available from the class. This appears in Figure 13-1.
FIGURE 13-1
The WbemTest utility shows that the 
Win32_SecurityDescriptorHelper
 WMI class is dynamic and 
contains many methods.
When you click the Instances
button the sixth button from the top on the right side, you will 
see that there are no instances available. Next, click the 
Show MOF button the third button from 
the top on the right side, and you22ll see that all methods are implemented. A method will only work 
if it is marked as 23implemented.24 For example, the 
WIN32_Processor
 WMI class has two methods 
  
listed27
Reset
 and 
SetPowerState
27but unfortunately, neither method is implemented, and therefore 
neither method works in the case of 
WIN32_Processor
[<000F00030057>-2<004B>-9<004800030050>-9<0048>-10<0057>-2<004B>-9<0052>-13<0047>-6<005600030044>-4<0055>-12<004800030047>-7<0048>-9<00C0>-2<0051>-9<0048>-16<004700030052>-7<005100030057>-2<004B>-9<004800030044>-4<0045>-8<0056>-16<0057>-2<0055>-8<0044>-9<0046>-25<005700030046>4<004F>-5<0044>-10<0056>-14<0056>]TJ
CIM_LogicalDevice
 and are inherited. The MOF description for the 
Win32_SecurityDescriptorHelper
WMI class appears in Figure 13-2.
FIGURE 13-2
The 
Win32_SecurityDescriptorHelper
 methods are implemented. They are also static.
Notice that each method is static. Static methods do not use an instance of the WMI class27
the 
Get-WmiObject
 command does not work with 
Win32_SecurityDescriptorHelper
 because 
Get-WmiObject
 returns instances of the class. With this WMI class, there are no instances. 
Perhaps the easiest way to work with the static WMI method is to use the 
[wmiclass]
 type accel
erator. The 
SDDLToBinarySD
 method will translate a
[<00030036>-11<0048>-16<0046>-2<0058>1<0055>-12<004C>-5<0057>-38<005C00030027>-11<0048>-12<0056>-13<0046>4<0055>-12<004C0053>-5<0057>-1<0052>-7<005500030027>-12<0048>-9<00C0>-2<0051>-2<004C>-5<0057>-2<004C>-5<0052>-7<00510003002F>-26<0044>-4<0051>-11<004A>-3<0058>-3<0044>-11<004A>-7<00480003000B>11<00360027>-8<0027>-8<002F>1<000C0003>]TJ
string into binary byte array security descriptor binary SD format. The best way to talk about this 
technique is to walk through an example of converting an SDDL string to 
binary SD format. First, you 
need to obtain an SDDL string27you can do that by using the 
Get-Acl
[<00030046>4<0050>-11<0047>1<004F>-7<0048>-10<0057>-20<001100030037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030057>-2<004B>-2<004C0051>-11<004A00030057>-1<005200030047>-5<00520003004C>-5<00560003>]TJ
give the 
Get-Acl
 cmdlet ACL stands for 
[<002400460046>-2<0048>-12<0056>-14<005600030026>2<0052>-7<00510057>-2<0055>-12<0052>-6<004F0003002F>-9<004C>-5<0056>-16<0057>8<000C00030057>-2<004B>-9<004800030053>-9<0044>-3<0057>-2<004B00030057>-1<005200030044000300C0>-2<004F>-7<004800030052>-7<00510003005C>1<0052>-9<0058>1<0055000300460052>-7<0050>-4<0053>-9<0058>-5<0057>-3<0048>-10<0055>44<001100030037>-7<004B>-9<0048>-10<00510003>]TJ
store the resulting object in the 
$acl
[<00030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<0048>-9<000F00030044>-3<0051>-11<004700030048>-6<005B>-6<0044>-4<0050>-2<004C0051>-9<004800030057>-2<004B>-9<0048000300360027>-8<0027>-8<002F00030056>-16<0057>-2<0055>-12<004C0051>-11<004A00030044>-10<0056>-14<0056>-12<0052>-13<0046>4<004C>-2<0044>-3<0057>-3<0048>-16<00470003005A>-9<004C>-5<0057>-2<004B00030057>-2<004B>-9<0048000300C0>-2<004F>-7<004800030045>-3<005C0003>]TJ
querying the 
SDDL
 property. These two lines of code appear here:
The two commands and associated output appear in Figure 13-3.
FIGURE 13-3
Use the 
Get-Acl
 cmdlet to retrieve the ACL from a directory. Next, obtain the SDDL via the 
sddl 
property.
To convert the SDDL string to binary SD format, use the 
[wmiclass]
 type accelerator and call the 
method directly while supplying an SDDL string to the 
SDDLToBinarySD
 method. The syntax for the 
command appears here:
One thing that is a bit confusing is that in Windows PowerShell, double colons are required to call 
a static method. For example, to obtain the sine of a 45 degree angle, use the 
SIN
 static method from 
the 
system.math
 class. This appears here:
But, here, in WMI, there appears to be no difference between calling a static method or calling an 
instance method. 
All the methods return both the
returnvalue
 property, which provides the status of the command, 
[<0044>-4<0051>-11<004700030057>-2<004B>-9<004800030056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<004600030052>-9<0058>-5<0057>-2<0053>-9<0058>-5<005700030049>-7<0052>-7<005500030057>-2<004B>-9<0048000300460052>-7<0051>4<0059>1<0048>-10<0055>-41<0057>-3<0048>-16<004700030056>-12<0048>-16<0046>-2<0058>1<0055>-12<004C>-5<0057>-38<005C00030047>-6<0048>-12<0056>-13<0046>4<0055>-12<004C0053>-5<0057>-1<0052>-7<0055>43<001100030037>55<005200030055>-12<0048>-10<0057>-2<0055>-12<004C>-5<0048>-8<0059>1<004800030052>-7<0051>-4<004F>-12<005C00030057>-2<004B>-9<004800030045>-6<004C0051>-7<0044>-4<0055>-47<005C00030036002700030052>-10<0058>-5<0057>-2<0053>-9<0058>-5<0057>-20<000F0003>]TJ
you can add that to the end of the method call. The syntax of this command appears here: 
One of the cool things that you can do with the static methods from the 
Win32_
SecurityDescriptorHelper
 class is convert an SDDL security descriptor into an instance of the 
Win32_
SecurityDescriptor
 WMI class. The
Win32_SecurityDescriptor
 WMI class is often used to provide secu
rity for various resources. For example, if you create a new share and want to assign security to the 
share, you will need to provide an instance of 
Win32_SecurityDescriptor
. Using the 
SDDLToWin32SD
method, you can use an SDDL string to get the 
Win32_SecurityDescriptor
 you need. To illustrate using 
the 
SDDLToWin32SD
 method, use the 
Invoke-WmiMethod
 cmdlet to perform the conversion. The fol
lowing one-line command illustrates using the 
Invoke-WmiMethod
 cmdlet to call the 
SDDLToWin32SD
method. 
The other WMI methods from this class behave in a similar fashion, and therefore will not be 
explored. 
  
Executing instance methods: step-by-step exercises
In this exercise, you will use the 
terminate 
instance method from the 
WIN32_Process
 WMI class. This 
provides practice calling WMI instance methods. In the next exercise, you will practice calling static 
class methods. 
Stopping several instances of a process using WMI
1.
Log on to your computer with a user account that does not have administrator rights. 
2.
Open the Windows PowerShell console.
3.
[<0036>14<0057>-19<0044>-4<0055>-41<0057000300C0>-14<0059>1<0048000300460052>-7<0053>-6<004C>-5<0048>-12<005600030052004900030031>-7<0052>-2<0057>-3<0048>-10<0053>-9<0044>-11<0047>-8<001100030037>-7<004B>-9<0048000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<004700030044>-4<0053>-7<0053>-13<0048>-10<0044>-4<0055>-26<00560003004B>-9<0048>-10<0055>-12<0048>5<001D>]TJ
4.
Use the 
Get-WmiObject
 cmdlet to retrieve all instances of the notepad.exe process. The com
mand appears here:
5.
Now pipeline the resulting objects to the 
Remove-WmiObject
 cmdlet. 
6.
[<0036>14<0057>-19<0044>-4<0055>-41<0057000300C0>-14<0059>1<00480003004C0051>-9<0056>-16<0057>-19<0044>-4<0051>-9<0046>-2<0048>-12<005600030052004900030051>-9<0052>-2<0057>-3<0048>-10<0053>-9<0044>-11<0047>-8<001100030037>-7<004B>-9<0048000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<004700030044>-4<0053>-7<0053>-13<0048>-10<0044>-4<0055>-26<00560003004B>-9<0048>-10<0055>-12<0048>5<001D>]TJ
Use the up arrow key to retrieve the 
Get-WmiObject
 command that retrieves all instances of 
Notepad.exe. The command appears here:
8.
Store the returned WMI objects in a variable named 
$process
. This command appears here:
Call the 
terminate 
method from the 
$process
 variable. The command appears here:
10.
[<0036>14<0057>-19<0044>-4<0055>-41<0057000300C0>-14<0059>1<0048000300460052>-7<0053>-6<004C>-5<0048>-12<005600030052004900030051>-9<0052>-2<0057>-3<0048>-10<0053>-9<0044>-11<004700030045>-9<0044>-9<0046>4<004E00030058>1<0053>1<001100030037>-7<004B>-9<0048000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<004700030044>-4<0053>-7<0053>-13<0048>-10<0044>-4<0055>-26<00560003004B>-9<0048>-10<0055>-12<0048>5<001D>]TJ
11.
Use the up arrow key to retrieve the 
Get-WmiObject
 command that retrieves all instances of 
Notepad.exe. The command appears here:
12.
Call the 
terminate 
method from the above expression. Put parentheses around the expression, 
and use dotted notation to call the method. The command appears here:
This concludes the exercise.
In the following exercise, you will use the static 
create 
method from the 
Win32_Share
 WMI class to 
create a new share.
Executing static WMI methods
1.
Open the Windows PowerShell console as a user that has admin rights on the local computer. 
To do this, you can right-click the Windows PowerShell console shortcut and select Run As 
Administrator from the menu.
2.
Create a test folder off of the root named testshare. Here is the command using the 
 alias 
for the 
mkdir
 function:
3.
Create the 
Win32_Share
 object and store it in a variable named 
$share
. Use the 
[wmiclass]
type accelerator. The code appears here:
4.
Call the static 
create 
method from the 
Win32_Share
 object stored in the 
$share
 variable. The 
arguments are 
path
name
type
maximumallowed
description
password
, and 
access
. However, 
[<005C>1<0052>-9<005800030052>-7<0051>-4<004F>-12<005C00030051>-9<0048>-16<0048>-16<004700030057005200030056>-6<0058>1<0053>-7<0053>-8<004F>-12<005C00030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030057>-2<004B>-4<0055>-12<0048>-16<0048>-7<00110003>]TJ
type
 is 0, which is a disk drive share. The syntax of the 
command appears here:
5.
Use the 
Get-WmiObject
 cmdlet and the 
Win32_Share
 class to verify that the share was prop
erly created. The syntax of the command appears here:
6.
[<0031>-7<0052>-3<005A00030044>-11<0047>-7<004700030044000300C0>-2<004F>-5<0057>-3<0048>-10<005500030056>-12<005200030057>-2<004B>-7<0044>-3<005700030057>-2<004B>-9<00480003>]TJ
Get-WmiObject
 cmdlet only returns the newly created share. The 
syntax appears here:
Remove the newly created share by pipelining the results of the previous command to the 
Remove-WmiObject
 cmdlet. The syntax of the command appears here:
  
8.
Use the 
Get-WmiObject
 cmdlet and the 
Win32_Share 
WMI class to verify that the share was 
properly removed. The command appears here:
This concludes the exercise.
Chapter 13 quick reference 
Do this
Use the 
terminate 
method directly 
Group the returning WMI object and use dotted notation 
to call the 
terminate 
method.
Use the 
terminate 
method from a variable containing the 
WMI object
Use dotted notation to call the 
terminate 
method.
Call a static method via the 
Invoke-WMIMethod
 cmdlet
Use the 
-class 
parameter to specify the WMI class name, 
and specify the name of the method via the 
name 
parameter.
Call a static WMI method without using the 
Invoke-
WMIMethod
 cmdlet
Use the 
[wmi]
 type accelerator to retrieve the WMI class, 
store the resulting object in a variable, and use dotted 
notation to call the method. 
Stop processes via WMI and not call the 
terminate 
method 
Use the 
Get-WMIObject 
cmdlet to return the process ob
jects and pipeline the results to the 
Remove-WMIObject
cmdlet.
Find static WMI methods
Use the 
[wmiclass]
 type accelerator to create the WMI ob
ject and pipeline the resulting object to the 
Get-Member
cmdlet.
Find the relative path to a particular WMI instance
Use the 
Get-WMIObject 
cmdlet to retrieve instances and 
choose the 
__RELPATH
 system property.
CHAPTER 14
Using the CIM Cmdlets
fter completing this chapter, you will be able to:
Use the CIM cmdlets to explore WMI classes.
Use CIM classes to obtain WMI data classes.
Use the CIM cmdlets to create a remote session.
Using the CIM cmdlets to explore WMI classes
In Microsoft Windows PowerShell 3.0, the Common Information Model CIM exposes a new applica
tion programming interface API for working with Windows Management Instrumentation WMI 
information. The CIM cmdlets support multiple ways of exploring WMI. They work well when work
ing in an interactive fashion. For example, tab expansion expands the namespace when you use the 
CIM cmdlets, thereby permitting 
exploring namespaces in a simple fashion. These namespaces might 
not otherwise be very discoverable. You can even drill down into namespaces by using this technique 
 tab expansion. All CIM classes support tab expansion of the 
namespace 
parameter, as well as the 
-class 
parameter. But to explore WMI classes, you want to use the 
Get-CimClass
 cmdlet. 
ote
The default WMI namespace on all operating systems after Windows NT 4.0 is Root/
Cimv2. Therefore, all of the CIM cmdlets default to Root/Cimv2. The only time you need to 
change the default WMI namespace via the 
 parameter is when you need to 
use a WMI class from a nondefault WMI namespace.
Using the 
-classname 
parameter
Using the 
Get-CimClass
 cmdlet, you can use wildcards for the 
-classname 
parameter to enable you to 
quickly identify potential WMI classes for perusal. You can also use wildcards for the
[<0010>-16<0054>3<00580044004F>2<004C>-7<00C0>-3<0048>-1<0055>-1<0051>2<00440050>-1<0048>5<0003>]TJ
parameter. In the example appearing here, the 
Get-CimClass
 cmdlet looks for WMI classes related to 
computers. 
  
ote
If you try to use a wildcard for the 
cmdlet, an error returns because the parameter design does not permit wildcard characters.
Finding WMI class methods
[<002C00490003005C>1<0052>-9<00580003005A>-2<0044>-4<00510057000300570052000300C0>-2<0051>-11<00470003003A>-7<0030>-4<002C00030046>4<004F>-5<0044>-10<0056>-14<0056>-12<0048>-12<005600030055>-12<0048>-11<004F>-5<0044>-3<0057>-3<0048>-16<004700030057>-1<005200030053>-7<0055>-12<0052>-13<0046>-2<0048>-12<0056>-14<0056>-12<0048>-12<005600030057>-2<004B>-7<0044>-3<005700030046>1<0052>-7<00510057>-19<0044>-2<004C00510003004400030050>-9<0048>-10<0057>-2<004B>-9<0052>-13<004700030057>-2<004B>-7<0044>-3<005700030045>-13<0048>-16<004A004C0051>-9<00560003005A>-9<004C>-5<0057>-2<004B00030057>-2<004B>-9<00480003004F>-7<0048>-10<0057>]TJ
ters 
term*
, you use a command similar to the one appearing here:
[<0037>55<0052000300C0>-2<0051>-11<004700030044>-4<004F>1<004F0003003A>-7<0030>-4<002C00030046>4<004F>-5<0044>-10<0056>-14<0056>-12<0048>-12<005600030055>-12<0048>-11<004F>-5<0044>-3<0057>-3<0048>-16<004700030057>-1<005200030053>-7<0055>-12<0052>-13<0046>-2<0048>-12<0056>-14<0056>-12<0048>-12<005600030057>-2<004B>-7<0044>-3<005700030048>-6<005B>-8<0053>-13<0052>-7<0056>-12<004800030044>-4<0051>4<005C00030050>-9<0048>-10<0057>-2<004B>-9<0052>-13<0047>-6<0056>-20<000F0003005C>1<0052>-9<00580003005A>-2<0052>-9<0058>1<004F>-8<004700030058>-6<0056>-12<004800030057>-2<004B>-9<0048000300460052>-7<0050>]TJ
mand appearing here:
[<0037>55<0052000300C0>-2<0051>-11<004700030044>-4<0051>4<005C0003003A>-7<0030>-4<002C00030046>4<004F>-5<0044>-10<0056>-14<00560003004C005100030057>-2<004B>-9<00480003>]TJ
root/cimv2 WMI namespace that expose a method called 
create
, use 
the command appearing here:
[<0029>12<004C>12<004F>11<0057>7<0048>2<0055>2<004C>13<0051>2<004A00030046004F>5<0044>-7<0056>-1<0056>-1<0048>-4<005600030045>11<005C00030054>8<0058>5<0044>2<004F>13<004C>12<00C0>8<0048>2<0055>]TJ
[<0037>55<0052000300C0>-2<0051>-11<00470003003A>-7<0030>-4<002C00030046>4<004F>-5<0044>-10<0056>-14<0056>-12<0048>-12<005600030057>-2<004B>-7<0044>-3<005700030053>-13<0052>-7<0056>-14<0056>-12<0048>-12<0056>-14<00560003004400030053>-9<0044>-4<0055>-41<0057>-2<004C>-3<0046>-2<0058>1<004F>-5<0044>-4<00550003003A>-7<0030>-4<002C00030054>-3<0058>-3<0044>-4<004F004C>-5<00C0>-7<0048>-10<0055>39<000F00030058>-6<0056>-12<004800030057>-2<004B>-9<0048>]TJ
[<0010>-27<0034>-12<00580044004F>2<004C>-7<00C0>-3<0048>-1<00550031>-4<00440050>-1<0048>5<0003>]TJ
parameter. 
[<0029>-3<0052>-7<005500030048>-6<005B>-6<0044>-4<0050>-4<0053>-8<004F>-7<0048>-9<000F00030057>-2<004B>-9<004800030049>-7<0052>-6<004F>1<004F>-7<0052>-3<005A>-9<004C0051>-11<004A000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<0047000300C0>-2<0051>-11<0047>-6<00560003003A>-7<0030>-4<002C00030046>4<004F>-5<0044>-10<0056>-14<0056>-12<0048>-12<005600030057>-2<004B>-7<0044>-3<005700030055>-12<0048>-11<004F>-5<0044>-3<0057>-3<004800030057>-1<0052000300460052>-7<0050>-4<0053>-9<0058>-5<0057>-3<0048>-10<0055>-26<005600030044>-4<0051>-11<00470003004B>-7<0044>1<0059>1<004800030057>-2<004B>-9<00480003>]TJ
supportsupdate 
[<003A>-7<0030>-4<002C00030054>-3<0058>-3<0044>-4<004F004C>-5<00C0>-7<0048>-10<0055>43<00110003>]TJ
The parameters can be combined to produce powerful searches that without using the CIM 
[<0046>4<0050>-11<0047>1<004F>-7<0048>-10<0057>-19<00560003005A>-2<0052>-9<0058>1<004F>-8<004700030055>-12<0048>-16<0054>-3<0058004C0055>-12<004800030055>-8<0044>-3<0057>-2<004B>-9<0048>-10<0055000300460052>-7<0050>-4<0053>-8<004F004C>-3<0046>-14<0044>-3<0057>-3<0048>-16<004700030056>-12<0046>4<0055>-12<004C0053>-5<0057>-2<004C0051>-11<004A>-8<001100030029>-3<0052>-7<005500030048>-6<005B>-6<0044>-4<0050>-4<0053>-8<004F>-7<0048>-9<000F00030057>-2<004B>-9<004800030049>-7<0052>-6<004F>1<004F>-7<0052>-3<005A>-9<004C0051>-11<004A000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<0047000300C0>-2<0051>-11<0047>-6<005600030044>-4<004F>1<004F0003>]TJ
WMI classes in the root/Cimv2 namespace that have the 
singleton 
[<0054>-3<0058>-3<0044>-4<004F004C>-5<00C0>-7<0048>-10<005500030044>-4<0051>-11<004700030044>-4<004F>-8<0056>-12<005200030048>-6<005B>-8<0053>-13<0052>-7<0056>-12<00480003004400030050>-9<0048>-10<0057>-2<004B>-9<0052>-13<0047>-8<00110003>]TJ
  
[<0032>-11<0051>-9<004800030054>-3<0058>-3<0044>-4<004F004C>-5<00C0>-7<0048>-10<005500030057>-2<004B>-7<0044>-3<00570003004C>-5<00560003004C0050>-4<0053>-13<0052>-7<0055>-41<0057>-19<0044>-4<0051005700030057005200030055>-12<0048>-8<0059>-12<004C>-5<0048>-9<005A0003004C>-5<005600030057>-2<004B>-9<00480003>]TJ
deprecated 
[<0054>-3<0058>-3<0044>-4<004F004C>-5<00C0>-7<0048>-10<0055>43<001100030027>-11<0048>-10<0053>-7<0055>-12<0048>-16<0046>-14<0044>-3<0057>-3<0048>-16<00470003003A>-7<0030>-4<002C00030046>4<004F>-5<0044>-10<0056>-14<0056>-12<0048>-12<005600030044>-4<0055>-12<00480003>]TJ
not recommended for use because they are being phased out. Using the 
Get-CimClass
 cmdlet makes 
it easy to spot these WMI classes. This technique appears here:
[<0038>-3<0056>-3<004C0051>-11<004A00030057>-2<004B>-2<004C>-5<005600030057>-3<0048>-16<0046>4<004B>-4<0051>-2<004C>-5<0054>-3<0058>-7<0048>-9<000F0003004C>-5<00570003004C>-5<005600030048>-10<0044>-10<0056>-21<005C000300570052000300C0>-2<0051>-11<00470003>]TJ
association classes. 
Association classes
 relate two differ
ent WMI classes. For example, the 
[<003A>-14<004C>5<0051>17<0016>8<0015>-20<0042>-34<0027>-7<004C>9<0056>9<0053>1<004F>4<0044>2<005C>-21<0026>9<00520051>-1<00C0004A>5<0058>4<0055>2<00440057>4<004C>2<00520051>]TJ
 WMI class relates displays and the 
[<0044>-10<0056>-14<0056>-12<0052>-13<0046>4<004C>-2<0044>-3<0057>-3<0048>-16<0047000300460052>-7<005100C0>-7<004A>-3<0058>1<0055>-8<0044>-3<0057>-2<004C>-5<0052>-7<0051>-14<001100030037>-7<004B>-9<0048000300460052>-13<0047>-7<004800030057>-2<004B>-7<0044>-3<005700030049>-7<0052>-6<004F>1<004F>-7<0052>-3<005A>-12<0056000300C0>-2<0051>-11<0047>-6<005600030044>-4<004F>1<004F00030052004900030057>-2<004B>-9<00480003003A>-7<0030>-4<002C00030046>4<004F>-5<0044>-10<0056>-14<0056>-12<0048>-12<00560003004C005100030057>-2<004B>-9<00480003>]TJ
root/cimv2 WMI 
namespace that relate to sessions. In addition, it looks for the 
association
[<00030054>-3<0058>-3<0044>-4<004F004C>-5<00C0>-7<0048>-10<0055>44<00110003002F>-6<0058>-5<0046>4<004E>-14<004C004F>-12<005C>34<000F0003005C>1<0052>-9<005800030046>-14<0044>-4<00510003>]TJ
[<0058>-6<0056>-12<00480003005A>-9<004C004F>-8<0047>-5<0046>-14<0044>-4<0055>-12<0047>-6<005600030049>-7<0052>-7<005500030057>-2<004B>-9<004800030054>-4<0058>-3<0044>-4<004F004C>-5<00C0>-7<0048>-10<005500030051>-7<0044>-4<0050>-9<0048>-12<0056>-4<001E0003004C00510003004E>12<0048>-16<0048>-10<0053>-6<004C0051>-11<004A0003005A>-9<004C>-5<0057>-2<004B00030057>-2<004B>-2<004C>-5<0056>-20<000F00030057>-2<004B>-9<004800030049>-7<0052>-6<004F>1<004F>-7<0052>-3<005A>-9<004C0051>-11<004A000300460052>-13<0047>-7<004800030058>-6<0056>-12<0048>-12<00560003>]TJ
assoc*
 instead of 
the typed-out 
association
[<0032>-11<0051>-9<004800030054>-3<0058>-3<0044>-4<004F004C>-5<00C0>-7<0048>-10<00550003005C>1<0052>-9<005800030056>-4<004B>-9<0052>-9<0058>1<004F>-8<004700030047>-7<0048>-9<00C0>-2<0051>-2<004C>-5<0057>-3<0048>-11<004F>-12<005C0003004F>-7<0052>-13<0052>-7<004E00030049>-7<0052>-7<00550003004C>-5<005600030057>-2<004B>-9<00480003>]TJ
dynamic 
[<0054>-3<0058>-3<0044>-4<004F004C>-5<00C0>-7<0048>-10<0055>43<001100030037>-7<004B>-2<004C>-5<00560003004C>-5<005600030045>-13<0048>-16<0046>-14<0044>-6<0058>-6<0056>-12<004800030054>-4<0058>-7<0048>-10<0055>-47<005C>-12<004C0051>-11<004A0003>]TJ
abstract
WMI classes is unsupported. An abstract WMI class is basically a template class that is used 
by WMI when creating new WMI classes. Therefore, all 
dynamic 
WMI classes will derive from an 
abstract class. Therefore, when looking for WMI classes, you will want to ensure that at some point 
you run your list through the 
dynamic 
[<00C0>-2<004F>-6<0057>-3<0048>-10<0055>44<00110003002C>-1<005100030057>-2<004B>-9<0048000300460052>-13<0047>-7<004800030057>-2<004B>-7<0044>-3<005700030049>-7<0052>-6<004F>1<004F>-7<0052>-3<005A>-12<0056>-20<000F00030057>-2<004B>-4<0055>-12<0048>-16<00480003003A>-7<0030>-4<002C00030046>4<004F>-5<0044>-10<0056>-14<0056>-12<0048>-12<005600030055>-12<0048>-11<004F>-5<0044>-3<0057>-3<0048>-16<00470003005700520003>]TJ
time are returned. 
[<0025>-9<005C00030044>-11<0047>-7<0047004C0051>-11<004A00030057>-2<004B>-9<004800030054>-4<0058>-7<0048>-10<0055>-47<005C00030049>-7<0052>-7<005500030057>-2<004B>-9<004800030054>-4<0058>-3<0044>-4<004F004C>-4<00C0>-7<0048>-10<0055>39<000F0003005C>1<0052>-9<00580003004C>-5<0047>-7<0048>-10<00510057>-2<004C>-3<0049>-48<005C00030057>-2<004B>-9<004800030044>-4<0053>-7<0053>-7<0055>-12<0052>-7<0053>-7<0055>-12<004C>-2<0044>-3<0057>-3<00480003003A>-7<0030>-4<002C00030046>4<004F>-5<0044>-10<0056>-14<0056>-12<0048>-12<0056>-19<001100030032>-11<0051>-9<004800030046>4<004F>-5<0044>-10<0056>-14<00560003004C>-5<00560003>]TJ
abstract, and the other two are dynamic classes that could prove to be useful. In the following code, 
the 
dynamic 
[<0054>-3<0058>-3<0044>-4<004F004C>-5<00C0>-7<0048>-10<00550003004C>-5<0056000300C0>-2<0055>-26<0056>-16<005700030058>-6<0056>-12<0048>-16<0047>-9<000F00030044>-3<0051>-11<004700030057>-2<004B>-9<00480003>]TJ
abstract 
[<0054>-3<0058>-3<0044>-4<004F004C>-5<00C0>-7<0048>-10<005500030044>-4<0053>-7<0053>-13<0048>-10<0044>-4<0055>-26<005600030056>-12<0048>-16<00460052>-7<0051>-11<0047>-8<0011>]TJ
Retrieving WMI instances
To query for WMI data, use the 
Get-CimInstance
 cmdlet. The easiest way to use the
Get-CimInstance
cmdlet is to query for all properties and all instances of a particular WMI class on the local machine. 
This is extremely easy to do. The following command illustrates returning 
BIOS information from the 
local computer:
The 
Get-CimInstance
 cmdlet returns the entire WMI object, but it honors the 
*.format.ps1xml 
[<00C0>-2<004F>-7<0048>-12<005600030057>-2<004B>-7<0044>-3<00570003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030058>-6<0056>-12<0048>-12<005600030057>-1<005200030047>-7<0048>-10<0057>-3<0048>-10<0055>-12<0050>-2<004C0051>-9<00480003005A>-9<004B>-2<004C>-3<0046>4<004B00030053>-7<0055>-12<0052>-7<0053>-13<0048>-10<0055>-41<0057>-2<004C>-5<0048>-12<005600030044>-4<0055>-12<004800030047004C>-5<0056>-4<0053>-8<004F>-5<0044>2<005C>1<0048>-16<004700030045>-3<005C00030047>-7<0048>-8<0049>-9<0044>-6<0058>1<004F>-6<005700030049>-7<0052>-7<0055>10<0003>]TJ
a particular WMI class. The command appearing here shows the properties available from the 
Win32_Bios
 WMI class:
  
educing returned properties and instances
To limit the amount of data returned from a remote connection, you can reduce the number of prop
erties returned, as well as the number of instances. To reduce properties, use the
-property 
parameter. 
To reduce the number of returned instances, use the 
[<0010>-12<00C0>-8<004F>-7<00570048>-6<00550003>]TJ
parameter. The command following uses 
gcim
, which is an alias for the 
Get-CimInstance
 cmdlet. The command also abbreviates the 
-classname 
parameter and the 
[<0010>-12<00C0>-8<004F>-7<00570048>-6<00550003>]TJ
parameter. As shown here, the command only returns the name and the 
state of the 
bits 
service. The default output, however, shows all of the property names as well as the 
system properties. As shown here, however, only the two selected properties contain data.
Cleaning up output from the command
To produce cleaner output, send the selected data to the 
Format-Table
 cmdlet you can use the 
ft 
alias for the 
Format-Table
 cmdlet to reduce typing. 
Make sure you choose properties you have already selected in the 
-property 
parameter, or else 
they will not display. In the command appearing here, the 
status
 property is selected in the 
Format-
Table
 cmdlet. There is a 
status
 property on the 
WIN32_Service
 WMI class, but it was not chosen when 
the properties were selected. 
The 
Get-CimInstance
 cmdlet does not accept a wildcard parameter for property names neither 
does the 
Get-WmiObject
 cmdlet, for that matter. One thing that can simplify some of your coding 
is to put your 
property selection into a variable. This permits you to use the same property names 
in both the 
Get-CimInstance
 cmdlet and the 
Format-Table
 cmdlet or 
Format-List
 or 
Select-Object
, or 
whatever you are using after you get your WMI data without having to type things twice. This tech
nique appears here:
Working with associations
In the old-fashioned VBScript days, working with association classes was extremely complicated. This 
is unfortunate, because WMI association classes are extremely powerful and useful. Earlier versions 
[<005200490003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030056>-4<004C0050>-4<0053>-8<004F004C>-5<00C0>-7<0048>-16<00470003005A>-2<0052>-7<0055>-12<004E>-14<004C0051>-11<004A0003005A>-9<004C>-5<0057>-2<004B00030044>-10<0056>-14<0056>-12<0052>-13<0046>4<004C>-2<0044>-3<0057>-2<004C>-5<0052>-7<005100030046>4<004F>-5<0044>-10<0056>-14<0056>-12<0048>-12<0056>-20<000F00030053>-6<0055>-12<004C0050>-7<0044>-4<0055>-12<004C004F>-12<005C00030045>-13<0048>-16<0046>-14<0044>-6<0058>-6<0056>-12<00480003004C>-5<005700030056>-3<004C0050>-4<0053>-8<004F004C>-5<00C0>-7<0048>-16<00470003>]TJ
[<005A>-2<0052>-7<0055>-12<004E>-14<004C0051>-11<004A0003005A>-9<004C>-5<0057>-2<004B0003003A>-7<0030>-4<002C00030047>-3<0044>-3<0057>-19<00440003004C00510003004A>-7<0048>-10<0051>-9<0048>-10<0055>-8<0044>-4<004F>-9<00110003002B>-7<0052>-3<005A>-2<0048>-8<0059>1<0048>-10<0055>39<000F000300C0>-7<004A>-3<0058>1<0055>-12<004C0051>-11<004A00030052>-9<0058>-5<00570003004B>-9<0052>-3<005A00030057>-1<005200030058>-5<0057>-2<004C004F004C>-7<005D>-1<004800030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F0003>]TJ
  
advantage was still pretty much an advanced technique. Luckily, Windows PowerShell 3.0 has the CIM 
classes that introduce the 
Get-CimAssociatedInstance
 cmdlet. 
[<0037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030057>-2<004B>-2<004C0051>-11<004A00030057>-1<005200030047>-5<00520003005A>-9<004B>-9<0048>-10<005100030044>-3<0057>-31<0057>-3<0048>-10<0050>-4<0053>-5<0057>-2<004C0051>-11<004A000300570052000300C0>-2<0051>-11<0047000300440003003A>-7<0030>-4<002C00030044>-10<0056>-14<0056>-12<0052>-13<0046>4<004C>-2<0044>-3<0057>-2<004C>-5<0052>-7<005100030046>4<004F>-5<0044>-10<0056>-14<00560003004C>-5<005600030055>-12<0048>-10<0057>-2<0055>-12<004C>-5<0048>-8<0059>1<00480003004400030026>12<002C>-4<00300003004C0051>-9<0056>-16<0057>-19<0044>-4<0051>-9<0046>-2<00480003>]TJ
and store it in a 
variable. In the example that follows, instances of the 
Win32_LogonSession
 WMI 
class are retrieved and stored in the 
$logon
 variable. Next, the 
Get-CimAssociatedInstance
 cmdlet is 
used to retrieve instances associated with this class. To see what type of objects will return from the 
command, pipe the results to the 
Get-Member
 cmdlet. As shown here, two things are returned: 
the 
Win32_UserAccount
 class, and all processes that are related to the corresponding user account 
in the form of instances of the 
WIN32_Process
 class. 
  
When the command runs without piping to the 
Get-Member
 object, the instance of the 
Win32_
UserAccount
 WMI class is returned. The output shows the user name, account type, SID, domain, and 
caption of the user account. As shown in the output from 
Get-Member
, a lot more information is 
available, but this is the default display. Following the user account information, the default process 
information displays the process ID, name, and a bit of performance information related to the pro
cesses associated with the user account.
If you do not want to retrieve both classes from the association query, you can specify the result
ing class by name. To do this, use the 
resultclassname 
parameter from the 
Get-CimAssociatedInstance
cmdlet. In the code that follows, only the 
Win32_UserAccount
 WMI class is returned from the query. 
When working with the 
Get-CimAssociatedInstance
 cmdlet, the 
inputobject
 you supply must be 
a single instance. If you supply an object that contains more than one instance of the class, an error 
is raised. This error is shown following, where more than one disk is provided to the 
inputobject 
parameter:
[<0037>-7<004B>-9<0048>-10<0055>-12<004800030044>-4<0055>-12<004800030057>-35<005A>-2<00520003005A>-3<0044>2<005C>-12<005600030057>-1<0052000300460052>-7<0055>-12<0055>-12<0048>-16<0046>-25<005700030057>-2<004B>-2<004C>-5<005600030053>-9<0044>-4<0055>-41<0057>-2<004C>-3<0046>-2<0058>1<004F>-5<0044>-4<005500030048>-10<0055>-12<0055>-12<0052>-7<0055>43<001100030037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<0057>-20<000F00030044>-3<0051>-11<004700030057>-2<004B>-9<004800030048>-10<0044>-10<0056>-3<004C>-5<0048>-12<0056>-16<0057>-20<000F0003004C>-5<005600030057>-1<005200030058>-6<0056>-12<00480003>]TJ
array index
ing
. This technique places square brackets beside the variable holding the collection and retrieves 
[<004400030056>-3<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<00460003004C0051>-9<0056>-16<0057>-19<0044>-4<0051>-9<0046>-2<004800030049>-12<0055>-12<0052>-7<005000030057>-2<004B>-9<0048000300460052>-6<004F>1<004F>-7<0048>-16<0046>-25<0057>-2<004C>-5<0052>-7<0051>-14<001100030037>-7<004B>-2<004C>-5<005600030044>-4<0053>-7<0053>-13<0048>-10<0044>-4<0055>-26<00560003004B>-9<0048>-10<0055>-12<0048>-9<000F0003005A>-9<004B>-9<0048>-10<0055>-12<004800030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030047004C>-5<0056>-4<004E00030055>-12<0048>-10<0057>-8<0058>1<0055>-12<0051>-9<005600030044>-11<0056>-14<0056>-12<0052>-13<0046>4<004C>-2<0044>-3<0057>-3<0048>-16<00470003>]TJ
instances:
  
[<0038>-3<0056>-3<004C0051>-11<004A00030044>-4<0055>-12<0055>-8<0044>2<005C0003004C0051>-11<0047>-7<0048>-6<005B>-8<004C0051>-11<004A0003004C>-5<0056000300C0>-2<0051>-9<00480003005A>-9<004B>-9<0048>-10<00510003005C>1<0052>-10<0058000300C0>-2<0051>-11<00470003005C>1<0052>-9<0058>1<0055>-26<0056>-12<0048>-11<004F>-3<00490003005A>-9<004C>-5<0057>-2<004B00030044>-4<005100030052>-7<0045>-6<004D>-5<0048>-16<0046>-25<005700030057>-2<004B>-7<0044>-3<005700030046>1<0052>-7<00510057>-19<0044>-2<004C0051>-9<005600030044>-4<005100030044>-4<0055>-12<0055>-8<0044>2<005C>35<00110003002B>-7<0052>-3<005A>-2<0048>-8<0059>1<0048>-10<0055>39<000F0003>]TJ
the results might be a bit inconsistent. A better approach is to ensure that you do not have an array 
[<004C005100030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030053>-7<004F>-5<0044>-9<0046>-2<0048>-7<001100030037>55<005200030047>-5<005200030057>-2<004B>-2<004C>-5<0056>-20<000F00030058>-6<0056>-12<004800030057>-2<004B>-9<0048>]TJ
[<0010>-12<00C0>-8<004F>-7<00570048>-6<00550003>]TJ
parameter to reduce the number of instances of your WMI 
[<0046>4<004F>-5<0044>-10<0056>-14<005600030057>-2<004B>-7<0044>-3<005700030044>-3<0055>-12<004800030055>-12<0048>-10<0057>-8<0058>1<0055>-12<0051>-9<0048>-16<0047>-8<00110003002C>-1<005100030057>-2<004B>-9<0048000300460052>-13<0047>-7<004800030044>-4<0053>-7<0053>-13<0048>-10<0044>-4<0055>-12<004C0051>-11<004A0003004B>-9<0048>-10<0055>-12<0048>-9<000F00030057>-2<004B>-9<0048000300C0>-2<004F>-6<0057>-3<0048>-10<005500030055>-12<0048>-10<0057>-8<0058>1<0055>-12<0051>-9<005600030057>-2<004B>-9<004800030051>-6<0058>1<0050>-4<0045>-13<0048>-10<00550003005200490003003A>-7<0030>-4<002C0003004C0051>-9<0056>-16<0057>-19<0044>-4<0051>-9<0046>-2<0048>-12<005600030057>-1<00520003>]TJ
drive C. 
An easy way to see the objects returned by the 
Get-CimAssociatedInstance
 cmdlet is to pipeline 
the returned objects to the 
Get-Member
 cmdlet and then select the 
typename
 property. Because 
more than one instance of the object may return and clutter the output, it is important to choose 
unique type names. This command appears here:
Armed with this information, it is easy to explore the returned associations. This technique appears 
here: 
Keep in mind that the entire WMI class is returned from the previous command, and is therefore 
ripe for further exploration by IT professionals who are interested in the disk subsystems of their com
puters. The easy way to do this exploring is to store the results into a variable, and then walk through 
the data. Once you have what interests you, you may decide to display a nicely organized table. This 
appears here:
Retrieving WMI instances: step-by-step exercises
[<002C>-1<005100030057>-2<004B>-9<0048>-12<0056>-12<004800030048>-6<005B>2<0048>-10<0055>-10<0046>4<004C>-5<0056>-12<0048>-12<0056>-20<000F0003005C>1<0052>-9<00580003005A>-9<004C004F>1<004F00030053>-7<0055>-8<0044>-9<0046>-25<0057>-2<004C>-3<0046>-2<004800030058>-6<0056>-3<004C0051>-11<004A00030057>-2<004B>-9<004800030026>11<002C>-4<003000030046>4<0050>-11<0047>1<004F>-7<0048>-10<0057>-19<005600030057>-1<0052000300C0>-2<0051>-11<004700030044>-4<0051>-11<004700030057>-1<005200030055>-12<0048>-10<0057>-2<0055>-12<004C>-5<0048>-8<0059>1<00480003003A>-7<0030>-4<002C0003004C0051>-9<0056>-16<0057>-19<0044>-4<0051>-9<0046>-2<0048>-12<0056>-19<001100030037>-7<004B>-9<00480003>]TJ
[<00C0>-2<0055>-26<0056>-16<005700030048>-6<005B>-6<0044>-4<0050>-4<0053>-8<004F>-7<004800030058>-6<0056>-12<0048>-12<005600030057>-2<004B>-9<004800030026>11<002C>-4<003000030046>4<0050>-11<0047>1<004F>-7<0048>-10<0057>-19<005600030057>-1<005200030048>-6<005B>-8<0053>-8<004F>-7<0052>-7<0055>-12<00480003003A>-7<0030>-4<002C00030046>4<004F>-5<0044>-10<0056>-14<0056>-12<0048>-12<005600030055>-12<0048>-11<004F>-5<0044>-3<0057>-3<0048>-16<004700030057>-1<005200030059>-13<004C>-5<0047>-7<0048>-16<0052>1<00110003002C>-1<005100030057>-2<004B>-9<004800030056>-12<0048>-16<00460052>-7<0051>-11<004700030048>-6<005B>2<0048>-10<0055>-10<0046>4<004C>-5<0056>-12<0048>-9<000F0003>]TJ
you will examine association WMI classes.
  
Exploring WMI video classes
1.
Log on to your computer with a user account that does not have administrator rights. 
2.
Open the Windows PowerShell console.
3.
Use the 
Get-CimClass
 cmdlet to identify WMI classes related to video. The command and 
associated output appear here:
4.
Filter the output to only return dynamic WMI classes related to video. The command and 
associated output appear here:
5.
Display the 
cimclassname
 and the 
[<0046>10<004C>4<00500046>10<004F>3<0044>6<00560056>6<0054>4<0058>1<0044>1<004F>3<004C>-6<00C0>-1<00480055>-15<0056>]TJ
 properties of each found WMI class. To do 
this, use the 
Format-Table
 cmdlet. The command and associated output appear here:
6.
Change the 
$FormatEnumerationLimit 
value from the original value of 4 to 8 to permit view
ing of the truncated output. Remember that you can use 
tab expansion to keep from typing 
the entire variable name. The command appears here:
Now use the up arrow key to retrieve the previous 
Get-CimClass
 command. Add the 
autosize 
command to the table. The command and associated output appear here:
8.
Query each of the three WMI classes. To do this, pipeline the result of the 
Get-CimClass
 com
mand to the 
ForEach-Object
 command. Inside the script block, call 
Get-CimInstance
 and pass 
the 
cimclassname
 property. The command appears here:
This concludes the
exercise. Leave your Windows PowerShell console for the next exercise.
In the next exercise, you will create and receive associated WMI classes.
etrieving associated WMI classes
1.
Open the Windows PowerShell console as a non-elevated user.
2.
Use the 
Get-CimInstance
 cmdlet to retrieve the 
Win32_VideoController
 WMI class. The com
mand appears following. Store the returned WMI object in the
 variable.
3.
Use the 
Get-CimAssociatedInstance
 cmdlet and supply 
 to the 
inputobject 
parameter. The 
command appears here:
4.
Use the up arrow key to retrieve the previous command. Pipeline the returned WMI objects to 
the 
Get-Member
 cmdlet. Pipeline the results from the 
Get-Member
 cmdlet to the
Select-Object
cmdlet and use the 
-unique 
switched parameter to limit the amount of information returned. 
The command appears here:
  
5.
Use the up arrow key to retrieve the previous command and change it so that it only returns 
instances of 
Win32_PNPEntity
 WMI classes. The command appears here:
6.
Display the complete information from each of the associated classes. To do this, pipeline the 
result from the 
Get-CimAssociatedInstance
 cmdlet to a 
ForEach-Object
 cmdlet, and inside the 
loop, pipeline the current object on the pipeline to the 
Format-List
 cmdlet. The command 
appears here:
This concludes the exercise.
Chapter 14 quick reference 
Do this
Find WMI classes related to disks 
Use the 
Get-CimClass
 cmdlet and use a wildcard pattern 
such as 
*disk*
Find WMI classes that have a method named 
create
Use the 
Get-CimClass
 cmdlet and a wildcard for the 
-classname
 parameter. Use the 
-methodname 
parameter 
to specify that you want classes that have the 
create 
method.
Find dynamic WMI classes
Use the 
Get-CimClass
 cmdlet and specify that you want 
[<0057>-9<004B>-16<004800030054>-10<0058>-10<0044>-11<004F>-7<004C>-12<00C0>-14<0048>-17<0055>]TJ
named 
dynamic
Reduce the number of instances returned by the 
Get-
CimInstance
 cmdlet
Use the 
[<0010>-4<00C0004F0057>7<0048>1<0055>14<0003>]TJ
[<0053>-16<0044>-11<0055>-15<0044>-11<0050>-16<0048>-17<0057>-10<0048>-17<005500030044>-11<0051>-18<004700030056>-13<0058>-6<0053>-14<0053>-15<004F>-19<005C00030044000300C0>-10<004F>-13<0057>-10<0048>-17<005500030057>-9<004B>-14<0044>-10<005700030055>-19<0048>-23<0047>-10<0058>-12<0046>-9<0048>-19<00560003>]TJ
the instances.
Reduce the number of properties returned by the 
Get-
CimInstance
 cmdlet 
Use the 
-property 
parameter and enumerate the required 
properties to return.
Find the types of WMI classes returned by the 
Get-CimAssociatedInstance
 cmdlet
Pipeline the resulting objects to the 
Get-Member
 cmdlet 
and select the 
typename
 property.
Only return a particular associated WMI class from the 
Get-CimAssociatedInstance
 cmdlet
Use the 
resultclassname 
parameter and specify the name 
of one of the returned objects.
CHAPTER 15
Working with 
ctive Directory
fter completing this chapter, you will be able to:
Make a connection to Active Directory.
Understand the use of ADSI providers.
Understand how to work with Active Directory namespaces.
Create organizational units in Active Directory.
Create users in Active Directory.
Create groups in Active Directory.
Modify both users and groups in Active Directory.
Creating objects in Active Directory
Network management in the Microsoft Windows world begins and ends with Active Directory. This 
chapter will cover the user life cycle from a scripting and Active Directory perspective. You will learn 
how to create organizational units OUs, users, groups, and computer accounts. The chapter will then 
[<0047>-7<0048>-12<0056>-13<0046>4<0055>-12<004C0045>-13<00480003004B>-9<0052>-3<005A00030057>-1<005200030050>-9<0052>-13<0047004C>-3<0049>-48<005C00030057>-2<004B>-9<004800030058>-6<0056>-12<0048>-10<0055>-26<005600030044>-4<0051>-11<00470003004A>1<0055>-12<0052>-9<0058>1<0053>-8<0056>-20<000F00030044>-3<0051>-11<0047000300C0>-2<0051>-7<0044>-4<004F>1<004F>-12<005C0003004B>-9<0052>-3<005A00030057>-1<005200030047>-7<0048>-11<004F>-7<0048>-10<0057>-3<004800030057>-2<004B>-9<004800030058>-6<0056>-12<0048>-10<005500030044>-9<004600460052>-10<0058>1<00510057>-20<001100030024>-10<004F>-7<0052>-7<0051>-11<004A00030057>-2<004B>-9<00480003>]TJ
way, you will pick up some more Windows PowerShell techniques. 
The most fundamental object in Active Directory is the OU. One of the most frustrating problems 
for new network administrators is that by default, when Active Directory is installed, all users are put 
in the 
users
 container, and all computers are put in the 
computers
 container27and of course you can
not apply group policy to a container.
Creating an OU
The process of creating an OU in Active Directory provides the basis for creating other objects in 
Active Directory because the technique is basically the same. The key to effectively using PowerShell 
to create objects in Active Directory is using the 
Active Directory Service Interfaces ADSI accelerator.
  
To create an object by using ADSI, perform the following steps:
1.
Use the 
[ADSI]
 accelerator.
2.
Use the appropriate ADSI provider.
3.
Specify the path to the appropriate object in Active Directory.
4.
Use the 
SetInfo
 method to write the changes.
The CreateOU.ps1 script shown following illustrates each of the steps required to create an object 
by using ADSI. The variable 
$strClass
 is used to hold the class of object to create in Active Directory. 
For this script, you will be creating an OU. You could just as easily create a user or a computer27as 
you will see shortly. You use the variable 
$strOUName
 to hold the name of the OU you are going to 
create. For the CreateOU.ps1 script, you are going to create an OU called MyTestOU. Because you will 
pass this variable directly to the 
Create 
method, it is important that you use the distinguished-name 
form, shown here:
The attribute that is used with the 
Create
 method to create an object in Active Directory is called 
the 
relative distinguished name RDN
. Standard attribute types are expected by ADSI27such as 
for 23organizational unit.24 The next line of code in the CreateOU.ps1 script makes the actual connec
tion into Active Directory. To do this, it uses the
 [ADSI]
 accelerator. The 
[ADSI]
 accelerator wants to 
be given the exact path to your connection point in Active Directory or some other directory, as you 
will see shortly and the name of the ADSI provider. The target of the ADSI operation is called the 
ADsPath.
In the CreateOU.ps1 script, you are connecting to the root of the 
NwTraders.msft domain, and you 
are using the LDAP provider. The other providers you can use with ADSI are shown in Table 15-1. After 
you make your connection into Active Directory, you hold the 
system.DirectoryServices.DirectoryEntry
object in the 
$objADSI
 variable.
Armed with the connection into Active Directory, you can now use the 
create
 method to create 
your new object. The 
system.DirectoryServices.DirectoryEntry
 object that is returned is held in the 
$objOU
 variable. You use this object on the last line of the script to call the 
SetInfo
 method to write 
the new object into the Active Directory database. The entire CreateOU.ps1 script is shown here:
CreateOU.ps1
DSI providers
Table 15-1 lists four providers available to users of ADSI. Connecting to a Microsoft Windows NT 4 
system requires using the special 
WinNT
 provider. During Active Directory migrations, consultants 
often write a script that copies users from a Windows NT 4 domain to a Microsoft Windows Server 
2003 Active Directory OU or domain. In some situations such as with customized naming schemes, 
writing a script is easier than using the 
Active Directory Migration Tool ADMT.
TABLE 15-1
ADSI-supported providers
Provider
Purpose
WinNT
To communicate with Windows NT 4.0 
primary domain controllers PDCs and 
backup domain controllers BDCs, and with local account databases for Windows 
2000 and newer workstations and servers
LDAP
To communicate with LDAP servers, including Exchange 5.x directories and 
Windows 2000 Server or Windows Server 2003 Active Directory
NDS
To communicate with 
Novell Directory Services servers
NWCOMPAT
To communicate with 
Novell NetWare 3.x servers
[<0037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030057>-2<004C0050>-9<00480003002C00030057>-2<0055>-12<004C>-5<0048>-16<004700030058>-6<0056>-3<004C0051>-11<004A00030024>-7<0027>-1<0036>1<002C00030057>-1<0052000300460052>-7<0051>-4<0051>-9<0048>-16<0046>-25<00570003005700520003004400030050>-7<0044>-9<0046>4<004B>-2<004C0051>-9<004800030055>-17<0058>1<0051>-4<0051>-2<004C0051>-11<004A0003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030031>-3<0037>41<000F0003002C0003004B>-7<0044>-11<00470003004400030059>1<0048>-10<0055>-47<005C00030049>-12<0055>-17<0058>-6<0056>]TJ
trating experience because of the way the provider was implemented. Type the 
WinNT
 provider name 
exactly
 as shown in Table 15-1. It cannot be typed using all lowercase letters or all uppercase letters. 
All other provider names must be all uppercase letters, but the 
WinNT
 name is 
Pascal cased27that 
is, it is partially uppercase and partially lowercase. Remembering this will save a lot of grief later. In 
addition, you don22t get an error message telling you that your provider name is spelled or capitalized 
incorrectly27rather, the bind operation simply fails to connect.
The ADSI provider names are case sensitive. 
 is all caps; 
 is Pascal-cased. 
Keep this in mind to save a lot of time in troubleshooting.
[<0024>3<0049>-41<0057>-3<0048>-10<005500030057>-2<004B>-9<004800030024>-7<0027>-1<0036>1<002C00030053>-7<0055>-12<0052>-1<0059>-12<004C>-5<0047>-7<0048>-10<00550003004C>-5<005600030056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-7<0048>-16<0047>-9<000F0003005C>1<0052>-9<005800030051>-9<0048>-16<0048>-16<00470003005700520003004C>-5<0047>-7<0048>-10<00510057>-2<004C>-3<0049>-48<005C00030057>-2<004B>-9<004800030053>-9<0044>-3<0057>-2<004B00030057>-1<005200030057>-2<004B>-9<004800030047004C0055>-12<0048>-16<0046>-25<0057>-1<0052>-7<0055>-47<005C00030057>-19<0044>-4<0055>-12<004A>-7<0048>-10<0057>-20<0011000300240003004F004C>-5<0057>-31<0057>-2<004F>-7<00480003>]TJ
knowledge of Active Directory comes in handy here, because of the way the hierarchical naming 
space is structured. When connecting to an LDAP service provider, you must specify where in the 
LDAP database hierarchy to make the connection, because the hierarchy is a structure of the database 
itself27not the protocol or the provider. For instance, in the CreateOU.ps1 script, you create an OU 
that resides off the root of the domain, which is called MyTestOU. This can get confusing, until you 
realize that the MyTestOU OU is contained in a domain that is called 
NWTRADERS.MSFT. It is vital, 
therefore, that you understand the hierarchy with which you are working. One tool you can use to 
make sure you understand the hierarchy of your domain is ADSI Edit.
ADSI Edit is included with the feature called 
AD DS and 
AD LDS Tools
. To install these tools on 
Windows 8 Server, use the 
Add-WindowsFeature
 cmdlet from the 
ServerManager 
module. To deter
mine installation status of the AD DS tools, use the 
Get-WindowsFeature
 cmdlet, as illustrated here:
  
To determine everything that comes with AD DS and AD LDS Tools, pipe the result of the previous 
command to the 
Format-List
 cmdlet. This technique, along with the associated output from the com
mand, appears here: 
To install the tools, pipeline the results from the 
Get-WindowsFeature
 cmdlet to 
Add-WindowsFeature
. This is as easy as using the up arrow key to retrieve the previous command that 
displayed the components of the AD DS tools and exchanging 
Format-List
 for 
Add-WindowsFeature
If automatic updates are not enabled, a warning message is displayed. The command and associated 
warning appear here: 
After installing the tools the output from the 
Add-WindowsFeature
 cmdlet states that no reboot is 
needed following this task, open a blank 
Microsoft Management Console MMC and add the ADSI 
Edit snap-in. 
ote
Because I already have Windows PowerShell open due to adding Active Directory 
tools, I launch the MMC by typing 
 at the Windows PowerShell prompt. I also add 
additional Active Directory tools, such as Active Directory Users and Computers, Active 
Directory Domains and Trusts, and Active Directory Sites and Services. Save this custom 
[<0030>-2<0030>-6<002600030057>2<00520003005C>3<0052>-7<0058>3<005500030053>-5<0055>-10<0052>1<00C0004F>-5<004800030049>-5<0052>-5<005500030054>-1<0058>2<004C>-1<0046>6<004E00030048>-8<0044>-8<0056>-10<004800030052>3<004900030055>-10<0048>-11<0058>-4<0056>-10<0048>-5<0011>]TJ
After you install the snap-in, right-click the ADSI Edit icon, select Connect To, and specify your 
domain, as illustrated in Figure 15-1.
FIGURE 15-1
Exploring the hierarchy of a forest to ensure the correct path for ADSI.
LD
P names
When specifying the OU and the domain name, you have to use the LDAP naming convention, in 
which the namespace is described as a series of naming parts called RDNs mentioned previously. 
The RDN will always be a name part that assigns a value by using the equal sign. When you put 
together all the RDNs, as well as the RDNs of each of the ancestors all the way back to the root, you 
end up with a single globally unique distinguished name.
The RDNs are usually made up of an attribute type, an equal sign, and a string value. Table 15-2 
lists some of the attribute types you will see when working with Active Directory. An example of a 
distinguished name is shown in Figure 15-2.
  
TABLE 15-2
Common relative distinguished name attribute types
Attribute
Description
Domain component
Common name
Organizational unit
Organization name
Street
Street address
Country name
UID
User ID
FIGURE 15-2
Using the 
String Attribute Editor in ADSI Edit to quickly verify the distinguished name of a potential 
target for ADSI scripting.
Binding
Whenever 
you want to do anything with ADSI, you must connect to an object in Active Directory27a 
process also known as 
binding
. Think of binding as being like tying a rope around an object to enable 
you to work with it. Before you can do any work with an object in Active Directory, you must supply 
binding information. The 
binding string
 enables you to use various ADSI elements, including methods 
[<0044>-4<0051>-11<004700030053>-7<0055>-12<0052>-7<0053>-13<0048>-10<0055>-41<0057>-2<004C>-5<0048>-12<0056>-19<001100030037>-7<004B>-9<004800030057>-19<0044>-4<0055>-13<004A>-7<0048>-10<005700030052>1<004900030057>-2<004B>-9<004800030053>-7<0055>-12<0052>-7<0053>-13<0052>-7<0056>-12<0048>-16<004700030044>-9<0046>-25<0057>-2<004C>-5<0052>-7<00510003004C>-5<005600030056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-7<0048>-16<004700030044>-10<00560003004400030046>1<0052>-7<0050>-4<0053>-9<0058>-5<0057>-3<0048>-10<0055>39<000F0003004400030047>-5<0052>-7<0050>-7<0044>-2<004C005100030046>1<0052>-7<00510057>-2<0055>-12<0052>-6<004F>1<004F>-7<0048>-10<0055>39<000F000300440003>]TJ
user, or another element that resides within the directory structure. A binding string consists of four 
parts. These parts are illustrated in Table 15-3, which shows a binding string from a sample script.
TABLE 15-3
Sample binding string
Accelerator
Variable
Provider
ADsPath
[ADSI]
$objDomain
LDAP://
OU=hr, dc=a, dc=com
ote
[<0024>15<0059>3<0052>-2<004C>-3<00470003004400030050004C>-3<0056>-14<0057>-17<0044>-1<004E>14<00480003002C00030050>-5<0044>-9<0047>-5<004800030048>-8<0044>-2<0055>-9<004F>-10<005C00030052>-4<0051>7<001D00030050>-4<0044>-2<004E>14<004800030056>-3<0058>3<0055>-10<004800030057004B>-5<0044>-1<00570003005A>-6<004B>-7<0048>-8<00510003005C>3<0052>-7<0058000300C0>1<0051004C>-3<0056>-1<004B00030046>3<0052>-5<0051>-2<0051>-7<0048>-14<0046>-23<0057004C>2<0051>-9<004A00030044>-1<0051>-9<004700030046>7<0055>-10<0048>]TJ
ating, you actually 
commit your changes to Active Directory. Changes to Active Directory 
are transactional in nature, so your change will roll back if you don22t commit it. Committing 
the change requires you to use the 
 method, as illustrated in the following line 
from the CreateOU.ps1 script:
Also keep in mind when calling a method such as 
 that you must append empty 
parentheses to the method call.
Working with errors
1.
Open the Windows PowerShell ISE or some other Windows PowerShell script editor.
2.
[<0032>-11<005100030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<00570003004F004C0051>-9<00480003005200490003005C>1<0052>-10<0058>1<005500030056>-13<0046>4<0055>-12<004C0053>-5<0057>-20<000F00030057>-37<005C>-12<0053>-13<0048000300440003004F004C0051>-9<004800030057>-2<004B>-7<0044>-3<00570003005A>-9<004C004F>1<004F0003004A>-7<0048>-10<0051>-9<0048>-10<0055>-8<0044>-3<0057>-3<004800030044>-4<005100030048>-10<0055>-12<0055>-12<0052>-7<005500030045>-3<005C00030057>-2<0055>-47<005C>-12<004C0051>-11<004A00030057>-1<005200030046>4<0055>-12<0048>-10<0044>-3<0057>-3<004800030044>-4<00510003>]TJ
object called 
test
. Use the variable 
 to hold this object. The code to do this is shown here:
3.
Print out the value of 
$error.count
. The 
count
 property should contain a single error when the 
script is run. This line of code is shown here:
4.
Save your script as 
<yourname>
WorkWithErrors.ps1. Run your script; you should see it print 
out the number 1 to let you know there is an error on the 
Error
 object. 
5.
The most recent error will be contained on the variable 
error[0]
. Use this to return the 
CategoryInfo
 property the error. This code is shown here:
6.
Print out the details of the most recent error. This code to do this is shown here:
Print out the exception information. To do this, print out the value of the 
Exception
 property 
of the 
$error
 variable. This is shown here:
8.
[<0033>3<0055>-12<004C0051005700030052>-9<0058>-5<005700030057>-2<004B>-9<004800030049>-18<0058>1<004F>1<004F>-12<005C00030054>-3<0058>-3<0044>-4<004F004C>-5<00C0>-7<0048>-16<004700030048>-10<0055>-12<0055>-12<0052>-7<00550003002C>-4<00270003004C0051>2<0049>-7<0052>-7<0055>-12<0050>-7<0044>-3<0057>-2<004C>-5<0052>-7<0051>-14<001100030037>-7<004B>-2<004C>-5<00560003004C>-5<0056000300460052>-7<0051>-1<0057>-19<0044>-2<004C0051>-9<0048>-16<00470003004C005100030057>-2<004B>-9<00480003>]TJ
[<0029>11<0058004F004F>-3<005C>-25<0034>-14<0058>-2<0044>-2<004F004C>-9<00C0>-5<0048>-2<0047>-8<0028>1<0055>-4<0055>-7<0052>-4<0055>-2<002C>-6<0047>]TJ
property of the 
$error
 variable. The code to do this is shown here:
  
Print out the invocation information about the error. To do this, use the 
InvocationInfo
 prop
erty of the 
$error
 variable. The code to do this is shown here:
10.
The last property to query from 
$error
 is the 
TargetObject
 property. This is shown here:
11.
Save and run your script. Notice that you will not obtain information from all the properties.
12.
The 
$error
 variable contains information about all errors that occur during the particular 
Windows PowerShell session, so it is quite likely to contain more than a single error. To intro
duce an additional error into your script, try to create a new object called 
testB
. Assign the 
object that comes back to the variable 
. This code is shown here:
13.
Because you now have more than a single error on the 
Error
 object, you need to walk through 
the collection of errors. To do this, you can use the 
for
 statement. Use a variable called 
as the counter variable and proceed until you reach the value of 
$error.count
. Make sure you 
enclose the statement in parentheses and increment the value of 
 at the end of the state
[<0050>-9<0048>-10<00510057>-20<001100030037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<00570003004F004C0051>-9<004800030052004900030057>-2<004B>-2<004C>-5<0056000300460052>-13<0047>-7<00480003004C>-5<005600030056>-4<004B>-9<0052>-3<005A>-9<00510003004B>-9<0048>-10<0055>-12<0048>5<001D>]TJ
14.
Now change each of the 
error[0]
 statements that print out the various properties of the 
Error
object to use the counter variable 
. Because this will be the code block for the 
for
 statement, 
[<0053>-8<004F>-5<0044>-9<0046>-2<004800030044>-4<005100030052>-7<0053>-13<0048>-10<0051>-2<004C0051>-11<004A00030046>-1<0058>1<0055>-12<004F>-12<005C00030045>-7<0055>-8<0044>-9<0046>4<004E>12<0048>-10<005700030044>-3<005700030057>-2<004B>-9<004800030045>-13<0048>-16<004A004C0051>-4<0051>-2<004C0051>-11<004A00030052004900030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030056>-16<0057>-19<0044>-3<0057>-3<0048>-10<0050>-9<0048>-10<0051005700030044>-4<0051>-11<00470003004400030046>4<004F>-7<0052>-7<0056>-3<004C0051>-11<004A00030052>-7<0051>-9<004800030044>-3<005700030057>-2<004B>-9<00480003>]TJ
end of the last statement. The revised code block is shown here:
15.
Save and run your script. You will see output similar to that shown here:
16.
[<0037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030048>-10<0055>-12<0055>-12<0052>-7<005500030056>-4<004B>-9<0052>-3<005A>-9<00510003004C>-5<00560003004400030055>-12<0048>-12<0056>-5<0058>1<004F>-6<005700030052>1<004900030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<00470003004C00510057>-3<0048>-10<0055>-12<0053>-7<0055>-12<0048>-10<0057>-3<0048>-10<0055>43<001100030037>-7<004B>-9<00480003004F>-5<0044>-10<0056>-16<00570003>]TJ
error shown27with the category, activity, and reason27is a result of your error handling. To 
[<0055>-12<0048>-10<0050>-9<0052>-1<0059>1<004800030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030055>-17<0058>1<0051>-6<0010>8<0057>-2<004C0050>-9<004800030048>-10<0055>-12<0055>-12<0052>-7<0055>39<000F00030058>-6<0056>-12<004800030057>-2<004B>-9<00480003>]TJ
$erroractionpreference
 variable and assign a value of 
SilentlyContinue
 to it. This code is shown here:
17.
Save and run your script. Notice that the run-time error disappears from the top of your 
screen.
18.
[<0037>55<0052000300C0>-2<0051>-11<004700030052>-9<0058>-5<00570003004B>-9<0052>-3<005A00030050>-7<0044>-4<0051>4<005C00030048>-10<0055>-12<0055>-12<0052>-7<0055>-26<005600030044>-4<0055>-12<004800030052>-7<005100030057>-2<004B>-9<00480003>]TJ
Error
 object, you can print out the value of 
$error.
count
. However, just having a single number at the top of the screen would be a little confus
ing. To take care of that, add a descriptive string, such as 
"There are currently " + $error.count 
+ "errors"
. The code to do this is shown here:
19.
Save and run your script. Notice that the string is printed out at the top of your script, as 
shown here:
20.
In your Windows PowerShell window, use the 
$error.clear
 method to clear the errors from 
the 
Error
 object because it continues to count errors until a new Windows PowerShell window 
is opened. This command is shown here:
21.
Now comment out the line that creates the 
testB
 object. This revised line of code is shown 
here:
22.
Now save and run your script. Notice that the string at the top of your Windows PowerShell 
window looks a little strange because of the grammatical error. This is shown here:
23.
[<0037>55<0052000300C0>-11<005B00030057>-2<004B>-2<004C>-5<005600030053>-7<0055>-12<0052>-7<0045>-8<004F>-7<0048>-10<0050>-14<000F0003005C>1<0052>-9<005800030051>-9<0048>-16<0048>-16<004700030057005200030044>-11<0047>-7<004700030056>-12<0052>-7<0050>-9<00480003004F>-7<0052>-13<004A004C>-3<004600030057>-1<005200030047>-7<0048>-10<0057>-3<0048>-16<0046>-25<00570003004C>-3<004900030057>-2<004B>-9<0048>-10<0055>-12<00480003004C>-5<005600030052>-7<0051>-9<004800030048>-10<0055>-12<0055>-12<0052>-7<005500030052>-7<005500030050>-9<0052>-7<0055>-12<004800030057>-2<004B>-7<0044>-4<00510003>]TJ
one error. To do this, you will use an 
if05else
[<00030056>-16<0057>-19<0044>-3<0057>-3<0048>-10<0050>-9<0048>-10<00510057>-20<001100030037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<00570003004F004C0051>-9<00480003005A>-9<004C004F>1<004F00030048>-8<0059>-5<0044>-4<004F>-4<0058>-3<0044>-3<0057>-3<00480003005A>-9<004B>-9<0048>-10<0057>-2<004B>-9<0048>-10<00550003>]TJ
$error.count
 is equal to 1. If it is, then you will print out 
There is currently 1 error
. This code is 
shown here:
  
24.
You can simply use an 
else
 clause and add curly brackets around your previous error state
ment. This revised code is shown here:
25.
Save and run the script. It should correctly detect that there is only one error.
26.
Now remove the comment from the beginning of the line of code that creates the 
testB
 object 
and run the script. It should detect two errors.
This concludes the procedure. 
dding error handling
1.
Use the CreateOU.ps1 script from earlier in this chapter and save it as 
<yourname>
CreateOUwithErrorHandler.ps1.
2.
[<0032>-11<005100030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<00570003004F004C0051>-9<004800030052004900030057>-2<004B>-9<004800030056>-13<0046>4<0055>-12<004C0053>-5<0057>-20<000F00030058>-6<0056>-12<004800030057>-2<004B>-9<00480003>]TJ
$erroractionpreference
 variable to assign the 
SilentlyContinue
 parameter. This will tell the script to suppress error messages and continue 
running the script if possible. This line of code is shown here:
3.
To ensure there are no current errors on the 
Error
 object, use the
clear
 method. To do this, use 
the 
$error
 variable. This line of code is shown here:
4.
At the end of the script, use an 
 statement to evaluate the error count. If an error has 
occurred, then the count will not be equal to 0. This line of code is shown here:
5.
If the condition occurs, the code block to run should return a message stating that an error 
has occurred. It should also print out the 
categoryInfo
 and 
invocationinfo
 properties from the 
current 
$error
 variable. The code to do this is shown here:
6.
Save and run your script. You should see an error generated due to a duplicate attempt to 
create MyTestOU.
Change the OU name to MyTestOU1 and run the script. You should not see an error gener
ated. The revised line of code is shown here:
This concludes the procedure. If you do not get the results you were expecting, compare your 
script with the CreateOUWithErrorHandler.ps1 script.
Quick check
Q.
What is the process of connecting to Active Directory called?
The process of connecting to Active Directory is called binding.
Q.
When specifying the target of an ADSI operation, what is the target called?
The target of the ADSI operation is called the ADsPath.
Q.
An LDAP name is made up of several parts. What do you call each part separated by a 
comma?
An LDAP name is made up of multiple parts that are called relative distinguished names 
RDNs.
Creating users
One fundamental technique you can use with ADSI is creating users. Although using the graphi
cal user interface GUI to create a single user is easy, using the GUI to create a dozen or more users 
would certainly not be. In addition, as you22ll see, because there is a lot of similarity among ADSI 
scripts, deleting a dozen or more users is just as simple as creating them. And because you can use 
[<0057>-2<004B>-9<004800030056>-17<0044>-4<0050>-9<00480003004C0051>-4<0053>-9<0058>-5<005700030057>-3<0048>-6<005B>-37<0057000300C0>-2<004F>-7<004800030049>-7<0052>-7<005500030044>-4<004F>1<004F00030057>-2<004B>-9<004800030056>-12<0046>4<0055>-12<004C0053>-5<0057>-19<0056>-20<000F00030024>-7<0027>-1<0036>1<002C00030050>-7<0044>-4<004E>12<0048>-12<005600030046>4<0055>-12<0048>-10<0044>-3<0057>-2<004C0051>-11<004A00030057>-3<0048>-10<0050>-4<0053>-13<0052>-7<0055>-8<0044>-4<0055>-47<005C00030044>-9<004600460052>-10<0058>1<00510057>-19<005600030049>-7<0052>-7<005500030058>-6<0056>-12<00480003004C0051000300440003004F>-5<0044>-4<004500030052>-7<00550003>]TJ
school a real snap.
To create users, do the following:
1.
Use the appropriate provider for your network.
2.
Connect to the container for your users.
3.
Specify the domain.
4.
Specify the 
User
 class of the object.
5.
Bind to Active Directory.
6.
Use the 
Create
 method to create the user.
Use the 
Put
 method to at least specify the 
sAMAccountName
 attribute.
8.
Use 
SetInfo
 to commit the user to Active Directory.
  
The CreateUser.ps1 script, which follows, is very similar to the CreateOU.ps1 script. In fact, 
CreateUser.ps1 was created from CreateOU.ps1, so a detailed analysis of the script is unnecessary. The 
only difference is that 
$strClass 
is equal to the 
User 
class instead of an 
organizationalUnit 
class.
These scripts use a Windows PowerShell trick. When using VBScript to create a user 
or a group, you must supply a value for the
 attribute. When using 
Windows PowerShell on Windows 2000, this is also the case. With Windows PowerShell 
on Windows Server 2003 or later, however, the 
 attribute will be auto
matically created for you. In the CreateUser.ps1 script, I have included the 
command, which would be required for Windows 2000, but it is not required for Windows 
Server 2003 or later. Keep in mind that the 
generated, is not very user friendly. Here is an example of such an autogenerated name: 
$441000-1A0UVA0MRB0T. Any legacy application requiring the
 value 
[<005A>1<0052>-7<0058>4<004F>-6<004700030057004B>-7<0048>-8<0055>-10<0048>-6<0049>-5<0052>-5<0055>-10<004800030055>-10<0048>-14<0054>-1<0058>2<004C>2<0055>-10<004800030058>-4<0056>-10<0048>-8<0055>-24<005600030057>2<005200030057>-36<005C>-10<0053>-11<00480003004400030059>-3<0044>-2<004F>-2<0058>-5<004800030057004B>-5<0044>-1<00570003004C>-3<005600030047>2<004C>-1<0049>-39<00C0>-3<0046>1<0058>3<004F>-3<005700030057>2<005200030058>-4<0056>-10<004800030044>-1<005700030045>-11<0048>-10<0056>-14<0057>-18<0011>]TJ
CreateUser.ps1
Quick check
Q.
[<0037>55<005200030046>4<0055>-12<0048>-10<0044>-3<0057>-3<00480003004400030058>-6<0056>-12<0048>-10<0055>39<000F0003005A>-9<004B>-2<004C>-3<0046>4<004B00030046>4<004F>-5<0044>-10<0056>-14<005600030050>-6<0058>-6<0056>-16<005700030045>-13<004800030056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-7<0048>-16<0047>14<0022>]TJ
You need to specify the 
 class to create a user.
Q.
What is the 
 method used for?
The 
 method is used to write additional property data to the object that it is bound to.
Creating groups
1.
Open the CreateUser.ps1 script in Notepad and save it as 
<yourname>
CreateGroup.ps1.
2.
Declare a variable called 
$intGroupType
. This variable will be used to control the type of group 
to create. Assign the number 2 to the variable. When used as the group type, a type 2 group 
will be a distribution group. This line of code is shown here:
3.
Change the value of 
$strClass
 from 
User
 to 
Group
. This variable will be used to control the 
type of object that gets created in Active Directory. This is shown here:
4.
Change the name of the 
$objUser
 variable to 
$objGroup
 it22s less confusing that way. This will 
need to be done in two places, as shown here:
5.
Above the 
$objGroup.setInfo 
line, use the 
Put
 method to create a distribution group. The 
distribution group has a group type of 2, and you can use the value held in the 
$intGroupType
variable. This line of code is shown here:
6.
Save and run the script. It should create a group called MyNewGroup in the MyTestOU in 
Active Directory. If the script does not perform as expected, compare your script with the 
CreateGroup.ps1 script.
This concludes the procedure.
Creating a computer account
1.
Open the CreateUser.ps1 script in Notepad and save it as 
<yourname>
CreateComputer.ps1.
2.
Change the 
$strClass
 value from 
user
 to 
computer
. The revised command is shown here:
3.
Change the 
$strName
 value from 
CN=MyNewUser
 to 
CN=MyComputer
. This command is 
shown here: 
The 
[ADSI]
 accelerator connection string is already connecting to 
ou=myTestOU
 and should 
[<0051>-9<0052>-2<005700030051>-9<0048>-16<0048>-16<004700030050>-9<0052>-13<0047004C>-5<00C0>-5<0046>-14<0044>-3<0057>-2<004C>-5<0052>-7<0051>-14<0011>]TJ
4.
Change the name of the 
$objUser
 variable used to hold the object that is returned from the 
Create
 method to 
$objComputer
. This revised line of code is shown here:
5.
Use the 
Put
 method from the 
DirectoryEntry
 object created in the previous line to put the 
value 
MyComputer
 in the 
sAMAccountName
 attribute. This line of code is shown here:
  
6.
Use the 
SetInfo 
method to write the changes to Active Directory. This line of code is shown 
here:
After the 
Computer
 object has been created in Active Directory, you can modify the 
UserAccountControl
 attribute. The value 4128 in 
UserAccountControl
 means the workstation is 
a trusted account and does not need to change the password. This line of code is shown here:
8.
Use the 
SetInfo 
method to write the change back to Active Directory. This line of code is 
shown here:
Save and run the script. You should see a computer account appear in the Active Directory 
Users and Computers utility. If your script does not produce the expected results, compare it 
with CreateComputer.ps1.
This concludes the procedure.
What is user account control?
UserAccountControl
 is an attribute stored in Active Directory that is used to enable or disable a user 
[<0044>-9<004600460052>-9<0058>1<0051>-1<0057>-20<000F00030046>1<0052>-7<0050>-4<0053>-9<0058>-5<0057>-3<0048>-10<005500030044>-9<004600460052>-9<0058>1<0051>-1<0057>-20<000F00030052>-7<005500030052>-2<0057>-2<004B>-9<0048>-10<005500030052>-7<0045>-6<004D>-5<0048>-16<0046>-25<005700030047>-7<0048>-9<00C0>-2<0051>-9<0048>-16<00470003004C0051000300240046>-25<0057>-2<004C>-12<0059>1<004800030027>-8<004C0055>-12<0048>-16<0046>-25<0057>-1<0052>-7<0055>-47<005C>35<00110003002C>-1<00570003004C>-5<005600030051>-9<0052>-2<00570003004400030056>-3<004C0051>-11<004A>1<004F>-7<004800030056>-16<0057>-2<0055>-12<004C0051>-11<004A00030044>-3<0057>-31<0057>-2<0055>-12<004C>]TJ
[<0045>-9<0058>-5<0057>-3<0048>3<001E00030055>-8<0044>-3<0057>-2<004B>-9<0048>-10<0055>39<000F0003004C>-5<00570003004C>-5<00560003004400030056>-12<0048>-10<0055>-12<004C>-5<0048>-12<005600030052004900030045>-6<004C>-5<0057000300C1>-6<0044>-11<004A>-6<005600030057>-2<004B>-7<0044>-3<00570003004A>-7<0048>-10<005700030046>1<0052>-7<0050>-4<0053>-9<0058>-5<0057>-3<0048>-16<004700030049>-12<0055>-12<0052>-7<005000030057>-2<004B>-9<004800030059>-5<0044>-4<004F>-4<0058>-7<0048>-12<00560003004F004C>-5<0056>-16<0057>-3<0048>-16<00470003004C005100030037>59<0044>-4<0045>-8<004F>-7<004800030014>9<0018>-11<0010>-34<0017>-8<001100030025>-12<0048>-16<0046>-14<0044>-6<0058>-6<0056>-12<00480003>]TJ
of the way the 
UserAccountControl
 attribute is created, simply examining the numeric value is of 
little help, unless you can decipher the individual numbers that make up the large number. These 
[<00C1>-6<0044>-11<004A>-6<0056>-20<000F0003005A>-8<004B>-9<0048>-10<005100030044>-11<0047>-7<0047>-7<0048>-16<0047000300570052>-13<004A>-7<0048>-10<0057>-2<004B>-9<0048>-10<0055>39<000F00030046>1<0052>-7<00510057>-2<0055>-12<0052>-6<004F00030057>-2<004B>-9<004800030045>-13<0048>-10<004B>-7<0044>1<0059>-12<004C>-5<0052>-7<005500030052004900030057>-2<004B>-9<004800030058>-6<0056>-12<0048>-10<005500030044>-9<004600460052>-10<0058>1<0051005700030052>-7<005100030057>-2<004B>-9<004800030056>-21<005C>-12<0056>-16<0057>-3<0048>-10<0050>-14<00110003002C>-1<005100030057>-2<004B>-9<004800030056>-13<0046>4<0055>-12<004C0053>-5<00570003>]TJ
[<0026>8<0055>-12<0048>-10<0044>-3<0057>-3<0048>-20<0026>2<0052>-7<0050>-4<0053>-9<0058>-5<0057>-3<0048>-10<0055>43<0011>-8<0053>-8<0056>8<0014>-8<000F0003005C>1<0052>-9<005800030056>-12<0048>-10<005700030057>-35<005A>-2<005200030058>-6<0056>-12<0048>-10<005500030044>-9<004600460052>-9<0058>1<0051>-1<005700030046>1<0052>-7<00510057>-2<0055>-12<0052>-6<004F000300C1>-6<0044>-11<004A>-6<0056>-5<001D00030057>-2<004B>-9<00480003>]TJ
[<0024>-7<0027>-1<0036>-38<0042>-14<0038>-7<0029>48<0042>-34<0033>45<0024>-21<0036>-4<0036>-13<003A>-7<0027>-3<0042>-34<0031>-8<0032>16<0037>-4<0035>-7<0028>3<0034>-9<0027000300C1>-6<0044>-11<004A0003>]TJ
and the 
[<0024>-7<0027>-1<0036>-38<0042>-14<0038>-7<0029>48<0042>12<003A>2<0032>-9<0035>-7<002E>-24<0036>-10<0037>54<0024>55<0037>-4<002C>-10<0032>-9<0031>-33<0042>28<0037>-4<0035>-1<0038>-3<0036>-10<0037>28<0042>-60<0024>13<0026>19<0026>20<0032>-9<0038>-7<0031>-3<0037000300C1>-6<0044>-11<004A>-8<001100030037>-7<004B>-9<004800030053>-9<0044>-10<0056>-14<0056>-18<005A>-2<0052>-7<0055>-12<0047>-2<0010>-4<0051>-9<0052>-2<0057>33<0010>-4<0055>-12<0048>-16<0054>-3<0058004C0055>-12<0048>-16<0047000300C1>-6<0044>-11<004A0003004B>-7<0044>-10<0056000300440003004B>-9<0048>-6<005B>-6<0044>]TJ
[<0047>-7<0048>-16<0046>4<004C0050>-7<0044>-4<004F00030059>-5<0044>-4<004F>-4<0058>-7<004800030052004900030013>-21<005B>-25<00150013>-8<000F00030044>-3<0051>-11<004700030057>-2<004B>-9<004800030057>-2<0055>-17<0058>-6<0056>-16<0057>-3<0048>-16<0047>-2<0010>-6<005A>-2<0052>-7<0055>-12<004E>-31<0056>-16<0057>-19<0044>-3<0057>-2<004C>-5<0052>-7<0051000300C1>-6<0044>-11<004A0003004B>-7<0044>-10<0056000300440003004B>-9<0048>-6<005B>-6<0044>-11<0047>-7<0048>-16<0046>4<004C0050>-7<0044>-4<004F00030059>-5<0044>-4<004F>-4<0058>-7<004800030052004900030013>-21<005B>-6<0014>18<0013>-31<0013>-31<0013>-8<00110003003A>-10<004B>-9<0048>-10<00510003>]TJ
added together and turned into a decimal value, they equal 4128, which is the value actually shown in 
ADSI Edit.
TABLE 15-4
User account control values
ADS constant
Value
ADS_UF_SCRIPT
0X0001
ADS_UF_ACCOUNTDISABLE
0X0002
ADS_UF_HOMEDIR_REQUIRED
0X0008
ADS_UF_LOCKOUT
0X0010
ADS_UF_PASSWD_NOTREQD
0X0020
ADS_UF_PASSWD_CANT_CHANGE
0X0040
ADS_UF_ENCRYPTED_TEXT_PASSWORD_ALLOWED
0X0080
ADS_UF_TEMP_DUPLICATE_ACCOUNT
0X0100
ADS_UF_NORMAL_ACCOUNT
0X0200
ADS_UF_INTERDOMAIN_TRUST_ACCOUNT
0X0800
ADS_UF_WORKSTATION_TRUST_ACCOUNT
0X1000
ADS_UF_SERVER_TRUST_ACCOUNT
0X2000
ADS_UF_DONT_EXPIRE_PASSWD
0X10000
ADS_UF_MNS_LOGON_ACCOUNT
0X20000
ADS_UF_SMARTCARD_REQUIRED
0X40000
ADS_UF_TRUSTED_FOR_DELEGATION
0X80000
ADS_UF_NOT_DELEGATED
0X100000
ADS_UF_USE_DES_KEY_ONLY
0x200000
ADS_UF_DONT_REQUIRE_PREAUTH
0x400000
ADS_UF_PASSWORD_EXPIRED
0x800000
ADS_UF_TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION
0x1000000
Working with users
In this section, you will use ADSI to modify user properties stored in Active Directory. The following 
[<004F004C>-5<0056>-16<005700030056>-5<0058>1<0050>-4<0050>-7<0044>-4<0055>-12<004C>-7<005D>-1<0048>-12<00560003004400030049>-7<0048>-9<005A00030052004900030057>-2<004B>-9<00480003004C>-6<0057>-3<0048>-10<0050>-9<00560003005C>1<0052>-9<005800030046>-14<0044>-4<005100030046>4<004B>-7<0044>-4<0051>-11<004A>-7<004800030052>-7<0055000300460052>-7<005100C0>-7<004A>-3<0058>1<0055>-12<0048>5<001D>]TJ
[<0032>-19<0049>-41<00C0>-5<0046>-2<004800030044>-4<0051>-11<004700030057>-3<0048>-11<004F>-7<0048>-10<0053>-7<004B>-9<0052>-7<0051>-9<0048000300460052>-7<00510057>-19<0044>-9<0046>-25<00570003004C0051>2<0049>-7<0052>-7<0055>-12<0050>-7<0044>-3<0057>-2<004C>-5<0052>-7<0051>]TJ
Mailing address information
Department, title, manager, and direct reports people who report to the user inside the chain 
of command
  
User information that is stored in Active Directory can easily replace data that used to be con
tained in separate disparate places. For instance, you might have an internal website that contains 
a telephone directory; you can put phone numbers into Active Directory as attributes of the 
User
object. You might also have a website containing a social roster that includes employees and their 
hobbies; you can put hobby information in Active Directory as a custom attribute. You can also add to 
Active Directory information such as an organizational chart. The problem, of course, is that during a 
migration, information such as a user22s title is the last thing the harried mind of the network admin
istrator thinks about. To leverage the investment in Active Directory, you need to enter this type of 
information because it quickly becomes instrumental in the daily lives of users. This is where ADSI and 
Windows PowerShell really begin to shine. You can update hundreds or even thousands of records 
[<0048>-10<0044>-10<0056>-4<004C004F>-12<005C00030044>-4<0051>-11<004700030048>-8<0049>-41<00C0>-5<0046>4<004C>-5<0048>-10<00510057>-2<004F>-12<005C00030058>-6<0056>-3<004C0051>-11<004A00030056>-12<0046>4<0055>-12<004C0053>-5<0057>-2<004C0051>-11<004A>-8<0011000300360058>-5<0046>4<004B0003004400030057>-19<0044>-10<0056>-4<004E0003005A>-2<0052>-9<0058>1<004F>-8<004700030045>-13<004800030058>1<00510057>-2<004B>-2<004C0051>-4<004E>-11<0044>-4<0045>-8<004F>-7<004800030058>-6<0056>-3<004C0051>-11<004A000300460052>-7<0051>4<0059>1<0048>-10<00510057>-2<004C>-5<0052>-7<0051>-7<0044>-4<004F00030053>-13<0052>-4<004C00510057>33<0010>2<0044>-4<0051>-11<0047>-2<0010>]TJ
click methods.
To modify user properties in Active Directory, do the following:
1.
Implement the appropriate protocol provider.
2.
Perform binding to Active Directory.
3.
Specify the appropriate ADsPath.
4.
Use the 
Put
 method to write selected properties to users.
5.
Use the 
SetInfo 
method to commit changes to Active Directory.
General user information
One of the more confusing issues when you use Windows PowerShell to modify information in 
Active Directory is that the names displayed on the property page do not correspond with the ADSI 
[<0051>-9<0052>-7<0050>-9<0048>-10<0051>-9<0046>4<004F>-5<0044>-3<0057>-8<0058>1<0055>-12<0048>-7<001100030037>-7<004B>-2<004C>-5<00560003005A>-3<0044>-10<005600030051>-9<0052>-2<005700030047>-5<0052>-7<0051>-9<004800030057>-1<005200030050>-7<0044>-4<004E>12<00480003005C>1<0052>-10<0058>1<00550003004F004C>-3<0049>-7<004800030047004C>-3<0049>-41<00C0>-5<0046>-2<0058>1<004F>-6<0057>-20<001E00030055>-8<0044>-3<0057>-2<004B>-9<0048>-10<0055>39<000F00030057>-2<004B>-9<004800030051>-7<0044>-4<0050>-9<0048>-12<00560003005C>1<0052>-9<005800030056>-12<0048>-16<00480003004C005100030024>-7<0027>-1<0036>1<002C00030044>-4<0055>-12<00480003>]TJ
derived from LDAP standard naming convention. Although this naming convention makes traditional 
LDAP programmers happy, it does nothing for the network administrator who is a casual scripter. This 
is where the following script, 
ModifyUserProperties.ps1, comes in handy. The LDAP properties cor
[<0055>-12<0048>-12<0056>-4<0053>-13<0052>-7<0051>-11<0047004C0051>-11<004A00030057>-1<005200030048>-10<0044>-9<0046>4<004B000300C0>-7<0048>-11<004F>-8<00470003004C005100030029>-2<004C>-5<004A>-3<0058>1<0055>-12<004800030014>9<0018>-11<0010>13<001600030044>-4<0055>-12<004800030058>-6<0056>-12<0048>-16<00470003004C005100030057>-2<004B>-2<004C>-5<005600030056>-13<0046>4<0055>-12<004C0053>-5<0057>-20<0011>]TJ
FIGURE 15-3
ADSI attribute names on the General tab of Active Directory Users and Computers.
Some of the names make sense, but others appear to be rather obscure. Notice the series of 
objUser.Put
[<00030056>-16<0057>-19<0044>-3<0057>-3<0048>-10<0050>-9<0048>-10<00510057>-19<0056>-19<001100030028>-12<0044>-9<0046>4<004B0003004F004C0051>-9<0048>-12<005600030058>1<00530003005A>-9<004C>-5<0057>-2<004B00030057>-2<004B>-9<0048000300460052>-7<0055>-12<0055>-12<0048>-12<0056>-4<0053>-13<0052>-7<0051>-11<0047004C0051>-11<004A000300C0>-7<0048>-11<004F>-8<00470003004C005100030029>-2<004C>-5<004A>-3<0058>1<0055>-12<004800030014>9<0018>-11<0010>13<0016>-7<001100030038>-3<0056>-12<004800030057>-2<004B>-9<004800030059>-5<0044>-4<004F>-4<0058>-7<0048>-12<005600030057>-1<00520003>]TJ
see which display name maps to which LDAP attribute name. Two of the attributes accept an array: 
OtherTelephone 
and 
url. 
The 
url 
[<0044>-3<0057>-31<0057>-2<0055>-12<004C0045>-9<0058>-5<0057>-3<00480003004C>-5<005600030053>-9<0044>-4<0055>-41<0057>-2<004C>-3<0046>-2<0058>1<004F>-5<0044>-4<0055>-12<004F>-12<005C00030050>-2<004C>-5<0056>-5<004F>-7<0048>-10<0044>-11<0047004C0051>-11<004A>-34<00B3>-26<00C0>-2<0055>-26<0056>-16<005700030045>-13<0048>-16<0046>-14<0044>-6<0058>-6<0056>-12<00480003004C>-6<00570003004C>-5<005600030056>-4<004C0051>-11<004A>-3<0058>1<004F>-5<0044>-4<0055>39<000F00030044>-3<0051>-11<00470003>]TJ
second because the 
othertelephone
 value uses the style 
otherTelephone. 
In addition, the primary 
webpage uses the name 
wwwHomePage. 
When supplying values for the 
OtherTelephone 
and 
url 
attributes, ensure the input value is accepted as an array by using the @ characters to cast the string 
into an array. The use of all these values is illustrated in ModifyUserProperties.ps1, shown here:
ModifyUserProperties.ps1
  
Quick check
Q.
[<003A>-10<004B>-7<0044>-3<00570003004C>-5<005600030057>-2<004B>-9<0048000300C0>-7<0048>-11<004F>-8<004700030051>-7<0044>-4<0050>-9<004800030049>-7<0052>-7<005500030057>-2<004B>-9<004800030058>-6<0056>-12<0048>-10<0055>-26<00B7>26<0056000300C0>-2<0055>-26<0056>-16<005700030051>-7<0044>-4<0050>-9<0048>25<0022>]TJ
[<0037>-7<004B>-9<0048000300C0>-7<0048>-11<004F>-8<004700030049>-7<0052>-7<005500030057>-2<004B>-9<004800030058>-6<0056>-12<0048>-10<0055>-26<00B7>26<0056000300C0>-2<0055>-26<0056>-16<005700030051>-7<0044>-4<0050>-9<00480003004C>-5<00560003>]TJ
[<00110003003C>49<0052>-10<005800030046>-14<0044>-4<0051000300C0>-2<0051>-11<0047000300C0>-7<0048>-11<004F>-8<0047>-2<0010>-4<0050>-7<0044>-4<0053>-7<0053>-6<004C0051>-11<004A0003004C0051>2<0049>-7<0052>-7<0055>-12<0050>-7<0044>-3<0057>-2<004C>-5<0052>-7<00510003004C00510003>]TJ
the Platform SDK.
Q.
Why do you need to use the 
 command?
Without the 
 command, all changes introduced during the script are lost because 
[<0057>-2<004B>-9<004800030046>4<004B>-7<0044>-4<0051>-11<004A>-7<0048>-12<005600030044>-4<0055>-12<004800030050>-7<0044>-11<0047>-7<004800030057>-1<00520003004400030046>-14<0044>-9<0046>4<004B>-9<0048>-16<004700030056>-12<0048>-10<005700030052>1<004900030044>-3<0057>-31<0057>-2<0055>-12<004C0045>-9<0058>-5<0057>-3<004800030059>-5<0044>-4<004F>-4<0058>-7<0048>-12<005600030049>-7<0052>-7<005500030057>-2<004B>-9<004800030052>-7<0045>-6<004D>-5<0048>-16<0046>-25<005700030045>-13<0048>-9<004C0051>-11<004A00030050>-9<0052>-13<0047004C>-5<00C0>-7<0048>-16<0047>-8<00110003>]TJ
Nothing is committed to Active Directory until you call 
Creating the address page
One of the more useful tasks you can perform with Active Directory is exposing address informa
tion. This ability is particularly important when a company has more than one location and more 
[<0057>-2<004B>-7<0044>-4<00510003004400030049>-6<0048>-9<005A0003004B>-6<0058>1<0051>-11<0047>1<0055>-12<0048>-16<004700030048>-10<0050>-4<0053>-8<004F>-7<0052>-1<005C>1<0048>-16<0048>-12<0056>-19<00110003002C00030055>-12<0048>-10<0050>-9<0048>-10<0050>-4<0045>-13<0048>-10<005500030052>-7<0051>-9<004800030052004900030050>3<005C000300C0>-2<0055>-26<0056>-16<00570003004C0051>-1<0057>-2<0055>-8<0044>-4<0051>-9<0048>-10<005700030053>-7<0055>-12<0052>-2<004D>-5<0048>-16<0046>-25<0057>-19<00560003005A>-3<0044>-10<005600030057>-1<00520003004B>-9<0052>-7<0056>-16<00570003004400030046>-1<0048>-10<00510057>-2<0055>-8<0044>-4<004F004C>-7<005D>-1<0048>-16<00470003>]TJ
list of employees. Such a project quickly paid for itself because the customer no longer needed an 
administrative assistant to modify, copy, collate, and distribute hundreds of copies of the up-to-date 
employee directory27potentially a full-time job for one person. After the intranet site was in place, 
personnel at each location were given rights to modify the list. This was the beginning of a company-
wide directory. With Active Directory, you avoid this duplication of work by keeping all information 
in a centralized location. The second tab in Active Directory Users and Computers is the Address tab, 
[<0056>-4<004B>-9<0052>-3<005A>-9<00510003004C005100030029>-2<004C>-5<004A>-3<0058>1<0055>-12<004800030014>9<0018>-11<0010>-34<00170003005A>-9<004C>-5<0057>-2<004B00030057>-2<004B>-9<004800030044>-4<0053>-7<0053>-7<0055>-12<0052>-7<0053>-7<0055>-12<004C>-2<0044>-3<0057>-3<0048000300240046>-25<0057>-2<004C>-12<0059>1<004800030027>-8<004C0055>-12<0048>-16<0046>-25<0057>-1<0052>-7<0055>-47<005C00030044>-3<0057>-31<0057>-2<0055>-12<004C0045>-9<0058>-5<0057>-3<004800030051>-7<0044>-4<0050>-9<0048>-12<0056000300C0>-2<004F>1<004F>-7<0048>-16<00470003004C0051>-14<0011>]TJ
FIGURE 15-4
Every item on the 
[<0024>-8<0047>-11<0047>-4<0055>-17<0048>-17<0056>-18<005600030057>-24<0044>-8<00450003004C>-5<005100030024>-4<0046>-29<0057>-7<004C>-17<0059>-4<004800030027>-12<004C>-5<0055>-17<0048>-21<0046>-29<0057>-5<0052>-11<0055>-51<005C00030038>-8<0056>-17<0048>-15<0055>-30<005600030044>-8<0051>-15<004700030026>-3<0052>-11<0050>-8<0053>-14<0058>-10<0057>-7<0048>-15<0055>-30<005600030046>-19<0044>-8<005100030045>-17<0048000300C0>-7<004F>-4<004F>-11<0048>-21<00470003004C>-5<005100030059>-17<004C>-7<004400030024>-12<0027>-6<0036>-4<002C00030044>-8<0051>-15<00470003>]TJ
Windows PowerShell.
In the ModifySecondPage.ps1 script, you use ADSI to set the 
Street
[<003300520056>-11<0057>-21<0032>-18<0049>-51<00C0>-8<0046>3<0048>-11<0025>-15<0052>2<005B>]TJ
City
State
PostalCode
, and 
CountryCode
 values for the 
User
 object. Table 15-5 lists the Active Directory 
attribute names and their mappings to the Active Directory Users and Computers 23friendly24 display 
names.
TABLE 15-5
Address page mappings
Active Directory Users and Computers label
Active Directory attribute name
Street
streetAddress
P.O. Box
[<0053>-12<0052>-3<0056>-14<0057>-24<0032>-20<0049>-53<00C0>-11<00460048>-14<0025>-18<0052>-1<005B>]TJ
City
Note that this is lowercase L.
State/province
Zip/Postal Code
postalCode
Country/region
C ,CO, 
CountryCode
When working with address-type information in Windows PowerShell, the hard thing is keeping 
track of the 
country codes. These values must be properly supplied. Table 15-6 illustrates some typical 
country codes. At times, the country codes seem to make sense; at others times, they do not. Rather 
than guess, you can simply make the changes in Active Directory Users and Computers and use ADSI 
[<0028>2<0047004C>-5<005700030057005200030048>-6<005B>-6<0044>-4<0050>-2<004C0051>-9<004800030057>-2<004B>-9<004800030050>-9<0052>-13<0047004C>-5<00C0>-7<0048>-16<004700030059>-5<0044>-4<004F>-4<0058>-7<0048>-12<0056>-20<000F00030052>-6<00550003005C>1<0052>-9<005800030046>-14<0044>-4<00510003004F>-7<0052>-13<0052>-7<004E00030058>1<005300030057>-2<004B>-9<0048000300460052>-13<0047>-7<0048>-12<00560003004C00510003002C>-7<0036>-5<003200030016>28<0014>22<0019>-11<0019>-27<0010>59<0014>-10<0011>]TJ
  
ModifySecondPage.ps1
TABLE 15-6
ISO 3166-1 country codes
Country code
Country name
AF
AFGHANISTAN
AUSTRALIA
EG
EGYPT
LATVIA
ES
SPAIN
UNITED STATES
Caution
[<0037>-5<004B>-7<004800030057004B>-2<0055>-10<0048>-14<004800030046>3<0052>-7<0058>3<0051>2<00570055>-45<005C000300C0>-5<0048>-9<004F>-6<0047>-4<005600030044>-2<0055>-10<004800030051>-7<005200570003004F>2<004C>2<0051>-2<004E>14<0048>-14<00470003004C>2<005100030024>3<0046>-23<0057004C>-10<0059>3<004800030027>-5<004C>2<0055>-10<0048>-14<0046>-23<0057>2<0052>-5<0055>-45<005C>37<00110003003C>52<0052>-7<005800030046>3<0052>-7<0058>4<004F>-6<004700030048>-7<0044>-8<0056>-1<004C>2<004F>-10<005C0003004B>-4<0044>4<0059>3<0048000300440003>]TJ
 code value of US, a 
 code value of Zimbabwe, and a 
 value of 470 Malta. 
This could occur if someone uses the Active Directory Users and Computers to make a 
change to the 
[<00030053>-4<0055>-10<0052>-5<0053>-11<0048>-8<0055>-39<0057>-36<005C>37<00110003003A>-8<004B>-7<0048>-8<005100030057004B004C>-3<005600030052>-11<0046>2<0046>1<0058>3<0055>-24<0056>-18<000F0003004C>-3<005700030058>3<0053>-13<0047>-1<0044>-1<0057>-1<0048>-10<005600030044>-2<004F>3<004F00030057004B>-2<0055>-10<0048>-14<0048000300C0>-5<0048>-9<004F>-6<0047>-4<0056>-17<00110003002C>3<004900030056>-10<0052>-5<0050>-7<0048>]TJ
one later runs a script to only update the 
 value or the 
 code value, then 
[<0024>3<0046>-23<0057004C>-10<0059>3<004800030027>-5<004C>2<0055>-10<0048>-14<0046>-23<0057>2<0052>-5<0055>-45<005C00030038>-1<0056>-10<0048>-8<0055>-24<005600030044>-2<0051>-9<004700030026>4<0052>-5<0050>-1<0053>-7<0058>-3<0057>-1<0048>-8<0055>-24<00560003005A>-7<004C>2<004F>3<004F00030056>-14<0057004C>2<004F>3<004F00030055>-10<0048>-7<00C1>-7<0048>-14<0046>-23<005700030057>1<004B>-7<0048000300570055>-6<0044>-2<0051>-7<0056>-3<004F>-2<0044>-1<0057>-1<0048>-14<004700030059>-3<0044>-2<004F>-2<0058>-4<004800030052>3<004900030057004B>-7<00480003>]TJ
This could create havoc if your enterprise resource planning ERP application uses the 
or 
 value and not the 
[<00030044>-1<0057>-29<00570055>-9<004C>2<0045>-7<0058>-3<0057>-1<0048>-5<001100030025>-10<0048>-10<0056>-14<005700030053>-4<0055>-6<0044>-7<0046>-23<0057004C>-1<0046>1<00480003004C>-3<005600030057>2<005200030058>3<0053>-13<0047>-1<0044>-1<0057>-1<004800030044>-2<004F>3<004F00030057004B>-2<0055>-10<0048>-14<0048000300C0>-5<0048>-9<004F>-6<0047>-4<00560003>]TJ
through your script.
Quick check
Q.
To set the country name on the address page for Active Directory Users and Computers, 
what is required?
To update the country name on the address page for Active Directory Users and 
Computers, you must specify the 
[<000300C0>-7<0048>-11<004F>-8<004700030044>-4<0051>-11<004700030049>-7<0048>-16<0048>-16<00470003004C>-5<00570003004400030057>-34<005A>-2<0052>-16<0010>-5<004F>-7<0048>-10<0057>-31<0057>-3<0048>-10<0055000300460052>-13<0047>-7<004800030057>-2<004B>-7<0044>-3<00570003004C>-5<005600030049>-7<0052>-9<0058>1<0051>-11<00470003004C00510003002C>-7<0036>-5<00320003>]TJ
publication 3166.
Q.
[<003A>-10<004B>-7<0044>-3<0057000300C0>-7<0048>-11<004F>-8<004700030051>-7<0044>-4<0050>-9<00480003004C005100030024>-7<0027>-1<0036>1<002C0003004C>-5<005600030058>-6<0056>-12<0048>-16<004700030057>-1<005200030056>-4<0053>-13<0048>-16<0046>4<004C>-3<0049>-48<005C00030057>-2<004B>-9<004800030046>4<004C>-5<0057>-38<005C0003004C0051>2<0049>-7<0052>-7<0055>-12<0050>-7<0044>-3<0057>-2<004C>-5<0052>-7<0051>31<0022>]TJ
You set the city information by assigning a value to the 
[<000C000300C0>-7<0048>-11<004F>-8<0047000300440049>-41<0057>-3<0048>-10<005500030050>-7<0044>-4<004E>-14<004C0051>-11<004A00030057>-2<004B>-9<00480003>]TJ
appropriate connection to Active Directory.
Q.
[<002C00490003005C>1<0052>-9<005800030053>-9<0058>-5<005700030044>-4<00510003004C0051>-7<0044>-4<0053>-7<0053>-7<0055>-12<0052>-7<0053>-7<0055>-12<004C>-2<0044>-3<0057>-3<00480003004F>-7<0048>-10<0057>-31<0057>-3<0048>-10<0055000300460052>-13<0047>-7<00480003004C005100030057>-2<004B>-9<004800030026000300C0>-7<0048>-11<004F>-8<0047>-9<000F0003005A>-9<004B>-7<0044>-3<005700030048>-10<0055>-12<0055>-12<0052>-7<005500030050>-9<0048>-12<0056>-14<0056>-17<0044>-11<004A>-7<00480003004C>-5<005600030047004C>-5<0056>-4<0053>-8<004F>-5<0044>2<005C>1<0048>-16<0047>14<0022>]TJ
[<0030>-3<0052>-9<0047>3<004C>3<0049>-41<005C>-8<004C>4<0051>-7<004A00030057>-2<004B>-8<004800030058>-6<0056>-10<0048>-7<005500030053>-4<0055>-12<0052>-2<00C0>2<004F>-4<004800030056>-9<0048>-11<0057>-23<0057>3<004C>4<0051>-7<004A>-6<0056>]TJ
1.
Open the ModifySecondPage.ps1 script you created earlier and save it as 
<yourname>
[<00300052>-5<0047>8<004C>5<0049>-40<005C>-5<0038>5<0056>-4<0048>-2<00550033>11<0055>-4<0052>7<00C0>6<004F>1<0048>1<001100530056>16<0014>-2<0011>]TJ
2.
[<0037>-7<004B>-9<004800030058>-6<0056>-12<0048>-10<005500030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<004800030053>-9<0044>-11<004A>-7<00480003004C0051000300240046>-25<0057>-2<004C>-12<0059>1<004800030027>-8<004C0055>-12<0048>-16<0046>-25<0057>-1<0052>-7<0055>-47<005C0003004C>-5<0056000300460052>-7<0050>-4<0053>-13<0052>-7<0056>-12<0048>-16<004700030052004900030049>-7<0052>-10<0058>1<005500030044>-3<0057>-31<0057>-2<0055>-12<004C0045>-9<0058>-5<0057>-3<0048>-12<0056>-19<001100030027>-11<0048>-11<004F>-7<0048>-10<0057>-3<004800030044>-4<004F>1<004F00030045>-10<0058>-5<005700030049>-7<0052>-9<0058>1<00550003005200490003>]TJ
the 
$objUser.put
[<000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<0047>-6<0056>-19<001100030037>-7<004B>-9<004800030044>-9<0046>-25<0057>-8<0058>-3<0044>-4<004F00030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<004800030044>-3<0057>-31<0057>-2<0055>-12<004C0045>-9<0058>-5<0057>-3<0048>-12<005600030044>-4<0055>-12<004800030056>-4<004B>-9<0052>-3<005A>-9<00510003004C005100030029>-2<004C>-5<004A>-3<0058>1<0055>-12<004800030014>9<0018>-11<0010>15<0018>-6<0011>]TJ
  
FIGURE 15-5
[<0024>-12<0027>-6<0036>-4<002C00030044>-8<0057>-35<0057>-7<0055>-16<004C>-5<0045>-14<0058>-9<0057>-8<0048>-17<005600030058>-11<0056>-17<0048>-21<004700030057>-5<0052000300C0>-7<004F>-4<004F00030052>-14<0058>-9<005700030057>-6<004B>-14<004800030033>-2<0055>-17<0052>-6<00C0>-7<004F>-11<004800030057>-24<0044>-8<00450003004C>-5<005100030024>-4<0046>-29<0057>-7<004C>-17<0059>-4<004800030027>-12<004C>-5<0055>-17<0048>-21<0046>-29<0057>-5<0052>-11<0055>-51<005C>29<0011>]TJ
3.
[<0037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030044>-3<0057>-31<0057>-2<0055>-12<004C0045>-9<0058>-5<0057>-3<00480003005C>1<0052>-10<005800030051>-9<0048>-16<0048>-16<004700030057005200030056>-6<0058>1<0053>-7<0053>-8<004F>-12<005C0003004400030059>-5<0044>-4<004F>-4<0058>-7<004800030049>-7<0052>-7<00550003004C>-5<00560003>]TJ
[<0033>11<0055>-3<0052>-5<00C0>-1<004F>4<0048>-4<0033>12<00440057>4<004B>]TJ
. This controls where the user22s 
[<0053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<00480003005A>-9<004C004F>1<004F00030045>-13<004800030056>-16<0057>-1<0052>-7<0055>-12<0048>-16<0047>-8<001100030032>-11<005100030050>3<005C00030056>-12<0048>-10<0055>-47<0059>1<0048>-10<0055>39<000F00030057>-2<004B>-9<00480003004F>-7<0052>-13<0046>-14<0044>-3<0057>-2<004C>-5<0052>-7<00510003004C>-5<00560003003F>58<003F002F>-8<0052>-7<0051>-11<0047>-5<0052>-7<0051>32<003F0033>3<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-12<00560003004C00510003004400030049>-7<0052>-6<004F>-8<0047>-7<0048>-10<005500030051>-7<0044>-4<0050>-9<0048>-16<0047000300440049>-41<0057>-3<0048>-10<00550003>]TJ
[<0057>-2<004B>-9<004800030058>-6<0056>-12<0048>-10<0055>39<000F0003005A>-9<004B>-2<004C>-3<0046>4<004B0003004C005100030057>-2<004B>-2<004C>-5<005600030046>-15<0044>-10<0056>-12<00480003004C>-5<005600030050>3<005C>-9<0031>-9<0048>-9<005A>-9<0038>-3<0056>-12<0048>-10<0055>43<001100030028>2<0047004C>-5<005700030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030052>1<004900030057>-2<004B>-9<00480003>]TJ
$objUser.put
 commands you left 
[<004C00510003005C>1<0052>-9<0058>1<005500030056>-13<0046>4<0055>-12<004C0053>-5<005700030057005200030050>-7<0044>-3<0057>-1<0046>4<004B0003005C>1<0052>-10<0058>1<005500030048>-10<0051>4<0059>-12<004C0055>-12<0052>-7<0051>-4<0050>-9<0048>-10<0051>-1<0057>-20<001100030037>-7<004B>-9<004800030050>-9<0052>-13<0047004C>-5<00C0>-7<0048>-16<00470003>]TJ
$objUser.put
 command is shown here:
4.
The next attribute you need to supply a value for is 
ScriptPath
. This controls which logon script 
will be run when the user logs on. Even though this attribute is called 
ScriptPath
, it does not 
expect an actual path statement it assumes the script is in the 
sysvol
 share; rather, it sim
ply needs the name of the logon script. On my server, I use a logon script called 
logon.vbs. 
Modify the second 
$objUser.put
 statement in your script to point to a logon script. The modi
[<00C0>-7<0048>-16<0047000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<00470003004C>-5<005600030056>-4<004B>-9<0052>-3<005A>-9<00510003004B>-9<0048>-10<0055>-12<0048>5<001D0003>]TJ
5.
[<0037>-7<004B>-9<004800030057>-2<004B>-2<004C0055>-12<004700030044>-3<0057>-31<0057>-2<0055>-12<004C0045>-9<0058>-5<0057>-3<004800030057>-2<004B>-7<0044>-3<005700030051>-9<0048>-16<0048>-16<0047>-6<005600030057>-1<005200030045>-13<004800030056>-12<0048>-10<005700030049>-7<0052>-7<005500030057>-2<004B>-9<004800030058>-6<0056>-12<0048>-10<005500030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<00480003004C>-5<005600030046>-14<0044>-4<004F>1<004F>-7<0048>-16<00470003>]TJ
HomeDirectory
, and 
it is used to control where the user22s home directory will be stored. This attribute needs a 
Universal Naming Convention UNC26formatted path to a shared directory. On my server, 
each user has a home directory named after his or her logon user name. The folders are 
stored in a shared directory called Users. Modify the third 
$objUser.put
 statement in your 
script to point to the appropriate home directory location for your environment. The com
pleted command is shown here:
6.
[<0037>-7<004B>-9<00480003004F>-5<0044>-10<0056>-16<005700030058>-6<0056>-12<0048>-10<005500030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<004800030044>-3<0057>-31<0057>-2<0055>-12<004C0045>-9<0058>-5<0057>-3<004800030057>-2<004B>-7<0044>-3<005700030051>-9<0048>-16<0048>-16<0047>-6<005600030057>-1<005200030045>-13<004800030050>-9<0052>-13<0047004C>-5<00C0>-7<0048>-16<00470003004C>-5<00560003>]TJ
HomeDrive
. The 
HomeDrive
 attri
bute in Active Directory is used to control the mapping of a drive letter to the user22s home 
directory. On my server, all users22 home drives are mapped to drive H for 
home
. Please note 
that Active Directory does not expect a trailing backslash for the 
HomeDirectory
 attribute. 
Modify the last 
$objUser.put
 command to map the user22s home drive to the appropriate drive 
[<004F>-7<0048>-10<0057>-31<0057>-3<0048>-10<005500030049>-7<0052>-7<00550003005C>1<0052>-10<0058>1<005500030048>-10<0051>4<0059>-12<004C0055>-12<0052>-7<0051>-4<0050>-9<0048>-10<00510057>-20<001100030037>-7<004B>-9<004800030050>-9<0052>-13<0047004C>-5<00C0>-7<0048>-16<0047000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<00470003004C>-5<005600030056>-4<004B>-9<0052>-3<005A>-9<00510003004B>-9<0048>-10<0055>-12<0048>5<001D>]TJ
[<0036>-13<0044>1<0059>1<004800030044>-4<0051>-11<004700030055>-17<0058>1<00510003005C>1<0052>-9<0058>1<005500030056>-13<0046>4<0055>-12<004C0053>-5<0057>-20<00110003002C00490003004C>-5<005700030047>-5<0052>-13<0048>-12<005600030051>-9<0052>-2<005700030050>-9<0052>-13<0047004C>-3<0049>-48<005C00030057>-2<004B>-9<004800030058>-6<0056>-12<0048>-10<0055>-26<00B7>26<005600030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<004800030053>-9<0044>-11<004A>-7<004800030044>-10<005600030048>-6<005B>-8<0053>-13<0048>-16<0046>-25<0057>-3<0048>-16<0047>-9<000F00030046>1<0052>-7<0050>-4<0053>-9<0044>-4<0055>-12<00480003>]TJ
[<005C>1<0052>-9<0058>1<005500030056>-13<0046>4<0055>-12<004C0053>-5<00570003005A>-9<004C>-5<0057>-2<004B00030057>-2<004B>-9<004800030030>-8<0052>-13<0047004C>-3<0049>-48<005C>-13<0038>-3<0056>-12<0048>-10<0055>-8<0033>3<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-7<0011>-8<0053>-8<0056>8<001400030056>-13<0046>4<0055>-12<004C0053>-5<005700030056>-3<004B>-9<0052>-3<005A>-9<00510003004B>-9<0048>-10<0055>-12<0048>-7<0011>]TJ
This concludes the procedure.
Modifying the user telephone settings
1.
Open the 
[<0030>-8<0052>-13<0047004C>-3<0049>-48<005C>-23<0036>-11<0048>-16<00460052>-7<0051>-11<0047>-1<0033>6<0044>-11<004A>-7<0048>-7<0011>-8<0053>-8<0056>8<001400030056>-13<0046>4<0055>-12<004C0053>-5<00570003005C>1<0052>-9<005800030046>4<0055>-12<0048>-10<0044>-3<0057>-3<0048>-16<004700030048>-10<0044>-4<0055>-12<004F004C>-5<0048>-10<005500030044>-4<0051>-11<004700030056>-17<0044>1<0059>1<004800030057>-2<004B>-9<0048000300C0>-2<004F>-7<004800030044>-10<00560003>]TJ
<yourname>
ModifyTelephone Attributes.ps1.
2.
The 
Telephones tab in Active Directory Users and Computers for a user account is composed 
of six attributes. These attribute names are shown in Figure 15-6, which also illustrates the 
[<00C0>-7<0048>-11<004F>-8<004700030051>-7<0044>-4<0050>-9<0048>-12<0056>-20<000F00030044>-10<005600030056>-4<004B>-9<0052>-3<005A>-9<00510003004C0051000300240046>-25<0057>-2<004C>-12<0059>1<004800030027>-8<004C0055>-12<0048>-16<0046>-25<0057>-1<0052>-7<0055>-47<005C00030038>-3<0056>-12<0048>-10<0055>-26<005600030044>-4<0051>-11<004700030026>2<0052>-7<0050>-4<0053>-9<0058>-5<0057>-3<0048>-10<0055>-26<005600030052>-7<005100030057>-2<004B>-9<004800030037>55<0048>-11<004F>-7<0048>-10<0053>-7<004B>-9<0052>-7<0051>-9<0048>-12<005600030057>-19<0044>-4<004500030049>-7<0052>-7<005500030057>-2<004B>-9<00480003>]TJ
User
 object. Delete all but six of the 
$objUser.put
 commands from your script.
3.
[<0037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030044>-3<0057>-31<0057>-2<0055>-12<004C0045>-9<0058>-5<0057>-3<00480003005C>1<0052>-10<005800030050>-9<0052>-13<0047004C>-3<0049>-48<005C0003004C>-5<005600030057>-2<004B>-9<00480003>]TJ
HomePhone
 attribute for the MyNewUser user account. 
[<0037>55<005200030047>-5<005200030057>-2<004B>-2<004C>-5<0056>-20<000F00030046>4<004B>-7<0044>-4<0051>-11<004A>-7<004800030057>-2<004B>-9<004800030059>-5<0044>-4<004F>-4<0058>-7<004800030052004900030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<00570003>]TJ
$objUser.put
 command so that it is now writing to the 
HomePhone
 attribute in Active Directory. The phone number for the MyNewUser account 
is 555 555-1222. For this example, you are leaving off the country code and enclosing the 
[<0044>-4<0055>-12<0048>-10<004400030046>1<0052>-13<0047>-7<00480003004C005100030053>-9<0044>-4<0055>-12<0048>-10<00510057>-2<004B>-9<0048>-12<0056>-12<0048>-12<0056>-19<001100030037>-7<004B>-2<004C>-5<00560003004C>-5<005600030051>-9<0052>-2<005700030055>-12<0048>-16<0054>-3<0058004C0055>-12<0048>-16<0047>-9<000F0003004B>-9<0052>-3<005A>-2<0048>-8<0059>1<0048>-10<0055>39<000F00030049>-7<0052>-7<0055000300240046>-25<0057>-2<004C>-12<0059>1<004800030027>-8<004C0055>-12<0048>-16<0046>-25<0057>-1<0052>-7<0055>-47<005C>35<001100030037>-7<004B>-9<004800030050>-9<0052>-13<0047004C>-4<00C0>-7<0048>-16<00470003004F004C0051>-9<00480003>]TJ
of code is shown here:
  
4.
The next telephone attribute in Active Directory is the 
Pager
 attribute. Your user account has a 
pager number that is 555 555-1333. Modify the second 
$objUser.put
 line of your script to put 
this value into the 
Pager
 attribute. The revised line of code is shown here:
5.
The third telephone attribute you need to modify on your user account is 
the mobile telephone attribute. The name of this attribute in Active Directory is 
Mobile
. The 
mobile telephone number for your user is 555 555-1223. Edit the third 
$objUser.put
 com
mand in your script so that you are writing this value into the 
Mobile
 attribute. The revised line 
of code is shown here:
6.
The fourth telephone attribute that needs to be assigned a value is for the fax machine. 
The attribute in Active Directory that is used to hold the fax machine telephone number 
is 
FacsimileTelephoneNumber
. Our user has a fax number that is 555 555-1224. Edit the 
fourth 
$objUser.put
 command in your script to write the appropriate fax number into the 
FacsimileTelephoneNumber 
attribute in Active Directory. The revised code is shown here:
[<0037>-7<004B>-9<0048000300C0>-5<0049>-41<0057>-2<004B00030057>-3<0048>-11<004F>-7<0048>-10<0053>-7<004B>-9<0052>-7<0051>-9<004800030044>-3<0057>-31<0057>-2<0055>-12<004C0045>-9<0058>-5<0057>-3<004800030057>-2<004B>-7<0044>-3<005700030051>-9<0048>-16<0048>-16<0047>-6<005600030057>-1<005200030045>-13<004800030044>-10<0056>-14<0056>-3<004C>-5<004A>1<0051>-9<0048>-16<00470003004400030059>-5<0044>-4<004F>-4<0058>-7<004800030049>-7<0052>-7<00550003005C>1<0052>-10<0058>1<005500030058>-6<0056>-12<0048>-10<00550003004C>-5<005600030049>-7<0052>-7<005500030057>-2<004B>-9<00480003002C>-4<00330003>]TJ
address of the user22s IP telephone. In Active Directory, this attribute is called 
IPPhone
. The 
myNewUser account has an IP telephone with the IP address of 192.168.6.112. Modify the 
[<00C0>-5<0049>-41<0057>-2<004B0003>]TJ
$objUser.put
 command so that it will supply this information to Active Directory when the 
script is run. The revised command is shown here:
FIGURE 15-6
Attributes on the Telephones tab in Active Directory.
8.
Copy the previous telephone attributes and modify them for the 
other-
type attributes. 
These include the following: 
OtherFacsimileTelephoneNumber
OtherHomePhone
OtherPager
OtherMobile
, and 
OtherIPPhone
[<0029>-2<004C0051>-7<0044>-4<004F>1<004F>-12<005C>34<000F00030057>-2<004B>-9<00480003004F>-5<0044>-10<0056>-16<005700030057>-3<0048>-11<004F>-7<0048>-10<0053>-7<004B>-9<0052>-7<0051>-9<004800030044>-3<0057>-31<0057>-2<0055>-12<004C0045>-9<0058>-5<0057>-3<00480003004C>-5<005600030057>-2<004B>-9<004800030051>-9<0052>-2<0057>-3<0048>-12<0056>-19<00110003002C>-1<0051000300240046>-25<0057>-2<004C>-12<0059>1<004800030027>-8<004C0055>-12<0048>-16<0046>-25<0057>-1<0052>-7<0055>-47<005C>34<000F00030057>-2<004B>-2<004C>-5<0056000300C0>-7<0048>-11<004F>-8<00470003004C>-5<005600030046>-15<0044>-4<004F>1<004F>-7<0048>-16<004700030057>-2<004B>-9<00480003>]TJ
info 
attribute. Use the 
put 
method to add the following information to the 
info 
attribute.
10.
[<0036>-13<0044>1<0059>1<004800030044>-4<0051>-11<004700030055>-17<0058>1<00510003005C>1<0052>-9<0058>1<005500030056>-13<0046>4<0055>-12<004C0053>-5<0057>-20<00110003003C>49<0052>-9<005800030056>-3<004B>-9<0052>-9<0058>1<004F>-8<004700030056>-12<0048>-16<004800030057>-2<004B>-9<004800030044>-4<004F>1<004F00030057>-2<004B>-9<004800030053>-7<0055>-12<0052>-7<0053>-13<0048>-10<0055>-41<0057>-2<004C>-5<0048>-12<005600030052>-7<005100030057>-2<004B>-9<004800030037>55<0048>-11<004F>-7<0048>-10<0053>-7<004B>-9<0052>-7<0051>-9<0048>-12<005600030057>-19<0044>-4<0045000300C0>-2<004F>1<004F>-7<0048>-16<00470003004C00510003>]TJ
for the MyNewUser account. If this is not the case, you may want to compare your script with 
the ModifyTelephoneAttributes.ps1 script shown here.
  
This concludes the procedure.
Creating multiple users
1.
Open the CreateUser.ps1 script you created earlier and save it as 
<yourname>
CreateMultipleUsers.ps1.
2.
On the second line of your script, change the name of the variable 
$strName
 to 
$aryNames
because the variable will be used to hold an array of user names. On the same line, change the 
CN=MyNewUser user name to CN=MyBoss. Leave the quotation marks in place. At the end 
of the line, place a comma and type in the next user name27
CN=MyDIrect1
27ensuring you 
encase the name in quotation marks. The third user name is going to be CN=MyDirect2. The 
completed line of code is shown here:
3.
Under the 
$objADSI 
line that uses the 
[ADSI]
 accelerator to connect into Active Directory, and 
above the 
$objUser
 line that creates the user account, place a 
foreach
 statement. Inside the 
parentheses, use the variable 
$strName
 as the single object and 
$aryNames
 as the name of 
the array. This line of code is shown here:
4.
Below the 
foreach
 line, place an opening curly bracket to mark the beginning of the code 
block. On the line after 
$objUser.setinfo
, close the code block with a closing curly bracket. 
The entire code block is shown here:
5.
Save and run your script. You should see three user accounts27MyBoss, MyDirect1, and 
MyDirect227magically appear in the MyTestOU OU. If this does not happen, compare your 
script with the CreateMultipleUsers.ps1 script shown here.
This concludes the procedure.
ote
One interesting thing about Windows PowerShell is that it can read inside a string, 
[<00C00051>-9<00470003004400030059>-3<0044>-2<0055>-9<004C0044>-2<0045>-5<004F>-5<0048>-7<000F00030044>-1<0051>-9<004700030056>-3<0058>3<0045>-6<0056>-14<0057004C>-3<0057>-6<0058>-3<0057>-1<004800030057004B>-7<004800030059>-3<0044>-2<004F>-2<0058>-4<004800030052>3<004900030057004B>-7<004800030059>-3<0044>-2<0055>-9<004C0044>-1<0045>-5<004F>-5<0048>-7<000F0003004C>3<0051>-7<0056>-14<0057>-1<0048>-7<0044>-9<004700030052>3<00490003004D0058>-4<0056>-14<00570003004C>3<0051>2<0057>-1<0048>-8<0055>-9<0053>-5<0055>-10<0048>-8<0057004C>2<0051>-9<004A00030057004B>-7<004800030059>-3<0044>-2<0055>-9<004C>]TJ
able as a string literal. This makes it easy to build up compound strings from information 
stored in multiple variables. Here22s an example:
Modifying the organizational settings
1.
Open the ModifySecondPage.ps1 script and save it as 
<yourname>
ModifyOrganizationalPage.ps1.
2.
In this script, you are going to modify four attributes in Active Directory, so you can delete all 
but four of the 
$objUser.put
 commands from your script. The 
Organization tab from Active 
Directory Users and Computers is shown in Figure 15-7, along with the appropriate attribute 
names.
FIGURE 15-7
Organization attributes in Active Directory.
  
3.
[<0037>55<005200030050>-7<0044>-4<004E>12<00480003005C>1<0052>-9<0058>1<005500030056>-13<0046>4<0055>-12<004C0053>-5<005700030050>-9<0052>-7<0055>-12<0048000300C1>-10<0048>-6<005B>-8<004C0045>-8<004F>-7<0048>-9<000F0003005C>1<0052>-9<005800030044>-4<0055>-12<00480003004A>-5<0052>-4<004C0051>-11<004A00030057>-1<005200030044>-4<0045>-8<0056>-16<0057>-2<0055>-8<0044>-9<0046>-25<005700030050>-6<0058>-5<0046>4<004B00030052004900030057>-2<004B>-9<0048000300460052>-7<0051>-4<0051>-9<0048>-16<0046>-25<0057>-2<004C>-5<0052>-7<005100030056>-16<0057>-2<0055>-12<004C0051>-11<004A0003>]TJ
[<004C0051>2<0049>-7<0052>-7<0055>-12<0050>-7<0044>-3<0057>-2<004C>-5<0052>-7<00510003004C00510057>-1<005200030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<0048>-12<0056>-19<001100030037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<00480003005C>1<0052>-9<00580003005A>-9<004C004F>1<004F00030058>-6<0056>-12<00480003004C>-5<005600030052>-7<0051>-9<004800030057>-1<00520003004B>-9<0052>-6<004F>-8<004700030057>-2<004B>-9<004800030047>-5<0052>-7<0050>-7<0044>-2<004C005100030051>-7<0044>-4<0050>-9<0048>-7<001100030026>-11<0044>-4<004F>1<004F0003>]TJ
this variable 
$strDomain
 and assign it a value of 
dc=nwtraders,dc=msft
 assuming this is the 
name of your domain. This code is shown here:
4.
The second variable you22ll declare is the one that will hold the name of the OU. In this proce
dure, your users reside in an OU called ou=myTestOU, so you should assign this value to the 
variable 
$strOU
. This line of code is shown here:
5.
The user name you are going to be working with is MyNewUser. Users are not domain com
ponents referred to with 
, nor are they OUs; rather, they are containers referred to with 
. Assign the string 
cn=MyNewUser
 to the variable 
$strUser
. This line of code is shown here:
6.
The last variable you need to declare and assign a value to is the one that will hold 
MyNewUser22s manager. His name is myBoss. The line of code that holds this information in the 
$strManager
 variable is shown here:
So far, you have hardly used any information from the ModifySecondPage.ps1 script. Edit the 
$objUser
 line that holds the connection into Active Directory by using the 
[ADSI]
 accelerator 
so that it uses the variables you created for the user, OU, and domain. Windows PowerShell 
will read the value of the variables instead of interpreting them as strings. This makes it really 
easy to modify the connection string. The revised line of code is shown here:
8.
[<0030>-8<0052>-13<0047004C>-3<0049>-48<005C00030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<00570003>]TJ
$objUser.put
 command so that it assigns the value 
Mid-Level Manager
 to the 
title
 attribute in Active Directory. This command is shown here:
Modify the second 
$objUser.put
 command so that it assigns a value of 
sales
 to the 
department
attribute in Active Directory. This command is shown here:
10.
Modify the third 
$objUser.put
 command and assign the string 
North Wind Traders
 to the 
com
pany
 attribute. This revised line of code is shown here:
11.
The last attribute you need to modify is the 
manager
 attribute. To do this, you will use the last 
$objUser.put
 command. The 
manager
 attribute needs the complete path to the object, so you 
will use the name stored in 
$strManager
, the OU stored in 
$strOU
, and the domain stored in 
$strDomain
. This revised line of code is illustrated here:
12.
Save and run your script. You should see the
[<00030032>-11<0055>-13<004A>-3<0044>-4<0051>-2<004C>-7<005D>-18<0044>-3<0057>-2<004C>-5<0052>-7<005100030057>-19<0044>-4<0045000300C0>-2<004F>1<004F>-7<0048>-16<004700030052>-9<0058>-5<00570003004C0051000300240046>-25<0057>-2<004C>-12<0059>1<004800030027>-8<004C0055>-12<0048>-16<0046>-25<0057>-1<0052>-7<0055>-47<005C0003>]TJ
[<0038>-3<0056>-12<0048>-10<0055>-26<005600030044>-4<0051>-11<004700030026>2<0052>-7<0050>-4<0053>-9<0058>-5<0057>-3<0048>-10<0055>-26<0056>-19<001100030037>-7<004B>-9<004800030052>-7<0051>-4<004F>-12<005C00030044>-3<0057>-31<0057>-2<0055>-12<004C0045>-9<0058>-5<0057>-3<004800030057>-2<004B>-7<0044>-3<00570003004B>-7<0044>-10<005600030051>-9<0052>-2<005700030045>-13<0048>-16<0048>-10<0051000300C0>-2<004F>1<004F>-7<0048>-16<004700030052>-9<0058>-5<00570003004C>-5<005600030057>-2<004B>-9<004800030044>-3<0057>-31<0057>-2<0055>-12<004C0045>-9<0058>-5<0057>-3<004800030049>-7<0052>-7<00550003>]TJ
the MyNewUser user direct reports. However, if you open the MyBoss user, you will see 
MyNewUser listed as a direct report for the MyBoss user. If your script does not perform as 
expected, then compare your script with the ModifyOrganizationalPage.ps1 script shown here.
This concludes the procedure.
Deleting users
There 
are times when you22ll need to delete user accounts, and with ADSI, you can very easily delete 
large numbers of users with the single click of a mouse. Some reasons for deleting user accounts 
follow:
To clean up a computer lab environment27that is, to return machines to a known state.
To clean up accounts at the end of a school year. Many schools delete all student-related 
[<0044>-9<004600460052>-9<0058>1<0051>-1<0057>-19<005600030044>-4<0051>-11<0047000300C0>-2<004F>-7<0048>-12<005600030044>-3<005700030057>-2<004B>-9<004800030048>-10<0051>-11<004700030052004900030048>-10<0044>-9<0046>4<004B0003005C>1<0048>-10<0044>-4<0055>43<001100030036>-10<0046>4<0055>-12<004C0053>-5<0057>-2<004C0051>-11<004A00030050>-7<0044>-4<004E>12<0048>-12<00560003004C>-5<005700030048>-10<0044>-10<0056>-21<005C00030057>-1<005200030045>-13<0052>-2<0057>-2<004B00030046>4<0055>-12<0048>-10<0044>-3<0057>-3<004800030044>-4<0051>-11<004700030047>-7<0048>-11<004F>-7<0048>-10<0057>-3<00480003>]TJ
the accounts.
To clean up temporary accounts created for special projects. If the creation of accounts is 
scripted, their deletion can also be scripted, ensuring no temporary accounts are left lingering 
in the directory.
To delete users, take the following steps:
1.
Perform the binding to the appropriate OU.
2.
Use 
[ADSI]
 to make a connection.
  
3.
Specify the appropriate provider and ADsPath.
4.
Call the Delete method.
5.
Specify 
User
 for the 
object
 class.
6.
Specify the user to delete by the 
CN 
attribute value.
To delete a user, call the 
Delete
 method after binding to the appropriate level in the Active 
Directory namespace. Then specify both the 
object
 class, which in this case is 
User
, and the 
 attri
bute value of the user to be deleted. This can actually be accomplished in only two lines of code:
If you modify the CreateUser.ps1 script, you can easily transform it into a 
DeleteUser.ps1 script, 
which follows. The main change is in the 
Worker
 section of the script. The binding string, shown here, 
is the same as earlier:
However, in this case, you use the connection that was made in the binding string and call the 
Delete
 method. You specify the class of the object in the 
$strClass
 variable in the 
Reference
 section 
of the script. You also list the 
$strName
. The syntax is 
DeleteClass, target
. The deletion takes effect 
immediately. No 
SetInfo 
command is required. This command is shown here:
The DeleteUser.ps1 script entailed only two real changes from the CreateUser.ps1 script. This 
makes user management very easy. If you need to create a large number of temporary users, you 
can save the script and then use it to get rid of them when they have completed their projects. The 
complete DeleteUser.ps1 script is shown here:
DeleteUser.ps1
Creating multiple organizational units: step-by-step exercises
[<002C>-1<005100030057>-2<004B>-9<0048>-12<0056>-12<004800030048>-6<005B>2<0048>-10<0055>-10<0046>4<004C>-5<0056>-12<0048>-12<0056>-20<000F0003005C>1<0052>-9<00580003005A>-9<004C004F>1<004F00030048>-6<005B>-8<0053>-8<004F>-7<0052>-7<0055>-12<004800030057>-2<004B>-9<004800030058>-6<0056>-12<00480003005200490003004400030057>-3<0048>-6<005B>-37<0057000300C0>-2<004F>-7<004800030057>-1<00520003004B>-9<0052>-6<004F>-8<004700030057>-2<004B>-9<004800030051>-7<0044>-4<0050>-9<0048>-12<005600030052004900030050>-6<0058>1<004F>-5<0057>-2<004C0053>-8<004F>-7<004800030032>-9<0038>-3<00560003005C>1<0052>-9<00580003005A>-9<004C>-5<0056>-4<004B0003005700520003>]TJ
[<0046>4<0055>-12<0048>-10<0044>-3<0057>-3<00480003004C0051000300240046>-25<0057>-2<004C>-12<0059>1<004800030027>-8<004C0055>-12<0048>-16<0046>-25<0057>-1<0052>-7<0055>-47<005C>35<001100030024>3<0049>-41<0057>-3<0048>-10<00550003005C>1<0052>-10<005800030046>4<0055>-12<0048>-10<0044>-3<0057>-3<004800030057>-2<004B>-9<004800030052>-7<0055>-12<004A>-3<0044>-4<0051>-2<004C>-7<005D>-18<0044>-3<0057>-2<004C>-5<0052>-7<0051>-7<0044>-4<004F00030058>1<0051>-2<004C>-5<0057>-19<00560003004C005100030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030048>-6<005B>2<0048>-10<0055>-10<0046>4<004C>-5<0056>-12<0048>-9<000F0003005C>1<0052>-9<00580003005A>-9<004C004F>1<004F00030044>-11<0047>-7<00470003>]TJ
users to the OU in the second exercise.
ote
To complete these exercises, you will need access to a Windows server running AD 
DS. Modify the domain names listed in the exercises to match the name of your domain.
[<0026>7<0055>-12<0048>-11<0044>-6<0057>4<004C>4<0051>-7<004A00030032>-1<0038>1<005600030049>-5<0055>-12<0052>-2<00500003004400030057>-2<0048>-5<005B>-32<0057000300C0>2<004F>-4<0048>]TJ
1.
Open the Windows PowerShell ISE or some other script editor.
2.
[<0026>8<0055>-12<0048>-10<0044>-3<0057>-3<00480003004400030057>-3<0048>-6<005B>-37<0057000300C0>-2<004F>-7<004800030046>-14<0044>-4<004F>1<004F>-7<0048>-16<004700030056>-16<0057>-3<0048>-10<0053>-7<0045>-2<005C>-12<0056>-16<0057>-3<0048>-10<0053>1<0011>12<0057>-34<005B>-37<0057>-20<001100030037>-7<004B>-9<0048000300460052>-7<0051>-1<0057>-3<0048>-10<00510057>-19<005600030052004900030057>-2<004B>-9<004800030057>-3<0048>-6<005B>-37<0057000300C0>-2<004F>-7<004800030044>-4<0053>-7<0053>-13<0048>-10<0044>-4<00550003004B>-9<0048>-10<0055>-12<0048>5<001D>]TJ
3.
[<00030030>-5<0044>-4<004E>12<004800030056>-6<0058>1<0055>-12<00480003005C>1<0052>-10<00580003004B>-7<0044>1<0059>1<004800030057>-2<004B>-9<004800030048>-6<005B>-6<0044>-9<0046>-25<005700030053>-9<0044>-3<0057>-2<004B00030057005200030057>-2<004B>-2<004C>-5<0056000300C0>-2<004F>-7<0048>-7<001100030032>-11<005100030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<00570003004F004C0051>-9<00480003005200490003005C>1<0052>-9<0058>1<005500030056>-13<0046>4<0055>-12<004C0053>-5<0057>-20<000F00030046>4<0055>-12<0048>-10<0044>-3<0057>-3<00480003004400030059>-5<0044>-4<0055>-12<004C>]TJ
able called 
$aryText
. Use this variable to hold the object that is returned by the 
Get-Content
[<0046>4<0050>-11<0047>1<004F>-7<0048>-10<0057>-20<001100030036>1<0053>-13<0048>-16<0046>4<004C>-3<0049>-48<005C00030057>-2<004B>-9<004800030053>-9<0044>-3<0057>-2<004B00030057005200030057>-2<004B>-9<004800030056>-16<0057>-3<0048>-10<0053>-7<0045>-3<005C>-12<0056>-16<0057>-3<0048>-10<0053>1<0011>12<0057>-34<005B>-37<0057000300C0>-2<004F>-7<004800030044>-11<005600030057>-2<004B>-9<004800030059>-5<0044>-4<004F>-4<0058>-7<004800030052004900030057>-2<004B>-9<00480003>]TJ
-path
 argument. The line 
of code that does this is shown here:
4.
When the 
Get-Content
[<00030046>4<0050>-11<0047>1<004F>-7<0048>-10<00570003004C>-5<005600030058>-6<0056>-12<0048>-16<0047>-9<000F0003004C>-5<005700030046>4<0055>-12<0048>-10<0044>-3<0057>-3<0048>-12<005600030044>-4<005100030044>-4<0055>-12<0055>-8<0044>2<005C00030049>-12<0055>-12<0052>-7<00500003004400030057>-2<0048>-6<005B>-37<0057000300C0>-2<004F>-7<0048>-7<001100030037>55<00520003005A>-3<0044>-4<004F>1<004E00030057>-2<004B>-4<0055>-12<0052>-10<0058>-7<004A>1<004B00030048>-10<0044>-9<0046>4<004B0003>]TJ
element of the array, you will use the 
ForEach
 cmdlet. Use a variable called 
$aryElement
 to 
hold the line from the 
$aryText
 array. This line of code is shown here:
5.
Begin your script block with an opening curly bracket. This is shown here:
6.
Use the variable 
$strClass
 to hold the string 
organizationalUnit
, because this is the kind of 
object you will be creating in Active Directory. The line of code to do this is shown here:
[<0037>-7<004B>-9<004800030051>-7<0044>-4<0050>-9<004800030052004900030048>-10<0044>-9<0046>4<004B00030032>-8<00380003005C>1<0052>-9<005800030044>-4<0055>-12<00480003004A>-5<0052>-4<004C0051>-11<004A00030057>-1<005200030046>4<0055>-12<0048>-10<0044>-3<0057>-3<0048000300460052>-7<0050>-9<0048>-12<005600030049>-13<0055>-12<0052>-7<005000030048>-9<0044>-9<0046>4<004B0003004F004C0051>-9<004800030052004900030057>-2<004B>-9<004800030056>-16<0057>-3<0048>-10<0053>-7<0045>-3<005C>-12<0056>-16<0057>-3<0048>-10<0053>1<0011>12<0057>-34<005B>-37<0057000300C0>-2<004F>-7<0048>-7<00110003>]TJ
[<002C>-1<00510003005C>1<0052>-10<0058>1<005500030057>-3<0048>-6<005B>-37<0057000300C0>-2<004F>-7<0048>-9<000F00030057>-1<005200030056>-4<004C0050>-4<0053>-8<004F004C>-3<0049>-48<005C00030057>-2<004B>-9<0048000300460052>-13<0047004C0051>-11<004A00030057>-19<0044>-10<0056>-4<004E>-34<000F0003005C>1<0052>-9<00580003004C0051>-9<0046>4<004F>-4<0058>-7<0047>-7<0048>-16<00470003>]TJ
ou=
 as part of each OU name. The 
$strOUName
 variable that will be used in the 
Create
 command has a straight value assign
ment of one variable to another. This line of code is shown here:
8.
The next line of code in your code block is the one that connects into Active Directory by 
using the 
[ADSI]
 accelerator. You are going to use the LDAP provider and connect to the 
NwTraders.msft domain. You assign the object that is created to the 
$objADSI
 variable. This 
line of code is shown here:
Now you are ready to actually create the OUs in Active Directory. To do this, you will use the 
Create
 method. You specify two properties for the 
Create
 method: the name of the class to 
  
create and the name of the object to create. Here, the name of the class is stored in the vari
able 
$strClass
. The name of the object to create is stored in the 
$strOUName
 variable. The 
object that is returned is stored in the 
$objOU
 variable. This line of code is shown here:
10.
To write changes back to Active Directory, you use the 
SetInfo 
method. This is shown here:
11.
Now you must close the code block. To do this, close it with a curly bracket, as shown here:
12.
Save your script as 
<yourname>
[<0036>14<0057>-3<0048>-10<0053>-9<0025>-9<005C>-23<0036>14<0057>-3<0048>-10<0053>1<0011>-8<0053>-8<0056>8<0014>-10<0011000300350058>1<00510003005C>1<0052>-9<0058>1<005500030056>-13<0046>4<0055>-12<004C0053>-5<0057>-20<00110003003C>49<0052>-9<005800030056>-3<004B>-9<0052>-9<0058>1<004F>-8<004700030056>-12<0048>-16<0048000300C0>-14<0059>1<004800030032>-9<0038>-3<00560003>]TJ
created off the root of your domain. If this is not the case, compare your script with the 
StepByStep.ps1 script that appears here:
This concludes the exercise.
In the following exercise, you will create nine temporary user accounts using concatenation. You22ll 
[<0056>-4<0053>-13<0048>-16<0046>4<004C>-3<0049>-48<005C00030059>-5<0044>-4<004F>-4<0058>-7<0048>-12<005600030049>-7<0052>-7<005500030057>-2<004B>-9<004800030058>-6<0056>-12<0048>-10<0055>-26<005600030049>-13<0055>-12<0052>-7<00500003004400030057>-3<0048>-6<005B>-37<0057000300C0>-2<004F>-7<004800030044>-4<0051>-11<004700030053>-13<0052>-7<0053>-9<0058>1<004F>-5<0044>-3<0057>-3<004800030044>-3<0057>-31<0057>-2<0055>-12<004C0045>-9<0058>-5<0057>-3<0048>-12<005600030052>-7<005100030045>-13<0052>-2<0057>-2<004B00030057>-2<004B>-9<004800030024>-3<0047>-7<0047>1<0055>-12<0048>-12<0056>-14<005600030057>-19<0044>-4<004500030044>-4<0051>-11<004700030057>-2<004B>-9<00480003>]TJ
Telephones tab.
Creating multivalued users
1.
Open the Windows PowerShell ISE or your favorite Windows PowerShell script editor.
2.
[<0026>8<0055>-12<0048>-10<0044>-3<0057>-3<00480003004400030057>-3<0048>-6<005B>-37<0057000300C0>-2<004F>-7<004800030046>-14<0044>-4<004F>1<004F>-7<0048>-16<004700030032>-11<0051>-9<0048>-4<0036>14<0057>-3<0048>-10<0053>-9<0029>7<0058>1<0055>-41<0057>-2<004B>-9<0048>-10<0055>43<0011>12<0057>-34<005B>-37<0057>-20<001100030037>-7<004B>-9<0048000300460052>-7<00510057>-3<0048>-10<00510057>-19<005600030052004900030057>-2<004B>-2<004C>-5<0056000300C0>-2<004F>-7<004800030044>-4<0053>-7<0053>-13<0048>-10<0044>-4<00550003004B>-9<0048>-10<0055>-12<0048>5<001D>]TJ
3.
Use the 
Get-Content
[<00030046>4<0050>-11<0047>1<004F>-7<0048>-10<005700030057005200030052>-7<0053>-13<0048>-10<005100030057>-2<004B>-9<004800030032>-11<0051>-9<0048>-4<0036>14<0057>-3<0048>-10<0053>-9<0029>7<0058>1<0055>-41<0057>-2<004B>-9<0048>-10<0055>43<0011>12<0057>-34<005B>-37<0057000300C0>-2<004F>-7<0048>-7<001100030038>-3<0056>-12<004800030057>-2<004B>-9<00480003>]TJ
-path
 argument to 
[<0053>-13<0052>-4<004C0051005700030057005200030057>-2<004B>-9<004800030048>-6<005B>-6<0044>-9<0046>-25<005700030053>-9<0044>-3<0057>-2<004B00030057005200030057>-2<004B>-9<0048000300C0>-2<004F>-7<0048>-7<00110003002B>-7<0052>-6<004F>-8<004700030057>-2<004B>-9<004800030044>-4<0055>-12<0055>-8<0044>2<005C00030057>-2<004B>-7<0044>-3<00570003004C>-5<005600030046>4<0055>-12<0048>-10<0044>-3<0057>-3<0048>-16<00470003004C00510003004400030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<004800030046>-15<0044>-4<004F>1<004F>-7<0048>-16<00470003>]TJ
$aryText
This line of code is shown here:
4.
Create a variable called 
$strUser
. This will be used to determine the class of object to create in 
Active Directory. Assign the string 
User
 to this variable. This line of code is shown here:
5.
Create a variable called 
$intUsers
. This variable will be used to determine how many users to 
create. For this exercise, you will create nine users, so assign the integer 9 to the value of the 
variable. This code is shown here:
6.
Create a variable called 
$strName
[<001100030037>-7<004B>-2<004C>-5<005600030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<00480003005A>-9<004C004F>1<004F00030045>-13<004800030058>-6<0056>-12<0048>-16<004700030057>-1<005200030046>4<0055>-12<0048>-10<0044>-3<0057>-3<004800030057>-2<004B>-9<004800030053>-7<0055>-12<0048>-9<00C0>-11<005B00030049>-7<0052>-7<005500030048>-10<0044>-9<0046>4<004B00030058>-6<0056>-12<0048>-10<00550003>]TJ
[<0057>-2<004B>-7<0044>-3<00570003004C>-5<005600030046>4<0055>-12<0048>-10<0044>-3<0057>-3<0048>-16<0047>-8<001100030025>-12<0048>-16<0046>-15<0044>-6<0058>-6<0056>-12<004800030057>-2<004B>-9<0048>-12<0056>-12<00480003005A>-9<004C004F>1<004F00030045>-13<004800030057>-3<0048>-10<0050>-4<0053>-13<0052>-7<0055>-8<0044>-4<0055>-47<005C00030058>-6<0056>-12<0048>-10<0055>-26<0056>-20<000F00030058>-6<0056>-12<004800030057>-2<004B>-9<004800030053>-7<0055>-12<0048>-9<00C0>-11<005B0003>]TJ
cn=tempuser
. This code is 
shown here:
Create a variable called 
$objADSI
. This variable will be used to hold the object that is 
returned by using the 
[ADSI]
 accelerator that is used to make the connection into Active 
Directory. Specify the LDAP provider and connect to the MyTestOU OU that resides in the 
NwTraders.msft domain. This line of code is shown here:
8.
Use a 
for
 loop to count from 1 to 9. Use the 
 variable as the counter variable. When the value 
 is less than or equal to the integer stored in the 
$intUsers
 variable, exit the loop. Use the 
$i++
 operator to increment the value of 
. This code is shown here:
Open and close your code block by using curly brackets. This is shown here:
10.
Between the curly brackets, use the object contained in the 
$objADSI
 variable to create the 
class of object stored in the variable 
$strClass
. The name of each object will be created by 
concatenating the 
$strName
[<00030053>-7<0055>-12<0048>-9<00C0>-11<005B0003005A>-9<004C>-5<0057>-2<004B00030057>-2<004B>-9<004800030051>-6<0058>1<0050>-4<0045>-13<0048>-10<005500030046>-2<0058>1<0055>-12<0055>-12<0048>-10<005100570003004C00510003>]TJ
. Store the object returned 
by the 
Create
 method in the variable
$objUser
. This line of code is shown here:
  
11.
On the next line in the code block, write the new 
User
 object to Active Directory using the 
SetInfo 
method. This line of code is shown here:
12.
[<0032>-11<0053>-13<0048>-10<005100030057>-2<004B>-9<004800030032>-11<0051>-9<0048>-4<0036>14<0057>-3<0048>-10<0053>-9<0029>7<0058>1<0055>-41<0057>-2<004B>-9<0048>-10<0055>43<0011>12<0057>-34<005B>-37<0057000300C0>-2<004F>-7<004800030044>-4<0051>-11<004700030048>-6<005B>-6<0044>-4<0050>-2<004C0051>-9<004800030057>-2<004B>-9<0048000300460052>-7<00510057>-3<0048>-10<0051>-1<0057>-19<0056>-19<001100030031>-7<0052>-2<0057>-3<004800030057>-2<004B>-7<0044>-3<005700030048>-10<0044>-9<0046>4<004B0003004F004C0051>-9<0048000300460052>-7<0055>-12<0055>-12<0048>]TJ
[<0056>-4<0053>-13<0052>-7<0051>-11<0047>-6<005600030057>-1<00520003004400030053>-7<0055>-12<0052>-7<0053>-13<0048>-10<0055>-41<0057>-38<005C0003004C0051000300240046>-25<0057>-2<004C>-12<0059>1<004800030027>-8<004C0055>-12<0048>-16<0046>-25<0057>-1<0052>-7<0055>-47<005C>35<001100030037>-7<004B>-9<004800030057>-2<0055>-12<004C>-3<0046>4<004E0003004C>-5<005600030057>-1<005200030048>-10<0051>-9<0056>-5<0058>1<0055>-12<004800030057>-2<004B>-7<0044>-3<005700030048>-9<0044>-9<0046>4<004B0003004F004C0051>-9<00480003004C005100030057>-2<004B>-9<004800030057>-3<0048>-6<005B>-37<0057000300C0>-2<004F>-7<00480003>]TJ
matches each position in the array. Beginning at 
element
, use the array contained in the 
variable 
$aryText
 to write the 
streetaddress
[<0053>-3<0052>7<0056>-4<0057>6<0052>3<0049>-44<00C00046>10<0048>1<0045>-5<0052>9<005B>]TJ
postalcode
countrycode
facsimiletelephonenumber
, and 
info
 attributes for each 
User
 object that is created. This sec
tion of code, shown here, is placed after the 
User
 object is created, and 
SetInfo 
writes it to 
Active Directory.
13.
Commit the changes to Active Directory by calling the 
SetInfo 
method. This line of code is 
shown here:
14.
Save your script as 
<yourname>
OneStepFurtherPt1.ps1. Run your script and examine 
[<00240046>-25<0057>-2<004C>-12<0059>1<004800030027>-8<004C0055>-12<0048>-16<0046>-25<0057>-1<0052>-7<0055>-47<005C00030038>-3<0056>-12<0048>-10<0055>-26<005600030044>-4<0051>-11<004700030026>2<0052>-7<0050>-4<0053>-9<0058>-5<0057>-3<0048>-10<0055>-26<0056>-19<00110003003C>49<0052>-9<005800030056>-3<004B>-9<0052>-9<0058>1<004F>-8<0047000300C0>-2<0051>-11<004700030057>-2<004B>-9<004800030051>-2<004C0051>-9<004800030058>-6<0056>-12<0048>-10<0055>-26<00560003005A>-9<004C>-5<0057>-2<004B00030044>-3<0057>-31<0057>-2<0055>-12<004C0045>-9<0058>-5<0057>-3<0048>-12<005600030052>-7<00510003>]TJ
both the Address tab and the Telephones tab. If this is not the case, then compare your script 
with the OneStepFurtherPt1.ps1 script shown here.
15.
After the users are created, proceed to the second part of the exercise, described in the fol
lowing steps.
16.
Save OneStepFurtherPt1.ps1 as 
<yourname>
OneStepFurtherPt2.ps1. 
17.
Delete the 
$aryText = Get-Content -Path "c:labsch15OneStepFurther.txt"
 from the script.
18.
Delete everything from inside the code block except for the line of code that creates the 
User
object. This line of code is 
$objUser = $objADSI.create$strCLass, $StrName+$i
, and the code 
to delete is shown here:
19.
Inside the code block, change the 
Create
 method in the 
$objADSI Create
 command to 
Delete
as shown here:
20.
Save and run your script. You should see the nine users, created earlier, disappear. If this does 
not happen, compare your script with the OneStepFurtherPt2.ps1 script shown here.
This concludes the exercise.
  
Chapter 15 quick reference
Do this
Delete users easily
Modify the script you used to create the user and change 
the 
Create
 method to 
Delete
Commit changes to Active Directory when deleting a user
Do nothing27changes take place automatically when 
users are deleted.
Find country codes used in Active Directory Users and 
Computers
Use ISO 3166.
[<0030>-15<0052>-20<0047>-7<004C>-10<0049>-54<005C0003004400030058>-13<0056>-19<0048>-17<0055>-33<00B7>18<0056000300C0>-9<0055>-32<0056>-23<005700030051>-14<0044>-11<0050>-16<004800030059>-19<004C>-9<004400030024>-14<0027>-8<0036>-7<002C>]TJ
Add a value to the 
GivenName
 attribute. Use the 
SetInfo
method to write the change to Active Directory. Use the 
Put
 method to at least specify the 
sAMAccountName
tribute if using Windows 2000 Active Directory.
[<0032>-29<0059>-6<0048>-17<0055>-50<005A>-16<0055>-19<004C>-13<0057>-10<004800030044000300C0>-14<0048>-18<004F>-15<004700030057>-9<004B>-14<0044>-10<00570003004C>-12<005600030044>-11<004F>-7<0055>-19<0048>-17<0044>-18<0047>-18<005C00030053>-20<0052>-14<0053>-16<0058>-6<004F>-12<0044>-10<0057>-10<0048>-23<00470003004C>-7<005100030024>-7<0046>-31<0057>-9<004C>-19<0059>-6<00480003>]TJ
Directory
Use the 
Put
 method.
[<0024>-34<0056>-21<0056>-11<004C>-12<004A>-6<00510003004400030059>-12<0044>-11<004F>-11<0058>-14<004800030057>-8<00520003004400030057>-10<0048>-17<0055>-18<0050>-9<004C>-7<0051>-14<0044>-11<004F00030056>-19<0048>-17<0055>-53<0059>-6<0048>-17<005500030053>-14<0055>-19<0052>-8<00C0>-10<004F>-14<004800030044>-10<0057>-37<0057>-9<0055>-18<004C>-7<0045>-16<0058>-12<0057>-10<004800030044>-8<0049>-48<0057>-10<0048>-17<00550003>]TJ
making a connection into Active Directory
Assign the value to the property. There is no need to use 
the Put method.
[<0035>-9<0048>-17<0044>-18<00470003004400030057>-10<0048>-13<005B>-43<0057000300C0>-9<004F>-14<004800030044>-11<0051>-18<004700030057>-15<0058>-6<0055>-18<00510003004C>-12<00570003004C>-7<0051>-8<0057>-8<005200030044>-11<005100030044>-11<0055>-18<0055>-15<0044>-5<005C>]TJ
Use the 
Get-Content
 cmdlet and specify the path to the 
[<00C0>-10<004F>-14<004800030045>-10<005C00030058>-13<0056>-11<004C>-7<0051>-18<004A00030057>-9<004B>-16<00480003>]TJ
-path
 argument.
CHAPTER 16
Working with the 
D DS Module
fter completing this chapter, you will be able to:
Use the AD DS cmdlets to manage users.
Use the AD DS cmdlets to manage organizational units.
Use the AD DS cmdlets to manage computer objects.
Use the AD DS cmdlets to manage groups.
Understanding the Active Directory module
Microsoft made Active Directory Domain Services AD DS Microsoft Windows PowerShell cmdlets 
available with Windows Server 2008 R2. You can also download and install the 
Active Directory 
Management Gateway Service ADMGS. ADMGS provides a web service interface to Active Directory 
domains, and to Active Directory Lightweight Directory Services. ADMGS runs on the domain control
ler. ADMGS can run on Windows Server 2003 with Service Pack SP 2, or Windows Server 2008. On 
Windows Server 2008 R2 and above, ADMGS installs as a role and does not require an additional 
download. Once you have one domain controller running Windows Server 2008 R2 or later in your 
domain, you can use the new cmdlets to manage your AD DS installation. Installing ADMGS on 
Windows Server 2003 or Windows Server 2008 does not make it possible to load the Active Directory 
module on those machines, but it does permit you to use the Active Directory module from another 
machine to manage those servers. 
Installing the 
ctive Directory module
The Active Directory module is available beginning with Windows 7 on the client side and with 
Windows 2008 R2 on servers. To make the cmdlets available on the desktop operating system, 
you need to download and install the 
Remote Server Administration Tools RSAT. The Active 
Directory cmdlets ship in a Windows PowerShell module, and you may therefore be interested 
in the 
Get-MyModule
 function from the Microsoft TechNet Script Center Script Repository. The 
Get-MyModule
 function is useful because it will verify the presence of an 
optional module prior to its 
use in a Windows PowerShell script. When using optional modules, scripts commonly fail because a 
particular module may not be available on all systems. The 
Get-MyModule
 function helps to detect 
this condition prior to actual script failure.
  
To install the Active Directory module on either a Windows Server 2008 R2 machine or on 
Windows Server 2012, you can use the 
Add-WindowsFeature
 cmdlet. This is because the Active 
Directory module is directly available to the operating system as an optional Windows feature. 
Therefore, installation on a server operating system does not require downloading RSAT. To install 
RSAT for Active Directory, use the procedure that follows.
Installing the 
ctive Directory module
1.
Use the 
Get-WindowsFeature
 cmdlet to verify that the 
rsat-ad-tools
 feature is available to 
install. The command appears here:
2.
Use the up arrow key to retrieve the 
Get-WindowsFeature
 command and pipeline the results 
to the 
Add-WindowsFeature
 cmdlet. The command appears here:
3.
[<0038>-3<0056>-12<004800030057>-2<004B>-9<004800030058>1<005300030044>-4<0055>-12<0055>-12<0052>-3<005A0003004E>12<0048>-7<005C00030057>-34<005A>-9<004C>-3<0046>-2<004800030057>-1<005200030055>-12<0048>-10<0057>-2<0055>-12<004C>-5<0048>-8<0059>1<004800030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<00570003>]TJ
Get-WindowsFeature
 command. The command 
appears here:
The use of the procedure and the associated output appear in Figure 16-1.
FIGURE 16-1
Installing RSAT provides access to the Active Directory module. 
Getting started with the 
ctive Directory module
Once you have installed RSAT, you will want to verify that the Active Directory module is present and 
that it loads properly. To do this, follow the next procedure.
Verifying the 
ctive Directory module
1.
Use the 
Get-Module
 cmdlet with the 
-ListAvailable 
switch to verify that the Active Directory 
module is present. The command to do this appears here:
2.
Use the 
Import-Module
 cmdlet to import the Active Directory module. The command to do 
this appears following. In Windows PowerShell 3.0, it is not required to explicitly import the 
Active Directory module. However, if you know you are going to use the module, it makes 
sense to go ahead and explicitly import it, because it is faster.
3.
Use the 
Get-Module
 cmdlet to verify that the Active Directory module loaded properly. The 
command to do this appears here:
4.
Once the Active Directory module loads, you can obtain a listing of the Active Directory 
cmdlets by using the 
Get-Command
 cmdlet and specifying the
-Module 
parameter. This com
mand appears here:
Using the Active Directory module
It is not necessary to always load the Active Directory module or for that matter any module 
because Windows PowerShell 3.0 automatically loads the module containing a referenced cmdlet. 
The location searched by Windows PowerShell for modules comes from environment variable 
PSModulePath. 
[<0037>55<005200030059>-13<004C>-5<0048>-9<005A00030057>-2<004B>-9<004800030059>-5<0044>-4<004F>-4<0058>-7<004800030052004900030057>-2<004B>-2<004C>-5<005600030048>-10<0051>4<0059>-12<004C0055>-12<0052>-7<0051>-4<0050>-9<0048>-10<0051005700030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<0048>-9<000F00030053>-6<0055>-12<0048>-9<00C0>-11<005B00030057>-2<004B>-9<004800030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<004800030051>-7<0044>-4<0050>-9<00480003005A>-9<004C>-5<0057>-2<004B00030057>-2<004B>-9<00480003>]TJ
environment drive. The following command retrieves the 
default module locations and displays the 
associated paths:
If you do not want to install the Active Directory module on your client operating systems, all you 
need to do is to add the 
rsat-ad-tools
 feature to at least one server. Once it22s installed on the server, 
use Windows PowerShell remoting to connect to the server hosting the 
rsat-ad-tools
 feature from 
  
your client workstation. Once in the remote session, if the remote server is Windows 8, all you need to 
do is call one of the Active Directory cmdlets. The Active Directory module automatically loads, and 
the information returns. The following commands illustrate this technique:
Figure 16-2 illustrates the techniques for using Windows PowerShell remoting to connect to a 
server that contains the Active Directory module and for automatically loading that module while 
using a cmdlet from it. 
FIGURE 16-2
[<0038>-8<0056>-8<004C>-5<0051>-15<004A0003003A>-20<004C>-5<0051>-15<0047>-10<0052>-7<005A>-16<0056000300330052>-7<005A>-6<0048>-15<0055>-27<0036>-4<004B>-14<0048>-15<004F>-4<004F00030055>-17<0048>-15<0050>-14<0052>-7<0057>-7<004C>-5<0051>-15<004A00030057>-5<005200030052>-11<0045>-10<0057>-24<0044>-7<004C>-5<005100030024>-4<0046>-29<0057>-7<004C>-17<0059>-4<004800030027>-12<004C>-5<0055>-17<0048>-21<0046>-29<0057>-5<0052>-11<0055>-51<005C0003004C>-4<0051>-3<0049>-11<0052>-11<0055>-16<0050>-11<0044>-8<0057>-7<004C>-10<0052>-11<00510003005A>-13<004C>-10<0057>-7<004B>-14<0052>-14<0058>-9<0057000300C0>-6<0055>-30<0056>-20<00570003004F>-11<0052>-15<0044>-15<0047>-5<004C>-5<0051>-15<004A0003>]TJ
the module. 
Finding the FSMO role holders
[<0037>55<0052000300C0>-2<0051>-11<00470003004C0051>2<0049>-7<0052>-7<0055>-12<0050>-7<0044>-3<0057>-2<004C>-5<0052>-7<005100030044>-4<0045>-13<0052>-10<0058>-5<005700030047>-5<0052>-7<0050>-7<0044>-2<004C005100030046>1<0052>-7<0051>-1<0057>-2<0055>-12<0052>-6<004F>1<004F>-7<0048>-10<0055>-26<005600030044>-4<0051>-11<004700030029>4<004F>-7<0048>-6<005B>-8<004C0045>-8<004F>-7<004800030036>2<004C0051>-11<004A>1<004F>-7<004800030030>-6<0044>-10<0056>-16<0057>-3<0048>-10<005500030032>-11<0053>-13<0048>-10<0055>-8<0044>-3<0057>-2<004C>-5<0052>-7<00510003000B>-8<0029>2<00360030>-9<0032>12<000C00030055>-12<0052>-6<004F>-7<0048>-12<0056>-20<000F0003>]TJ
you do not have to write a Windows PowerShell script; you can do it directly from the Windows 
[<0033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F000300460052>-7<0051>-9<0056>-12<0052>-6<004F>-7<004800030052>-7<00550003002C>-8<0036002800030058>-6<0056>-3<004C0051>-11<004A00030057>-2<004B>-9<0048000300240046>-25<0057>-2<004C>-12<0059>1<004800030027>-8<004C0055>-12<0048>-16<0046>-25<0057>-1<0052>-7<0055>-47<005C00030046>4<0050>-11<0047>1<004F>-7<0048>-10<0057>-19<0056>-19<001100030037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030057>-2<004B>-2<004C0051>-11<004A0003005C>1<0052>-9<0058>4<00B7>7<004F>1<004F00030051>-9<0048>-16<0048>-16<004700030057>-1<005200030047>-5<0052000F00030050>-9<0052>-7<0055>-12<00480003>]TJ
than likely, is load the Active Directory module into the current Windows PowerShell session. While it 
is possible to add the 
Import-Module
[<000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<004700030057>-1<00520003005C>1<0052>-10<0058>1<00550003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>6<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-9<000F0003004C00510003004A>-7<0048>-10<0051>-9<0048>-10<0055>-8<0044>-4<004F0003004C>-6<00570003004C>-5<00560003>]TJ
not a good idea to load a bunch of modules that you may or you may not use on a regular basis. In 
fact, you can load all the modules at once by piping the results of the 
Get-Module -listavailable
 com
mand to the 
Import-Module
 cmdlet. This is shown here:
Once you have loaded the Active Directory module, you will want to use the 
Get-Command
 cmdlet 
to see the cmdlets that are exported by the module. This is shown here:
  
[<0037>55<0052000300C0>-2<0051>-11<00470003004400030056>-3<004C0051>-11<004A>1<004F>-7<004800030047>-5<0052>-7<0050>-7<0044>-2<004C0051000300460052>-7<00510057>-2<0055>-12<0052>-6<004F>1<004F>-7<0048>-10<0055>39<000F0003004C>-3<00490003005C>1<0052>-9<005800030044>-4<0055>-12<004800030051>-9<0052>-2<005700030056>-5<0058>1<0055>-12<004800030052004900030052>-7<0051>-9<00480003004C00510003005C>1<0052>-10<0058>1<005500030056>-4<004C>-5<0057>-3<0048>-9<000F0003005C>1<0052>-9<005800030046>-14<0044>-4<005100030058>-6<0056>-12<004800030057>-2<004B>-9<00480003>]TJ
-Discover
switch on the 
Get-ADDomainController
 cmdlet. One thing to keep in mind is that the 
-Discover
parameter could return information from the cache. If you wish to ensure that a fresh discover com
mand is sent, use the 
-forceDiscover
 switch in addition to the 
-Discover
 switch. These techniques 
appear here:
When you use the 
Get-ADDomainController
 cmdlet, a minimal amount of information is returned. 
If you wish to see additional information from the domain controller you discovered, you would 
need to connect to it by using the 
-Identity
 parameter. The value of the 
Identity
 property can be an 
IP address, a 
[<004A>1<004F>-7<0052>-7<0045>-9<0044>-4<004F>1<004F>-12<005C00030058>1<0051>-2<004C>-5<0054>-3<0058>-7<00480003004C>-5<0047>-7<0048>-10<00510057>-2<004C>-5<00C0>-7<0048>-10<00550003000B>16<002A>-6<0038>-7<002C>-4<0027>16<000C>2<000F000300440003004B>-9<0052>-7<0056>-16<005700030051>-7<0044>-4<0050>-9<0048>-9<000F00030052>-6<005500030048>-8<0059>1<0048>-10<00510003004400030031>-8<0048>-10<0057>-2<0025>-8<002C>-10<0032>-1<003600030057>-38<005C>-12<0053>-13<004800030052004900030051>-7<0044>-4<0050>-9<0048>-7<001100030037>-7<004B>-2<004C>-5<00560003>]TJ
technique appears here:
As shown in the preceding output, the server named 
Hyperv is a global catalog server the 
IsGlobalCatalog 
property is 
True
. It also holds the 
SchemaMaster
 and 
DomainNamingMaster
 FSMO 
roles. It is running Windows Server 2008 R2 Standard Edition. The 
Get-ADDomainController
 cmdlet 
accepts a 
[<0010>-5<00C0>-1<004F0057>7<0048>1<0055>]TJ
 parameter that can be used to perform a search-and-retrieve operation. It uses 
[<004400030056>-3<0053>-13<0048>-16<0046>4<004C>-2<0044>-4<004F00030056>-12<0048>-10<0044>-4<0055>-10<0046>4<004B00030056>-21<005C>-12<0051>-1<0057>-19<0044>-14<005B00030057>-2<004B>-7<0044>-3<00570003004C>-5<005600030047004C>-5<0056>-13<0046>-2<0058>-6<0056>-14<0056>-12<0048>-16<00470003004C005100030057>-2<004B>-9<004800030052>-7<0051>-4<004F004C0051>-9<00480003004B>-9<0048>-11<004F>1<0053000300C0>-2<004F>-7<0048>-12<0056>-19<001100030038>-2<0051>2<0049>-7<0052>-7<0055>-41<0057>-8<0058>1<0051>-7<0044>-3<0057>-3<0048>-11<004F>-12<005C>34<000F0003004C>-5<005700030047>-5<0052>-13<0048>-12<005600030051>-9<0052>-2<005700030044>-9<00460046>-2<0048>-10<0053>-5<00570003>]TJ
Lightweight Directory Access Protocol LDAP syntax. 
[<002F>-6<0058>-5<0046>4<004E>-14<004C004F>-12<005C>34<000F0003005C>1<0052>-9<005800030047>-5<005200030051>-9<0052>-2<00570003004B>-7<0044>1<0059>1<004800030057>-1<00520003004F>-7<0048>-10<0044>-4<0055>-12<005100030057>-2<004B>-9<004800030056>-4<0053>-13<0048>-16<0046>4<004C>-2<0044>-4<004F000300C0>-2<004F>-6<0057>-3<0048>-10<005500030056>-21<005C>-12<00510057>-19<0044>-14<005B>-26<000F00030045>-13<0048>-16<0046>-14<0044>-6<0058>-6<0056>-12<004800030057>-2<004B>-9<00480003>]TJ
Get-ADObject
 cmdlet will 
[<0044>-9<00460046>-2<0048>-10<0053>-5<005700030044>-4<00510003002F>-5<0027>18<0024>-7<003300030047004C>-2<0044>-4<004F>-7<0048>-16<0046>-25<0057000300C0>-2<004F>-6<0057>-3<0048>-10<0055>43<00110003003C>49<0052>-9<005800030046>-14<0044>-4<005100030056>-3<004C0050>-4<0053>-8<004F>-12<005C00030053>-6<004C0053>-13<0048>-11<004F004C0051>-9<004800030057>-2<004B>-9<004800030055>-12<0048>-12<0056>-5<0058>1<004F>-6<0057>-19<00560003005200490003>]TJ
the Get-ADObject
 cmdlet to the 
Get-ADDomainController
 cmdlet. This technique appears here:
  
If this returns too much information, note that the Active Directory cmdlets work just like any other 
Windows PowerShell cmdlet, and therefore permit using the pipeline to choose the information you 
wish to display. To obtain only the FSMO information, you really only need to use two commands. If 
you want to include importing the Active Directory module in your count, you22ll need three com
mands, and if you need to make a remote connection to a domain controller to run the commands, 
you22ll need four. One useful thing about using Windows PowerShell remoting is that you specify the 
credentials you need to run the command. If your normal account is a standard user account, you 
only use an elevated account when you need to do things with elevated rights. If you have already 
started the Windows PowerShell console with elevated credentials, you can skip typing in credentials 
when you enter the remote Windows PowerShell session assuming the elevated account also has 
rights on the remote server. The command shown here creates a remote session on a remote domain 
controller: 
Once the Active Directory module loads, you type a one-line command to get the forest FSMO 
roles, and another one-line command to get the domain FSMO roles. These two commands appear 
here:
That is it27two or three one-line commands, depending on how you want to count. Even at worst 
case, this is much easier to type than the 33 lines of code that would be required if you did not have 
access to the Active Directory module. In addition, the Windows PowerShell code is much easier to 
read and understand. The commands and the associated output appear in Figure 16-3.
  
FIGURE 16-3
Using 
Windows PowerShell remoting to obtain FSMO information.
Discovering 
ctive Directory
Using 
the Active Directory Windows PowerShell cmdlets and remoting, you can easily discover 
[<004C0051>2<0049>-7<0052>-7<0055>-12<0050>-7<0044>-3<0057>-2<004C>-5<0052>-7<005100030044>-4<0045>-13<0052>-9<0058>-5<005700030057>-2<004B>-9<004800030049>-7<0052>-7<0055>-12<0048>-12<0056>-16<005700030044>-4<0051>-11<004700030057>-2<004B>-9<004800030047>-5<0052>-7<0050>-7<0044>-2<004C0051>-14<001100030037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030057>-2<004B>-2<004C0051>-11<004A0003005C>1<0052>-9<005800030051>-9<0048>-16<0048>-16<004700030057>-1<005200030047>-5<00520003004C>-5<005600030057>-1<005200030048>-10<00510057>-3<0048>-10<00550003004400030033>-9<003600030056>-12<0048>-12<0056>-14<0056>-4<004C>-5<0052>-7<00510003>]TJ
on the remote computer. To do this, you use the 
Enter-PSSession 
cmdlet. Next, you import the Active 
Directory module and set the working location to the root of drive C. The reason for setting the 
working location to the root of drive C is to regain valuable command-line space. These commands 
appear here:
Once you have connected to the remote domain controller, you can use the 
Get-WMIObject
cmdlet to verify your operating system on that computer. This command and the associated output 
appear here
Now you want to get information about the forest. To do this, you use the
Get-ADForest
 cmdlet. 
The output from 
Get-ADForest
 includes lots of great information such as the domain-naming master, 
forest mode, schema master, and domain controllers. The command and associated output appear 
here:
Next, you22ll use the 
Get-ADDomain
 cmdlet to obtain information about the domain. The command 
returns important information, such as the location of the default domain controller OU, the PDC 
Emulator, and the RID Master. The command and associated output appear here:
From a security perspective, you should always check the 
domain password policy. To do this, use 
the
Get-ADDefaultDomainPasswordPolicy
 cmdlet. Things you want to pay attention to are the use of 
  
complex passwords, minimum password length, password age, and password retention. Of course, 
you also need to check the 
account lockout policy too. This policy is especially important to review 
closely when inheriting a new network. Here is the command and associated output to do this:
Finally, you need to check the 
domain controllers themselves. To do this, use the 
Get-ADDomainController
 cmdlet. This command returns important information about domain con
trollers, such as whether the domain controller is read-only, is a global catalog server, or owns one of 
the operations master roles; it also returns operating system information. Here is the command and 
associated output:
[<0033>3<0055>-12<0052>-13<0047>-3<0058>-5<0046>4<004C0051>-11<004A0003004400030055>-12<0048>-10<0053>-13<0052>-7<0055>-41<00570003004C>-5<005600030044>-11<005600030048>-10<0044>-10<0056>-21<005C00030044>-10<005600030055>-12<0048>-16<0047004C0055>-12<0048>-16<0046>-25<0057>-2<004C0051>-11<004A00030057>-2<004B>-9<004800030052>-10<0058>-5<0057>-2<0053>-9<0058>-5<00570003005700520003004400030057>-3<0048>-6<005B>-37<0057000300C0>-2<004F>-7<0048>-7<001100030037>-7<004B>-9<004800030049>-7<0052>-6<004F>1<004F>-7<0052>-3<005A>-9<004C0051>-11<004A000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<0047>-6<00560003>]TJ
[<004A>-3<0044>-3<0057>-2<004B>-9<0048>-10<005500030057>-2<004B>-9<00480003004C0051>2<0049>-7<0052>-7<0055>-12<0050>-7<0044>-3<0057>-2<004C>-5<0052>-7<005100030047004C>-5<0056>-13<0046>-2<0058>-6<0056>-14<0056>-12<0048>-16<004700030048>-10<0044>-4<0055>-12<004F004C>-5<0048>-10<00550003004C005100030057>-2<004B>-2<004C>-5<005600030056>-12<0048>-16<0046>-25<0057>-2<004C>-5<0052>-7<005100030044>-4<0051>-11<004700030056>-16<0057>-1<0052>-7<0055>-12<004800030057>-2<004B>-9<004800030055>-12<0048>-10<0057>-2<0055>-12<004C>-5<0048>-8<0059>1<0048>-16<00470003004C0051>2<0049>-7<0052>-7<0055>-12<0050>-7<0044>-3<0057>-2<004C>-5<0052>-7<00510003004C005100030044000300C0>-2<004F>-7<00480003>]TJ
named 
[<0024>-7<0027>-3<0042>-34<0027>-12<0052>-13<0046>-15<0011>12<0057>-34<005B>-37<0057>-20<001100030037>-7<004B>-9<0048000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<0047>-6<005600030044>-4<004F>-8<0056>-12<00520003004C004F>1<004F>-4<0058>-6<0056>-16<0057>-2<0055>-8<0044>-3<0057>-3<004800030057>-2<004B>-7<0044>-3<00570003004C>-5<00570003004C>-5<005600030053>-13<0052>-7<0056>-14<0056>-3<004C0045>-8<004F>-7<004800030057>-1<005200030055>-12<0048>-16<0047004C0055>-12<0048>-16<0046>-25<005700030057>-2<004B>-9<00480003004C0051>2<0049>-7<0052>-7<0055>-12<0050>-7<0044>-3<0057>-2<004C>-5<0052>-7<005100030057005200030044000300C0>-2<004F>-7<00480003>]TJ
stored in a network share.
[<0037>-7<004B>-9<0048000300C0>-2<004F>-7<004800030044>-10<005600030059>-13<004C>-5<0048>-9<005A>-2<0048>-16<00470003004C005100030031>-7<0052>-2<0057>-3<0048>-10<0053>-9<0044>-11<004700030044>-4<0053>-7<0053>-13<0048>-10<0044>-4<0055>-26<00560003004C005100030029>-2<004C>-5<004A>-3<0058>1<0055>-12<004800030014>22<0019>-27<0010>-34<0017>-8<0011>]TJ
FIGURE 16-4
Active Directory documentation displayed in Notepad.
enaming 
ctive Directory sites
It is easy to rename a site. All you need to do is to right-click the site and select Rename
from 
[<0057>-2<004B>-9<004800030044>-9<0046>-25<0057>-2<004C>-5<0052>-7<005100030050>-9<0048>-10<0051>-6<00580003004C005100030057>-2<004B>-9<004800030030>-2<004C>-3<0046>4<0055>-12<0052>-7<0056>-12<00520049>-41<005700030030>-5<0044>-4<0051>-7<0044>-11<004A>-7<0048>-10<0050>-9<0048>-10<0051>-1<005700030026>2<0052>-7<0051>-9<0056>-12<0052>-6<004F>-7<00480003000B>-8<0030>-4<0030>-9<0026>-27<000C>14<001100030025>-9<005C00030047>-6<0048>-8<0049>-9<0044>-6<0058>1<004F>-6<0057>-20<000F00030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030056>-3<004C>-5<0057>-3<00480003004C>-5<005600030046>-15<0044>-4<004F>1<004F>-7<0048>-16<00470003>]TJ
Default-First-Site-Name, which is not too illuminating. To work with Active Directory sites, it is neces
[<0056>-17<0044>-4<0055>-47<005C00030057005200030058>1<0051>-11<0047>-7<0048>-10<0055>-26<0056>-16<0057>-19<0044>-4<0051>-11<004700030057>-2<004B>-7<0044>-3<005700030057>-2<004B>-9<0048>-7<005C00030044>-4<0055>-12<00480003004400030045>-6<004C>-5<005700030056>-16<0057>-2<0055>-8<0044>-4<0051>-11<004A>-7<0048>-7<001100030029>-2<004C0055>-26<0056>-16<0057>-20<000F00030057>-2<004B>-9<0048>-7<005C00030055>-12<0048>-12<0056>-3<004C>-5<0047>-7<00480003004C005100030057>-2<004B>-9<0048000300460052>-7<005100C0>-7<004A>-3<0058>1<0055>-8<0044>-3<0057>-2<004C>-5<0052>-7<0051>-6<0010>-4<0051>-7<0044>-4<0050>-2<004C0051>-11<004A000300460052>-7<00510057>-3<0048>-6<005B>-37<0057>-20<00110003>]TJ
Connecting to this context using the Active Directory module is rather simple. All you need to do is to 
use the 
Get-ADRootDSE 
cmdlet and then select the 
[<0026>9<00520051>-1<00C0004A>6<0058>4<0055>2<00440057>4<004C>2<00520051>-1<0031>-2<0044>2<0050>4<004C>5<0051>2<004A>1<0026>9<00520051>7<0057>7<0048>-9<005B>-34<0057>7<0003>]TJ
property. First, you 
have to make a connection to the domain controller and import the Active Directory module assum
ing that you do not have RSAT installed on your client computer. This appears here: 
Here is the code that will retrieve all of the sites. It uses the 
Get-ADObject 
cmdlet to search the 
[<00460052>-7<0051>-1<00C0>-7<004A>-3<0058>1<0055>-8<0044>-3<0057>-2<004C>-5<0052>-7<0051>-6<0010>-4<0051>-7<0044>-4<0050>-2<004C0051>-11<004A000300460052>-7<00510057>-3<0048>-6<005B>-37<005700030049>-7<0052>-7<005500030052>-7<0045>-6<004D>-5<0048>-16<0046>-25<0057>-19<005600030057>-2<004B>-7<0044>-3<005700030044>-4<0055>-12<004800030052004900030046>4<004F>-5<0044>-10<0056>-14<00560003>]TJ
site
  
[<0032>-11<0051>-9<0046>-2<00480003005C>1<0052>-9<00580003004B>-7<0044>1<0059>1<004800030057>-2<004B>-9<004800030056>-4<004C>-5<0057>-3<00480003005C>1<0052>-9<00580003005A>-9<004C>-5<0056>-4<004B0003005700520003005A>-2<0052>-7<0055>-12<004E0003005A>-9<004C>-5<0057>-2<004B>-14<000F0003005C>1<0052>-10<0058000300C0>-2<0055>-26<0056>-16<005700030046>4<004B>-7<0044>-4<0051>-11<004A>-7<004800030057>-2<004B>-9<00480003>]TJ
DisplayName 
attribute. To do 
this, you pipeline the 
site
 object to the 
Set-ADOObject 
cmdlet. The 
Set-ADOObject 
cmdlet allows you 
to set a variety of attributes on an object. This command appears following. This is a single command 
that is broken into two pieces at the pipe character. 
Once you have set the 
-DisplayName 
attribute, you can rename the object itself. To do this, you 
use a cmdlet called
Rename-ADObject
. Once again, to simplify things, you pipeline the 
site
 object to 
the cmdlet and assign a new name for the site. This command appears following. This is also a one-
line command broken at the pipe.
Managing users
To 
create a new 
organizational unit OU, you use the 
New-ADOrganizationalUnit
 cmdlet, as shown 
here:
If you wish to create a child OU, you use the 
New-ADOrganizationalUnit
 cmdlet, but in the path, 
you list the location that will serve as the parent. This is illustrated here:
If you wish to create several child OUs in the same location, use the up arrow key to retrieve the 
previous command and edit the name of the child. You can use the Home key to move to the begin
[<0051>-2<004C0051>-11<004A00030052004900030057>-2<004B>-9<00480003004F004C0051>-9<0048>-9<000F00030057>-2<004B>-9<004800030028>3<0051>-11<00470003004E>12<0048>-7<005C00030057005200030050>-9<0052>-1<0059>1<004800030057>-1<005200030057>-2<004B>-9<004800030048>-10<0051>-11<004700030052004900030057>-2<004B>-9<00480003004F004C0051>-9<0048>-9<000F00030044>-4<0051>-11<004700030057>-2<004B>-9<00480003004F>-7<0048>-8<0049>-41<005700030044>-4<0051>-11<004700030055>-11<004C>-5<004A>1<004B>-1<005700030044>-4<0055>-12<0055>-12<0052>-3<005A0003004E>12<0048>-7<005C>-12<005600030057>-1<0052000300C0>-2<0051>-11<00470003>]TJ
your place on the line so you can edit it. A second child OU is created here:
To create a computer account in one of the newly created child OUs, you must type the complete 
path to the OU that will house the new computer account. The 
New-ADComputer
 cmdlet is used to 
create new computer accounts in AD DS. In this example, the TestOU1 OU is a child of the TestOU OU, 
and therefore both OUs must appear in the 
-Path
 parameter. Keep in mind that the path that is sup
plied to the 
-Path
 parameter must be contained inside quotation marks, as shown here: 
To create a user account, you use the 
New-ADUser
 cmdlet, as shown here: 
Because there could be a bit of typing involved that tends to become redundant, you may wish to 
write a script to create the OUs at the same time the computer and user accounts are created. A sample 
script that creates OUs, users, and computers is the 
UseADCmdletsToCreateOuComputerAndUser.ps1 
script shown here: 
Use
DCmdlets
oCreateOuComputer
ndUser.ps1
The UseADCmdletsToCreateOuComputerAndUser.ps1 script begins by importing the Active 
[<0027>-8<004C0055>-12<0048>-16<0046>-25<0057>-1<0052>-7<0055>-47<005C00030050>-9<0052>-13<0047>-3<0058>1<004F>-7<0048>-7<00110003002C>-1<005700030057>-2<004B>-9<0048>-10<005100030046>4<0055>-12<0048>-10<0044>-3<0057>-3<0048>-12<005600030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030032>-8<0038>9<00110003003A>-10<004B>-9<0048>-10<005100030057>-3<0048>-12<0056>-16<0057>-2<004C0051>-11<004A0003004400030056>-12<0046>4<0055>-12<004C0053>-5<0057>-20<000F0003004C>-5<00570003004C>-5<00560003004C0050>-4<0053>-13<0052>-7<0055>-41<0057>-19<0044>-4<0051>-1<005700030057005200030047004C>-5<0056>-17<0044>-4<0045>-8<004F>-7<004800030057>-2<004B>-9<00480003>]TJ
deletion protection by using the 
-ProtectedFromAccidentalDeletion
 parameter. This will allow you to 
easily delete the OU and avoid having to change the protected status on each OU in the Advanced 
view in Active Directory Users and Computers. 
Once the ScriptTest OU is created, the other OUs and user and computer accounts can be created 
inside the new location. It may seem obvious that you cannot create a child OU inside the parent OU 
if the parent has not yet been created27but it is easy to make a logic error like this. 
To create a new global security group, use the 
New-ADGroup
 Windows PowerShell AD DS cmdlet. 
The 
New-ADGroup
 cmdlet requires three parameters: 
-Name
, for the name of the group; 
-Path
, for a 
path inside the directory to the location where the group will be stored; and 
-groupScope
, which can 
be 
global
universal
, or 
domainlocal
. Before running the command shown here, remember that you 
must import the Active Directory module into your current Windows PowerShell session. 
To create a new universal group, you only need to change the 
-groupScope 
parameter value, as 
shown here: 
  
To add a user to a group using the 
New-ADGroup
 cmdlet, you must supply values for the 
-Identity
parameter and the 
-Members
 parameter. The value you use for the 
-Identity
 parameter is the name 
of the group. You do not need to use the LDAP syntax of 
cn=groupname
; you only need to supply the 
name. Use ADSI Edit to examine the requisite LDAP attributes needed for a group in ADSI Edit. 
It is a bit unusual that the 
-Members 
parameter is named 
-Members
 and not 
-Member
, because 
most Windows PowerShell cmdlet parameter names are singular, not plural. The parameter names are 
singular even when they accept an array of values such as the 
-computername
 parameter. The com
mand to add a new group named TestGroup1 to the 
UserGroupTest group is shown here: 
To remove a user from a group, use 
the 
Remove-ADGroupMember
 cmdlet with the name of the 
user and group. The 
-Identity 
and the 
-Members 
parameters are required, but the command will not 
[<0048>-6<005B>2<0048>-16<0046>-2<0058>-5<0057>-3<00480003005A>-9<004C>-5<0057>-2<004B>-9<0052>-10<0058>-5<0057000300460052>-7<005100C0>-2<0055>-12<0050>-7<0044>-3<0057>-2<004C>-5<0052>-7<0051>-15<000F00030044>-10<005600030056>-4<004B>-9<0052>-3<005A>-9<00510003004B>-9<0048>-10<0055>-12<0048>5<001D0003>]TJ
If you are sure you wish to remove the user from the group and you wish to suppress the query, 
you use the 
[<0010>-25<0026>9<00520051>-1<00C00055>1<0050>]TJ
 parameter and assign the value 
$false 
to it. Note that you will need to supply a 
colon between the parameter and the 
$false
 value. 
ote
The use of the colon after the 
 parameter is not documented, but the 
technique works on several different cmdlets. Unfortunately, you cannot use the 
switched parameter to suppress the query.
The command is shown here: 
[<003C>49<0052>-9<005800030051>-9<0048>-16<0048>-16<004700030057>-2<004B>-9<004800030044>-4<0045>-6<004C004F004C>-5<0057>-38<005C00030057005200030056>-6<0058>1<0053>-7<0053>-7<0055>-12<0048>-12<0056>-14<005600030057>-2<004B>-9<0048000300460052>-7<0051>-1<00C0>-2<0055>-12<0050>-7<0044>-3<0057>-2<004C>-5<0052>-7<005100030053>-7<0055>-12<0052>-7<0050>-4<0053>-5<005700030057005200030045>-13<004800030044>-4<0045>-8<004F>-7<004800030057>-1<005200030058>-6<0056>-12<004800030057>-2<004B>-9<00480003>]TJ
Remove-ADGroupMember
[<00030046>4<0050>-11<0047>1<004F>-7<0048>-10<00570003004C00510003004400030056>-12<0046>4<0055>-12<004C0053>-5<0057>-20<001100030037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030057>-2<004B>-2<004C0051>-11<004A00030057>-2<004B>-9<00480003>]TJ
RemoveUserFromGroup.ps1 script 
does is load the Active Directory module. Once the module is loaded, the 
Remove-ADGroupMember
[<0046>4<0050>-11<0047>1<004F>-7<0048>-10<00570003004C>-5<005600030058>-6<0056>-12<0048>-16<004700030057005200030055>-12<0048>-10<0050>-9<0052>-1<0059>1<004800030057>-2<004B>-9<004800030058>-6<0056>-12<0048>-10<005500030049>-13<0055>-12<0052>-7<005000030057>-2<004B>-9<00480003004A>1<0055>-12<0052>-9<0058>1<0053>1<001100030037>55<005200030056>-6<0058>1<0053>-7<0053>-7<0055>-12<0048>-12<0056>-14<005600030057>-2<004B>-9<0048000300460052>-7<005100C0>-2<0055>-12<0050>-7<0044>-3<0057>-2<004C>-5<0052>-7<005100030053>-7<0055>-12<0052>-7<0050>-4<0053>-5<0057>-20<000F00030057>-2<004B>-9<0048>]TJ
[<0010>-33<0026>1<0052>-8<0051>-9<00C0>-8<0055>-7<0050>4<001D>5<0007>11<0049>-7<0044>-6<004F00560048>]TJ
 command is used. The RemoveUserFromGroup.ps1 script is shown here: 
emoveUserFromGroup.ps1
Creating a user
In 
this section, you22ll create a new user in Active Directory with the name Ed. The command to create 
a new user is simple: it is 
New-ADUser
 and the user name. The command to create a disabled user 
account in the 
Users
 container in the default domain appears here:
When the command that creates a new user completes, nothing is returned to the Windows 
PowerShell console. To check to ensure that the user is created, use the 
Get-ADUser
 cmdlet to retrieve 
the 
User
 object. This command appears here:
Once you are certain your new user is created, you can create an OU to store the user account. The 
command to create a new OU off the root of the domain appears here:
As with the previously used 
New-ADUser
 cmdlet, nothing returns to the Windows PowerShell 
console. If you use the 
Get-ADOrganizationalUnit 
cmdlet, you must use a different methodology. A 
simple 
Get-ADOrganizationalUnit
 command returns an error; instead, you can use the
-LDAPFilter
[<0053>-9<0044>-4<0055>-8<0044>-4<0050>-9<0048>-10<0057>-3<0048>-10<005500030057>-1<0052000300C0>-2<0051>-11<004700030057>-2<004B>-9<004800030032>-9<0038>6<000F00030044>-10<005600030049>-7<0052>-6<004F>1<004F>-7<0052>-3<005A>-12<0056>-6<001D>]TJ
Now that you have a new user and a new OU, you need to move the user from the 
Users
 container 
to the newly created Scripting
OU. To do that, you use the 
Move-ADObject
[<00030046>4<0050>-11<0047>1<004F>-7<0048>-10<0057>-20<00110003003C>49<0052>-9<0058000300C0>-2<0055>-26<0056>-16<00570003004A>-6<0048>-10<005700030057>-2<004B>-9<00480003>]TJ
distinguishedname 
attribute for the Scripting
OU and store it in a variable called 
$oupath
. Next, you 
use the 
Move-ADObject
 cmdlet to move the Ed user to the new OU. The trick here is that whereas 
the
Get-ADUser
[<00030046>4<0050>-11<0047>1<004F>-7<0048>-10<00570003004C>-5<005600030044>-4<0045>-8<004F>-7<004800030057>-1<0052000300C0>-2<0051>-11<00470003004400030058>-6<0056>-12<0048>-10<00550003005A>-9<004C>-5<0057>-2<004B00030057>-2<004B>-9<004800030051>-7<0044>-4<0050>-9<004800030052004900030028>2<0047>-9<000F00030057>-2<004B>-9<00480003>]TJ
Move-ADObject
 cmdlet must 
have the distinguished name of the 
Ed USER
 object in order to move it. You could use the 
Get-ADUser
cmdlet to retrieve the distinguished name
in a similar manner as you did with the Scripting
OU.
The next thing you need to do is to enable the user account. To do this, you need to assign a 
password to the user account prior to enabling the account. The password must be a secure string. To 
do this, you can use the 
ConvertTo-SecureString
 cmdlet. By default, warnings about converting text to 
a secure string are displayed, but you can suppress these prompts by using the 
-force
 parameter. Here 
is the command you use to create a secure string for a password
Now that you have created a secure string to use for a password for your user account, you call the 
Set-ADAccountPassword
 cmdlet to set the password. Because this is a new password, you need to use 
the 
-NewPassword
 parameter. In addition, because you do not have a previous password, you use the 
-Reset 
parameter. This command appears here:
  
Once the account has an assigned password, it is time to enable the user account. This command 
appears here:
As with the previous cmdlets, none of these cmdlets returns any information. To ensure you have 
actually enabled the Ed user account, you use the 
Get-ADUser
 cmdlet. In the output, you are look
ing for the value of the 
enabled 
property. The 
enabled 
property is a Boolean, so therefore expect the 
value to be 
true
Finding and unlocking 
ctive Directory user accounts
When 
using the Active Directory cmdlets, locating locked-out users is a snap. The 
Search-ADAccount
cmdlet even has a
-LockedOut
 switch. Use the 
Search-ADAccount
 cmdlet with the 
-LockedOut
 param
[<0048>-10<0057>-3<0048>-10<005500030057>-1<0052000300C0>-2<0051>-11<004700030044>-4<004F>1<004F00030058>-6<0056>-12<0048>-10<005500030044>-9<004600460052>-10<0058>1<00510057>-19<00560003004C005100030057>-2<004B>-9<004800030047>-5<0052>-7<0050>-7<0044>-2<004C005100030057>-2<004B>-7<0044>-3<005700030044>-4<0055>-12<00480003004F>-7<0052>-13<0046>4<004E>12<0048>-16<004700030052>-9<0058>-5<0057>-20<001100030037>-7<004B>-2<004C>-5<0056000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<004700030044>-4<0053>-7<0053>-13<0048>-10<0044>-4<0055>-26<00560003004B>-9<0048>-10<0055>-12<0048>5<001D>]TJ
ote
Many network administrators who spend the majority of their time working with 
Active Directory import the 
[<0024>3<0046>-23<0057004C>-10<0059>3<004800030027>-5<004C>2<0055>-10<0048>-14<0046>-23<0057>2<0052>-5<0055>-45<005C00030050>-7<0052>-11<0047>-1<0058>3<004F>-5<004800030059>-10<004C004400030057004B>-7<0048>-7<004C>2<00550003003A>-14<004C>2<0051>-9<0047>-3<0052005A>-9<005600030033>8<0052005A>1<0048>-8<0055>-21<0036>3<004B>-7<0048>-9<004F>3<004F00030053>-5<0055>-10<0052>1<00C0004F>-5<0048>-5<00110003>]TJ
In this way, they never need to worry about the initial performance hit that occurs due to 
autoloading the Active Directory module.
The 
Search-ADAccount
 command and the associated output appear here:
You 
can unlock the locked-out user account as well27assuming you have permission. Figure 16-5 
shows an attempt to unlock the user account with an account that is for a normal user27an error 
arises.
ote
People are often worried about Windows PowerShell from a security perspective. 
Windows PowerShell is only an application, and therefore users are not able to do anything 
that they do not have rights or permission to accomplish. This is a case in point.
If your user account does not have admin rights, you need to start Windows PowerShell with 
an account that has the ability to unlock a user account. To do this, you right-click the Windows 
PowerShell icon while holding down the Shift key; this allows you to select Run As Different User from 
the Tasks menu. 
Once you start Windows PowerShell back up with an account that has rights to unlock users, the 
Active Directory module needs to load once again. You then check to ensure that you can still locate 
the locked-out user accounts. Once you can do that, you pipeline the results of the 
Search-ADAccount
cmdlet to 
Unlock-ADAccount
. A quick check ensures you have unlocked all the locked-out accounts. 
The series of commands appears here:
The commands and associated output appear in Figure 16-5.
FIGURE 16-5
[<0038>-8<0056>-8<004C>-5<0051>-15<004A00030057>-7<004B>-14<004800030024>-5<0046>-29<0057>-7<004C>-17<0059>-4<004800030027>-12<004C>-5<0055>-17<0048>-21<0046>-29<0057>-5<0052>-11<0055>-51<005C00030050>-14<0052>-17<0047>-8<0058>-3<004F>-11<004800030057>-5<0052000300C0>-7<0051>-15<004700030044>-8<0051>-15<004700030057>-5<005200030058>-4<0051>-8<004F>-11<0052>-18<0046>-1<004E00030058>-11<0056>-17<0048>-15<005500030044>-14<0046>-5<0046>-4<0052>-14<0058>-4<0051>-5<0057>-23<0056>-24<0011>]TJ
ote
Keep in mind that the command 
will unlock every account that you have permission to unlock. In most cases, you will want 
to investigate prior to unlocking all locked-out accounts. If you do not want to unlock 
all locked-out accounts, use the 
 switch to be prompted prior to unlocking an 
account.
  
If you do not want to unlock all users, you use the
[<0010>-16<0046>9<00520051>-1<00C00055>1<0050>]TJ
 parameter when calling the 
Unlock-ADAccount
[<00030046>4<0050>-11<0047>1<004F>-7<0048>-10<0057>-20<001100030024>-27<005600030044>-4<005100030048>-6<005B>-6<0044>-4<0050>-4<0053>-8<004F>-7<0048>-9<000F0003005C>1<0052>-9<0058000300C0>-2<0055>-26<0056>-16<005700030046>4<004B>-9<0048>-16<0046>4<004E00030057>-1<005200030056>-12<0048>-16<00480003005A>-9<004B>-7<0044>-3<005700030058>-6<0056>-12<0048>-10<0055>-26<005600030044>-4<0055>-12<00480003004F>-7<0052>-13<0046>4<004E>12<0048>-16<004700030052>-9<0058>-5<005700030045>-2<005C00030058>-6<0056>-3<004C0051>-11<004A0003>]TJ
the 
Search-ADAccount
 cmdlet27but you do not want to see everything, only their names. Next, you 
pipeline the locked-out users to the 
Unlock-ADAccount
 cmdlet with the 
[<0010>-16<0046>9<00520051>-1<00C00055>1<0050>]TJ
 parameter. You are 
[<0057>-2<004B>-9<0048>-10<005100030053>-7<0055>-12<0052>-7<0050>-4<0053>-5<0057>-3<0048>-16<004700030049>-7<0052>-7<005500030048>-10<0044>-9<0046>4<004B00030052004900030057>-2<004B>-9<004800030057>-2<004B>-4<0055>-12<0048>-16<00480003004F>-7<0052>-13<0046>4<004E>12<0048>-16<0047>-2<0010>-18<0052>-9<0058>-5<005700030058>-6<0056>-12<0048>-10<0055>-26<0056>-19<00110003003C>49<0052>-10<005800030046>4<004B>-9<0052>-13<0052>-7<0056>-12<004800030057>-1<005200030058>1<0051>-4<004F>-7<0052>-13<0046>4<004E00030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030044>-3<0051>-11<004700030057>-2<004B>-2<004C0055>-13<004700030058>-6<0056>-12<0048>-10<0055>-26<0056>-20<000F0003>]TJ
but not the second user. You then use the 
Search-ADAccount
 cmdlet one last time to ensure that the 
second user is still locked out. 
Finding disabled users
Luckily, by using Windows PowerShell and the Active Directory cmdlets, you can retrieve the dis
abled users from your domain with a single line of code. The command appears following. Keep in 
mind that running this command automatically imports the Active Directory module into the current 
Windows PowerShell host.
Not only is the command a single line of code, but it is also a single line of 
readable
 code. You get 
[<0058>-6<0056>-12<0048>-10<0055>-26<005600030049>-13<0055>-12<0052>-7<005000030024>-7<002700030027>-1<0036>4<001E0003005C>1<0052>-9<005800030058>-6<0056>-12<004800030044000300C0>-2<004F>-5<0057>-3<0048>-10<005500030057>-2<004B>-7<0044>-3<00570003004F>-7<0052>-13<0052>-7<004E>-31<005600030049>-7<0052>-7<005500030057>-2<004B>-9<00480003>]TJ
enabled
 property set to 
false
. You also specify that 
you want to query a server named dc3 the name of one of the domain controllers on my network. 
The command and the associated output appear in Figure 16-6
FIGURE 16-6
Finding disabled user accounts.
[<002C00490003005C>1<0052>-9<00580003005A>-2<0044>-4<005100570003005700520003005A>-2<0052>-7<0055>-12<004E0003005A>-9<004C>-5<0057>-2<004B0003004400030056>-3<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<004600030058>-6<0056>-12<0048>-10<0055>39<000F0003005C>1<0052>-9<005800030046>-14<0044>-4<005100030058>-6<0056>-12<004800030057>-2<004B>-9<00480003>]TJ
-identity 
parameter. The 
-identity 
param
eter accepts several things: 
distinguishedname
sid
guid
, and 
SamAccountName
. Probably the easiest 
one to use is the 
SamAccountName
. This command and associated output appears here:
To use the 
distinguishedname
 value for the 
-identity
 parameter, you need to supply it inside a pair 
of quotation marks27either single or double. This command and associated output appear here:
It is not necessary to use quotation marks when using the SID for the value of the 
-identity
 param
eter. This command and associated output appear here:
Once again, you can also use the 
ObjectGUID
 for the 
-identity
 parameter value. It does not require 
quotation marks either. This command and associated output appear here:
  
Finding unused user accounts
To 
obtain a listing of all the users in Active Directory, supply a wildcard to the
[<0010>-5<00C0>-1<004F0057>7<0048>1<0055>]TJ
 parameter of the 
Get-ADUser
 cmdlet. This technique appears here:
If you wish to change the base of the search operations, use the 
-SearchBase
 parameter. The 
-SearchBase
 parameter accepts an LDAP style of naming. The following command changes the search 
base to the TestOU OU:
When you use the 
Get-ADUser
 cmdlet, only a certain subset of user properties are displayed 
10 properties, to be exact. These properties will be displayed when you pipeline the results to 
Format-List
 and use a wildcard and the 
-force
 parameter, as shown here:
Anyone who knows very much about AD DS knows there are certainly more than 10 properties 
associated with a 
User
 object. If you try to display a property that is not returned by the 
Get-ADUser
cmdlet, such as the 
whenCreated
 property, an error is not returned, but the value of the 
whenCreated 
property is not returned either. This is shown here:
The 
whenCreated
 property for the 
User
 object has a value27it just is not displayed. However, sup
pose you were looking for users that had never logged on to the system? Suppose you used a query 
such as the one shown here, and you were going to base a delete operation upon the results27the 
results could be disastrous.
To retrieve a property that is not a member of the default 10 properties, you must select it by 
using the
-property
 parameter. The reason that 
Get-ADUser
 does not automatically return all prop
erties and their associated values is because of performance issues on large networks27there is no 
[<0055>-12<0048>-10<0044>-10<0056>-12<0052>-7<005100030057005200030055>-12<0048>-10<0057>-8<0058>1<0055>-12<0051000300440003004F>-5<0044>-4<0055>-13<004A>-7<004800030047>-3<0044>-3<0057>-19<004400030056>-12<0048>-10<00570003005A>-9<004B>-9<0048>-10<00510003004400030056>-3<0050>-7<0044>-4<004F>1<004F00030047>-3<0044>-3<0057>-19<004400030056>-12<0048>-10<00570003005A>-9<004C004F>1<004F00030053>-13<0048>-10<0055>-38<0049>-7<0048>-16<0046>-25<0057>-2<004F>-12<005C00030056>-5<0058>-2<0049>-41<00C0>-5<0046>-2<0048>-7<001100030037>55<005200030047004C>-5<0056>-4<0053>-8<004F>-5<0044>2<005C00030057>-2<004B>-9<00480003>]TJ
name
 and 
the 
whenCreated
 date for the user named bob, the following command can be used:
  
To retrieve all of the properties associated with a 
User
 object, use 
the
 wildcard * for the 
-properties
parameter value. You would use a command similar to the one shown here:
Both the command and the results associated with the command to return all user properties 
appear in Figure 16-7.
FIGURE 16-7
Using the 
Get-ADUser 
cmdlet to display all user properties.
To produce a listing of all the users and their last logon date, you can use a command similar to 
the one shown here. This is a single command that might wrap the line depending on your screen 
resolution. 
The output produces a nice table. Both the command and the output associated with the com
mand to obtain the time a user last logged on appear in Figure 16-8.
FIGURE 16-8
Using the 
Get-ADUser 
cmdlet to identify the last logon times for users.
Updating Active Directory objects: step-by-step exercises
[<002C>-1<005100030057>-2<004B>-9<0048>-12<0056>-12<004800030048>-6<005B>2<0048>-10<0055>-10<0046>4<004C>-5<0056>-12<0048>-12<0056>-20<000F0003005C>1<0052>-9<00580003005A>-9<004C004F>1<004F00030056>-12<0048>-10<0044>-4<0055>-10<0046>4<004B00030049>-7<0052>-7<005500030058>-6<0056>-12<0048>-10<0055>-26<00560003004C00510003004400030056>-3<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<004600030032>-9<003800030057>-2<004B>-7<0044>-3<005700030047>-5<005200030051>-9<0052>-2<00570003004B>-7<0044>1<0059>1<0048000300440003>]TJ
description 
attribute 
populated. You will create a script that updates this value. In addition, you will change the password 
for users in Active Directory.
ote
To complete these exercises, you will need access to a Windows server running AD 
DS. Modify the domain names listed in the exercises to match the name of your domain.
Using the 
ctive Directory module to update 
ctive Directory objects
1.
Open the Windows PowerShell ISE or some other script editor. 
2.
Use the 
Import-Module
 cmdlet to import the Active Directory module. 
3.
Set the 
$users
 and 
$you
 variables to 
$null
4.
Use the 
Get-ADUser
 cmdlet to retrieve users from the TestOU OU in the nwtraders.com 
domain. The 
[<00C0>-1<004F0057>7<0048>1<0055>]TJ
 property is required, and therefore you give it a wildcard * to tell it you 
want everything returned. In addition, you specify that you want the 
description
 property 
returned in the search results.
5.
Use the 
ForEach
 statement to walk through the collection. Inside the collection, use the static 
isNullOrEmpty
 method from the 
system.string
 .NET Framework class to check the 
description
property on the 
User
 object. If the property is empty or null, display a string that states the 
script will modify the 
User
 object. The code to do this appears here:
6.
Use the 
Set-ADUser
 cmdlet to modify the user. Pass the
-identity
 parameter a distinguished 
name. Use the 
-description
 parameter to hold the value to add to the 
description
 attribute on 
the object. This command is shown here:
  
Increment the 
$you
 counter variable and display a summary string. This portion of the script is 
shown here:
8.
Compare your script with the one that appears here:
Set
DProperty
DCmdlets.ps1
In the following exercise, you will change a user22s password.
Changing user passwords
1.
Open the Windows PowerShell console with administrator rights.
2.
Use the 
Get-Credential
 cmdlet to retrieve and store credentials that have permission on a 
remote domain controller. Store the credentials in a variable named 
$credential
3.
Use the 
Enter-PSSession
 cmdlet to enter a remote Windows PowerShell session on a domain 
controller that contains the Active Directory module:
4.
Use the 
Get-ADUser
 cmdlet to identify a user whose password you want to reset:
5.
Use the 
Set-ADAccountPassword
 cmdlet to reset the password:
6.
A warning appears stating that the remote computer is requesting to read a line securely. 
Type in the new password for the user:
A second warning appears with a prompt to repeat the password. The warning itself is the 
same as the previous warning about reading a secure line. Type in the same password you 
previously typed.
8.
Type 
Get-History
 to review the commands you typed during the remote session.
Type 
Exit
 to exit the remote session.
10.
Type 
Get-History
 to review the commands you typed prior to entering the remote session.
This concludes the exercise.
ote
If you need to work with local user accounts, download the 
Local User Management 
module from the
 TechNet Script Center Script Repository. This module provides the abil
ity to create, modify, and delete both local users and groups. It also permits you to change 
local user account passwords.
Chapter 16 quick reference
Do this
Find domain FSMO role holders
Use the 
Get-ADDomain
 cmdlet and select PDCEmulator, RIDMaster, 
and InfrastructureMaster.
Find forest FSMO role holders
Use the 
Get-ADForest
 cmdlet and select SchemaMaster and 
DomainNamingMaster.
Rename a site in AD DS
Use the 
Get-ADObject
 cmdlet to retrieve the site and the 
Rename-
ADObject
 cmdlet to set a new name.
Create a new user in AD DS
Use the 
New-ADUser
 cmdlet.
Find locked-out user accounts in AD DS
Use the 
Search-ADAccount
 cmdlet with the 
-lockedout 
switch.
Unlock a user account in AD DS
Use the 
Unlock-ADAccount
 cmdlet.
Set a user22s password in AD DS
Use the 
Set-ADAccountPassword
 cmdlet.
CHAPTER 17
Deploying 
ctive Directory with 
Windows Server 2012
fter completing this chapter, you will be able to:
Use the Active Directory module to deploy a new forest and a new domain controller.
Use the Active Directory module to add a new domain controller to an existing domain.
Use the Active Directory module to deploy a read-only domain controller.
Using the Active Directory module to deploy a new forest
Deploying Microsoft Active Directory Domain Services AD DS is not a simple matter. There are pre-
requisites that must be met and multiple items that need to be 
[<00460052>-7<0051>-1<00C0>-7<004A>-3<0058>1<0055>-12<0048>-16<0047>-8<001100030032>-11<0051>-9<004800030052004900030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030057>-2<004B>-2<004C0051>-11<004A>-6<00560003>]TJ
that might need to be accomplished is setting the script execution policy. Whereas the easiest way 
[<0057>-1<005200030047>-5<005200030057>-2<004B>-2<004C>-5<00560003004C>-5<005600030059>-13<004C>-2<00440003004A>1<0055>-12<0052>-9<0058>1<005300030053>-13<0052>-6<004F004C>-3<0046>-30<005C>34<000F0003004C>-3<00490003005C>1<0052>-9<005800030044>-4<0055>-12<0048000300460052>-7<005100C0>-7<004A>-3<0058>1<0055>-12<004C0051>-11<004A00030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030047>-5<0052>-7<0050>-7<0044>-2<004C005100030046>1<0052>-7<00510057>-2<0055>-12<0052>-6<004F>1<004F>-7<0048>-10<00550003004C005100030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030047>-5<0052>-7<0050>-7<0044>-2<004C00510003004C0051000300440003>]TJ
new forest, you do not have that luxury. To set the script execution policy, use the 
Set-ExecutionPolicy
cmdlet and set it to something like 
remotesigned
. The command appears following. The command 
must execute with admin rights, but more than likely you will be logged on as an administrator any
[<005A>-3<0044>2<005C0003004C>-3<00490003005C>1<0052>-9<005800030044>-4<0055>-12<00480003004D>-2<0058>-6<0056>-16<005700030045>-13<0048>-16<004A004C0051>-4<0051>-2<004C0051>-11<004A0003005C>1<0052>-9<0058>1<0055000300460052>-7<005100C0>-7<004A>-3<0058>1<0055>-8<0044>-3<0057>-2<004C>-5<0052>-7<0051>-14<0011>24<000C>]TJ
Some of the 
infrastructure prerequisites are listed here:
Ensure the server has the correct name.
[<0036>-11<0048>-10<00570003004400030056>-16<0057>-19<0044>-3<0057>-2<004C>-3<00460003002C>-1<00510057>-3<0048>-10<0055>-12<0051>-9<0048>-10<005700030033>3<0055>-12<0052>-2<0057>-1<0052>-13<00460052>-6<004F0003000B>-8<002C>-4<0033>7<000C00030044>-11<0047>-7<0047>1<0055>-12<0048>-12<0056>-14<0056000300460052>-7<005100C0>-7<004A>-3<0058>1<0055>-8<0044>-3<0057>-2<004C>-5<0052>-7<0051>-14<0011>]TJ
[<0028>3<0051>-9<0056>-5<0058>1<0055>-12<004800030057>-2<004B>-9<004800030027>-9<0031>-7<003600030036>-11<0048>-10<0055>-47<0059>1<0048>-10<00550003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030049>-7<0048>-10<0044>-3<0057>-8<0058>1<0055>-12<00480003004C>-5<005600030047>-7<0048>-10<0053>-8<004F>-7<0052>-1<005C>1<0048>-16<004700030044>-4<0051>-11<0047000300460052>-7<005100C0>-7<004A>-3<0058>1<0055>-12<0048>-16<0047>-8<0011>]TJ
  
In addition to infrastructure prerequisites, there are 
role-based prerequisites that need to be 
deployed. These role-based prerequisites appear here:
Active Directory module for Windows PowerShell
Active Directory Administrative Center tools
AD DS snap-ins and command-line tools
Luckily, all of these tools are installable via the 
ServerManager
 module and the
Add-WindowsFeature
 cmdlet. In fact, from a Windows-feature standpoint, the 
rsat-ad-tools
 feature 
group gives you everything you need here. The AddADPrereqs.ps1 script sets a static 
IP address by 
using the 
New-NetIPAddress
 cmdlet. To determine the interface index, the
Get-NetAdapter 
cmdlet is 
used. This portion of the script appears here:
Once the new IP address is assigned, the 
Rename-Computer 
cmdlet 
assigns a new name to the 
computer. The 
Rename-Computer 
cmdlet has a 
-restart 
parameter, but the AddADPrereqs.ps1 script 
holds off rebooting the script until the end, and therefore the 
restart 
parameter is not used. This por
tion of the script appears here:
Now that the computer has received a new IP address and has been renamed, it is time to add 
[<0057>-2<004B>-9<004800030049>-7<0048>-10<0044>-3<0057>-8<0058>1<0055>-12<0048>-12<0056>-19<001100030037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030057>-2<004B>-2<004C0051>-11<004A00030057>-2<004B>-9<004800030056>-13<0046>4<0055>-12<004C0053>-5<005700030047>-5<0052>-13<0048>-12<00560003004C>-5<005600030046>4<0055>-12<0048>-10<0044>-3<0057>-3<0048000300440003004F>-7<0052>-13<004A000300C0>-2<004F>-7<00480003004C00510003004400030047>1<004C0055>-12<0048>-16<0046>-25<0057>-1<0052>-7<0055>-47<005C00030051>-7<0044>-4<0050>-9<0048>-16<00470003>]TJ
poshlog. 
This log 
[<005A>-9<004C004F>1<004F0003004B>-9<0052>-6<004F>-8<004700030047>-7<0048>-10<0057>-19<0044>-2<004C004F>-8<005600030055>-12<0048>-12<0056>-5<0058>1<004F>-6<0057>-2<004C0051>-11<004A00030049>-12<0055>-12<0052>-7<005000030044>-11<0047>-7<0047004C0051>-11<004A00030057>-2<004B>-9<004800030049>-7<0048>-10<0044>-3<0057>-8<0058>1<0055>-12<0048>-12<0056>-19<00110003002C>-1<005100030044>-11<0047>-7<0047004C>-5<0057>-2<004C>-5<0052>-7<0051>-14<000F00030052>-6<0051>-9<0046>-2<004800030057>-2<004B>-9<0048000300460052>-7<005100C0>-7<004A>-3<0058>1<0055>-8<0044>-3<0057>-2<004C>-5<0052>-7<005100030046>1<0052>-7<0050>-4<0053>-8<004F>-7<0048>-10<0057>-3<0048>-12<0056>-20<000F000300440003>]TJ
Get-WindowsFeature
[<000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<004700030055>-17<0058>1<0051>-9<005600030057>-1<00520003004A>-3<0044>-3<0057>-2<004B>-9<0048>-10<005500030057>-2<004B>-9<00480003004C0051>-9<0056>-16<0057>-19<0044>-4<004F>1<004F>-7<0048>-16<004700030049>-7<0048>-10<0044>-3<0057>-8<0058>1<0055>-12<0048>-12<0056>-19<001100030037>-7<004B>-9<004800030055>-12<0048>-12<0056>-5<0058>1<004F>-6<00570003004C>-5<00560003005A>-9<0055>-12<004C>-5<0057>-31<0057>-3<0048>-10<0051000300570052000300440003004F>-7<0052>-13<004A000300C0>-2<004F>-7<00480003>]TJ
in the 
poshlog 
directory. The 
Add-WindowsFeature
 cmdlet appears to accept an array for the fea
tures to be installed, but when attempting to add multiple features with a single call, the secondary 
features get trampled. Therefore, it is best to add tools one at a time. This portion of the script 
installs the 
Active Directory Domain Services AD DS tools that include the Active Directory
Windows 
PowerShell module. The command appears here:
The last thing to accomplish here is 
restarting the computer. This is performed via a simple call to 
the 
Restart-Computer
 cmdlet. This command appears here:
The complete AddAdPrereqs.ps1 script appears here:
dd
dPrereqs.ps1
Once the computer reboots, log on and check things. Immediately, the Server Manager utility 
launches and provides feedback that the name change and the IP address change completed success
fully. Server Manager appears in Figure 17-1.
  
FIGURE 17-1
[<0024>-2<0049>-45<0057>-8<0048>-15<005500030057>-7<004B>-14<004800030024>-8<0047>-11<0047>-15<0024>-8<0047>-6<0033>-2<0055>-17<0048>-15<0055>-17<0048>-21<0054>-11<0056>-24<0011>-13<0053>-12<0056>3<001400030056>-17<0046>-1<0055>-16<004C>-5<0053>-10<00570003004C>-10<005600030055>-22<0058>-4<0051>-19<000F00030036>-15<0048>-15<0055>-51<0059>-4<0048>-15<005500030030>-10<0044>-8<0051>-11<0044>-15<004A>-11<0048>-15<005500030044>-8<0053>-11<0053>-17<0048>-14<0044>-8<0055>-30<005600030044>-8<0051>-15<004700030046>-4<0052>-11<0051>-5<00C0>-7<0055>-16<0050>-13<005600030057>-7<004B>-11<0044>-7<005700030057>-6<004B>-14<004800030051>-11<0044>-8<0050>-14<00480003>]TJ
change and the IP address assignment completed successfully.
Next, you22ll verify that the roles and features have been added properly. To do this, use the 
[<0029>-3<0048>-10<0044>-3<0057>-8<0058>1<0055>-12<0048>-13<002F>-8<0052>-13<004A>-8<0011>12<0057>-34<005B>-37<00570003004F>-7<0052>-13<004A000300C0>-2<004F>-7<004800030057>-2<004B>-7<0044>-3<00570003005A>-2<0044>-10<005600030046>4<0055>-12<0048>-10<0044>-3<0057>-3<0048>-16<004700030053>-7<0055>-12<004C>-5<0052>-7<005500030057>-1<005200030057>-2<004B>-9<004800030055>-12<0048>-10<0045>-13<0052>-13<0052>-2<0057>-20<001100030029>-2<004C>-5<004A>-3<0058>1<0055>-12<004800030014>34<001A>44<0010>42<001500030056>-4<004B>-9<0052>-3<005A>-12<00560003005A>-9<004B>-7<0044>-3<00570003005A>-9<004C004F>1<004F00030045>-13<004800030047004C>-5<0056>-4<0053>-8<004F>-5<0044>2<005C>1<0048>-16<00470003>]TJ
if the features and roles have been added properly.
FIGURE 17-2
[<0037>-12<004B>-14<004800030029>-8<0048>-14<0044>-8<0057>-12<0058>-4<0055>-17<0048>-17<002F>-12<0052>-17<004A>-13<0011>7<0057>-38<005B>-41<0057000300C0>-7<004F>-11<004800030046>-4<0052>-11<0051>-5<00C0>-7<0055>-16<0050>-13<005600030057>-7<004B>-11<0044>-8<005700030057>-7<004B>-14<004800030055>-17<0052>-11<004F>-11<0048>-17<005600030044>-8<0051>-15<004700030049>-11<0048>-14<0044>-8<0057>-12<0058>-4<0055>-17<0048>-17<00560003004B>-11<0044>-3<0059>-4<004800030045>-17<0048>-21<0048>-15<005100030044>-15<0047>-11<0047>-11<0048>-21<004700030056>-10<0058>-10<0046>-5<0046>-6<0048>-17<0056>-18<0056>-18<0049>-23<0058>-3<004F>-4<004F>-17<005C00030057>-5<005200030057>-7<004B>-14<00480003>]TJ
computer.
Once you have your computer renamed, with a static IP address and RSAT installed, it is time to 
[<0044>-11<0047>-7<004700030057>-2<004B>-9<004800030024>-7<002700030027>-1<003600030055>-12<0052>-6<004F>-7<0048>-9<000F00030057>-2<004B>-9<004800030027>-8<0031>-7<003600030036>-11<0048>-10<0055>-47<0059>1<0048>-10<005500030055>-12<0052>-6<004F>-7<0048>-9<000F00030044>-3<0051>-11<004700030057>-2<004B>-9<00480003004A>1<0055>-12<0052>-9<0058>1<005300030053>-13<0052>-6<004F004C>-3<0046>-30<005C00030050>-7<0044>-4<0051>-7<0044>-11<004A>-7<0048>-10<0050>-9<0048>-10<0051005700030049>-7<0048>-10<0044>-3<0057>-8<0058>1<0055>-12<0048>-7<001100030037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030057>-2<004B>-2<004C0051>-11<004A0003005700520003>]TJ
do is add the log path for the report at the end of the script. Once this is done, the script starts a job 
named 
addfeature. 
The use of a job allows the script to wait until the job completes prior to execut
ing the next step of the script. Because the script adds the features in the background, no progress 
tests appear in the foreground. Each of the 
Add-WindowsFeature
 commands includes all of the 
[<0056>-5<0058>1<0045>-3<0049>-7<0048>-10<0044>-3<0057>-8<0058>1<0055>-12<0048>-12<005600030044>-4<0051>-11<004700030057>-2<004B>-9<004800030050>-7<0044>-4<0051>-7<0044>-11<004A>-7<0048>-10<0050>-9<0048>-10<00510057000300570052>-13<0052>-6<004F>-8<0056>-19<001100030037>-7<004B>-2<004C>-5<00560003004C>-5<0056000300440003004A>1<0055>-12<0048>-10<0044>-3<00570003005A>-2<0044>2<005C00030057005200030048>-10<0051>-9<0056>-5<0058>1<0055>-12<00480003005C>1<0052>-9<005800030052>-7<0045>-5<0057>-19<0044>-2<004C005100030057>-2<004B>-9<004800030045>-6<004C>-5<0057>-19<00560003005C>1<0052>-9<0058>1<005500030056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<00460003>]TJ
[<0049>-7<0048>-10<0044>-3<0057>-8<0058>1<0055>-12<004800030051>-9<0048>-16<0048>-16<0047>-6<0056>-19<00110003003C>49<0052>-10<005800030046>-14<0044>-4<005100030044>-4<004F>-9<005A>-3<0044>2<005C>-12<0056000300C0>-2<0051>-9<0048>-18<0010>8<0057>-8<0058>1<0051>-9<00480003004C>-6<005700030044>-3<0057000300440003004F>-4<0044>-3<0057>-3<0048>-10<005500030057>-2<004C0050>-9<0048>-7<001100030032>-11<0051>-9<0046>-2<004800030057>-2<004B>-9<00480003004D>-5<0052>-7<004500030048>-6<005B>2<0048>-16<0046>-2<0058>-5<0057>-3<0048>-12<0056>-20<000F00030057>-2<004B>-9<00480003>]TJ
Wait-Job
 cmdlet 
pauses the script until the 
addfeature
 job completes. Then it returns the completed job object. At this 
[<0057>-2<004C0050>-9<0048>-9<000F00030057>-2<004B>-9<0048000300C0>-2<0051>-7<0044>-4<004F000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<00470003004C>-5<0056000300440003>]TJ
Get-WindowsFeature
 cmdlet call that writes all installed features to the 
[<004F>-7<0052>-13<004A000300C0>-2<004F>-7<0048>-7<001100030037>-7<004B>-9<0048000300460052>-7<0050>-4<0053>-8<004F>-7<0048>-10<0057>-3<004800030024>-3<0047>-7<0047>-2<00100024>-7<0027>-8<0029>-3<0048>-10<0044>-3<0057>-8<0058>1<0055>-12<0048>-12<0056>-19<0011>-8<0053>-8<0056>8<001400030056>-13<0046>4<0055>-12<004C0053>-5<005700030044>-3<0053>-7<0053>-13<0048>-10<0044>-4<0055>-26<00560003004B>-9<0048>-10<0055>-12<0048>5<001D>]TJ
dd-
DFeatures.ps1
  Add-WindowsFeature -Name "ad-domain-services" -IncludeAllSubFeature -IncludeManagementTools                                                 \                 
  Add-WindowsFeature -Name "dns" -IncludeAllSubFeature -IncludeManagementTools                                    
[<0032>-11<0051>-9<0046>-2<004800030057>-2<004B>-9<004800030056>-13<0046>4<0055>-12<004C0053>-5<0057000300C0>-2<0051>-2<004C>-5<0056>-4<004B>-9<0048>-12<005600030055>-17<0058>1<0051>-4<0051>-2<004C0051>-11<004A>-11<000F00030057>-2<004B>-9<004800030049>-7<0048>-10<0044>-3<0057>-8<0058>1<0055>-12<0048>-11<004F>-7<0052>-13<004A00030057>-3<0048>-6<005B>-37<0057000300C0>-2<004F>-7<004800030046>-14<0044>-4<005100030045>-13<004800030048>-6<005B>-6<0044>-4<0050>-2<004C0051>-9<0048>-16<0047>-8<001100030037>-7<004B>-9<00480003004F>-7<0052>-13<004A00030044>-4<0053>-7<0053>-13<0048>-10<0044>-4<0055>-26<00560003004C00510003>]TJ
Figure 17-3.
FIGURE 17-3
The feature log details all installed features and roles on the system.
  
[<0031>-7<0052>-3<005A0003004C>-5<00570003004C>-5<005600030057>-2<004C0050>-9<004800030057>-1<005200030046>4<0055>-12<0048>-10<0044>-3<0057>-3<004800030057>-2<004B>-9<004800030051>-9<0048>-9<005A00030049>-7<0052>-7<0055>-12<0048>-12<0056>-16<0057>-20<000F00030044>-3<0051>-11<004700030044>-11<0047>-7<004700030057>-2<004B>-9<004800030056>-12<0048>-10<0055>-47<0059>1<0048>-10<005500030044>-10<005600030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030047>-5<0052>-7<0050>-7<0044>-2<004C005100030046>1<0052>-7<00510057>-2<0055>-12<0052>-6<004F>1<004F>-7<0048>-10<00550003004C00510003>]TJ
the newly created forest. The tool required is contained in the 
ADDSDeployment
 module. The
InstallNewForest.ps1 script is essentially one cmdlet: 
Install-ADDSForest
. The domain name and 
[<0057>-2<004B>-9<004800030031>-9<0048>-10<0057>-2<0025>-8<002C>-10<0032>-1<003600030047>-5<0052>-7<0050>-7<0044>-2<004C005100030051>-7<0044>-4<0050>-9<004800030044>-4<0053>-7<0053>-13<0048>-10<0044>-4<005500030044>-10<005600030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<0048>-12<0056>-19<00110003003A>-10<004B>-9<0048>-10<005100030057>-2<004B>-9<004800030056>-13<0046>4<0055>-12<004C0053>-5<0057000300C0>-2<0055>-26<0056>-16<005700030055>-17<0058>1<0051>-9<0056>-20<000F0003004C>-5<005700030053>-7<0055>-12<0052>-7<0050>-4<0053>-5<0057>-19<005600030049>-7<0052>-7<005500030044>-4<0051000300240046>-25<0057>-2<004C>-12<0059>1<00480003>]TJ
Directory password. This password becomes the administrator password for the new domain. 
[<0029>-3<0052>-6<004F>1<004F>-7<0052>-3<005A>-9<004C0051>-11<004A00030057>-2<004B>-9<00480003004C0051>-9<0056>-16<0057>-19<0044>-4<004F>1<004F>-5<0044>-3<0057>-2<004C>-5<0052>-7<0051>-14<000F00030057>-2<004B>-9<004800030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<005100030044>-6<0058>-5<0057>-1<0052>-7<0050>-7<0044>-3<0057>-2<004C>-3<0046>-14<0044>-4<004F>1<004F>-12<005C00030055>-12<0048>-10<0045>-13<0052>-13<0052>-2<0057>-19<005600030057>-2<004B>-9<0048000300460052>-7<0050>-4<0053>-9<0058>-5<0057>-3<0048>-10<005500030057>-1<0052000300460052>-7<0050>-4<0053>-8<004F>-7<0048>-10<0057>-3<0048000300460052>-7<0051>-1<00C0>-7<004A>-3<0058>1<0055>-8<0044>]TJ
tion. The complete InstallNewForest.ps1 script appears here:
Install
ewForest.ps1
While the script is running, a progress bar appears. This is shown in Figure 17-4.
FIGURE 17-4
A progress bar displays while the script runs. This lets you know the progress of the operations.
Once the script completes running, a quick check of the 
DNS Manager tool should reveal that DNS 
[<004C>-5<005600030056>-12<0048>-10<005700030058>1<005300030053>-7<0055>-12<0052>-7<0053>-13<0048>-10<0055>-12<004F>-12<005C>35<001100030037>-7<004B>-9<004800030051005A>-38<0057>-2<0055>-8<0044>-11<0047>-7<0048>-10<0055>-26<0056>-19<0011>-8<0050>-9<0056>-14<0049>-41<005700030049>-7<0052>-7<0055>-44<005A>-3<0044>-4<0055>-13<0047>-2<0010>-5<004F>-7<0052>-13<0052>-7<004E>-12<0058>1<00530003005D>2<0052>-7<0051>-9<004800030056>-4<004B>-9<0052>-9<0058>1<004F>-8<004700030045>-13<0048000300460052>-7<005100C0>-7<004A>-3<0058>1<0055>-12<0048>-16<004700030053>-7<0055>-12<0052>-7<0053>-13<0048>-10<0055>-12<004F>-12<005C>34<000F00030044>-3<0051>-11<004700030044>-4<0051000300240003>]TJ
[<0055>-12<0048>-16<00460052>-7<0055>-13<0047>-9<000F00030031>-6<003600030055>-12<0048>-16<00460052>-7<0055>-12<0047>-9<000F00030044>-3<0051>-11<004700030036>-5<0032>15<002400030055>-12<0048>-16<00460052>-7<0055>-12<004700030056>-3<004B>-9<0052>-10<0058>1<004F>-8<004700030045>-13<0048000300460052>-7<0051>-1<00C0>-7<004A>-3<0058>1<0055>-12<0048>-16<0047>-8<001100030037>-7<004B>-2<004C>-5<005600030044>-4<0053>-7<0053>-13<0048>-10<0044>-4<0055>-26<00560003004C005100030029>-2<004C>-5<004A>-3<0058>1<0055>-12<004800030014>34<001A>44<0010>15<0018>-6<0011>]TJ
FIGURE 17-5
Following the running of the InstallNewForest.ps1 script, DNS Manager reveals a properly set up 
forward-lookup zone. 
Adding a new domain controller to an existing domain
[<0032>-11<0051>-9<0046>-2<00480003005C>1<0052>-9<00580003004C0051>-9<0056>-16<0057>-19<0044>-4<004F>1<004F00030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030047>-5<0052>-7<0050>-7<0044>-2<004C0051000300460052>-7<00510057>-2<0055>-12<0052>-6<004F>1<004F>-7<0048>-10<00550003004C0051>-1<0057>-1<00520003005C>1<0052>-9<0058>1<005500030049>-7<0052>-7<0055>-12<0048>-12<0056>-16<005700030055>-12<0052>-13<0052>-2<0057>-20<000F0003004C>-5<00570003004C>-5<005600030057>-2<004C0050>-9<004800030057>-1<005200030044>-11<0047>-7<00470003004400030056>-12<0048>-16<00460052>-7<0051>-11<004700030047>-5<0052>-7<0050>-7<0044>-2<004C00510003>]TJ
[<00460052>-7<0051>-1<0057>-2<0055>-12<0052>-6<004F>1<004F>-7<0048>-10<005500030057>-1<005200030057>-2<004B>-9<004800030047>-5<0052>-7<0050>-7<0044>-2<004C0051>-14<001100030037>-7<004B>-9<004800030053>-7<0055>-12<0052>-13<0046>-2<0048>-12<0056>-14<00560003004C>-5<005600030056>-4<004C0050>-2<004C004F>-5<0044>-4<005500030057>-1<005200030057>-2<004B>-9<004800030056>-16<0057>-3<0048>-10<0053>-8<005600030055>-12<0048>-16<0054>-3<0058004C0055>-12<0048>-16<004700030049>-7<0052>-7<0055000300460052>-7<005100C0>-7<004A>-3<0058>1<0055>-12<004C0051>-11<004A00030044>-4<0051>-11<00470003004C0051>-9<0056>-16<0057>-19<0044>-4<004F>1<004F004C0051>-11<004A0003>]TJ
[<0057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030047>-5<0052>-7<0050>-7<0044>-2<004C0051000300460052>-7<00510057>-2<0055>-12<0052>-6<004F>1<004F>-7<0048>-10<0055>43<001100030037>-7<004B>-9<0048>-10<0055>-12<004800030044>-4<0055>-12<004800030057>-2<004B>-9<004800030058>-6<0056>-6<0058>-3<0044>-4<004F00030056>-21<005C>-12<0056>-16<0057>-3<0048>-10<005000030046>1<0052>-7<005100C0>-7<004A>-3<0058>1<0055>-8<0044>-3<0057>-2<004C>-5<0052>-7<005100030056>-16<0057>-3<0048>-10<0053>-8<005600030057>-2<004B>-7<0044>-3<005700030050>-6<0058>-6<0056>-16<005700030057>-19<0044>-4<004E>12<004800030053>-8<004F>-5<0044>-9<0046>-2<0048>-9<000F00030056>-5<0058>-5<0046>4<004B0003>]TJ
as setting a static IP address, renaming the computer, and adding the AD DS role and tools. Because 
this is a second domain controller, it is not necessary to add the DNS server role if you do not want 
to do so. But the server requires the ability to resolve names, so you must assign a DNS server to the 
DNS client. 
To add a
[<00030027>-8<0031>-7<003600030056>-12<0048>-10<0055>-47<0059>1<0048>-10<005500030057>-1<005200030057>-2<004B>-9<00480003002C>-4<0033000300460052>-7<005100C0>-7<004A>-3<0058>1<0055>-8<0044>-3<0057>-2<004C>-5<0052>-7<0051>-15<000F00030058>-6<0056>-12<004800030057>-2<004B>-9<00480003>]TJ
Set-DNSClientServerAddress 
cmdlet. 
Specify the same interface index that the 
New-NetIPAddress
 cmdlet uses. Finally, specify the DNS 
server IP address to the 
-serveraddresses 
parameter. This portion of the script appears here:
[<0029>-3<0052>-6<004F>1<004F>-7<0052>-3<005A>-9<004C0051>-11<004A00030057>-2<004B>-9<00480003002C>-4<003300030044>-11<0047>-7<0047>1<0055>-12<0048>-12<0056>-14<0056000300460052>-7<005100C0>-7<004A>-3<0058>1<0055>-8<0044>-3<0057>-2<004C>-5<0052>-7<0051>-14<000F0003004C>-5<00570003004C>-5<005600030057>-2<004C0050>-9<004800030057>-1<005200030055>-12<0048>-10<0051>-7<0044>-4<0050>-9<004800030057>-2<004B>-9<004800030056>-12<0048>-10<0055>-47<0059>1<0048>-10<0055>43<001100030037>-7<004B>-2<004C>-5<005600030053>-13<0052>-7<0055>-41<0057>-2<004C>-5<0052>-7<005100030052004900030057>-2<004B>-9<004800030056>-13<0046>4<0055>-12<004C0053>-5<00570003004C>-5<00560003>]TJ
exactly the same as the AddAdPrereqs.ps1 script and will not be discussed here. Note that because 
only the AD DS bits are required, the script goes ahead and adds the role-based portion of the 
  
installation. This reduces the need for an additional script. The portion of the script that installs the 
AD DS role appears here:
Finally, it is time to reboot the server. To do that, use the 
Restart-Computer
 cmdlet. The complete 
Add-DNDSPrereqsDC2.ps1 script appears here: 
dd-D
DSPrereqsDC2.ps1
Once the computer reboots, it is time to add the server to the domain as a domain controller. 
[<0037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030056>-16<0057>-3<0048>-10<00530003004C>-5<005600030057>-1<00520003004C0050>-4<0053>-13<0052>-7<0055>-41<005700030057>-2<004B>-9<00480003>]TJ
ADDSDeployment
 module. Next, the
Install-ADDSDomainController 
cmdlet is used to add the server as a domain controller to an existing domain. Because you did not 
want to install DNS, the
-installdns 
parameter receives 
$false
. In addition, the 
-replicationsourcedc 
[<0053>-9<0044>-4<0055>-8<0044>-4<0050>-9<0048>-10<0057>-3<0048>-10<00550003004C>-5<005600030056>-12<0048>-10<005700030057>-1<005200030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030047>-5<0052>-7<0050>-7<0044>-2<004C0051000300460052>-7<00510057>-2<0055>-12<0052>-6<004F>1<004F>-7<0048>-10<005500030057>-2<004B>-7<0044>-3<00570003005A>-3<0044>-10<005600030045>-9<0058004C004F>-5<0057>-20<001100030037>-7<004B>-9<0048000300460052>-7<0050>-4<0053>-8<004F>-7<0048>-10<0057>-3<004800030026>8<0055>-12<0048>-10<0044>-3<0057>-3<0048>-12<0024>-3<0047>-7<0047004C>-5<0057>-2<004C>-5<0052>-7<0051>-7<0044>-4<004F>-2<0027>-13<0026>-30<0011>-8<0053>-8<0056>8<0014>10<0003>]TJ
script appears here:
Create
dditionalDC.ps1
Once the server comes out of the reboot, it is time to log on to the server using domain creden
[<0057>-2<004C>-2<0044>-4<004F>-8<0056>-19<001100030037>-7<004B>-9<004800030056>-12<0048>-10<0055>-47<0059>1<0048>-10<005500030051>-9<0048>-16<0048>-16<0047>-6<0056000300440003004F004C>-5<0057>-31<0057>-2<004F>-7<004800030057>-2<004C0050>-9<004800030057>-1<0052000300460052>-7<0050>-4<0053>-8<004F>-7<0048>-10<0057>-3<0048000300460052>-7<005100C0>-7<004A>-3<0058>1<0055>-8<0044>-3<0057>-2<004C>-5<0052>-7<0051>-14<001100030025>-11<0044>-9<0046>4<004E00030052>-7<005100030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030047>-5<0052>-7<0050>-7<0044>-2<004C0051000300460052>-7<00510057>-2<0055>-12<0052>-6<004F>1<004F>-7<0048>-10<0055>39<000F0003>]TJ
Active Directory Users and Computers shows both domain controllers in the Domain Controllers 
organizational unit OU. This appears in Figure 17-6.
FIGURE 17-6
Active Directory Users and Computers shows both domain controllers in the Domain Controllers OU.
Adding a read-only domain controller
Adding a read-only domain controller to an existing domain is only slightly different from adding a 
full domain controller to an existing domain. The process is a two-step procedure. First, the prerequi
[<0056>-3<004C>-5<0057>-3<0048>-12<005600030050>-6<0058>-6<0056>-16<005700030045>-13<00480003004C0051>-9<0056>-16<0057>-19<0044>-4<004F>1<004F>-7<0048>-16<0047>-9<000F00030044>-3<0051>-11<004700030057>-2<004B>-9<0048>-10<0051>-14<000F00030049>-7<0052>-6<004F>1<004F>-7<0052>-3<005A>-9<004C0051>-11<004A00030057>-2<004B>-9<004800030055>-12<0048>-10<0045>-13<0052>-13<0052>-2<0057>-20<000F00030057>-2<004B>-9<004800030056>-12<0048>-10<0055>-47<0059>1<0048>-10<00550003004C>-5<0056000300460052>-7<005100C0>-7<004A>-3<0058>1<0055>-12<0048>-16<004700030044>-10<00560003004400030055>-12<0048>-10<0044>-11<0047>-2<0010>-18<0052>-7<0051>-4<004F>-12<005C00030047>-5<0052>-7<0050>-7<0044>-2<004C00510003>]TJ
[<00460052>-7<0051>-1<0057>-2<0055>-12<0052>-6<004F>1<004F>-7<0048>-10<0055>44<001100030037>-7<004B>-9<004800030053>-7<0055>-12<0048>-10<0055>-12<0048>-16<0054>-3<0058004C>-5<0056>-3<004C>-5<0057>-3<00480003004C0051>-9<0056>-16<0057>-19<0044>-4<004F>1<004F>-5<0044>-3<0057>-2<004C>-5<0052>-7<005100030056>-12<0046>4<0055>-12<004C0053>-5<005700030046>-14<0044>-4<005100030045>-13<004800030056>-4<004C0050>-4<0053>-8<004F004C>-5<00C0>-7<0048>-16<00470003004400030045>-6<004C>-5<005700030049>-12<0055>-12<0052>-7<005000030057>-2<004B>-9<004800030053>-7<0055>-12<0048>-10<0055>-12<0048>-16<0054>-3<0058004C>-5<0056>-4<004C>-5<0057>-3<004800030056>-13<0046>4<0055>-12<004C0053>-5<005700030047>-7<0048>-8<0059>1<0048>-11<004F>]TJ
[<0052>-7<0053>-13<0048>-16<00470003004C005100030057>-2<004B>-9<004800030053>-7<0055>-12<0048>-8<0059>-12<004C>-5<0052>-9<0058>-6<005600030056>-12<0048>-16<0046>-25<0057>-2<004C>-5<0052>-7<0051>-14<001100030037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030053>-13<0052>-7<0055>-41<0057>-2<004C>-5<0052>-7<005100030052>1<004900030057>-2<004B>-9<004800030056>-13<0046>4<0055>-12<004C0053>-5<005700030046>4<0055>-12<0048>-10<0044>-3<0057>-3<0048>-12<005600030057>-2<004B>-9<004800030056>-16<0057>-19<0044>-3<0057>-2<004C>-3<00460003002C>-3<003300030044>-11<0047>-7<0047>1<0055>-12<0048>-12<0056>-14<005600030044>-4<0051>-11<004700030056>-12<0048>-10<0057>-19<005600030057>-2<004B>-9<00480003>]TJ
[<0027>-8<0031>-7<003600030046>4<004F004C>-5<0048>-10<0051>-1<005700030057005200030053>-13<0052>-4<004C0051005700030057005200030057>-2<004B>-9<004800030027>-8<0031>-7<003600030056>-12<0048>-10<0055>-47<0059>1<0048>-10<005500030055>-17<0058>1<0051>-4<0051>-2<004C0051>-11<004A00030052>-7<005100030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030047>-5<0052>-7<0050>-7<0044>-2<004C0051000300460052>-7<00510057>-2<0055>-12<0052>-6<004F>1<004F>-7<0048>-10<005500030057>-2<004B>-7<0044>-3<00570003005A>-2<0044>-10<00560003004C0051>-9<0056>-16<0057>-19<0044>-4<004F>1<004F>-7<0048>-16<0047>-8<001100030037>-7<004B>-2<004C>-5<00560003>]TJ
portion of the script is the same as the Add-DNDSPrereqsDC2.ps1 script in the previous section. Next, 
the server is renamed via the 
Rename-Computer
 cmdlet. This simple command is the same one that 
was used in the previous scripts. 
The big change involves using the
Add-WindowsFeature
 cmdlet to add the AD DS role as well as 
[<0044>-4<004F>1<004F00030044>-11<0056>-14<0056>-12<0052>-13<0046>4<004C>-2<0044>-3<0057>-3<0048>-16<004700030049>-7<0048>-10<0044>-3<0057>-8<0058>1<0055>-12<0048>-12<005600030044>-4<0051>-11<004700030050>-7<0044>-4<0051>-7<0044>-11<004A>-7<0048>-10<0050>-9<0048>-10<00510057000300570052>-13<0052>-6<004F>-8<0056>-19<001100030037>-7<004B>-2<004C>-5<00560003004C>-5<0056000300440003004A>1<0055>-12<0048>-10<0044>-3<005700030056>-3<004B>-9<0052>-7<0055>-41<0057>-1<0046>-2<0058>-5<005700030057>-2<004B>-7<0044>-3<005700030056>-3<004C0050>-4<0053>-8<004F004C>-5<00C0>-7<0048>-12<00560003005C>1<0052>-9<0058>1<005500030057>-19<0044>-10<0056>-4<004E>-26<001100030037>-7<004B>-9<00480003>]TJ
change appears here:
  
The last step is to use the 
Restart-Computer
 cmdlet to 
reboot the server. The complete 
CreateDC3Prereqs.ps1 script appears here:
CreateDC3Prereqs.ps1
[<0032>-11<0051>-9<0046>-2<004800030057>-2<004B>-9<004800030056>-12<0048>-10<0055>-47<0059>1<0048>-10<00550003004B>-7<0044>-10<005600030045>-13<0048>-16<0048>-10<00510003004A004C>-12<0059>1<0048>-10<00510003002C>-3<0033000300460052>-7<005100C0>-7<004A>-3<0058>1<0055>-8<0044>-3<0057>-2<004C>-5<0052>-7<005100030044>-4<0051>-11<00470003005C>1<0052>-9<0058>4<00B7>2<0059>1<00480003004F>-7<0052>-10<0044>-11<0047>-7<0048>-16<004700030057>-2<004B>-9<004800030053>-7<0055>-12<0048>-10<0055>-12<0048>-16<0054>-3<0058004C>-5<0056>-3<004C>-5<0057>-3<0048>-12<0056>-20<000F0003004C>-5<00570003004C>-5<00560003>]TJ
[<0057>-2<004C0050>-9<004800030057>-1<005200030044>-11<0047>-7<00470003004400030055>-12<0048>-10<0044>-11<0047>-2<0010>-18<0052>-7<0051>-4<004F>-12<005C00030047>-5<0052>-7<0050>-7<0044>-2<004C005100030046>1<0052>-7<00510057>-2<0055>-12<0052>-6<004F>1<004F>-7<0048>-10<005500030057>-1<005200030057>-2<004B>-9<004800030047>-5<0052>-7<0050>-7<0044>-2<004C0051>-14<001100030037>-7<004B>-9<004800030056>-13<0046>4<0055>-12<004C0053>-5<005700030049>-7<0052>-7<005500030057>-2<004B>-2<004C>-5<0056000300C0>-2<0055>-26<0056>-16<00570003004C0050>-4<0053>-13<0052>-7<0055>-41<0057>-19<005600030057>-2<004B>-9<00480003>]TJ
ADDSDeployment
 module, and then it calls the 
Install-ADDomainController
 cmdlet. Because the 
domain controller is read-only, the 
AllowPasswordReplicationAccountName 
parameter must be used 
to specify whose passwords will be replicated. This value is an array. The credentials for contacting 
the domain must be supplied. To do this, you use the 
Get-Credential
 cmdlet and enter the domain 
admin credentials. Next, the 
Directory Restore Password prompt appears. In addition to specify
ing who can replicate the passwords, you must also specify who cannot replicate passwords. This 
array is entered on multiple lines to make it easier to read. This scenario did not call for installing 
[<0044>-4<0051>-11<0047000300460052>-7<005100C0>-7<004A>-3<0058>1<0055>-12<004C0051>-11<004A00030027>-8<0031>-7<003600030052>-7<005100030057>-2<004B>-2<004C>-5<005600030053>-9<0044>-4<0055>-41<0057>-2<004C>-3<0046>-2<0058>1<004F>-5<0044>-4<005500030050>-7<0044>-9<0046>4<004B>-2<004C0051>-9<0048>-9<000F00030044>-3<0051>-11<004700030057>-2<004B>-9<0048>-10<0055>-12<0048>-8<0049>-7<0052>-7<0055>-12<004800030057>-2<004B>-7<0044>-3<005700030055>-12<0052>-6<004F>-7<00480003004C>-5<005600030051>-9<0052>-2<005700030044>-11<0047>-7<0047>-7<0048>-16<0047>-8<001100030037>-7<004B>-9<0048000300460052>-7<0050>-4<0053>-8<004F>-7<0048>-10<0057>-3<00480003>]TJ
CreateReadOnlyDomainController.ps1 script appears here:
Create
eadOnlyDomainController.ps1
[<003A>-10<004B>-9<0048>-10<005100030057>-2<004B>-9<004800030056>-13<0046>4<0055>-12<004C0053>-5<005700030055>-17<0058>1<0051>-9<0056>-20<000F00030024>1<0046>-25<0057>-2<004C>-12<0059>1<004800030027>-8<004C0055>-12<0048>-16<0046>-25<0057>-1<0052>-7<0055>-47<005C00030038>-3<0056>-12<0048>-10<0055>-26<005600030044>-4<0051>-11<004700030026>2<0052>-7<0050>-4<0053>-9<0058>-5<0057>-3<0048>-10<0055>-26<005600030052>-7<005100030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030047>-5<0052>-7<0050>-7<0044>-2<004C0051000300460052>-7<00510057>-2<0055>-12<0052>-6<004F>1<004F>-7<0048>-10<00550003>]TJ
refreshes to include the new read-only domain controller. This appears in Figure 17-7.
FIGURE 17-7
Active Directory Users and Computers shows the newly added read-only domain controller.
Domain controller prerequisites: step-by-step exercises
[<002C>-1<005100030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030048>-6<005B>2<0048>-10<0055>-10<0046>4<004C>-5<0056>-12<0048>-9<000F0003005C>1<0052>-10<00580003005A>-9<004C004F>1<004F0003004C0051>-9<0056>-16<0057>-19<0044>-4<004F>1<004F00030057>-2<004B>-9<004800030045>-9<0044>-10<0056>-12<004800030055>-12<0048>-16<0054>-3<0058004C0055>-12<0048>-10<0050>-9<0048>-10<0051>-1<0057>-19<005600030049>-7<0052>-7<00550003004400030047>-5<0052>-7<0050>-7<0044>-2<004C005100030046>1<0052>-7<00510057>-2<0055>-12<0052>-6<004F>1<004F>-7<0048>-10<005500030052>-7<00510003004400030049>-12<0055>-12<0048>-12<0056>-4<004B0003004C0051>-9<0056>-16<0057>-19<0044>-4<004F>]TJ
lation of Windows Server 2012. This exercise will assign a static IP address, rename the server, and 
install the AD DS admin tools. In the subsequent exercise, you will add a new domain controller to a 
new forest.
Installing domain controller prerequisites
1.
Log on to your server with the administrator account. 
2.
Open the Windows PowerShell ISE.
3.
Set the script execution policy to 
remotesigned
. The command appears here:
4.
Use the 
Get-NetAdapter
 cmdlet to determine the interface index number of the active net
work adapter. The command appears here:
  
5.
Use the 
New-NetIPAddress
 cmdlet to assign a static IP address to the active network adapter. 
Specify the 
ipaddress
[<0053>1<0055>-2<0048>-12<00C0>-4<005B>-2<004F>4<00480051>2<004A0057>4<004B>]TJ
interfaceindex
and defaultgateway 
values that are appro
priate for your network. Sample values appear here:
6.
Use the 
Rename-Computer
 cmdlet to rename the computer. Specify a new name that follows 
your naming convention. The command appears here with a sample name:
Add the AD DS, DNS, and GPMC features and roles, including all subfeatures and tools, by 
using the 
Add-WindowsFeature
 cmdlet. The command appears here:
Add-WindowsFeature -Name "dns" -IncludeAllSubFeature -IncludeManagementTools                          
8.
Restart the computer by using the 
Restart-Computer
 cmdlet. This command appears here:
This concludes the exercise. 
[<002C>-1<005100030057>-2<004B>-9<004800030049>-7<0052>-6<004F>1<004F>-7<0052>-3<005A>-9<004C0051>-11<004A00030048>-6<005B>2<0048>-10<0055>-10<0046>4<004C>-5<0056>-12<0048>-9<000F0003005C>1<0052>-10<00580003005A>-9<004C004F>1<004F00030044>-11<0047>-7<004700030057>-2<004B>-9<004800030056>-12<0048>-10<0055>-47<0059>1<0048>-10<0055000300460052>-7<005100C0>-7<004A>-3<0058>1<0055>-12<0048>-16<00470003004C005100030057>-2<004B>-9<004800030053>-7<0055>-12<0048>-16<0046>-2<0048>-16<0047004C0051>-11<004A00030048>-6<005B>2<0048>-10<0055>-10<0046>4<004C>-5<0056>-12<004800030057>-1<00520003004400030051>-9<0048>-9<005A0003>]TJ
forest.
dding a domain controller to a new forest
1.
Log on to the freshly rebooted server as the administrator.
2.
Open the Windows PowerShell ISE. 
3.
[<0026>8<0055>-12<0048>-10<0044>-3<0057>-3<00480003004400030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<004800030049>-7<0052>-7<00550003005C>1<0052>-10<0058>1<005500030049>-18<0058>1<004F>1<004F>-12<005C00030054>-3<0058>-3<0044>-4<004F004C>-5<00C0>-7<0048>-16<004700030047>-5<0052>-7<0050>-7<0044>-2<004C005100030051>-7<0044>-4<0050>-9<0048>-7<001100030024>-10<005100030048>-6<005B>-6<0044>-4<0050>-4<0053>-8<004F>-7<004800030044>-4<0053>-7<0053>-13<0048>-10<0044>-4<0055>-26<00560003004B>-9<0048>-10<0055>-12<0048>5<001D>]TJ
4.
Create a variable to hold your NetBIOS name. Normally, the 
NetBIOS name is the same as your 
domain name without the extension. An example appears here:
5.
Import the 
ADDSDeployment
 module. The command appears here:
6.
Add the
Install-ADDSForest
 cmdlet to your script. Use tab expansion to simplify typing. Add 
the 
-CreateDnsDelegation
 parameter and set it to 
false
. Add the line-continuation character 
at the end of the line. This appears here:
Specify the
-DatabasePath
-DomainMode
-DomainName
, and 
-DomainNetbiosName
 param
eters. Use the domain name and NetBIOS name stored in the variables created earlier. Make 
sure you have line continuation at the end of each line. This portion of the command appears 
here:
8.
Specify the 
-ForestMode
-LogPath
, and 
-SysVolpath
 parameters. In addition, you will need 
to supply options for the
-installDNS
 and 
-rebootoncompletion 
parameters. Use the
-Force
parameter. This portion of the script appears here:
Run the script. You will be prompted for a directory-restore password, and you22ll have to type 
[<004C>-5<005700030057>-35<005A>-9<004C>-3<0046>-2<0048>-7<00110003003C>49<0052>-9<0058>1<005500030056>-12<0048>-10<0055>-47<0059>1<0048>-10<00550003005A>-9<004C004F>1<004F00030044>-4<004F>-8<0056>-12<005200030055>-12<0048>-10<0045>-13<0052>-13<0052>-2<005700030052>-7<0051>-9<0046>-2<004800030057>-2<004B>-9<0048000300460052>-7<005100C0>-7<004A>-3<0058>1<0055>-8<0044>-3<0057>-2<004C>-5<0052>-7<00510003004C>-5<0056000300460052>-7<0050>-4<0053>-8<004F>-7<0048>-10<0057>-3<0048>-16<0047>-8<001100030037>55<00520003004F>-7<0052>-13<004A00030052>-7<005100030057005200030057>-2<004B>-9<00480003>]TJ
server, use your directory-restore password. 
This concludes the exercise. 
  
Chapter 17 quick reference
Do this
Assign a static IP address 
Use the 
New-NetIPAddress
 cmdlet.
Install a new Windows feature or role
Use the 
Add-WindowsFeature
 cmdlet from the 
ServerManager
module.
Restart a computer
Use the 
Restart-Computer
 cmdlet.
Find the index number of the active network adapter
Use 
Get-NetAdapter
 cmdlet and select the 
IfIndex
 property.
See what features or roles are installed on a server 
Use the 
Get-WindowsFeature
 cmdlet, pipe the results to the 
Where-Object
[<00030046>-3<0050>-18<0047>-6<004F>-14<0048>-17<0057>-26<000F00030044>-11<0051>-18<0047000300C0>-9<004F>-13<0057>-10<0048>-17<005500030052>-14<005100030057>-9<004B>-16<00480003004C>-7<0051>-16<0056>-23<0057>-26<0044>-11<004F>-6<004F>-14<0048>-23<004700030053>-14<0055>-19<0052>-14<0053>-20<0048>-17<0055>-47<0057>-44<005C>26<0011>]TJ
Add a Windows role as well as the associated manage
ment tools
Use the 
Add-WindowsFeature
 cmdlet and specify the 
-includemanagementtools
 parameter.
Create a new forest
Use the 
Install-ADDSForest
 cmdlet from the 
ADDSDeployment
module.
CHAPTER 18
Debugging Scripts
fter completing this chapter, you will be able to:
Use the 
Write-Debug 
cmdlet to provide detailed information from a script.
Use the 
Set-StrictMode 
cmdlet to prevent errors during development.
Understand how to work with the Windows PowerShell debugger.
Understanding debugging in Windows PowerShell
No one enjoys debugging scripts. In fact, the best debugging is no debugging. It is also true that well-
written, well-formatted, well-documented, and clearly constructed Microsoft Windows PowerShell code 
requires less effort to debug than poorly formatted, undocumented spaghetti code. It is fair to say 
[<0057>-2<004B>-7<0044>-3<005700030047>-7<0048>-10<0045>-9<0058>-7<004A>-7<004A004C0051>-11<004A00030045>-13<0048>-16<004A004C0051>-9<00560003005A>-9<004B>-9<0048>-10<00510003005C>1<0052>-9<0058000300C0>-2<0055>-26<0056>-16<005700030052>-7<0053>-13<0048>-10<005100030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F0003002C>-8<00360028>-16<001100030037>-7<004B>-9<0048>-10<0055>-12<0048>-8<0049>-7<0052>-7<0055>-12<0048>-9<000F0003005C>1<0052>-9<005800030050>-2<004C>-5<004A>1<004B>-2<00570003005A>-3<0044>-4<0051>-1<0057>-10<0003>]TJ
to review Chapter 5, 23Using PowerShell Scripts,24 Chapter 6, 23Working with Functions,24 and Chapter 7, 
23Creating Advanced Functions and Modules,24 before you dive too deep into this chapter. 
If you can read and understand your Windows PowerShell code, chances are you will need to do 
very little debugging. But what if you do need to do some debugging? Well, just as excellent golf
ers spend many hours practicing chipping out of the sand trap in hopes that they will never need to 
use the skill, so too must competent Windows PowerShell scripters practice debugging skills in hopes 
that they will never need to apply the knowledge. Understanding the color coding of the Windows 
PowerShell ISE, detecting when closing quotation marks are missing, and knowing which pair of 
braces corresponds to which command can greatly reduce the debugging that may be needed later. 
Understanding three different types of errors
Debugging is a skill used to track down and eliminate errors from a Windows PowerShell script. There 
are three different types of errors that coders make: syntax errors, run-time errors, and logic errors. 
Working with syntax errors
Syntax errors are the easiest to spot, and you usually correct them at design time27that is, while 
you have the Windows PowerShell ISE open and you are writing your script. Syntax errors generally 
get corrected at design time because the 
language parser runs in the background of the Windows 
PowerShell ISE, and when it detects a syntax error, it marks it with a squiggly line thus indicating 
  
that the command requires additional parameters, decoration, or other attention. Seasoned scripters 
don22t usually even view this process as error correction, but as simply completing commands so that 
scripts run properly. Learning to use 
IntelliSense inside the Windows PowerShell ISE is a good way to 
[<0055>-12<0048>-16<0047>-3<0058>-5<0046>-2<004800030057>-2<004B>-9<0048>-12<0056>-12<004800030048>-10<0055>-12<0055>-12<0052>-7<0055>-26<0056>-19<0011>23<000C00030037>-7<004B>-9<004800030050>-9<0052>-7<0056>-16<005700030056>-12<0048>-10<0044>-10<0056>-12<0052>-7<0051>-9<0048>-16<004700030056>-13<0046>4<0055>-12<004C0053>-5<0057>-3<0048>-10<0055>-26<00560003004F>-7<0048>-10<0044>-4<0055>-12<005100030057>-1<005200030053>-9<0044>2<005C00030044>-3<0057>-31<0057>-3<0048>-10<0051>-1<0057>-2<004C>-5<0052>-7<005100030057005200030057>-2<004B>-9<004800030056>-21<005C>-12<00510057>-19<0044>-14<005B00030053>-9<0044>-4<0055>-26<0056>-12<0048>-10<005500030044>-4<0051>-11<0047000300C0>-11<005B0003>]TJ
errors indicated by the 
red squiggly lines prior to actually running the code. When syntax errors aren22t 
corrected, the error messages generated often provide good guidance toward correcting the offend
ing command. Figure 18-1 illustrates a syntax error.
FIGURE 18-1
The Windows PowerShell ISE highlights potential errors with a red squiggly line. The error message 
[<0056>-20<0057>-24<0044>-8<0057>-7<0048>-17<005600030057>-7<004B>-14<004800030052>-5<0049>-43<0049>-11<0048>-15<0051>-15<0047>-4<004C>-5<0051>-15<004A00030046>-4<0052>-11<0050>-8<0050>-11<0044>-8<0051>-15<0047>-14<000F00030044>-8<0051>-15<004700030052>-4<0049>-45<0057>-8<0048>-15<005100030053>-11<0055>-17<0052>-6<0059>-17<004C>-10<0047>-11<0048>-17<005600030046>-1<004F>-9<0044>-8<0055>-16<004C>-9<00C0>-10<0046>-19<0044>-7<0057>-7<004C>-10<0052>-11<005100030049>-11<0052>-11<005500030055>-17<0048>-21<0054>-8<0058>-4<004C>-5<0055>-17<0048>-21<004700030046>-1<004B>-11<0044>-8<0051>-15<004A>-11<0048>-17<0056>-24<0011>]TJ
Working with run-time errors
The syntax parser often does not detect run-time errors. Rather, run-time errors are problems that 
manifest themselves only when a script runs. Examples of these types of errors include an 
unavail
[<0044>-4<0045>-8<004F>-7<004800030055>-12<0048>-12<0056>-12<0052>-10<0058>1<0055>-10<0046>-2<00480003000B>19<0056>-6<0058>-5<0046>4<004B00030044>-10<00560003004400030047>1<0055>-12<004C>-12<0059>1<004800030052>-7<005500030044000300C0>-2<004F>-7<0048>20<000C>2<000F0003>]TJ
permission problems such as a non-elevated user not having 
the rights to perform an operation, 
misspelled words, and code dependencies that are not met such 
as access to a required module. The good thing is that many of these run-time errors are detectible 
from within the Windows PowerShell ISE due to the robust 
tab expansion mechanism in Windows 
PowerShell 3.0. For example, it is possible to eliminate the
 23Resource not available24 run-time error if 
you use tab expansion. This is possible because tab expansion works even across
 Universal Naming 
Convention UNC shares. Figure 18-2 shows an example of employing this feature when attempting 
to use the 
Get-Content 
cmdlet to read the contents of the 
[<0024>-7<0027>-3<0042>-34<0027>-12<0052>-13<0046>-15<0011>12<0057>-34<005B>-37<0057000300C0>-2<004F>-7<004800030049>-13<0055>-12<0052>-7<005000030057>-2<004B>-9<004800030047>-3<0044>-3<0057>-19<004400030056>-3<004B>-7<0044>-4<0055>-12<004800030052>-7<0051000300440003>]TJ
server named hyperv1. 
FIGURE 18-2
Improved tab expansion makes it possible to avoid certain run-time errors.
Unfortunately, tab expansion does not help when it comes to dealing with 
permission issues. 
Paying attention to the returned error message, however, helps to identify that you are dealing with a 
permission issue. In these cases, you usually receive an
 23Access is denied24 error message. Such an error 
message appears here when bogususer attempts to access the DC1 server to perform a 
Windows 
Management Instrumentation WMI query.
One way to detect run-time errors is to use the 
Write-Debug 
cmdlet to display the contents of vari
ables that are most likely to contain erroneous data. By moving from a one-line command to a simple 
script containing variables and a variety of 
Write-Debug 
commands, you are automatically set up to 
perform the most common troubleshooting techniques on your script. For example, in the script that 
appears here, there are two main sources of run-time errors: the availability of the target computer 
and the credentials used to perform the connection. 
emoteWMISession
oDebug.ps1
  
By using the immediate window in the Windows PowerShell ISE, you can interrogate the value of 
the 
$cn
 and 
$credential
 variables. You can also use the 
Test-Connection 
cmdlet to check the status 
of the 
$cn
 computer. By performing these typical debugging steps in advance, you can get the script 
to display the pertinent information and therefore shortcut any debugging required to make the 
script properly work. The DebugRemoteWMISession.ps1 script that appears here illustrates using the 
Write-Debug 
cmdlet to provide debugging information.
Debug
emoteWMISession.ps1
Figure 18-3 illustrates running the DebugRemoteWMISession.ps1 script inside the Windows 
PowerShell ISE to determine why the script fails. According to the output, the remote server, DC1, is 
available, but the user Bogus User with the password of BogusPassowrd is receiving 
23Access is denied.24 
It might be that the user does not have an account or access rights, or that the password is not really 
BogusPassowrd. The detailed debugging information should help to clarify the situation.
FIGURE 18-3
Detailed debugging makes solving run-time errors more manageable.
A better way to use the 
Write-Debug 
cmdlet is to combine it with the 
[CmdletBinding]
 attribute 
at the beginning of the script or function. Getting the 
[CmdletBinding]
 attribute to work requires 
a couple of things. First, the script or function must use at least one parameter. This means that the 
param 
keyword will be present in the script. Second, the 
[CmdletBinding]
 attribute must appear 
prior to the
param 
keyword. Once implemented, this change permits use of the common 
-debug 
parameter. When calling the script or function, use of the 
-debug 
switched parameter causes the 
debug stream from the 
Write-Debug 
cmdlet in the code to appear in the output. This simple change 
also means that your code no longer needs to change the value of the 
$DebugPreference
 variable. 
It also means that you do not need to create your own switched 
-debug 
parameter and include code 
such as the following at the beginning of your script:
[<0037>-7<004B>-9<004800030055>-12<0048>-8<0059>-12<004C>-5<0056>-12<0048>-16<004700030044>-4<0051>-11<004700030056>-4<004C0050>-4<0053>-8<004F004C>-5<00C0>-7<0048>-16<004700030027>-12<0048>-10<0045>-9<0058>-7<004A>-1<0035>-2<0048>-10<0050>-9<0052>-2<0057>-3<0048>12<003A>-7<0030>-4<002C>-8<0036>-11<0048>-12<0056>-14<0056>-4<004C>-5<0052>-7<0051>-14<0011>-8<0053>-8<0056>8<001400030056>-13<0046>4<0055>-12<004C0053>-5<005700030044>-4<0053>-7<0053>-13<0048>-10<0044>-4<0055>-26<005600030049>-7<0052>-6<004F>1<004F>-7<0052>-3<005A>-9<004C0051>-11<004A>-11<000F00030044>-10<00560003>]TJ
Switch_
DebugRemoteWMISession.ps1. The changes to the script include the addition of the 
[CmdletBinding]
attribute, the creation of a parameter named 
, and the setting of the default value to the name of 
the local computer. The other changes involve removing the toggling of the 
$DebugPreference
 vari
able. The complete script appears here:
Switch_Debug
emoteWMISession.ps1
When the Switch_DebugRemoteWMISession.ps1 script runs with the 
-debug 
switch from the 
Windows PowerShell console, in addition to displaying the debug stream, it also prompts to continue 
the script. This permits halting execution upon reaching an unexpected value. Figure 18-4 illustrates 
this technique, in which a user named Bogus User, who wishes to connect to a remote server named 
DC1, unexpectedly discovers that he is connecting to a workstation named W8Client6. 
FIGURE 18-4
Using the 
-debug 
switched parameter to step through potential problems in a script.
  
Working with logic errors
[<002F>-8<0052>-13<004A004C>-3<004600030048>-10<0055>-12<0055>-12<0052>-7<0055>-26<005600030046>-15<0044>-4<005100030045>-13<004800030059>1<0048>-10<0055>-47<005C00030047004C>-3<0049>-41<00C0>-5<0046>-2<0058>1<004F>-6<005700030057>-1<005200030047>-7<0048>-10<0057>-3<0048>-16<0046>-25<005700030045>-13<0048>-16<0046>-14<0044>-6<0058>-6<0056>-12<004800030057>-2<004B>-9<0048>-7<005C00030050>-7<0044>2<005C00030045>-13<004800030053>-7<0055>-12<0048>-12<0056>-12<0048>-10<0051005700030048>-8<0059>1<0048>-10<00510003005A>-9<004B>-9<0048>-10<00510003005C>1<0052>-9<0058>1<005500030056>-13<0046>4<0055>-12<004C0053>-5<00570003>]TJ
[<0044>-4<0053>-7<0053>-13<0048>-10<0044>-4<0055>-26<005600030057>-1<005200030045>-13<00480003005A>-2<0052>-7<0055>-12<004E>-14<004C0051>-11<004A000300460052>-7<0055>-12<0055>-12<0048>-16<0046>-25<0057>-2<004F>-12<005C>35<001100030025>-10<0058>-5<00570003005A>-9<004B>-9<0048>-10<005100030057>-2<004B>-2<004C0051>-11<004A>-6<00560003004A>-5<00520003005A>-9<0055>-12<0052>-7<0051>-11<004A>-11<000F00030057>-2<004B>-9<0048>-7<005C00030046>-14<0044>-4<005100030045>-13<004800030047004C>-3<0049>-40<00C0>-5<0046>-2<0058>1<004F>-6<0057000300570052000300C0>-11<005B>-18<001100030030>-7<0052>-7<0056>-16<005700030052>1<004900030057>-2<004B>-9<00480003>]TJ
time, just examining the values of variables does not solve the problem, because the code itself works 
[<00C0>-2<0051>-9<0048>-7<001100030037>-7<004B>-9<004800030053>-7<0055>-12<0052>-7<0045>-8<004F>-7<0048>-10<005000030052>1<0049>-41<0057>-3<0048>-10<00510003004F004C>-5<0048>-12<00560003004C00510003005A>-9<004B>-7<0044>-3<005700030044>-4<0055>-12<004800030046>-15<0044>-4<004F>1<004F>-7<0048>-16<004700030057>-2<004B>-9<00480003>]TJ
business rules 
of the script. These are decisions the 
code makes that have nothing to do with the correct operation of, for example, a 
switch 
statement. 
At times, it may appear that the 
switch 
statement is not working correctly, because the wrong value 
is displayed at the end of the code, but quite often, the business rules themselves are causing the 
problem. 
For a simple example of a logic error, consider the function called 
my-function
 that appears here:
My-Function.ps1
The
 my-function
 function accepts two command-line parameters: 
and 
b. 
It then combines the 
two values and outputs a string stating the value is 
four
. The tester performs four different tests, and 
each time the function performs as expected. These tests and the associated output appear here:
Once the function goes into production, however, users begin to complain. Most of the time, 
the function displays incorrect output. However, the users also report that no errors are generated 
when the function runs. What is the best way to solve the logic problem? Simply adding a couple of 
Write-Debug 
commands to display the values of the variables 
and 
will more than likely not lead 
to the correct solution. A better way is to step through the code one line at a time and examine the 
associated output. The easy way to do this is to use the 
Set-PSDebug 
cmdlet27the topic of the next 
section in this chapter.
Using the 
Set-PSDebug
 cmdlet 
The 
Set-PSDebug
 cmdlet was available in Windows PowerShell 1.0, it did not change in Windows 
PowerShell 2.0, and it remains the same in Windows PowerShell 3.0. This does not mean it is a 
neglected feature, but rather that it does what it needs to do. For performing basic debugging 
quickly and easily, you cannot beat the combination of features that are available. There are three 
things you can do with the 
Set-PSDebug
 cmdlet: you can trace script execution in an automated fash
ion, step through the script interactively, and enable 
strict mode 
to force good Windows PowerShell 
coding practices. Each of these features will be examined in this section. The 
Set-PSDebug
 cmdlet is 
not designed to do heavy debugging; it is a lightweight tool that is useful when you want to produce 
a quick trace or rapidly step through a script. 
racing the script
One of the simplest ways to debug a script is to turn on script-level tracing. When you turn on script-
level tracing, each command that is executed is displayed to the Windows PowerShell console. By 
watching the commands as they are displayed to the Windows PowerShell console, you can deter
mine if a line of code in your script executes, or if it is being skipped. To enable script tracing, you use 
the 
Set-PSDebug
 cmdlet and specify one of three levels for the 
-trace
 parameter. The three levels of 
tracing are shown in Table 18-1.
TABLE 18-1
Set-PSDebug
 trace levels
Trace level
Meaning
Turns script tracing off.
Traces each line of the script as it is executed. Lines in the script that are not executed are not traced. 
Does not display variable assignments, function calls, or external scripts.
Traces each line of the script as it is executed. Displays variable assignments, function calls, and exter
nal scripts. Lines in the script that are not executed are not traced. 
To understand the process of tracing a script and the differences between the different trace lev
els, examine the CreateRegistryKey.ps1 script. It contains a single function called 
Add-RegistryValue
In the 
Add-RegistryValue
 function, the 
Test-Path 
cmdlet is used to determine if the registry key exists. 
If the registry key exists, a property value is set. If the registry key does not exist, the registry key is 
created and a property value is set. 
The Add-RegistryValue 
function is called when the script executes. 
The complete CreateRegistryKey.ps1 script is shown here:
Create
egistryKey.ps1
  
Working with trace level 1
When the trace level is set to 1, each line in the script that executes is displayed to the Windows 
PowerShell console. To set the trace level to 1, you use the 
Set-PSDebug
 cmdlet and assign a value of 
1 to the 
-trace 
parameter. 
Once the trace level has been set, it applies to everything that is typed in the Windows PowerShell 
console. If you run an interactive command, run a cmdlet, or execute a script, it will be traced. When 
[<0057>-2<004B>-9<004800030026>8<0055>-12<0048>-10<0044>-3<0057>-3<0048>-13<0035>-2<0048>-16<004A004C>-5<0056>-16<0057>-2<0055>-47<005C>-9<002E>10<0048>-7<005C>35<0011>-8<0053>-8<0056>8<001400030056>-13<0046>4<0055>-12<004C0053>-5<00570003004C>-5<005600030055>-17<0058>1<005100030044>-4<0051>-11<004700030057>-2<004B>-9<0048>-10<0055>-12<00480003004C>-5<005600030051>-9<005200030055>-12<0048>-16<004A004C>-5<0056>-16<0057>-2<0055>-47<005C0003004E>12<0048>-7<005C00030053>-7<0055>-12<0048>-12<0056>-12<0048>-10<00510057>-20<000F00030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030046>1<0052>-7<0050>-4<0050>-7<0044>-4<0051>-11<0047>-2<0010>-18<0047>-7<0048>-10<0045>-9<0058>-7<004A0003>]TJ
line displays the path to the script that is being executed. Because Windows PowerShell parses from 
the top down, the next line that is executed is the line that creates the 
Add-RegistryValue
 function. 
This command is on line 7 of the script because the actual script that executed contains 6 lines that 
are commented out. When you add the status bar to Notepad via View | Status Bar, the status bar at 
the lower-right corner of Notepad will display the line number. By default, Notepad does not display 
line and column numbers. This is shown in Figure 18-5.
FIGURE 18-5
By default, Notepad does not display line numbers. 
After the function is created, the next line of the script that executes is line 25. Line 25 of the 
CreateRegistryKey.ps1 script follows the comment that points to the entry point to the script this last 
line is shown in Figure 18-5, and calls the 
Add-RegistryValue
 function by passing two values for the 
-key
 and 
-value
 parameters. This appears here: 
Once control of script execution is inside the 
Add-RegistryValue
 function, the 
HKCU:software
ForScripting
 string is assigned to the 
$scriptRoot
 variable. This is shown here: 
The 
 statement is now evaluated. If the 
Test-Path
[<00030046>4<0050>-11<0047>1<004F>-7<0048>-10<00570003004C>-5<005600030058>1<0051>-7<0044>-4<0045>-8<004F>-7<004800030057>-1<0052000300C0>-2<0051>-11<004700030057>-2<004B>-9<00480003>]TJ
$scriptRoot
 location 
in the registry, then the 
 statement is entered and the commands inside the associated script block 
will be executed. In this example, 
$scriptRoot
 is located and the commands inside the script block are 
not executed. This is shown here: 
The 
Set-ItemProperty
 cmdlet is called on line 18 of the CreateRegistryKey.ps1 script. This is shown 
here: 
Once the 
Set-ItemProperty
 cmdlet has executed, the script ends. The Windows PowerShell console 
[<0053>-9<0044>-4<0055>-26<0056>-12<0048>-10<005500030051>-9<0052>-3<005A00030048>-10<00510057>-3<0048>-10<0055>-26<0056>-20<000F0003005A>-9<004C>-5<0057>-2<004B00030057>-2<004B>-9<004800030056>-17<0044>-4<0050>-9<004800030057>-2<004B>-4<0055>-12<0048>-16<00480003004F004C0051>-9<0048>-12<005600030052004900030049>-7<0048>-16<0048>-16<0047>1<0045>-9<0044>-9<0046>4<004E00030056>-4<004B>-9<0052>-3<005A>-9<00510003005A>-9<004B>-9<0048>-10<005100030057>-2<004B>-9<004800030057>-2<0055>-8<0044>-9<0046>4<004C0051>-11<004A0003005A>-2<0044>-10<0056000300C0>-2<0055>-26<0056>-16<005700030048>-10<0051>-7<0044>-4<0045>-8<004F>-7<0048>-16<0047>-8<00110003>]TJ
This is shown here:
When you set the debug trace level to 1, a basic outline of the execution plan of the script is pro
duced. This technique is good for quickly determining the outcome of branching statements such as 
the 
 statement to see if a script block is being entered. This appears in Figure 18-6.
FIGURE 18-6
Script-level 1 tracing displays each executing line of the script.
  
Working with trace level 2
When the trace level is set to 2, each line in the script that executes is displayed to the Windows 
PowerShell console. In addition, each variable assignment, function call, and outside script call is 
[<0047004C>-5<0056>-4<0053>-8<004F>-5<0044>2<005C>1<0048>-16<0047>-8<001100030037>-7<004B>-9<0048>-12<0056>-12<004800030044>-11<0047>-7<0047004C>-5<0057>-2<004C>-5<0052>-7<0051>-7<0044>-4<004F00030057>-2<0055>-8<0044>-9<0046>4<004C0051>-11<004A00030047>-7<0048>-10<0057>-19<0044>-2<004C004F>-8<005600030044>-4<0055>-12<004800030044>-4<004F>1<004F00030053>-7<0055>-12<0048>-9<00C0>-11<005B>2<0048>-16<00470003005A>-9<004C>-5<0057>-2<004B00030044>-4<00510003>]TJ
exclamation mark to make them 
easier to spot. When the 
Set-PSDebug 
-trace
 parameter is set to 2, an extra line is displayed, indicating 
a variable assignment. This is shown here: 
[<003A>-10<004B>-9<0048>-10<005100030057>-2<004B>-9<004800030026>8<0055>-12<0048>-10<0044>-3<0057>-3<0048>-13<0035>-2<0048>-16<004A004C>-5<0056>-16<0057>-2<0055>-47<005C>-9<002E>10<0048>-7<005C>35<0011>-8<0053>-8<0056>8<001400030056>-13<0046>4<0055>-12<004C0053>-5<00570003004C>-5<005600030055>-17<0058>1<0051>-14<000F00030057>-2<004B>-9<004800030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<005100030057>-2<0055>-8<0044>-9<0046>-2<004800030053>-13<0052>-4<004C0051>-1<0057>-19<0056000300C0>-2<0055>-26<0056>-16<005700030057005200030057>-2<004B>-9<004800030056>-13<0046>4<0055>-12<004C0053>-5<0057>-20<000F00030056>-16<0057>-19<0044>-3<0057>-2<004C0051>-11<004A0003004C>-5<00570003>]TJ
[<004C>-5<005600030046>-15<0044>-4<004F>1<004F004C0051>-11<004A0003004400030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<005100030046>-14<0044>-4<004F>1<004F>-7<0048>-16<004700030026>8<0055>-12<0048>-10<0044>-3<0057>-3<0048>-13<0035>-2<0048>-16<004A004C>-5<0056>-16<0057>-2<0055>-47<005C>-9<002E>10<0048>-7<005C>35<0011>-8<0053>-8<0056>8<0014>-10<001100030026>-11<0044>-4<004F>1<004F>-8<005600030057>-1<005200030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051>-9<005600030044>-4<0055>-12<004800030053>-7<0055>-12<0048>-9<00C0>-11<005B>2<0048>-16<00470003005A>-9<004C>-5<0057>-2<004B>]TJ
! CALL
, making 
them easy to spot. Windows PowerShell treats scripts as functions. The next function that is called is 
the 
Add-RegistryValue
[<00030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051>-14<001100030037>-7<004B>-9<004800030057>-2<0055>-8<0044>-9<0046>-2<004800030044>-4<004F>-8<0056>-12<005200030056>-16<0057>-19<0044>-3<0057>-3<0048>-12<00560003005A>-9<004B>-9<0048>-10<0055>-12<004800030057>-2<004B>-9<004800030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<00510003004C>-5<005600030047>-7<0048>-9<00C0>-2<0051>-9<0048>-16<004700030045>-2<005C0003004C0051>-11<0047004C>-3<0046>-14<0044>-3<0057>-2<004C0051>-11<004A00030057>-2<004B>-9<00480003>]TJ
[<0053>-9<0044>-3<0057>-2<004B00030057005200030057>-2<004B>-9<0048000300C0>-2<004F>-7<0048>-7<001100030037>-7<004B>-2<004C>-5<00560003004C>-5<005600030056>-4<004B>-9<0052>-3<005A>-9<00510003004B>-9<0048>-10<0055>-12<0048>5<001D0003>]TJ
The
! SET
[<0003004E>12<0048>-7<005C>-45<005A>-2<0052>-7<0055>-12<00470003004C>-5<005600030058>-6<0056>-12<0048>-16<004700030057005200030053>-7<0055>-12<0048>-8<0049>-9<0044>-9<0046>-2<004800030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<004800030044>-10<0056>-14<0056>-4<004C>-5<004A>1<0051>-4<0050>-9<0048>-10<00510057>-19<0056>-19<001100030037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<004800030057>-2<004B>-7<0044>-3<00570003004C>-5<005600030044>-10<0056>-14<0056>-3<004C>-5<004A>1<0051>-9<0048>-16<00470003004C>-5<005600030057>-2<004B>-9<00480003>]TJ
$scriptRoot
 variable. This is shown here: 
When the CreateRegistryKey.ps1 script is run with trace level 2, the detailed tracing shown in 
Figure 18-7 is displayed.
FIGURE 18-7
Script-level 2 tracing adds variable assignments, function calls, and external script calls. 
Stepping through the script
Watching the script trace the execution of the lines of code in the script can often provide use
ful insight that can lead to a solution to a misbehaving script. If a script is more complicated and is 
composed of several functions, a simple trace might not be a workable solution. For the occasions 
when your script is more complex and comprises multiple functions, you will want the ability to step 
through the script. When you step through a script, you are prompted before each line of the script 
runs. An example of a script that you might want to step through is the BadScript.ps1 script shown 
here: 
BadScript.ps1
  
The BadScript.ps1 script contains a number of functions that are used to add numbers, subtract 
numbers, multiply numbers, and divide numbers. There are some problems with the way the script 
runs, because it contains several errors. It would be possible for you to set the trace level to 2 and 
examine the trace of the script. But with the large number of functions and the types of errors con
[<0057>-19<0044>-2<004C0051>-9<0048>-16<00470003004C005100030057>-2<004B>-9<004800030056>-13<0046>4<0055>-12<004C0053>-5<0057>-20<000F0003004C>-5<005700030050>-2<004C>-5<004A>1<004B>-1<005700030045>-13<004800030047004C>-3<0049>-41<00C0>-5<0046>-2<0058>1<004F>-6<005700030057005200030056>-4<0053>-13<0052>-2<005700030057>-2<004B>-9<004800030053>-7<0055>-12<0052>-7<0045>-8<004F>-7<0048>-10<0050>-9<00560003005A>-9<004C>-5<0057>-2<004B00030057>-2<004B>-9<004800030056>-13<0046>4<0055>-12<004C0053>-5<0057>-20<001100030025>-9<005C00030047>-7<0048>-8<0049>-9<0044>-6<0058>1<004F>-6<0057>-20<000F00030057>-2<004B>-9<004800030057>-2<0055>-8<0044>-9<0046>-2<00480003004F>-7<0048>-8<0059>1<0048>-11<004F0003>]TJ
is set to level 1 when stepping is enabled, and in nearly all cases this is the best trace level for this 
type of solution. 
[<003C>49<0052>-9<005800030050>-2<004C>-5<004A>1<004B>-1<005700030053>-7<0055>-12<0048>-8<0049>-7<0048>-10<005500030057>-1<005200030045>-13<004800030044>-4<0045>-8<004F>-7<004800030057>-1<005200030056>-16<0057>-3<0048>-10<005300030057>-2<004B>-4<0055>-12<0052>-10<0058>-7<004A>1<004B00030057>-2<004B>-9<004800030056>-13<0046>4<0055>-12<004C0053>-5<005700030044>-10<005600030048>-10<0044>-9<0046>4<004B0003004F004C0051>-9<004800030048>-6<005B>2<0048>-16<0046>-2<0058>-5<0057>-3<0048>-12<0056>-19<001100030037>-7<004B>-9<0048>-10<0055>-12<004800030044>-4<0055>-12<004800030057>-35<005A>-2<005200030045>-13<0048>-10<0051>-9<0048>-9<00C0>-7<0057>-19<00560003>]TJ
to using the 
-step
 parameter from the 
Set-PSDebug 
[<0046>4<0050>-11<0047>1<004F>-7<0048>-10<0057>-20<001100030037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030045>-13<0048>-10<0051>-9<0048>-9<00C0>-7<00570003004C>-5<005600030057>-2<004B>-7<0044>-3<00570003005C>1<0052>-9<005800030044>-4<0055>-12<004800030044>-4<0045>-8<004F>-7<004800030057>-1<00520003>]TJ
watch what happens when each line of the script executes. This allows you to very carefully walk 
through the script. With the trace feature of 
Set-PSDebug
, it is possible to miss important clues that 
would help solve problems because everything is displayed on the Windows PowerShell console. With 
the prompt feature, you are asked to choose a response before each line in the script executes. The 
default choice is 
 for yes continue the operation, but you have other choices. When you respond 
with 
, the debug line is displayed to the Windows PowerShell console. This is the same debug state
ment shown in the trace output, and it is governed by your debug-trace-level settings. The step 
prompting is shown here:
  
  
[<0037>-7<004B>-9<004800030056>-12<0048>-16<00460052>-7<0051>-11<004700030045>-13<0048>-10<0051>-9<0048>-9<00C0>-7<005700030057005200030058>-6<0056>-3<004C0051>-11<004A00030057>-2<004B>-9<00480003>]TJ
-step
 parameter with the 
Set-PSDebug
 cmdlet is the ability to sus
pend script execution, run additional Windows PowerShell commands, and then return to the script 
execution. The ability to return the value of a variable from within the Windows PowerShell console 
can offer important clues to the problem of what the script is doing. You choose 
for suspend at the 
prompt and you are dropped into a nested Windows PowerShell prompt. From there, you retrieve 
the variable value the same way you do when working at a regular Windows PowerShell console27by 
[<0057>-38<005C>-12<0053>-6<004C0051>-11<004A00030057>-2<004B>-9<004800030051>-7<0044>-4<0050>-9<004800030052004900030057>-2<004B>-9<004800030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<00480003000B>12<0057>-19<0044>-4<004500030048>-6<005B>-8<0053>-9<0044>-4<0051>-9<0056>-4<004C>-5<0052>-7<005100030048>-8<0059>1<0048>-10<00510003005A>-2<0052>-7<0055>-12<004E>-31<0056>28<000C>14<00110003003A>-10<004B>-9<0048>-10<00510003005C>1<0052>-9<005800030044>-4<0055>-12<0048000300C0>-2<0051>-2<004C>-5<0056>-4<004B>-9<0048>-16<004700030055>-12<0048>-10<0057>-2<0055>-12<004C>-5<0048>-8<0059>-13<004C0051>-11<004A00030057>-2<004B>-9<00480003>]TJ
value of the variable, you type 
exit
 to return to the stepping trace. This is shown here: 
If you decide that you would like to see what happens if you run continuously from the point you 
just inspected, you can choose 
for 23yes to all24, and the script will run to completion without further 
prompting. If this is the case, you have found the problem. It is also possible that you may see an 
error such as the one shown here, where the script attempts to divide by zero. 
[<0032>-11<0051>-9<0046>-2<00480003005C>1<0052>-9<00580003004B>-7<0044>1<0059>1<004800030049>-7<0052>-9<0058>1<0051>-11<00470003004400030056>-3<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<004600030048>-10<0055>-12<0055>-12<0052>-7<0055>39<000F0003005C>1<0052>-10<005800030050>-7<0044>2<005C0003005A>-2<0044>-4<0051005700030057005200030046>4<004B>-7<0044>-4<0051>-11<004A>-7<004800030057>-2<004B>-9<004800030059>-5<0044>-4<004F>-4<0058>-7<00480003005200490003004400030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<004800030049>-12<0055>-12<0052>-7<00500003005A>-9<004C>-5<0057>-2<004B>-2<004C00510003>]TJ
the suspended Windows PowerShell console to see if it corrects the remaining logic. To do this, you 
run the script again and choose 
for suspend at the line that caused the error. This is where some 
careful reading of the error messages comes into play. When you chose 
yes to all in the previous 
example, the script ran until it came to line 43. The line number indicator follows a colon after the 
script name. The plus sign + indicates the command, which is 
12/ $num
. The four left-facing arrows 
indicate that it is the value of the 
$num
 variable that is causing the problem. This is shown here:
You will need to step through the code until you come to the prompt for line 43. This will be 
shown as 
43+ 12/ <<<< $num
, which means you are at line 43, and the operation will be to divide 12 
by the value of the number contained in the 
$num
 variable. At this point, you will want to type 
for 
suspend to drop into a nested Windows PowerShell prompt. Inside there, you can query the value 
contained in the 
$num
 variable and change it to a number such as 2. You exit the nested Windows 
PowerShell prompt and are returned to the stepping. At this point, you should continue to step 
  
through the code to see if any other problems arise. If they do not, you know you have located the 
source of the problem. This is shown here: 
Of course, locating the source of the problem is not the same as solving the problem, but the pre
vious example points to a problem with the value of 
$num
. Your next step would be to look at how 
$num
 is being assigned its values. 
There are a couple of annoyances when working with the 
Set-PSDebug 
tracing features. The 
[<00C0>-2<0055>-26<0056>-16<005700030053>-6<0055>-12<0052>-7<0045>-8<004F>-7<0048>-10<00500003004C>-5<005600030056>-16<0057>-3<0048>-10<0053>-7<0053>-6<004C0051>-11<004A00030057>-2<004B>-4<0055>-12<0052>-9<0058>-7<004A>1<004B00030057>-2<004B>-9<004800030048>-6<005B>-37<0057>-2<0055>-8<00440003004F004C0051>-9<0048>-12<005600030052004900030052>-9<0058>-5<0057>-2<0053>-9<0058>-5<005700030046>4<0055>-12<0048>-10<0044>-3<0057>-3<0048>-16<004700030045>-2<005C00030057>-2<004B>-9<004800030047>-7<0048>-10<0045>-9<0058>-7<004A>-7<004A004C0051>-11<004A00030049>-7<0048>-10<0044>-3<0057>-8<0058>1<0055>-12<0048>-12<0056>-19<001100030037>-7<004B>-9<00480003>]TJ
prompts and output will use half of the Windows PowerShell console window. If you use 
Clear-Host
to attempt to clear the host window, you will spend several minutes attempting to step through all 
the commands used by 
Clear-Host
. This is also true if you attempt to change the debug tracing level 
midstream. By default, the trace level is set to 1 by the S
et-PSDebug
-step
 parameter. The second 
problem with the 
Set-PSDebug
-step
 parameter occurs when you attempt to bypass a command in 
the script. You are not allowed to step over a command. Instead, the stepping session ends with an 
error displayed to the Windows PowerShell console. This is shown in Figure 18-8. 
FIGURE 18-8
Set-PSDebug -step
 does not allow you to step over functions or commands. 
To turn off stepping, you use the 
-off
 parameter. You will be prompted to step through this com
mand as well. This is shown here: 
Enabling strict mode
One easily correctable problem that can cause debugging nightmares in a script involves variables. 
Variables are often used incorrectly, are nonexistent, or are initialized improperly. An easy mistake 
to make when using variables is a 
simple typing error. Simple typing errors can also cause problems 
when contained in a large complex script. Enabling strict mode causes Windows PowerShell to display 
an error if a variable is not declared. This helps you to avoid the problem of 
nonexistent or improperly 
initialized variables. 
Using 
[<0036>-3<0048>-10<0057>29<0010>-12<00330036>-5<0027>-9<0048>-2<00450058>6<004A>-5<0003>-5<0010>8<00360057>4<0055>3<004C>6<0046>-13<0057>]TJ
An example of a simple typing error in a script is shown in the SimpleTypingError.ps1 script.
Simple
ypingError.ps1
  
When the SimpleTypingError.ps1 script is run, the following output is shown:
As you can see, the value of the 
 variable is not displayed. If you use the 
-Strict
 parameter from 
the 
Set-PSDebug 
cmdlet, an error is generated. The error tells you that the value of 
 has not been 
set. This is shown here:
When you go back to the SimpleTypingError.ps1 script and examine it, you will see that the sum 
 and 
 was assigned to 
, not 
. The way to correct the problem is to assign the sum of 
and 
 to 
 instead of 
 which was probably the original intention. It is possible to include the 
Set-PSDebug -Strict
 command in your scripts to provide a quick check for uninitialized variables while 
you are actually writing the script, and you can therefore avoid the error completely. 
If you routinely use an expanding string to display the value of your variables, you need to be aware 
that an uninitialized variable is not reported as an error. The SimpleTypingErrorNotReported.ps1 script 
uses an expanding string to display the value of the 
[<00030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<0048>-7<001100030037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<00570003004C0051>-9<0056>-16<0057>-19<0044>-4<0051>-9<0046>-2<004800030052004900030057>-2<004B>-9<00480003>]TJ
 variable is 
escaped by the use of the
 backtick character. This causes the variable name to be displayed, and does 
not expand its value. The second occurrence of the 
 variable is expanded. The actual line of code that 
does this is shown here: 
When the SimpleTypingErrorNotReported.ps1 script is run, the following is displayed:
The complete SimpleTypingErrorNotReported.ps1 script is shown here: 
Simple
ypingError
ot
eported.ps1
To disable strict mode, you use the 
Set-PSDebug -off 
command. 
Using the 
Set-StrictMode
 cmdlet
The 
Set-StrictMode
 cmdlet can also be used to enable strict mode. It has the advantage of being 
scope aware. Whereas the 
Set-PSDebug
 cmdlet applies globally, if the 
Set-StrictMode 
cmdlet is used 
inside a function, it enables strict mode for only the function. There are two modes of operation that 
[<0046>-14<0044>-4<005100030045>-13<004800030047>-7<0048>-9<00C0>-2<0051>-9<0048>-16<00470003005A>-9<004B>-9<0048>-10<005100030058>-6<0056>-3<004C0051>-11<004A00030057>-2<004B>-9<00480003>]TJ
Set-StrictMode
[<00030046>4<0050>-11<0047>1<004F>-7<0048>-10<0057>-20<001100030037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<00570003004C>-5<005600030059>1<0048>-10<0055>-26<0056>-4<004C>-5<0052>-7<005100030014>-8<000F0003005A>-9<004B>-2<004C>-3<0046>4<004B00030045>-13<0048>-10<004B>-7<0044>1<0059>1<0048>-12<005600030057>-2<004B>-9<004800030056>-17<0044>-4<0050>-9<00480003>]TJ
as the
 Set-PSDebug -Strict
 command except that scope awareness is enforced. This is shown here: 
The 
Set-StrictMode
 cmdlet is not able to detect the 
uninitialized variable contained in the expand
ing string that is shown in the SimpleTypingErrorNotDetected.ps1 script. 
When version 2 is enacted, the technique of calling a function like a method is stopped. The 
AddTwoError.ps1 script passes two values to the 
add-two
 function via method notation. Because 
method notation is allowed when calling functions, no error is normally generated. But 
method 
notation of passing parameters for functions only works when there is a single value to pass to the 
function. To pass multiple parameters, 
function notation must be used, as shown here:
Another way to call the 
add-two
 function correctly is to use the parameter names when passing 
the values. This is shown here:
Either of the two syntaxes would produce the correct result. The method notation of calling the 
function displays incorrect information but does not generate an error. An incorrect value being 
[<0055>-12<0048>-10<0057>-8<0058>1<0055>-12<0051>-9<0048>-16<004700030049>-12<0055>-12<0052>-7<00500003004400030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<00510003005A>-9<004C>-5<0057>-2<004B00030051>-9<005200030048>-10<0055>-12<0055>-12<0052>-7<005500030045>-13<0048>-9<004C0051>-11<004A0003004A>-7<0048>-10<0051>-9<0048>-10<0055>-8<0044>-3<0057>-3<0048>-16<004700030046>-14<0044>-4<005100030057>-19<0044>-4<004E>12<00480003004400030056>-3<004C>-5<004A>1<0051>-2<004C>-5<00C0>-5<0046>-14<0044>-4<0051>-1<005700030044>-3<0050>-9<0052>-9<0058>1<0051005700030052>1<004900030057>-2<004C0050>-9<004800030057>-1<00520003>]TJ
debug. The method notation of calling the 
add-two
 function is used in the AddTwoError.ps1 script, 
and is shown here:
When the script is run and the 
Set-StrictMode -Version 2
command has not been enabled, no error 
is generated. The output seems to be confusing because the result of adding the two variables 
 and 
 is not displayed. This is shown here: 
  
Once the 
Set-StrictMode -Version 2
 command has been entered and the AddTwoError.ps1 script 
is run, an error is generated. The error that is generated states that the function was called as if it 
were a method. The error points to the exact line where the error occurred and shows the function 
call that caused the error. The function call is preceded with a + sign followed by the name of the 
function, followed by four arrows that indicate what was passed to the function. The error message 
is shown here:
The complete AddTwoError.ps1 script is shown here: 
AddTwoError.ps1
When you specify 
Set-StrictMode 
for version 2.0, it checks the following items:
References to uninitialized variables, both directly and from within expanded strings
References to nonexistent properties of an object
Functions that are called like methods
Variables without a name
If you set strict mode for version 1.0, it only checks for references to uninitialized variables. 
If you are not sure whether you want to use strict mode for PowerShell
version 2 or 3 there are 
no changes, an easy way to solve the problem is to use the value 
latest.
 By using 
latest 
for the value 
of the
-version
 parameter, you always ensure that your script will use the latest strict mode rules. This 
technique appears here:
One issue that can arise with using 
latest 
is that you do not know what the latest changes might 
[<0047>-5<005200030057>-1<00520003005C>1<0052>-9<0058>1<005500030056>-13<0046>4<0055>-12<004C0053>-5<0057>-20<001100030037>-7<004B>-9<0048>-10<0055>-12<0048>-8<0049>-7<0052>-7<0055>-12<0048>-9<000F0003004C>-5<00570003004C>-5<00560003004A>-7<0048>-10<0051>-9<0048>-10<0055>-8<0044>-4<004F>1<004F>-12<005C00030056>-17<0044>-1<0049>-7<0048>-10<005500030057>-1<005200030058>-6<0056>-12<004800030059>1<0048>-10<0055>-26<0056>-3<004C>-5<0052>-7<00510003001400030052>-7<005500030059>1<0048>-10<0055>-26<0056>-4<004C>-5<0052>-7<0051000300150003005A>-9<004B>-9<0048>-10<00510003004F>-7<0052>-13<0052>-7<004E>-14<004C0051>-11<004A00030049>-7<0052>-7<005500030056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<00460003>]TJ
types of protection.
Debugging the script
The debugging features of Windows PowerShell 3.0 make the use of the 
Set-PSDebug
 cmdlet 
seem rudimentary or even cumbersome. Once you are more familiar with the debugging fea
tures of Windows PowerShell 3.0, you may decide to look no longer at the 
Set-PSDebug 
cmdlet. 
Several cmdlets enable debugging from the Windows PowerShell console and from the Windows 
PowerShell ISE. 
The debugging cmdlets appear in Table 18-2.
TABLE 18-2
Windows PowerShell debugging cmdlets
Cmdlet name
Cmdlet function
Set-PSBreakpoint
Sets breakpoints on lines, variables, and commands
Get-PSBreakpoint
Gets breakpoints in the current session
Disable-PSBreakpoint
Turns off breakpoints in the current session
Enable-PSBreakpoint
Reenables breakpoints in the current session
Remove-PSBreakpoint
Deletes breakpoints from the current session
Get-PSCallStack
Displays the current call stack
Setting breakpoints
The debugging features in Windows PowerShell use breakpoints. A breakpoint is something that is 
very familiar to developers who have used products such as Microsoft Visual Studio in the past. But 
for many IT professionals without a programming background, the concept of a breakpoint is some
what foreign. A 
breakpoint is a spot in the script where you would like the execution of the script to 
pause. Because the script pauses, it is like the 
stepping functionality shown earlier. But because you 
control where the breakpoint will occur, instead of halting on each line of the script, the stepping 
experience is much faster. In addition, because many different methods for setting breakpoints are 
available, you can tailor your breakpoints to reveal precisely the information you are looking for. 
Setting a breakpoint on a line number
To set a breakpoint, you use the 
Set-PSBreakpoint
 cmdlet. The easiest way to set a break
[<0053>-13<0052>-4<004C005100570003004C>-5<005600030057>-1<005200030056>-12<0048>-10<00570003004C>-5<005700030052>-7<00510003004F004C0051>-9<00480003001400030052004900030057>-2<004B>-9<004800030056>-13<0046>4<0055>-12<004C0053>-5<0057>-20<001100030037>55<005200030056>-12<0048>-10<00570003004400030045>-6<0055>-12<0048>-10<0044>-4<004E>-14<0053>-13<0052>-4<004C0051>-1<005700030052>-7<005100030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<00570003004F004C0051>-9<004800030052004900030057>-2<004B>-9<004800030056>-13<0046>4<0055>-12<004C0053>-5<0057>-20<000F0003005C>1<0052>-9<00580003>]TJ
use the 
line 
parameter and the 
script 
parameter. When you set a breakpoint, an instance of the 
System.Management.Automation.LineBreak
 .NET Framework class is returned. It lists the 
Script
and 
Line
 properties that were assigned when the breakpoint was created. This is shown here: 
  
This will cause the script to break immediately. You can then step through the function in the 
same way you did using the 
Set-PSDebug 
cmdlet with the 
-step
 parameter. When you run the script, it 
[<0056>-16<0057>-1<0052>-7<0053>-8<005600030044>-3<005700030057>-2<004B>-9<004800030045>-7<0055>-12<0048>-10<0044>-4<004E>-14<0053>-13<0052>-4<004C0051005700030057>-2<004B>-7<0044>-3<00570003005A>-3<0044>-10<005600030056>-12<0048>-10<005700030052>-7<005100030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<00570003004F004C0051>-9<004800030052004900030057>-2<004B>-9<004800030056>-13<0046>4<0055>-12<004C0053>-5<0057>-20<000F00030044>-4<0051>-11<00470003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030048>-10<00510057>-3<0048>-10<0055>-26<00560003>-10<0057>-12<004B>-19<0048>-10<0003>]TJ
script debugger, permitting you to use the debugging features of Windows PowerShell. Windows 
PowerShell will enter the debugger every time the BadScript.ps1 script is run from the Y drive. 
When Windows PowerShell enters the debugger, the Windows PowerShell prompt changes to 
[DBG]: PS C:>>>
 to visually alert you that you are inside the Windows PowerShell debugger. To step 
to the next line in the script, you type 
To quit the debugging session, you type 
 The debugging 
commands are not case sensitive. This is shown here:
ote
Keep in mind that 
[<0045>-5<0055>-10<0048>-8<0044>-1<004E>-12<0053>-11<0052>-2<004C>2<0051>2<0057>-17<005600030044>-2<0055>-10<004800030047>-5<0048>-8<0053>-11<0048>-8<0051>-9<0047>-4<0048>-8<0051>2<005700030058>4<0053>-11<0052>-5<005100030057004B>-7<00480003004F>-5<0052>-11<0046>-12<0044>-1<0057004C>-3<0052>-5<005100030052>3<004900030057004B>-7<004800030056>-1<0053>-11<0048>-14<0046>7<004C>-2<00C0>-3<004600030056>-10<0046>6<0055>-9<004C>2<0053>-3<00570003>]TJ
when you specify a breakpoint on a script. When you create a breakpoint for a script, you 
specify the location to the script on which you want to set a breakpoint. Often, I have sev
eral copies of a script that I keep in different locations for version control. At times, I get 
confused in a long debug session, and may open up the wrong version of the script to 
debug it. This will not work. If the script is identical to another in all respects except for the 
path to the script, it will not break. If you want to use a single breakpoint that could apply 
[<0057>2<00520003004400030056>-1<0053>-11<0048>-14<0046>7<004C>-2<00C0>-3<004600030056>-10<0046>6<0055>-9<004C>2<0053>-3<005700030057004B>-5<0044>-1<00570003004C>-3<005600030056>-14<0057>2<0052>-5<0055>-10<0048>-14<00470003004C>2<005100030050>-4<0058>4<004F>-3<0057004C>2<0053>-5<004F>-5<00480003004F>-5<0052>-11<0046>-12<0044>-1<0057004C>-3<0052>-5<0051>-7<0056>-18<000F0003005C>3<0052>-7<005800030046>-12<0044>-2<005100030056>-10<0048>-8<005700030057004B>-7<004800030045>-5<0055>-10<0048>-8<0044>-1<004E>-12<0053>-11<0052>-2<004C>2<0051>2<005700030049>-4<0052>-5<005500030057004B>-7<00480003>]TJ
condition inside the Windows PowerShell console, and not use the 
 parameter. 
Setting a breakpoint on a variable
Setting a breakpoint on line 1 of the script is useful for easily entering a debug session, but setting 
a breakpoint on a variable can often make a problem with a script easy to detect. This is, of course, 
especially true when you have already determined that the problem is with a variable that is either 
getting assigned a value or being ignored. There are three modes that can be used when the break
[<0053>-13<0052>-4<004C005100570003004C>-5<005600030056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-7<0048>-16<004700030049>-7<0052>-7<00550003004400030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<0048>-7<00110003003C>49<0052>-9<005800030056>-3<0053>-13<0048>-16<0046>4<004C>-3<0049>-48<005C00030057>-2<004B>-9<0048>-12<0056>-12<004800030050>-9<0052>-13<0047>-7<0048>-12<005600030045>-3<005C00030058>-6<0056>-4<004C0051>-11<004A00030057>-2<004B>-9<00480003>]TJ
-mode
 parameter. The three 
modes of operation are listed in Table 18-3.
TABLE 18-3
Variable breakpoint access modes
Access mode
Meaning
Write
Stops execution immediately before a new value is written to the variable.
Read
Stops execution when the variable is read27that is, when its value is accessed, either to be 
assigned, displayed, or used. In read mode, execution does not stop when the value of the vari
able changes.
ReadWrite
Stops execution when the variable is read or written.
To see when the BadScript.ps1 script writes to the 
$num
 variable, you will use write mode. 
When you specify the value for the 
-variable
 parameter, do not include the dollar sign in front 
of the variable name. To set a breakpoint on a variable, you only need to supply the path to the 
script, the name of the variable, and the access mode. When a variable breakpoint is set, the 
System.Management.Automation.LineBreak
 .NET Framework class object that is returned does not 
include the access mode value. This is true even if you use the 
Get-PSBreakpoint 
cmdlet to directly 
access the breakpoint. If you pipe the 
System.Management.Automation.LineBreak
 .NET Framework 
class object to the 
Format-List
 cmdlet, you will be able to see that the access mode property 
is available. In this example, you set a breakpoint when the 
$num
 variable is written to in the 
y:BadScript.ps1 script: 
  
After setting the breakpoint, when you run the script if the other breakpoints have been removed 
or deactivated, which will be discussed later, the script enters the Windows PowerShell debugger 
when the breakpoint is hit that is, when the value of the 
$num
 variable is written to. If you step 
through the script by using the 
 command, you will be able to follow the sequence of operations. 
Only one breakpoint is hit when the script is run. This is on line 48 when the value is set to 0 if you 
are following along with this chapter, your line numbers may be different than mine. This is shown is 
shown here:
To set a breakpoint on a read operation for the variable, you specify the 
-variable
 parameter and 
name of the variable, the 
-script
 parameter with the path to the script, and 
read
 as the value for the 
-mode
 parameter. This is shown here: 
When you run the script, a breakpoint will be displayed each time you hit a read operation on 
the variable. Each breakpoint will be displayed in the Windows PowerShell console as 
Hit Variable 
breakpoint
, followed by the path to the script and the access mode of the variable. In the BadScript.
ps1 script, the value of the 
$num
 variable is read several times. The truncated output is shown here:
If you set the readwrite access mode for the 
-mode
 parameter for the variable 
$num
 for the 
BadScript.ps1 script, you receive the feedback shown here:  
When you run the script assuming you have disabled the other breakpoints, you will hit a 
breakpoint each time the 
$num
 variable is read to or written to. If you get tired of typing 
and 
pressing Enter while you are in the debugging session, you can press Enter, and it will repeat your 
previous 
command
as you continue to step through the breakpoints. When the script has stepped 
through the code and arrives at the error in the BadScript.ps1 script, type 
 to exit the debugger. 
This is shown here: 
  
When you use the readwrite access mode of the 
-mode 
parameter for breaking on variables, 
the breakpoint does not tell you if the operation is a read operation or a write operation. You 
have to look at the code that is being executed to determine if the value of the variable is being 
written or read. 
By specifying a value for the 
-action 
parameter, you can include regular Windows PowerShell 
code that will execute when the breakpoint is hit. If, for example, you are trying to follow the 
value of a variable within the script and you wish to display the value of the variable each time the 
breakpoint is hit, you might want to specify an action that uses the 
Write-Host
 cmdlet to display the 
value of the variable. By using the 
Write-Host 
cmdlet, you can also include a string that indicates 
that the value of the variable is being displayed. 
This is crucial for picking up variables that never 
initialize and therefore is easier to spot than a blank line that would be displayed if you attempted 
to display the value of an empty variable. The technique of using the 
Write-Host
 cmdlet in an 
-action 
parameter is shown here: 
When you run the Y:BadScript.ps1 with the breakpoint set, you receive the following output inside 
the Windows PowerShell debugger:
Setting a breakpoint on a command
To set the breakpoint on a command, you use the
-command
 parameter. You can break on a call to 
a Windows PowerShell cmdlet, function, or external script. You can use 
aliases when setting break
points. When you create a breakpoint on an alias for a cmdlet, the debugger will only stop on the 
use of the alias27not the actual command name. In addition, you do not have to specify a script for 
the debugger to break. If you do not type a path to a script, the debugger will be active for every
thing within the Windows PowerShell console session. Every occurrence of the 
foreach
 command 
will cause the debugger to break. Because 
foreach
 is a language statement as well as an alias for the 
Foreach-Object 
cmdlet, you might wonder whether the Windows PowerShell debugger will break 
on both the language statement and the use of the alias for the cmdlet27and the answer is no. You 
can set breakpoints on language statements, but the debugger will not break on a language state
ment. As shown here, the debugger breaks on the use of the 
Foreach
 alias, but not on the use of the 
Foreach-Object 
cmdlet.
ote
You can use the shortcut technique of creating the breakpoint for the Windows 
[<0033>8<0052005A>1<0048>-8<0055>-21<0036>3<004B>-7<0048>-9<004F>3<004F00030056>-10<0048>-10<0056>-12<0056>-1<004C>-3<0052>-5<005100030044>-1<0051>-9<004700030051>-7<0052005700030056>-1<0053>-11<0048>-14<0046>7<004C>-2<00C0>-3<0046>-12<0044>-2<004F>3<004F>-10<005C00030049>-4<0052>-5<005500030057004B>-7<004800030056>-10<0046>6<0055>-9<004C>2<0053>-3<0057>-18<001100030025>-7<005C0003004F>-4<0048>-7<0044>4<0059>-10<004C>2<0051>-9<004A00030052>-7<0058>-3<005700030057004B>-7<00480003>]TJ
 parameter 
when creating a breakpoint, you cause the debugger to break into any running script that 
uses the named function. This allows you to use the same breakpoints when debugging 
scripts that use the same function. 
  
When creating a breakpoint for the 
DivideNum
 function used by the Y:BadScript.ps1 script, you 
can leave off the path to the script, because only this script uses the 
DivideNum
 function. This makes 
the command easier to type, but could become confusing if you22re looking through a collection of 
breakpoints. If you are debugging multiple scripts in a single Windows PowerShell console session, it 
could become confusing if you do not specify the script to which the breakpoint applies27unless of 
[<00460052>-9<0058>1<0055>-26<0056>-12<00480003005C>1<0052>-9<005800030044>-4<0055>-12<004800030056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<0046>-14<0044>-4<004F>1<004F>-12<005C00030047>-7<0048>-10<0045>-9<0058>-7<004A>-7<004A004C0051>-11<004A00030057>-2<004B>-9<004800030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<005100030044>-10<00560003004C>-5<00570003004C>-5<005600030058>-6<0056>-12<0048>-16<00470003004C005100030050>-6<0058>1<004F>-6<0057>-2<004C0053>-8<004F>-7<004800030056>-13<0046>4<0055>-12<004C0053>-5<0057>-19<0056>-19<001100030026>9<0055>-12<0048>-10<0044>-3<0057>-2<004C0051>-11<004A0003004400030046>1<0052>-7<0050>]TJ
mand breakpoint for the 
DivideNum
 function is shown here: 
When you run the script, it hits a breakpoint when the 
DivideNum
 function is called. When 
BadScript.ps1 hits the 
DivideNum
 function, the value of 
$num
 is 0. As you step through the 
DivideNum
 function, you assign a value of 2 to the 
$num
 variable, a result of 6 is displayed, and then 
the 
12/$num
 operation is carried out. Next, the 
AddOne
 function is called and the value of 
$num
once again becomes 0. When the 
AddTwo
 function is called, the value of 
$num
 also becomes 0. This is 
shown here: 
esponding to breakpoints
When the script reaches a breakpoint, control of the Windows PowerShell console is turned over 
to you. Inside the debugger, you can type any legal Windows PowerShell command, and even run 
cmdlets such as 
Get-Process
 or 
Get-Service
. In addition, there are several new debugging commands 
that can be typed into the Windows PowerShell console when a breakpoint has been reached. The 
available debug commands are shown in Table 18-4.
TABLE 18-4
Windows PowerShell debugging commands
Keyboard shortcut
Command name
Command meaning
Step-Into
Executes the next statement and then stops.
Step-Over
Executes the next statement, but skips functions and invocations. 
The skipped statements are executed, but not stepped through.
Step-Out
Steps out of the current function up one level if nested. If in the 
main body, it continues to the end or the next breakpoint. The 
skipped statements are executed, but not stepped through.
Continue
Continues to run until the script is complete or until the next break
point is reached. The skipped statements are executed, but not 
stepped through.
List
Displays the part of the script that is executing. By default, it displays 
the current line, 5 previous lines, and 10 subsequent lines. To con
tinue listing the script, press Enter.
L <M>
List
Displays 16 lines of the script, beginning with the line number speci
[<00C0>-14<0048>-23<004700030045>-10<005C00030030>-23<0011>]TJ
L <M> <N>
List
[<0027>-15<004C>-12<0056>-11<0053>-15<004F>-12<0044>-5<005C>-19<005600030057>-9<004B>-16<004800030051>-13<0058>-6<0050>-11<0045>-20<0048>-17<005500030052>-7<00490003004F>-7<004C>-7<0051>-16<0048>-19<005600030052>-7<004900030057>-9<004B>-16<004800030056>-19<0046>-3<0055>-18<004C>-7<0053>-12<005700030056>-11<0053>-20<0048>-23<0046>-3<004C>-12<00C0>-14<0048>-23<004700030045>-10<005C00030031>-23<000F00030045>-20<0048>-23<004A>-7<004C>-7<0051>-11<0051>-9<004C>-7<0051>-18<004A0003>]TJ
[<005A>-16<004C>-13<0057>-9<004B00030057>-9<004B>-16<00480003004F>-7<004C>-7<0051>-16<004800030051>-13<0058>-6<0050>-11<0045>-20<0048>-17<005500030056>-11<0053>-20<0048>-23<0046>-3<004C>-12<00C0>-14<0048>-23<004700030045>-10<005C00030030>-23<0011>]TJ
Stop
Stops executing the script and exits the debugger.
Get-PsCallStack
Displays the current call stack.
Enter
Repeat
Repeats the last command if it was 
Step-Into, Step-Over
, or 
List
Otherwise, represents a submit action.
H or ?
Help
Displays the debugger command help.
When the BadScript.ps1 script is run using the 
DivideNum
 function as a breakpoint, the script 
breaks on line 49 when the 
DivideNum
 function is called. The 
debugging command is used to step 
into the next statement and stop the script before the command is actually executed. The 
 debug
ging command is used to list the 5 previous lines of code from the BadScript.ps1 script and the 10 
lines of code that follow the current line in the script. This is shown here: 
  
After reviewing the code, the 
debugging command is used to step out of the 
DivideNum
 func
tion. The remaining code in the 
DivideNum
 function is still executed, and therefore the 
divide-by-
zero error is displayed. There are no more prompts until the next line of executing code is met. The 
debugging statement is used to step over the remaining functions in the script. The remaining 
functions are still executed, and the results are displayed at the Windows PowerShell console. This is 
shown here: 
Listing breakpoints
Once you have set several breakpoints, you might wish to know where they were created. One thing 
to keep in mind is the 
breakpoints are stored in the Windows PowerShell environment, not in the 
individual script. Using the debugging features does not involve editing of the script or modifying 
your source code. This enables you to debug any script without worry of corrupting the code. But 
because you may have set several breakpoints in the Windows PowerShell environment during a 
[<0057>-38<005C>-12<0053>-6<004C>-3<0046>-14<0044>-4<004F00030047>-7<0048>-10<0045>-9<0058>-7<004A>-7<004A004C0051>-11<004A00030056>-12<0048>-12<0056>-14<0056>-4<004C>-5<0052>-7<0051>-14<000F0003005C>1<0052>-10<005800030050>-7<0044>2<005C0003005A>-9<004C>-5<0056>-4<004B0003005700520003004E>-14<0051>-9<0052>-3<005A0003005A>-9<004B>-7<0044>-3<005700030045>-7<0055>-12<0048>-10<0044>-4<004E>-14<0053>-13<0052>-4<004C00510057>-19<00560003004B>-7<0044>1<0059>1<004800030045>-13<0048>-16<0048>-10<005100030047>-7<0048>-9<00C0>-2<0051>-9<0048>-16<0047>-8<001100030037>55<005200030047>-5<005200030057>-2<004B>-2<004C>-5<0056>-20<000F0003>]TJ
you use the 
Get-PSBreakpoint
 cmdlet. This is shown here:
If you are interested in which breakpoints are currently enabled, you need to use the 
Where-Object 
cmdlet and pipeline the results from the 
Get-PSBreakpoint 
cmdlet. This is shown here: 
You could also pipeline the results of the 
Get-PSBreakpoint 
to the
Format-Table
 cmdlet, as shown 
here: 
Because the creation of the custom-formatted breakpoint table requires a little bit of typing, and 
because the display is extremely helpful, you might consider placing the code in a function that could 
[<0045>-13<00480003004C0051>-9<0046>4<004F>-4<0058>-7<0047>-7<0048>-16<00470003004C00510003005C>1<0052>-9<0058>1<005500030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-9<000F00030052>-7<00550003004C00510003004400030046>-1<0058>-6<0056>-16<0057>-1<0052>-7<005000030047>-6<0048>-10<0045>-9<0058>-7<004A>-7<004A004C0051>-11<004A00030050>-9<0052>-13<0047>-3<0058>1<004F>-7<0048>-7<001100030037>-7<004B>-9<004800030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<005100030056>-3<004B>-9<0052>-3<005A>-9<00510003004B>-9<0048>-10<0055>-12<00480003004C>-5<005600030056>-16<0057>-1<0052>-7<0055>-12<0048>-16<00470003004C00510003>]TJ
the Get-EnabledBreakpointsFunction.ps1 script. 
Get-EnabledBreakpointsFunction.ps1
  
Enabling and disabling breakpoints
While you are debugging a script, you might need to disable a particular breakpoint to see how the 
script runs. To do this, you use the 
Disable-PSBreakpoint
 cmdlet. This is shown here:
On the other hand, you may also need to enable a breakpoint. To do this, you use the 
Enable-PSBreakpoint
 cmdlet, as shown here:
As a best practice, while in a debugging session I will selectively enable and disable breakpoints to 
see how the script is running in an attempt to troubleshoot the script. To keep track of the status of 
breakpoints, I use the 
Get-PSBreakpoint 
cmdlet as illustrated in the previous section. 
Deleting breakpoints
[<003A>-10<004B>-9<0048>-10<00510003005C>1<0052>-9<005800030044>-4<0055>-12<0048000300C0>-2<0051>-2<004C>-5<0056>-4<004B>-9<0048>-16<004700030047>-7<0048>-10<0045>-9<0058>-7<004A>-7<004A004C0051>-11<004A00030057>-2<004B>-9<004800030056>-13<0046>4<0055>-12<004C0053>-5<0057>-20<000F0003005C>1<0052>-9<00580003005A>-9<004C004F>1<004F0003005A>-3<0044>-4<0051005700030057005200030055>-12<0048>-10<0050>-9<0052>-1<0059>1<004800030044>-4<004F>1<004F00030052004900030057>-2<004B>-9<004800030045>-7<0055>-12<0048>-10<0044>-4<004E>-14<0053>-13<0052>-4<004C0051>-1<0057>-19<005600030057>-2<004B>-7<0044>-3<00570003>]TJ
[<005A>-2<0048>-10<0055>-12<004800030046>4<0055>-12<0048>-10<0044>-3<0057>-3<0048>-16<004700030047>-3<0058>1<0055>-12<004C0051>-11<004A00030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030056>-12<0048>-12<0056>-14<0056>-4<004C>-5<0052>-7<0051>-14<001100030037>-7<004B>-9<0048>-10<0055>-12<004800030044>-4<0055>-12<004800030057>-35<005A>-2<00520003005A>-3<0044>2<005C>-12<005600030057>-1<005200030047>-5<005200030057>-2<004B>-2<004C>-5<0056>-19<001100030037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<00570003004C>-5<005600030057>-1<00520003>]TJ
close the Windows PowerShell console. While this is a good way to clean up the environment, you 
[<0050>-7<0044>2<005C00030051>-9<0052>-2<00570003005A>-2<0044>-4<0051005700030057005200030047>-5<005200030057>-2<004B>-2<004C>-5<00560003004C>-3<00490003005C>1<0052>-9<00580003004B>-7<0044>1<0059>1<004800030055>-12<0048>-10<0050>-9<0052>-2<0057>-3<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030056>-12<0048>-12<0056>-14<0056>-3<004C>-5<0052>-7<0051>-9<005600030047>-7<0048>-9<00C0>-2<0051>-9<0048>-16<0047>-9<000F00030052>-7<005500030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<0048>-12<005600030057>-2<004B>-7<0044>-3<00570003>]TJ
are populated with the results of certain queries. To delete all of the breakpoints, you can use the 
Remove-PSBreakpoint 
cmdlet. Unfortunately, there is no 
all
 switch for the
 Remove-PSBreakpoint 
cmdlet. When you22re deleting a breakpoint, the 
Remove-PSBreakpoint 
cmdlet requires a 
breakpoint 
ID number. To remove a single breakpoint, you specify the ID number for the 
-id 
parameter. This is 
shown here:
If you want to remove all of the breakpoints, pipeline the results from 
Get-PSBreakpoint 
to 
Remove-PSBreakpoint
, as shown here:
[<002C00490003005C>1<0052>-9<00580003005A>-2<0044>-4<0051005700030057005200030052>-7<0051>-4<004F>-12<005C00030055>-12<0048>-10<0050>-9<0052>-1<0059>1<004800030057>-2<004B>-9<004800030045>-7<0055>-12<0048>-10<0044>-4<004E>-14<0053>-13<0052>-4<004C00510057>-19<005600030049>-13<0055>-12<0052>-7<00500003004400030056>-3<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<004600030056>-12<0046>4<0055>-12<004C0053>-5<0057>-20<000F0003005C>1<0052>-10<005800030046>-14<0044>-4<005100030053>-6<004C0053>-13<0048>-11<004F004C0051>-9<004800030057>-2<004B>-9<004800030055>-12<0048>-12<0056>-6<0058>1<004F>-6<0057>-19<00560003>]TJ
through the 
Where
 object, as shown here:
Debugging a function: step-by-step exercises
In this exercise, you will explore the use of the debugger in the Windows PowerShell ISE. Note that if 
[<005C>1<0052>-9<00580003004B>-7<0044>1<0059>1<004800030047>-7<0048>-9<00C0>-2<0051>-9<0048>-16<00470003005C>1<0052>-9<0058>1<005500030052>-3<005A>-9<005100030046>-1<0058>-6<0056>-16<0057>-1<0052>-7<00500003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030053>-7<0055>-12<0052>-7<0050>-4<0053>-5<0057>-20<000F0003005C>1<0052>-10<005800030050>-7<0044>2<005C00030051>-9<0052>-2<005700030056>-12<0048>-16<004800030057>-2<004B>-9<0048>]TJ
 [DBG]
 prompt 
portion of the Windows PowerShell prompt. Once you have completed debugging a function, in the 
subsequent exercise you will debug a script.
Using the PowerShell debugger to debug a function
1.
Open the Windows PowerShell ISE.
2.
Create a function called 
My-Function
. The contents of the function appear following. Save the 
[<0049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<005100030057005200030044000300C0>-2<004F>-7<004800030051>-7<0044>-4<0050>-9<0048>-16<004700030050>3<005C>4<0010>11<0049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051>-14<0011>-8<0053>-8<0056>8<0014>-10<00110003000B>-8<002C00490003005C>1<0052>-9<005800030047>-5<005200030051>-9<0052>-2<005700030056>-17<0044>1<0059>1<004800030057>-2<004B>-9<0048000300C0>-2<004F>-7<0048>-9<000F0003005C>1<0052>-9<005800030044>-4<0055>-12<004800030051>-9<0052>-2<005700030055>-17<0058>1<0051>-4<0051>-2<004C0051>-11<004A000300440003>]TJ
script, and you will not enter the debugger.
3.
Select the line of code that states that 
 plus 
 equals four. This line of code appears here:
4.
Choose Toggle Breakpoint from the Debug menu. The line of code should change colors, 
indicating that a breakpoint is now set on that line. 
5.
Run the My-Function script to load the function into memory.
6.
In the bottom pane of the Windows PowerShell ISE the command pane, type the function 
name so that you execute the function. You can use tab expansion to avoid typing the com
plete 
My-Function 
name. This appears here:
In the output pane of the Windows PowerShell ISE, you will see that you have now hit a break
[<0053>-13<0052>-4<004C00510057>-20<001100030028>-27<005B>-6<0044>-4<0050>-2<004C0051>-9<004800030057>-2<004B>-9<004800030052>-10<0058>-5<0057>-2<0053>-9<0058>-5<005700030044>-4<0051>-11<004700030047>-7<0048>-10<0057>-3<0048>-10<0055>-12<0050>-2<004C0051>-9<00480003005A>-9<004B>-2<004C>-3<0046>4<004B0003004F004C0051>-9<004800030057>-2<004B>-9<004800030045>-7<0055>-12<0048>-10<0044>-4<004E>-14<0053>-13<0052>-4<004C005100570003004C>-5<005600030047>-7<0048>-9<00C0>-2<0051>-9<0048>-16<004700030058>1<0053>-13<0052>-7<0051>-14<001100030037>-7<004B>-9<00480003004F004C0051>-9<00480003>]TJ
number in the output pane corresponds with the line number in the script pane the upper 
pane. Sample output appears here:
8.
[<0028>-28<005B>-6<0044>-4<0050>-2<004C0051>-9<004800030057>-2<004B>-9<004800030053>-7<0055>-12<0052>-7<0050>-4<0053>-5<00570003004C005100030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F0003002C>-8<0036002800030046>1<0052>-7<0050>-4<0050>-7<0044>-4<0051>-11<004700030053>-9<0044>-4<0051>-9<0048>-7<00110003002C>-1<005700030056>-3<004B>-9<0052>-9<0058>1<004F>-8<004700030045>-13<004800030053>-7<0055>-12<0048>-9<00C0>-11<005B>2<0048>-16<004700030045>-2<005C0003>]TJ
[DBG]
. This tells you that you are in a debug prompt. This prompt appears here:
At the debug prompt in the Windows PowerShell ISE command pane, examine the value of 
the 
 variable.
  
10.
Now examine the value of the 
 variable.
11.
Now assign a value of 2 to both 
 and 
12.
Now choose Step Out from the Debug menu to permit the script to continue execution and 
to run the line upon which the breakpoint was set. Notice that the function now uses the new 
value of 
 and 
. The output appears here:
13.
Select Remove All Breakpoints from the Debug menu. Examine the script pane. The high
lighted line of code should now appear normally.
14.
In the command pane of the Windows PowerShell ISE, call 
My-Function
 once again. This time 
you will notice that the function still exhibits the problem. The output appears here:
15.
[<003C>49<0052>-9<005800030056>-3<004B>-9<0052>-9<0058>1<004F>-8<004700030051>-9<0052>-3<005A000300C0>-11<005B00030057>-2<004B>-9<004800030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051>-14<001100030037>55<005200030047>-5<005200030057>-2<004B>-2<004C>-5<0056>-20<000F00030046>4<004B>-7<0044>-4<0051>-11<004A>-7<004800030057>-2<004B>-9<004800030052>-10<0058>-5<0057>-2<0053>-9<0058>-5<00570003004F004C0051>-9<004800030056>-12<005200030057>-2<004B>-7<0044>-3<00570003004C>-5<005700030047>-5<0052>-13<0048>-12<005600030051>-9<0052>-2<00570003004B>-7<0044>1<0059>1<00480003>]TJ
the hard-coded word 
four 
in it. This change appears following. Save the revised function as 
my-function1.ps1.
This concludes the exercise.
In the next exercise, you will set breakpoints that will be used when debugging a script.
Debugging a script
1.
Open the Windows PowerShell console. 
2.
Use the 
Set-PSBreakPoint 
cmdlet to set a breakpoint on the 
my-function 
function inside the 
script my-function.ps1. Remember that you will need to use the full path to the script when 
you do this. The command will look something like the following:
3.
Run the my-function.ps1 scrip inside the Windows PowerShell console by typing its complete 
path. The command will look something like the following. Notice that the command does 
not break.
4.
Dot-source the function, and then call the function directly from memory and watch to see if 
the command breaks. The two commands will look something like the following:
5.
Use the 
Get-PSBreakPoint cmdlet 
to display the breakpoint. The command and associated 
output appear here:
6.
Remove the breakpoint for the
 my-function
 command by using the 
Remove-PSBreakPoint 
cmdlet. It should have an ID of 0. The command appears here:
Set a breakpoint for the 
my-function
 command without specifying a script. The command 
appears here:
8.
Call 
my-function
. When you do, the Windows PowerShell console will enter debug mode. The 
command and debug mode appear here:
Inside debug mode, display the value of the 
 variable and the 
 variable. The command 
and output appear here:
10.
Exit debug mode by typing the command 
exit
. The Windows PowerShell console exits debug 
mode and continues running the function, as shown here:
  
11.
Dot-source the my-function1.ps1 script. The command will be similar to the one that appears 
here:
12.
Run the 
my-function
 function and supply the value 12 for the 
parameter and the value 14 
for the 
parameter
The command follows. Note that once again the Windows PowerShell 
console enters debug mode.
13.
Query for the value of 
 and 
. The command and associated values appear here:
14.
Change the value of 
 to be equal to 0 and exit debug mode. The commands appear here:
15.
When the console exits debug mode, the new value for the 
parameter is used. The output 
appears here:
16.
Use the 
Get-PSBreakPoint
 cmdlet to retrieve all breakpoints, and pipeline them to the 
Remove-PSBreakPoint
 cmdlet. This command appears here:
17.
Use the 
Get-PSBreakPoint 
cmdlet to ensure that the breakpoint is removed. This command 
appears here:
This concludes the exercise.
Chapter 18 quick reference
Do this
Step through a script or a function
Use the 
Set-PSDebug
 cmdlet and specify the 
-step
 switch.
Follow code execution into and out of functions 
in a script
Use the 
Set-PSDebug
 cmdlet and specify a value of 2 for the 
-trace
parameter.
Set a breakpoint for a particular line number in 
a script
Use the 
Set-PSBreakPoint
 cmdlet and specify the line number to 
the 
-line
 parameter. Also specify the script by using the 
-script
parameter. 
Set a breakpoint on a script when a particular 
variable is written to
Use the 
Set-PSBreakPoint
 cmdlet, specify the variable name leave 
off the $ sign when specifying the variable name to the 
-variable
parameter, and specify the script to the 
-name
 parameter.
Set a breakpoint when a particular command is 
run from any script
Use the 
Set-PSBreakPoint
 cmdlet and the 
-command
 parameter to 
specify the command to watch, and do not set a script name.
[<002F>-16<004C>-12<0056>-23<005700030044>-11<004F>-6<004F00030045>-14<0055>-19<0048>-17<0044>-11<004E>-21<0053>-20<0052>-11<004C>-7<0051>-8<0057>-25<005600030046>-9<0058>-6<0055>-18<0055>-19<0048>-17<0051>-8<0057>-9<004F>-19<005C00030047>-14<0048>-16<00C0>-9<0051>-16<0048>-23<00470003004C>-7<005100030057>-9<004B>-16<00480003>]TJ
session
Use the 
Get-PSBreakpoint
 cmdlet.
[<0027>-19<0048>-18<004F>-14<0048>-17<0057>-10<004800030044>-11<004F>-6<004F00030045>-14<0055>-19<0048>-17<0044>-11<004E>-21<0053>-20<0052>-11<004C>-7<0051>-8<0057>-25<005600030046>-9<0058>-6<0055>-19<0055>-19<0048>-17<0051>-8<0057>-9<004F>-19<005C00030047>-14<0048>-16<00C0>-9<0051>-16<0048>-23<00470003004C>-7<005100030057>-9<004B>-16<00480003>]TJ
session
Use the 
Get-PSBreakpoint
 cmdlet and pipeline the results to the 
Remove-PSBreakpoint
 cmdlet.
CHAPTER 19
andling Errors
fter completing this chapter, you will be able to:
Handle missing parameters in scripts.
Limit the choices available to users of your scripts.
Handle missing rights and permissions in scripts.
Handle missing WMI providers in scripts.
Use 
Try...Catch...Finally
 to catch single and multiple errors in scripts.
When it comes to handling run-time errors in your script, you need to have an understanding of the 
intended use of the script. For example, just because a script runs once does not mean it will run a 
[<0056>-12<0048>-16<00460052>-7<0051>-11<004700030057>-2<004C0050>-9<0048>-7<001100030027>-7<004C>-5<0056>-4<004E>-31<005600030049>-9<0044>-2<004C004F>-9<000F00030051>-9<0048>-10<0057>-35<005A>-2<0052>-7<0055>-12<004E>-31<005600030049>-9<0044>-2<004C004F>-9<000F00030046>1<0052>-7<0050>-4<0053>-9<0058>-5<0057>-3<0048>-10<0055>-26<005600030049>-9<0044>-2<004C004F>-9<000F00030044>-3<0051>-11<004700030057>-2<004B>-2<004C0051>-11<004A>-6<005600030044>-4<0055>-12<0048000300460052>-7<0051>-9<0056>-16<0057>-19<0044>-4<00510057>-2<004F>-12<005C0003004C0051000300C1>-6<0058>-8<005B>-18<001100030037>-7<004B>-9<00480003005A>-3<0044>2<005C00030057>-2<004B>-7<0044>-3<00570003>]TJ
a script will be used is sometimes called the
use-case scenario
, and it describes how the user will 
interact with the script. If the use-case scenario is simple, the user may not need to do anything more 
than type the name of the script inside the Microsoft Windows PowerShell console. A script such 
as Get-Bios.ps1, shown following, could get by without much need for any error handling. This is 
because there are no inputs to the script. The script is called, it runs, and it displays information that 
should always be readily available, because the 
Win32_Bios
 Windows Management Instrumentation 
WMI class is present in all versions of Windows since Windows 2000 however, even a simple script 
like Get-Bios.ps1 could fail because it relies on a WMI service that might be broken, or because the 
COM interface is corrupt. 
Get-Bios.ps1
Handling missing parameters
When you examine the Get-Bios.ps1 script, you can see that it does not receive any input from the 
command line. This is a good way to avoid user errors in your script, but it is not always practical. 
When your script accepts 
command-line input, you are opening the door for all kinds of potential 
problems. Depending on how you accept command-line input, you may need to test the input data 
to ensure that it corresponds to the type of input the script is expecting. The Get-Bios.ps1 script does 
  
not accept command-line input; therefore, it avoids most potential sources of errors of course, the 
Get-Bios.ps1 script is also extremely limited in scope27so you win some and you lose some. 
Creating a default value for a parameter
There are two ways to assign default values for a command-line parameter. You can assign the default 
value in the 
param
 declaration statement, or you can assign the value in the script itself. Given a 
choice between the two, it is a best practice to assign the default value in the 
param
 statement. This 
is because it makes the script easier to read, which in turn makes the script easier to modify and 
troubleshoot. For more information on troubleshooting scripts, see Chapter 18, 23Debugging Scripts.24
Detecting a missing value and assigning it in the script
In the Get-BiosInformation.ps1 script, which follows, a command-line parameter, 
computerName
allows the script to target both local and remote computers. If the script runs without a value for the 
computerName
 parameter, the 
Get-WMIObject
 cmdlet fails because it requires a value for the 
com
putername
 parameter. To solve the problem of the missing parameter, the Get-BiosInformation.ps1 
script checks for the presence of the 
$computerName
 variable. If this variable is missing, it means 
it was not created via the command-line parameter, and the script therefore assigns a value to the 
$computerName
 variable. Here is the line of code that populates the value of the 
$computerName
variable:
The completed Get-BiosInformation.ps1 script is shown here: 
Get-BiosInformation.ps1
ssigning a value in the 
param
 statement
To assign a default value in the 
param
 statement, you use the equality operator following the param
eter name and assign the value to the parameter. This technique appears here: 
An advantage of assigning the default value for the parameter in the 
param
 statement is that it 
makes the script is easier to read. Because the parameter declaration and the default parameter are in 
the same place, you can see immediately which parameters have default values and which do not. The 
second advantage that arises from assigning a default value in the 
param
 statement is that the script 
is easier to write. Notice that there is no 
 statement to check the existence of the 
$computerName
variable. The Get-BiosInformationDefaultParam.ps1 script illustrates using the 
param 
statement to 
assign a default value for a script. The complete script is shown here: 
Get-BiosInformationDefaultParam.ps1
Making the parameter mandatory
[<0037>-7<004B>-9<004800030045>-13<0048>-12<0056>-16<00570003005A>-2<0044>2<005C0003005700520003004B>-7<0044>-4<0051>-11<0047>1<004F>-7<004800030044>-4<005100030048>-10<0055>-12<0055>-12<0052>-7<00550003004C>-5<005600030057>-1<005200030048>-10<0051>-9<0056>-5<0058>1<0055>-12<004800030057>-2<004B>-9<004800030048>-10<0055>-12<0055>-12<0052>-7<005500030047>-5<0052>-13<0048>-12<005600030051>-9<0052>-2<005700030052>-13<00460046>-2<0058>1<00550003004C005100030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030053>-7<004F>-5<0044>-9<0046>-2<0048>-7<00110003002C>-1<00510003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<00560003>]TJ
PowerShell 3.0, you can mark a parameter as mandatory for the scripts as well as for functions. The 
advantage of marking a parameter as mandatory is that it requires the user of the script to supply a 
value for the parameter. If you do not want the user of the script to be able to run the script without 
making a particular selection, you will want to make the parameter mandatory. To make a parameter 
mandatory, you use the 
mandatory
 parameter attribute. This technique appears here: 
The complete MandatoryParameter.ps1 script appears here: 
MandatoryParameter.ps1
  
When a script with a 
mandatory
 parameter runs without supplying a value for the parameter, an 
error is not generated. Instead, Windows PowerShell prompts for the required parameter value. This 
behavior appears here: 
Limiting choices
Depending on the design of the script, several scripting techniques can ease error-checking require
ments. If you have a limited number of choices you wish to display to your user, you can use the 
PromptForChoice
 method. If you want to limit the selection to computers that are currently running, 
you can the 
Test-Connection
 cmdlet prior to attempting to connect to a remote computer. If you 
[<005A>-2<0052>-10<0058>1<004F>-8<00470003004F004C004E>12<004800030057>-1<00520003004F004C0050>-2<004C>-5<005700030057>-2<004B>-9<004800030046>4<004B>-9<0052>-4<004C>-3<0046>-2<004800030057>-1<00520003004400030056>-3<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<004600030056>-5<0058>1<0045>-8<0056>-12<0048>-10<0057000300520049000300460052>-7<0050>-4<0053>-9<0058>-5<0057>-3<0048>-10<0055>-26<005600030052>-7<005500030053>-7<0055>-12<0052>-7<0053>-13<0048>-10<0055>-41<0057>-2<004C>-5<0048>-12<0056>-20<000F0003005C>1<0052>-9<005800030046>-14<0044>-4<005100030053>-9<0044>-4<0055>-26<0056>-12<00480003004400030057>-3<0048>-6<005B>-37<0057000300C0>-2<004F>-7<00480003>]TJ
and use the
-contains
 operator. In this section, you will examine each of these techniques for limiting 
the permissible input values from the command line. 
Using 
PromptForChoice
 to limit selections
For example, if you use the 
PromptForChoice
 method of soliciting input from the user, your user has 
a limited number of options from which to choose. You eliminate the problem of bad input because 
[<0057>-2<004B>-9<004800030058>-6<0056>-12<0048>-10<005500030052>-7<0051>-4<004F>-12<005C0003004B>-7<0044>-10<005600030056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<004600030052>-7<0053>-5<0057>-2<004C>-5<0052>-7<0051>-9<005600030044>1<0059>-5<0044>-2<004C004F>-5<0044>-4<0045>-8<004F>-7<004800030057>-1<005200030056>-6<0058>1<0053>-7<0053>-8<004F>-12<005C0003005700520003005C>1<0052>-9<0058>1<005500030056>-13<0046>4<0055>-12<004C0053>-5<0057>-20<001100030037>-7<004B>-9<004800030058>-6<0056>-12<0048>-10<005500030053>-7<0055>-12<0052>-7<0050>-4<0053>-5<005700030049>-12<0055>-12<0052>-7<005000030057>-2<004B>-9<00480003>]TJ
PromptForChoice
 method is shown in Figure 19-1.
FIGURE 19-1
The 
PromptForChoice
 method presents a selectable menu to the user.
The use of the 
PromptForChoice
 method appears in the Get-ChoiceFunction.ps1 script, which fol
lows. In the
Get-Choice
 function, the 
$caption
 variable and the 
$message
 variable hold the caption 
and the message that is used by the 
PromptForChoice
 method. The choices are an array of instances 
of the 
ChoiceDescription
 .NET Framework class. When you create the 
ChoiceDescription
 class, you also 
supply an array with the choices that will appear. This is shown here: 
You next need to select a number that will be used to represent which choice will be the default 
choice. When you begin counting, keep in mind that 
ChoiceDescription
[<0003004C>-5<005600030044>-4<005100030044>-4<0055>-12<0055>-8<0044>2<005C>34<000F00030044>-4<0051>-11<004700030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030052>-7<0053>-5<0057>-2<004C>-5<0052>-7<00510003>]TJ
is numbered 0. Next, you call the 
PromptForChoice
 method and display the options. This is shown 
here: 
Because the 
PromptForChoice
 method returns an integer, you could use the 
 statement to evalu
ate the value of the 
$choiceRTN
 variable. The syntax of the 
switch
 statement is more compact and 
is actually a better choice for this application. The 
switch
 statement from the 
Get-Choice
 function is 
shown here: 
When you call the 
Get-Choice
[<00030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051>-15<000F0003004C>-5<005700030055>-12<0048>-10<0057>-8<0058>1<0055>-12<0051>-9<005600030057>-2<004B>-9<0048000300460052>-7<0050>-4<0053>-9<0058>-5<0057>-3<0048>-10<005500030057>-2<004B>-7<0044>-3<00570003005A>-2<0044>-10<00560003004C>-5<0047>-7<0048>-10<00510057>-2<004C>-5<00C0>-7<0048>-16<004700030045>-2<005C00030057>-2<004B>-9<00480003>]TJ
PromptForChoice
 method. You place the method call in a set of parentheses to force it to be evalu
ated before the rest of the command. This is shown here: 
This solution to the problem of bad input works well when you have help desk personnel who will 
be working with a limited number of computers. One caveat to this approach is that you do not want 
to have to change the choices on a regular basis, so you would want a stable list of computers to 
avoid creating a maintenance nightmare for yourself. The complete Get-ChoiceFunction.ps1 script is 
shown here: 
Get-ChoiceFunction.ps1
  
Using 
Test-Connection
 to identify computer connectivity
If you have more than a few computers that need to be accessible, or if you do not have a stable list 
of computers that you will be working with, then one solution to the problem of trying to connect to 
nonexistent computers is to ping a computer prior to attempting to make the WMI connection. 
You can use the 
Win32_PingStatus
 WMI class to send a ping to a computer. This establishes com
[<0053>-9<0058>-5<0057>-3<0048>-10<0055000300460052>-7<0051>-4<0051>-9<0048>-16<0046>-25<0057>-2<004C>-12<0059>-12<004C>-5<0057>-38<005C>34<000F00030044>-4<0051>-11<00470003004C>-5<005700030044>-4<004F>-8<0056>-12<005200030059>1<0048>-10<0055>-12<004C>-5<00C0>-7<0048>-12<005600030057>-2<004B>-7<0044>-3<005700030051>-7<0044>-4<0050>-9<004800030055>-12<0048>-12<0056>-12<0052>-6<004F>-4<0058>-5<0057>-2<004C>-5<0052>-7<00510003005A>-2<0052>-7<0055>-12<004E>-31<005600030053>-7<0055>-12<0052>-7<0053>-13<0048>-10<0055>-12<004F>-12<005C>35<001100030037>-7<004B>-9<004800030045>-13<0048>-12<0056>-16<00570003005A>-3<0044>2<005C00030057>-1<005200030058>-6<0056>-12<004800030057>-2<004B>-9<0048>10<0003>]TJ
Win32_PingStatus
 WMI class is to use the 
Test-Connection
 cmdlet because it wraps the WMI class 
into an easy-to-use package. An example of using the 
Test-Connection
 cmdlet with default values 
appears here: 
If you are only interested in whether the target computer is up or not, use the 
-quiet 
parameter. 
The 
-quiet 
parameter returns a Boolean value 
true
 if the computer is up; 
false
 if the computer is 
down. This appears here:
When you use the 
Test-Connection
 cmdlet, it has a tendency to be slower than the traditional ping 
utility. It has a lot more capabilities, and even returns an object, but it is slower. A few seconds can 
make a huge difference when attempting run a single script to manage thousands of computers. To 
increase performance in these types of fan-out scenarios, use the 
-count 
parameter to reduce the 
default number of pings from four to one. In addition, reduce the default buffer size
from 32 to 16. 
Because 
Test-Connection -quiet
 returns a Boolean value, there is no need to evaluate a number of 
possible return values. In fact, the logic is simple: either the command returns a value or it does not. 
If it does return, add the action to take in the 
if 
statement. If it does not return, add the action to take 
in the 
else 
statement. If you do not wish to log failed connections, on the other hand, you would only 
have the action in the 
if 
statement with which to contend. The
 Test-ComputerPath.ps1 script illustrates 
using the 
Test-Connection
 cmdlet to determine if a computer is up prior to attempting a remote con
nection. The complete Test-ComputerPath.ps1 script appears here:
est-ComputerPath.ps1
Using the 
-contains
 operator to examine contents of an array
To verify input that is received from the command line, you can use the 
-contains
 operator to examine 
the contents of an array of possible values. This technique is illustrated here, where an array of three 
values is created and stored in the variable 
$noun
. The 
-contains
 operator is then used to see if the 
array contains 
hairy-nosed wombat
. Because the 
$noun
 variable does not have an array element that 
is equal to the string 
hairy-nosed wombat
, the 
-contains
 operator returns 
false
If an array contains a match, the 
-contains
 operator returns 
true
. This is shown here: 
The 
-contains
 operator returns 
true
 only when there is an exact match. Partial matches return 
false
This is shown here: 
The 
-contains
 operator is a case insensitive operator. But there is also the 
-icontains
 operator, 
which is case insensitive, as well as
26ccontains
, which is case sensitive. Therefore, it will return 
true
when matched, regardless of case. This is shown here:
If you need to perform a case-sensitive match, you can use the case-sensitive version of the 
-contains
 operator, 
-ccontains
. As shown here, it will return 
true
 only if the case of the string matches 
the value contained in the array. 
  
In the Get-AllowedComputers.ps1 script, which follows, a single command-line parameter is 
created that is used to hold the name of the target computer for the WMI query. The 
computer
parameter is a string, and it receives the default value from the environment drive. This is a good 
technique because it ensures that the script will have the name of the local computer, which could 
then be used in producing a report of the results. If you set the value of the 
computer
 parameter to 
localhost
, you never know what computer the results belong to. This is shown here: 
The 
Get-AllowedComputer
 function is used to create an array of permitted computer names and to 
check the value of the 
$computer
 variable to see if it is present. If the value of the 
$computer
 variable 
is present in the array, the 
Get-AllowedComputer
 function returns 
true
. If the value is missing from the 
array, the 
Get-AllowedCompute
r function returns 
false
. The array of computer names is created by the 
use of the 
Get-Content
[<00030046>4<0050>-11<0047>1<004F>-7<0048>-10<005700030057005200030055>-12<0048>-10<0044>-11<00470003004400030057>-3<0048>-6<005B>-37<0057000300C0>-2<004F>-7<004800030057>-2<004B>-7<0044>-3<005700030046>1<0052>-7<0051>-1<0057>-19<0044>-2<004C0051>-9<0056000300440003004F004C>-5<0056>-16<0057>-2<004C0051>-11<004A000300520049000300460052>-7<0050>-4<0053>-9<0058>-5<0057>-3<0048>-10<005500030051>-7<0044>-4<0050>-9<0048>-12<0056>-19<001100030037>-7<004B>-9<004800030057>-3<0048>-6<005B>-37<00570003>]TJ
[<00C0>-2<004F>-7<0048>-9<000F00030056>-12<0048>-10<0055>-47<0059>1<0048>-10<0055>-26<0056>-19<0011>12<0057>-34<005B>-37<0057>-20<000F0003004C>-5<00560003004400030053>-7<004F>-5<0044>-2<004C005100030024>-21<0036>-5<0026>11<002C>-3<002C00030057>-3<0048>-6<005B>-37<0057000300C0>-2<004F>-7<004800030057>-2<004B>-7<0044>-3<00570003004B>-7<0044>-10<0056000300440003004F004C>-5<0056>-16<005700030052>1<0049000300460052>-7<0050>-4<0053>-9<0058>-5<0057>-3<0048>-10<005500030051>-7<0044>-4<0050>-9<0048>-12<005600030052>-7<00510003004C0051>-11<0047004C>-12<0059>-12<004C>-5<0047>-3<0058>-3<0044>-4<004F0003004F004C0051>-9<0048>-12<0056>-20<000F00030044>-10<005600030056>-4<004B>-9<0052>-3<005A>-9<00510003>]TJ
in Figure 19-2.
FIGURE 19-2
[<0038>-8<0056>-8<004C>-5<0051>-15<004A0003004400030057>-7<0048>-11<005B>-41<0057000300C0>-7<004F>-11<00480003005A>-13<004C>-10<0057>-7<004B00030046>-4<0052>-11<0050>-8<0053>-14<0058>-9<0057>-7<0048>-15<005500030051>-11<0044>-8<0050>-14<0048>-17<005600030044>-9<0051>-15<004700030044>-15<0047>-11<0047>-4<0055>-17<0048>-17<0056>-18<0056>-17<0048>-17<00560003004C>-10<005600030044>-9<005100030048>-14<0044>-15<0056>-26<005C0003005A>-7<0044>-3<005C00030057>-5<00520003005A>-6<0052>-11<0055>-16<004E0003005A>-13<004C>-10<0057>-7<004B00030044>-8<004F>-4<004F>-11<0052>-7<005A>-6<0048>-21<00470003>]TJ
computers. 
[<002400030057>-3<0048>-6<005B>-37<0057000300C0>-2<004F>-7<0048000300520049000300460052>-7<0050>-4<0053>-9<0058>-5<0057>-3<0048>-10<005500030051>-7<0044>-4<0050>-9<0048>-12<00560003004C>-5<005600030048>-10<0044>-10<0056>-3<004C>-5<0048>-10<005500030057>-1<005200030050>-7<0044>-2<004C00510057>-19<0044>-2<004C005100030057>-2<004B>-7<0044>-4<0051000300440003004B>-6<0044>-4<0055>-13<0047>-2<0010>-18<00460052>-13<0047>-7<0048>-16<004700030044>-4<0055>-12<0055>-8<0044>2<005C00030057>-2<004B>-7<0044>-3<00570003004C>-5<005600030048>-10<0050>-4<0045>-13<0048>-16<0047>-7<0047>-7<0048>-16<00470003004C00510057>-1<00520003>]TJ
[<0057>-2<004B>-9<004800030056>-13<0046>4<0055>-12<004C0053>-5<0057>-20<00110003002C>-1<005100030044>-11<0047>-7<0047004C>-5<0057>-2<004C>-5<0052>-7<0051>-14<000F00030057>-2<004B>-9<004800030057>-3<0048>-6<005B>-37<0057000300C0>-2<004F>-7<004800030046>-14<0044>-4<005100030045>-13<004800030053>-8<004F>-5<0044>-9<0046>-2<0048>-16<004700030052>-7<00510003004400030046>-1<0048>-10<00510057>-2<0055>-8<0044>-4<004F00030056>-4<004B>-7<0044>-4<0055>-12<004800030044>-4<0051>-11<004700030046>-14<0044>-4<005100030045>-13<004800030058>-6<0056>-12<0048>-16<004700030045>-2<005C00030050>-7<0044>-4<0051>4<005C00030047004C>-3<0049>-39<0049>-7<0048>-10<0055>]TJ
ent scripts. The 
Get-AllowedComputer
 function is shown here: 
Because the 
Get-AllowedComputer
 function returns a Boolean value 
true
 or 
false
, it can be 
used directly in an 
 statement to determine whether the value that is supplied for the 
$computer
variable is on the list of permitted computers. If the 
Get-AllowedComputer
 function returns 
true
the
Get-WMIObject
 cmdlet is used to query for BIOS information from the target computer. This is 
shown here: 
On the other hand, if the value of the 
$computer
 variable is not found in the 
$servers
 array, a string 
that states that the computer is not an allowed computer is displayed. This is shown here:
The complete Get-AllowedComputer.ps1 script is shown here: 
Get-
llowedComputer.ps1
Using the 
-contains
 operator to test for properties
[<003C>49<0052>-9<005800030044>-4<0055>-12<004800030051>-9<0052>-2<00570003004F004C0050>-2<004C>-5<0057>-3<0048>-16<004700030057>-1<005200030052>-7<0051>-4<004F>-12<005C00030057>-3<0048>-12<0056>-16<0057>-2<004C0051>-11<004A00030049>-7<0052>-7<005500030056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-7<0048>-16<0047000300460052>-7<0050>-4<0053>-9<0058>-5<0057>-3<0048>-10<005500030051>-7<0044>-4<0050>-9<0048>-12<00560003004C005100030057>-2<004B>-9<00480003>]TJ
Get-AllowedComputer
 func
[<0057>-2<004C>-5<0052>-7<0051>-14<001100030024>-10<004F>1<004F0003005C>1<0052>-9<005800030051>-9<0048>-16<0048>-16<004700030057005200030047>-5<00520003004C>-5<005600030044>-11<0047>-7<004700030044>-11<0047>-7<0047004C>-5<0057>-2<004C>-5<0052>-7<0051>-7<0044>-4<004F0003004C0051>2<0049>-7<0052>-7<0055>-12<0050>-7<0044>-3<0057>-2<004C>-5<0052>-7<005100030057>-1<005200030057>-2<004B>-9<004800030057>-3<0048>-6<005B>-37<0057000300C0>-2<004F>-7<00480003004C005100030052>-7<0055>-12<0047>-7<0048>-10<005500030057>-1<005200030046>4<004B>-9<0048>-16<0046>4<004E00030049>-7<0052>-7<00550003003A>-7<0030>-4<002C00030053>-7<0055>-12<0052>-7<0053>]TJ
erty names or other information. This is shown in Figure 19-3.
  
FIGURE 19-3
[<002400030057>-7<0048>-11<005B>-41<0057000300C0>-7<004F>-11<00480003005A>-13<004C>-10<0057>-7<004B00030056>-16<0048>-15<0055>-51<0059>-4<0048>-15<005500030051>-11<0044>-8<0050>-14<0048>-17<005600030044>-8<0051>-15<004700030053>-11<0055>-17<0052>-11<0053>-17<0048>-15<0055>-45<0057>-7<004C>-10<0048>-17<005600030044>-15<0047>-11<0047>-11<0056000300C1>-15<0048>-11<005B>-13<004C>-5<0045>-11<004C>-5<004F>-5<004C>-10<0057>-42<005C00030057>-5<005200030057>-7<004B>-14<004800030056>-17<0046>-1<0055>-16<004C>-5<0053>-10<0057>-24<0011>]TJ
[<003C>49<0052>-9<005800030052>-7<0051>-4<004F>-12<005C00030051>-9<0048>-16<0048>-16<004700030057>-1<005200030050>-7<0044>-4<004E>12<004800030044000300460052>-9<0058>1<0053>-8<004F>-7<004800030052004900030050>-9<0052>-13<0047004C>-5<00C0>-5<0046>-14<0044>-3<0057>-2<004C>-5<0052>-7<0051>-9<005600030057>-1<005200030057>-2<004B>-9<00480003002A>-15<0048>-10<0057>33<00100024>-11<004F>1<004F>-7<0052>-3<005A>-2<0048>-16<0047>-13<0026>2<0052>-7<0050>-4<0053>-9<0058>-5<0057>-3<0048>-10<0055>43<0011>-8<0053>-8<0056>8<001400030056>-13<0046>4<0055>-12<004C0053>-5<005700030057005200030057>-8<0058>1<0055>-12<00510003004C>-5<00570003>]TJ
[<004C00510057>-1<005200030057>-2<004B>-9<00480003002A>-15<0048>-10<0057>33<00100024>-11<004F>1<004F>-7<0052>-3<005A>-2<0048>-16<0047>-13<0026>2<0052>-7<0050>-4<0053>-9<0058>-5<0057>-3<0048>-10<0055>26<0024>-11<0051>-11<0047>-1<0033>3<0055>-12<0052>-7<0053>-13<0048>-10<0055>-41<0057>-38<005C>35<0011>-8<0053>-8<0056>8<001400030056>-13<0046>4<0055>-12<004C0053>-5<0057>-20<001100030037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<00570003004C>-5<005600030057>-1<005200030044>-11<0047>-7<004700030044>-4<005100030044>-11<0047>-7<0047004C>-5<0057>-2<004C>-5<0052>-7<0051>-7<0044>-4<004F000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<0047>-2<0010>-5<004F004C0051>-9<00480003>]TJ
parameter to allow the user to choose which property to display. This is shown here: 
Next, you change the signature to the 
Get-AllowedComputer 
function to permit passing of the 
property name. Instead of directly returning the results of the 
-contains
 operator, you store the 
returned values in variables. The 
Get-AllowedComputer 
[<0049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051000300C0>-2<0055>-26<0056>-16<005700030046>4<004B>-9<0048>-16<0046>4<004E>-31<005600030057>-1<005200030056>-12<0048>-16<00480003004C>-3<004900030057>-2<004B>-9<00480003>]TJ
$servers
array contains the computer name. It then checks to see if the 
$servers
 array contains the property 
name. Each of the resulting values is stored in variables. The two variables are then 
anded
, and the 
result is returned to the calling code. When two Boolean values are anded, only the 
$true -and $true
case is equal to 
true
; all other combinations return 
false.
 This is shown here: 
The revised 
Get-AllowedComputer 
function is shown here: 
The 
 statement is used to determine if both the computer value and the property value are on 
the list of allowed servers and properties. If the 
Get-AllowedComputer
 function returns 
true
, the 
Get-WMIObject
 cmdlet is used to display the chosen property value from the selected computer. This 
is shown here: 
If the computer value and the property value are not on the list, the 
Get-AllowedComputerAnd
Property.ps1 script displays a message stating that there is a nonpermitted value. This is shown here: 
The complete Get-AllowedComputerAndProperty.ps1 script is shown here: 
Get-
llowedComputer
ndProperty.ps1
  
Quick check
Q.
What is an easy way to handle a missing 
Q.
What is a good way to ensure a script does not run with missing parameters?
Make the parameters required parameters by using the 
parameter attribute.
Q.
What is a good way to limit potential choices for a parameter value?
Use the 
Handling missing rights 
Another source of potential errors in a script is missing rights. When a script requires elevated per
missions to work correctly and those rights or permissions do not exist, an error results. Windows 8 
makes handling much easier to run and allows the user to work without requiring constant access 
to administrative rights. As a result, more and more users and even network administrators are no 
longer running their computers with a user account that is a member of the local administrators 
group. The 
User Account Control UAC feature makes it easy to provide elevated rights for interactive 
programs, but Windows PowerShell 3.0 and other scripting languages are not UAC aware, and do 
[<0051>-9<0052>-2<005700030057>-2<004B>-9<0048>-10<0055>-12<0048>-8<0049>-7<0052>-7<0055>-12<004800030053>-7<0055>-12<0052>-7<0050>-4<0053>-5<00570003005A>-9<004B>-9<0048>-10<005100030048>-11<004F>-7<0048>-8<0059>-5<0044>-3<0057>-3<0048>-16<004700030055>-12<004C>-5<004A>1<004B>-1<0057>-19<005600030044>-4<0055>-12<004800030055>-12<0048>-16<0054>-3<0058004C0055>-12<0048>-16<004700030057005200030053>-13<0048>-10<0055>-38<0049>-7<0052>-7<0055>-12<00500003004400030056>-3<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<004600030044>-9<0046>-25<0057>-2<004C>-12<0059>-12<004C>-5<0057>-38<005C>35<00110003002C>-1<00570003004C>-5<005600030057>-2<004B>-9<0048>-10<0055>-12<0048>-8<0049>-7<0052>-7<0055>-12<00480003>]TJ
incumbent upon the script writer to take rights into account when writing scripts. The Get-Bios.ps1 
script shown earlier in the chapter, however, does not use a WMI class that requires elevated rights. 
As the script is currently written, anyone who is a member of the local users group27and that includes 
everyone who is logged on interactively27has permission to run the Get-Bios.ps1 script. So, test
ing for rights and permissions prior to making an attempt to obtain information from the WMI class 
Win32_Bios
 is not required. 
ttempt and fail
One way to handle missing rights is to attempt the action, and then fail. This will generate an error. 
Windows PowerShell has two types of errors: 
terminating and nonterminating. 
Terminating errors
as the name implies, will stop a script dead in its tracks. 
Nonterminating errors
 will be output to the 
screen, and the script will continue. Terminating errors are generally more serious than nontermi
nating errors. Normally, you get a terminating error when you try to use .NET or COM from within 
PowerShell and you try to use a command that doesn22t exist, or when you do not provide all of the 
required parameters to a command, method, or cmdlet. A good script will handle the errors it expects 
and will report unexpected errors to the user. Since any good scripting language has to provide 
decent error handling, PowerShell has a few ways to approach the problem. The old way is to use 
the 
trap
 statement, which can sometimes be problematic. The new way for PowerShell is to use 
Try...Catch...Finally
Checking for rights and exiting gracefully
The best 
[<005A>-3<0044>2<005C0003005700520003004B>-7<0044>-4<0051>-11<0047>1<004F>-7<00480003004C0051>-9<0056>-5<0058>-2<0049>-41<00C0>-5<0046>4<004C>-5<0048>-10<0051>-1<005700030055>-11<004C>-5<004A>1<004B>-1<0057>-19<00560003004C>-5<005600030057>-1<005200030046>4<004B>-9<0048>-16<0046>4<004E00030049>-7<0052>-7<005500030057>-2<004B>-9<004800030055>-12<004C>-5<004A>1<004B>-1<0057>-19<005600030044>-4<0051>-11<004700030057>-2<004B>-9<0048>-10<005100030048>-6<005B>-8<004C>-5<00570003004A>1<0055>-8<0044>-9<0046>-2<0048>-8<0049>-18<0058>1<004F>1<004F>-12<005C>35<00110003003A>-10<004B>-7<0044>-3<005700030044>-3<0055>-12<00480003>]TJ
some of the things that could go wrong with a simple script, such as the Get-Bios.ps1 script examined 
earlier in the chapter? The Get-Bios.ps1 script will fail, for example, if the Windows PowerShell script 
execution policy is set to 
restricted
. When the script execution policy is set to 
restricted
, Windows 
PowerShell scripts will not run. The problem with a 
restricted
 execution policy is that because 
Windows PowerShell scripts do not run, you cannot write code to detect the 
restricted
 script execu
tion policy. Because the script execution policy is stored in the registry, you could write a VBScript 
script that would query and set the policy prior to launching the Windows PowerShell script, but 
that would not be the best way to manage the problem. The best way to manage the script execu
tion policy is to use 
group policy to set it to the appropriate level for your network. On a stand-alone 
computer, you can set the execution policy by opening Windows PowerShell as an administrator and 
using the 
Set-ExecutionPolicy
 cmdlet. In most cases, the 
remotesigned
 setting is appropriate. The com
mand would therefore be the one shown here: 
The script execution policy is generally dealt with once, and there are no more problems associ
ated with it. In addition, the error message that is associated with the script execution policy is rela
tively clear in that it will tell you that script execution is disabled on the system. It also refers you to a 
help article that explains the various settings. This is shown here: 
Handling missing WMI providers
About the only thing that could actually go wrong with the original Get-Bios.ps1 script introduced 
at the beginning of this chapter is related to WMI itself. If the WMI provider that supplies the 
Win32_Bios
 WMI class information is corrupted or missing, the script will not work. To check for the 
existence of the appropriate WMI provider, you will need to know the name of the provider for the 
WMI class. You can use the 
WMI Tester WbemTest, which is included as part of the WMI installa
tion. If a computer has WMI installed on it, it has WbemTest. Because WbemTest resides in the system 
  
folders, you can launch it directly from within the Windows PowerShell console by typing the name of 
the executable. This is shown here: 
[<0032>-11<0051>-9<0046>-2<00480003003A>-10<0045>-13<0048>-10<0050>55<0037>55<0048>-12<0056>-16<005700030044>-4<0053>-7<0053>-13<0048>-10<0044>-4<0055>-26<0056>-20<000F00030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030057>-2<004B>-2<004C0051>-11<004A0003005C>1<0052>-9<00580003005A>-9<004C004F>1<004F00030051>-10<0048>-16<0048>-16<004700030057005200030047>-5<00520003004C>-5<0056000300460052>-7<0051>-4<0051>-9<0048>-16<0046>-25<005700030057005200030057>-2<004B>-9<004800030044>-4<0053>-7<0053>-7<0055>-12<0052>-7<0053>-7<0055>-12<004C>-2<0044>-3<0057>-3<00480003>]TJ
WMI namespace. To do this, you click the Connect button. In most cases, this namespace will be 
RootCimv2. On Windows Vista and above, RootCimv2 is the default WMI namespace for WbemTest. 
On earlier versions of Windows, the default WbemTest namespace is RootDefault. Change or accept 
the namespace as appropriate, and click Connect. The display changes to a series of buttons, many 
of which appear to have cryptic names and functionality. To obtain information about the provider 
for a WMI class, you will need to open the class. Click the Open Class button and type in the name 
of the WMI class in the dialog box that appears. You are looking for the provider name for the 
Win32_Bios
 WMI class, so that is the name that is entered here. Click the OK button once you have 
entered the class name. The Object Editor for the 
Win32_Bios
 WMI class now appears. This is shown 
[<004C005100030029>-2<004C>-5<004A>-3<0058>1<0055>-12<004800030014>10<001C>-24<0010>-34<0017>-8<001100030037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030045>-13<0052>5<005B0003004C005100030057>-2<004B>-9<004800030032>-11<0045>-6<004D>-5<0048>-16<0046>-25<005700030028>2<0047004C>-5<0057>-1<0052>-7<00550003004F004C>-5<0056>-16<0057>-19<005600030057>-2<004B>-9<004800030054>-3<0058>-3<0044>-4<004F004C>-5<00C0>-7<0048>-10<0055>-26<0056>-4<001E0003>]TJ
provider
[<0003004C>-5<005600030052>-7<0051>-9<004800030052004900030057>-2<004B>-9<004800030054>-3<0058>-3<0044>-4<004F004C>-5<00C0>-7<0048>-10<0055>-26<0056>-19<00110003>]TJ
WbemTest tells you that the provider for 
Win32_Bios
 is CIMWin32. 
FIGURE 19-4
The WMI Tester displays WMI class provider information.
Armed with the name of the WMI provider, you can use the 
Get-WMIObject
 cmdlet to deter
mine if the provider is installed on the computer. To do this, you will query for instances of the 
__provider
 WMI class. All WMI classes that begin with a double underscore are system classes. 
The 
__provider
 WMI class is the class from which all WMI providers are derived. By limiting the query 
to providers with the name of CIMWin32, you can determine if the provider is installed on the system. 
This is shown here: 
For the purposes of determining if the provider exists, you do not need all the information to be 
returned to the script. It is easier to treat the query as if it returned a Boolean value by using the 
statement. If the provider exists, then you will perform the query. This is shown here: 
  
If the 
CIMWin32WMI provider does not exist, then you display a message that states the provider 
is missing. This is shown here: 
The completed CheckProviderThenQuery.ps1 script is shown here: 
CheckProvider
henQuery.ps1
[<002400030045>-13<0048>-10<0057>-31<0057>-3<0048>-10<005500030044>-4<0053>-7<0053>-7<0055>-12<0052>-10<0044>-9<0046>4<004B00030049>-7<0052>-7<0055000300C0>-2<0051>-11<0047004C0051>-11<004A00030052>-9<0058>-5<00570003004C>-3<0049000300440003003A>-7<0030>-4<002C00030046>4<004F>-5<0044>-10<0056>-14<00560003004C>-5<005600030044>1<0059>-5<0044>-2<004C004F>-5<0044>-4<0045>-8<004F>-7<00480003004C>-5<005600030057>-1<005200030046>4<004B>-9<0048>-16<0046>4<004E00030049>-7<0052>-7<005500030057>-2<004B>-9<004800030048>-6<005B>-8<004C>-5<0056>-16<0057>-3<0048>-10<0051>-9<0046>-2<004800030052004900030057>-2<004B>-9<00480003>]TJ
provider. In the case of the 
WIN32_product
 WMI class, the 
MSIPROV WMI provider supplies that class. 
In this section, you create a function, the 
Get-WmiProvider 
function, which can be used to detect the 
presence of any WMI provider that is installed on the system. 
The 
Get-WmiProvider
[<00030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051000300460052>-7<00510057>-19<0044>-2<004C0051>-9<005600030057>-35<005A>-2<005200030053>-9<0044>-4<0055>-8<0044>-4<0050>-9<0048>-10<0057>-3<0048>-10<0055>-26<0056>-19<001100030037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030053>-9<0044>-4<0055>-8<0044>-4<0050>-9<0048>-10<0057>-3<0048>-10<00550003004C>-5<005600030057>-2<004B>-9<004800030051>-7<0044>-4<0050>-9<004800030052004900030057>-2<004B>-9<00480003>]TJ
provider, and the second one is a switched parameter named 
-verbose
. When the 
Get-WmiProvider 
function is called with the 
-verbose
 switched parameter, detailed status information is displayed to 
the console. The 
-verbose
 information provides the user of the script information that could be useful 
from a troubleshooting perspective.  
After the function has been declared, the current value of the 
$VerbosePreference
 is stored. 
This is because it could be set to one of four potential values. The possible enumeration values are 
SilentlyContinue
Stop
Continue
, and 
Inquire
. By default, the value of the 
$VerbosePreference
 auto
matic variable is set to 
SilentlyContinue
[<003A>-10<004B>-9<0048>-10<005100030057>-2<004B>-9<004800030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051000300C0>-2<0051>-2<004C>-5<0056>-4<004B>-9<0048>-12<005600030055>-17<0058>1<0051>-4<0051>-2<004C0051>-11<004A>-11<000F0003005C>1<0052>-9<00580003005A>-9<004C004F>1<004F0003005A>-3<0044>-4<0051005700030057005200030056>-12<0048>-10<005700030057>-2<004B>-9<004800030059>-5<0044>-4<004F>-4<0058>-7<004800030052004900030057>-2<004B>-9<00480003>]TJ
$VerbosePreference 
vari
able back to its original value. To enable reverting to the original value of the 
$VerbosePreference
variable, store the original value in the 
$oldVerbosePreference 
variable. 
It is time to determine if the function was called with the 
-verbose
 switch. If the function was 
called with the 
-verbose
 switch, a variable named 
$verbose
 will be present on the variable drive. If the 
$verbose
 variable exists, the value of the
 $VerbosePreference
 automatic variable is set to 
Continue
Next, you need to look for the WMI provider. To do this, you use the 
Get-WMIObject
 cmdlet to 
query for all instances of the 
__provider
 WMI system class. As mentioned previously, all WMI classes 
that begin with a double underscore are system classes. In most cases, they are not of much interest 
to IT professionals; however, familiarity with them can often provide powerful tools to the scripter 
who takes the time to examine them. All WMI providers are derived from the 
__provider
 WMI class. 
This is similar to the way that all WMI namespaces are derived from the 
__namespace
 WMI class. The 
properties of the 
__provider
 class are shown in Table 19-1. 
TABLE 19-1
Properties of the 
__Provider
 WMI class
Property name
Property type
InitializeAsAdminFirst        
PerLocaleInitialization       
SupportsExtendedStatus        
__PATH                        
  
Property name
Property type
The 
[<0010>-5<00C0>-1<004F0057>7<0048>1<0055>]TJ
 parameter of the 
Get-WMIObject
[<00030046>4<0050>-11<0047>1<004F>-7<0048>-10<00570003004C>-5<005600030058>-6<0056>-12<0048>-16<004700030057005200030055>-12<0048>-10<0057>-8<0058>1<0055>-12<005100030057>-2<004B>-9<004800030053>-7<0055>-12<0052>-1<0059>-12<004C>-5<0047>-7<0048>-10<005500030057>-2<004B>-7<0044>-3<00570003004C>-5<005600030056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-7<0048>-16<00470003>]TJ
in the 
$providername
 variable. If you do not know the name of the appropriate WMI provider, you will 
need to search for it by using the 
WMI Tester. You can start this program by typing the name of the 
executable inside your Windows PowerShell console. This is shown here: 
Once the WMI Tester appears, open the 
WIN32_Product
 WMI class. The 
Object Editor for the 
Win32_Product
[<0003003A>-7<0030>-4<002C00030046>4<004F>-5<0044>-10<0056>-14<005600030044>-4<0053>-7<0053>-13<0048>-10<0044>-4<0055>-26<00560003004C005100030029>-2<004C>-5<004A>-3<0058>1<0055>-12<004800030014>11<001C>-24<0010>15<0018>-6<001100030037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030045>-13<0052>5<005B00030052004900030057>-2<004B>-9<004800030032>-11<0045>-6<004D>-5<0048>-16<0046>-25<005700030028>2<0047004C>-5<0057>-1<0052>-7<00550003004F004C>-5<0056>-16<0057>-19<005600030057>-2<004B>-9<004800030054>-4<0058>-3<0044>-4<004F004C>-4<00C0>-7<0048>-10<0055>-26<0056>-4<001E0003>]TJ
provider
[<0003004C>-5<005600030052>-7<0051>-9<004800030052004900030057>-2<004B>-9<004800030054>-3<0058>-3<0044>-4<004F004C>-5<00C0>-7<0048>-10<0055>-26<0056>-19<00110003003A>-10<0045>-13<0048>-10<0050>55<0037>55<0048>-12<0056>-16<005700030057>-3<0048>-11<004F>1<004F>-8<00560003005C>1<0052>-9<005800030057>-2<004B>-7<0044>-3<005700030057>-2<004B>-9<004800030053>-7<0055>-12<0052>-1<0059>-12<004C>-5<0047>-7<0048>-10<005500030049>-7<0052>-7<00550003>]TJ
WIN32_Product
 is MSIProv.
FIGURE 19-5
The Object Editor for 
WIN32_Product
[<00030047>-4<004C>-10<0056>-8<0053>-12<004F>-9<0044>-3<005C>-16<005600030054>-8<0058>-8<0044>-9<004F>-5<004C>-9<00C0>-12<0048>-15<0055>-30<005600030044>-8<0051>-15<004700030050>-14<0048>-15<0057>-7<004B>-14<0052>-17<0047>-11<0056>-24<0011>]TJ
You assign the name of the WMI provider to the 
$providername
 variable, as shown here: 
The resulting object is stored in the
$provider 
variable. This is shown here: 
If the provider was not found, there will be no value in the 
$provider
 variable. You can therefore 
see if the 
$provider
 variable is 
null
. If the 
$provider
 variable is not equal to 
null
, then the class ID 
of the provider is retrieved. The class ID of the WMI provider is stored in the 
clsID
 property. This is 
shown here: 
If the function was run with the 
-verbose
 parameter, then the 
$VerbosePreference
 variable is set to 
Continue
. When the value of 
$VerbosePreference
 is equal to 
Continue
, the 
Write-Verbose
 cmdlet will 
display information to the console. If, on the other hand, the value of the 
$VerbosePreference
 variable 
is equal to 
SilentlyContinue
, the 
Write-Verbose
 cmdlet does not emit anything. This makes it easy to 
implement tracing features in a function without needing to create extensive test conditions. When 
the function is called with the 
-verbose
 parameter, the class ID of the provider is displayed. This is 
shown here: 
If the WMI provider is not found, the function returns 
false
 to the calling code. This is shown here: 
The next thing the function does is check the registry to ensure the WMI provider has been prop
erly registered with DCOM. Once again, the 
Write-Verbose
 cmdlet is used to provide feedback on the 
status of the provider check. This is shown here: 
To search the registry for the WMI provider registration, you use the Windows PowerShell registry 
provider. By default, there is no PowerShell drive for the 
HKEY_CLASSES_ROOT registry hive. However, 
you cannot take it for granted that one would not have created such a drive in their Windows 
[<0033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-7<001100030037>55<005200030044>1<0059>1<0052>-4<004C>-5<00470003004400030053>-13<0052>-2<0057>-3<0048>-10<00510057>-2<004C>-2<0044>-4<004F00030048>-10<0055>-12<0055>-12<0052>-7<005500030057>-2<004B>-7<0044>-3<005700030050>-2<004C>-5<004A>1<004B>-1<005700030044>-4<0055>-12<004C>-5<0056>-12<00480003005A>-9<004B>-9<0048>-10<005100030046>4<0055>-12<0048>-10<0044>-3<0057>-2<004C0051>-11<004A0003004400030033>6<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030047>1<0055>-12<004C>-12<0059>1<004800030049>-7<0052>-7<00550003>]TJ
the HKEY_CLASSES_ROOT hive, you use the 
Test-Path
 cmdlet to check whether an HKCR drive exists. 
If the HKCR drive does exist, it will be used, and the 
Write-Verbose
 cmdlet will be used to print out a 
status message that states the HKCR drive was found and the search is commencing for the class ID of 
the WMI provider. This is shown here: 
To detect if the WMI provider is registered with DCOM, you only need to see if the class ID of the 
WMI provider is present in the CLSID section of HKEY_CLASSES_ROOT. The best way to check for the 
presence of the registry key is to use the 
Test-Path
 cmdlet. This is shown here: 
  
On the other hand, if there is no HKCR drive on the computer, you can go ahead and cre
ate one. You can search for the existence of a drive that is rooted in HKEY_CLASSES_ROOT, and if 
[<005C>1<0052>-9<0058000300C0>-2<0051>-11<00470003004C>-5<0057>-20<000F0003005C>1<0052>-9<005800030046>-14<0044>-4<005100030057>-2<004B>-9<0048>-10<005100030058>-6<0056>-12<004800030057>-2<004B>-9<004800030033>-9<003600030047>1<0055>-12<004C>-12<0059>1<00480003004C00510003005C>1<0052>-9<0058>1<005500030054>-3<0058>-7<0048>-10<0055>-47<005C>35<001100030037>55<0052000300C0>-2<0051>-11<00470003004C>-3<004900030057>-2<004B>-9<0048>-10<0055>-12<004800030044>-4<0055>-12<004800030044>-4<0051>4<005C00030033>-9<003600030047>1<0055>-12<004C>-12<0059>1<0048>-12<005600030055>-12<0052>-13<0052>-2<0057>-3<0048>-16<00470003004C00510003>]TJ
HKEY_CLASSES_ROOT, you can use the 
Get-PSDrive
 cmdlet, as shown here: 
This, however, may be more trouble than it is worth. There is nothing wrong with having multiple 
PS drives mapped to the same resource. Therefore, if there is no HKCR drive, the 
Write-Verbose
 cmdlet 
is used to print a message that the drive does not exist and will be created. This is shown here: 
To create a new Windows PowerShell drive, you use the 
New-PSDrive
 cmdlet to specify the name 
for the PS drive and the root location of the drive. Because this is going to be a registry drive, you 
will use the registry provider. When a 
PS drive is created, it displays feedback back to the Windows 
PowerShell console. This feedback is shown here: 
The feedback from creating the registry drive can be distracting. To get rid of the feedback, you 
can pipeline the results to the 
Out-Null
 cmdlet. This is shown here: 
Once the Windows PowerShell registry drive has been created, it is time to look for the existence 
of the WMI provider class ID. Before that is done, the 
Write-Verbose
 cmdlet is used to provide feed
back about this step of the operation. This is shown here: 
The 
Test-Path
 cmdlet is used to check for the existence of the WMI provider class ID. To build 
the path to the registry key, you use 
Join-Path
 cmdlet. The parent path is the HKCR registry drive 
CLSID hive, and the child path is the WMI provider class ID that is stored in the 
$clsID
 variable. This 
is shown here: 
Once the 
Test-Path
 cmdlet has been used to check for the existence of the WMI provider class 
ID, the 
Write-Verbose
 cmdlet is used to display a message stating that the test is complete. This is 
shown here: 
[<002C>-1<00570003004C>-5<00560003004400030045>-13<0048>-12<0056>-16<005700030053>-7<0055>-8<0044>-9<0046>-25<0057>-2<004C>-3<0046>-2<004800030057>-1<005200030044>1<0059>1<0052>-4<004C>-5<004700030050>-7<0044>-4<004E>-14<004C0051>-11<004A00030053>-13<0048>-10<0055>-12<0050>-7<0044>-4<0051>-9<0048>-10<0051>-1<005700030050>-9<0052>-13<0047004C>-5<00C0>-5<0046>-14<0044>-3<0057>-2<004C>-5<0052>-7<0051>-9<005600030057>-1<005200030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F>10<0003>]TJ
environment in a script. Therefore, you will want to remove the Windows PowerShell drive if it was 
created in the script. The 
Write-Verbose
 cmdlet is employed to provide a status update, and the 
Remove-PSDrive
 cmdlet is used to remove the HKCR registry drive. To avoid cluttering the Windows 
PowerShell console, you pipeline the result of removing the HKCR registry drive to the 
Out-Null 
cmdlet. This is shown here: 
Finally, you need to set 
$VerbosePreference
 back to the value that was stored in 
$oldVerbosePreference
. This line of code is executed even if no change to 
$VerbosePreference
 is made. 
This is shown here: 
The entry point to the script assigns a value to the 
$providername
 variable. This is shown here: 
The 
Get-WmiProvider
 function is called, and it passes both the WMI provider name that is stored 
in the 
$providername
 variable and the 
-verbose
 switched parameter. The 
 statement is used because 
Get-WmiProvider
 returns a Boolean value: 
true
 or 
false
. This is shown here: 
If the 
Get-WmiProvider
 function returns 
true
, the WMI class supported by the WMI provider is 
queried via the 
Get-WMIObject
 cmdlet. This is shown here: 
If the WMI provider is not found, a message stating this is displayed to the console. This is shown 
here: 
  
The complete Get-WmiProviderFunction.ps1 script is shown here: 
Get-WmiProviderFunction.ps1
Incorrect data types
There are two approaches to ensuring that your users only enter allowed values for the script 
[<0053>-9<0044>-4<0055>-8<0044>-4<0050>-9<0048>-10<0057>-3<0048>-10<0055>-26<0056>-19<001100030037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<00570003004C>-5<005600030057>-1<0052000300520049>-39<0049>-7<0048>-10<005500030052>-7<0051>-4<004F>-12<005C000300440003004F004C0050>-2<004C>-5<0057>-3<0048>-16<004700030051>-6<0058>1<0050>-4<0045>-13<0048>-10<005500030052004900030059>-5<0044>-4<004F>-4<0058>-7<0048>-12<0056>-19<001100030037>-7<004B>-9<004800030056>-12<0048>-16<00460052>-7<0051>-11<004700030044>-4<0053>-7<0053>-7<0055>-12<0052>-10<0044>-9<0046>4<004B00030044>-4<004F>1<004F>-7<0052>-3<005A>-12<005600030057>-2<004B>-9<00480003>]TJ
user to enter any value for the parameter. It is then determined if the value is valid before it is 
passed along to the remainder of the script. In the Get-ValidWmiClassFunction.ps1 script, which 
follows, a function named 
Get-ValidWmiClass
 is used to determine if the value that is supplied to 
the script is a legitimate WMI class name. In particular, the 
Get-ValidWmiClass
 function is used to 
determine if the string that is passed via the 
-class
 parameter can be cast to a valid instance of the 
System.Management.ManagementClass
 .NET Framework class. The purpose of using the
[wmiclass] 
type accelerator is to convert a string to an instance of the 
System.Management.ManagementClass 
class. As shown here, when you assign a string value to a variable, the variable becomes an instance of 
the 
System.String 
class. The
GetType
 method is used to get the type of a variable. An array variable is 
an array, yet it can contain integers and other data types. This is a very important concept. 
To convert the string to a WMI class, you can use the 
[wmiclass]
 type accelerator. The string value 
must contain the name of a legitimate WMI class. If the WMI class you are trying to create on the 
computer does not exist, an error is displayed. This is shown here: 
The Get-ValidWmiClassFunction.ps1 script begins by creating two command-line parameters. The 
[<00C0>-2<0055>-26<0056>-16<00570003004C>-5<005600030057>-2<004B>-9<00480003>]TJ
computer
 parameter, which is used to allow the script to run on a local or remote com
puter. The second parameter is the 
-class
 parameter, and is used to provide the name of the WMI 
class that will be queried by the script. A third parameter is used to allow the script to inspect other 
WMI namespaces. All three parameters are strings. Because the third parameter has a default value 
assigned, it can be left out when working with the default WMI namespace. This is shown here: 
The
Get-ValidWmiClass 
function is used to determine if the value supplied for the 
-class
 param
eter is a valid WMI class on the particular computer. This is important because certain versions of the 
  
operating system contain unique WMI classes. For example, Windows XP contains a WMI class named 
netdiagnostics
 that does not exist on any other version of Windows. Windows XP does not contain the 
WMI class 
Win32_Volume
, but Windows Server 2003 and above do. So, checking for the existence of 
a WMI class on a remote computer is a good practice to ensure that the script will run in an expedi
tious manner. 
[<0037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030057>-2<004B>-2<004C0051>-11<004A00030057>-2<004B>-9<00480003>]TJ
Get-ValidWMiClass
 function does is retrieve the current value for the 
$ErrorActionPreference 
variable. There are four possible values for this variable. The possible enumera
tion values are 
SilentlyContinue
Stop
Continue
, and 
Inquire
. The error-handling behavior of Windows 
PowerShell is governed by these enumeration values. If the value of 
$ErrorActionPreference 
is set 
to 
SilentlyContinue
, any error that occurs will be skipped, and the script will attempt to execute the 
next line of code in the script. The behavior is similar to using the VBScript setting 
On Error Resume 
Next
. Normally, you do not want to use this setting because it can make troubleshooting scripts 
[<0059>1<0048>-10<0055>-47<005C00030047004C>-3<0049>-41<00C0>-5<0046>-2<0058>1<004F>-6<0057>-20<00110003002C>-1<005700030046>-14<0044>-4<005100030044>-4<004F>-8<0056>-12<005200030050>-7<0044>-4<004E>12<004800030057>-2<004B>-9<004800030045>-13<0048>-10<004B>-7<0044>1<0059>-12<004C>-5<0052>-7<00550003005200490003004400030056>-12<0046>4<0055>-12<004C0053>-5<005700030058>1<0051>-4<0053>-7<0055>-12<0048>-16<0047004C>-3<0046>-25<0057>-19<0044>-4<0045>-8<004F>-7<004800030044>-4<0051>-11<004700030048>-8<0059>1<0048>-10<00510003004F>-7<0048>-10<0044>-11<004700030057005200030047>-7<0048>-8<0059>-5<0044>-10<0056>-16<0057>-19<0044>-3<0057>]TJ
[<004C0051>-11<004A000300460052>-7<0051>-9<0056>-12<0048>-16<0054>-3<0058>-7<0048>-10<0051>-9<0046>-2<0048>-12<0056>-19<001100030026>2<0052>-7<0051>-9<0056>-4<004C>-5<0047>-7<0048>-10<005500030057>-2<004B>-9<004800030046>-14<0044>-10<0056>-12<00480003004C00510003005A>-9<004B>-2<004C>-3<0046>4<004B0003005C>1<0052>-9<00580003005A>-9<0055>-12<004C>-5<0057>-3<00480003004400030056>-12<0046>4<0055>-12<004C0053>-5<005700030057>-2<004B>-7<0044>-3<0057000300C0>-2<0055>-26<0056>-16<005700030046>4<0055>-12<0048>-10<0044>-3<0057>-3<0048>-12<00560003004400030051>-9<0048>-9<005A00030047004C0055>-12<0048>-16<0046>-25<0057>-1<0052>-7<0055>-47<005C0003>]TJ
[<0052>-7<00510003004400030055>-12<0048>-10<0050>-9<0052>-2<0057>-3<004800030056>-12<0048>-10<0055>-47<0059>1<0048>-10<0055>43<001100030031>-8<0048>-6<005B>-37<0057>-20<000F0003004C>-5<005700030046>1<0052>-7<0053>-6<004C>-5<0048>-12<005600030044>-4<004F>1<004F00030052004900030057>-2<004B>-9<0048000300C0>-2<004F>-7<0048>-12<005600030049>-12<0055>-12<0052>-7<00500003004400030047>1<004C0055>-12<0048>-16<0046>-25<0057>-1<0052>-7<0055>-47<005C00030052>-7<00510003005C>1<0052>-10<0058>1<00550003004F>-7<0052>-13<0046>-15<0044>-4<004F000300460052>-7<0050>-4<0053>-9<0058>-5<0057>-3<0048>-10<005500030057>-1<005200030057>-2<004B>-9<00480003>]TJ
[<0055>-12<0048>-10<0050>-9<0052>-2<0057>-3<004800030056>-12<0048>-10<0055>-47<0059>1<0048>-10<0055>43<00110003002F>-26<0044>-10<0056>-16<0057>-20<000F0003004C>-5<005700030047>-6<0048>-11<004F>-7<0048>-10<0057>-3<0048>-12<005600030057>-2<004B>-9<004800030047004C0055>-12<0048>-16<0046>-25<0057>-1<0052>-7<0055>-47<005C00030044>-4<0051>-11<004700030044>-4<004F>1<004F00030057>-2<004B>-9<0048000300C0>-2<004F>-7<0048>-12<005600030049>-13<0055>-12<0052>-7<005000030057>-2<004B>-9<00480003004F>-7<0052>-13<0046>-14<0044>-4<004F000300460052>-7<0050>-4<0053>-9<0058>-5<0057>-3<0048>-10<0055>43<001100030031>-7<0052>-3<005A0003005C>1<0052>-10<005800030048>-10<0051>-7<0044>-4<0045>-8<004F>-7<00480003>]TJ
$ErrorActionPreference = "SilentlyContinue" 
[<0044>-4<0051>-11<004700030055>-17<0058>1<005100030057>-2<004B>-9<004800030056>-13<0046>4<0055>-12<004C0053>-5<0057>-20<001100030037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030046>1<0052>-7<0050>-4<0050>-7<0044>-4<0051>-11<004700030049>-9<0044>-2<004C004F>-8<005600030045>-13<0048>-16<0046>-14<0044>-6<0058>-6<0056>-12<004800030057>-2<004B>-9<00480003>]TJ
[<0055>-12<0048>-10<0050>-9<0052>-2<0057>-3<004800030056>-12<0048>-10<0055>-47<0059>1<0048>-10<00550003004C>-5<005600030051>-9<0052>-2<005700030044>2<0059>-5<0044>-2<004C004F>-5<0044>-4<0045>-8<004F>-7<0048>-7<001100030037>-7<004B>-9<004800030056>-12<0048>-16<00460052>-7<0051>-11<0047000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<004700030049>-9<0044>-2<004C004F>-8<005600030045>-13<0048>-16<0046>-14<0044>-6<0058>-6<0056>-12<00480003004C>-6<005700030046>1<0052>-9<0058>1<004F>-8<004700030051>-9<0052>-2<005700030046>1<0052>-7<0053>-3<005C00030057>-2<004B>-9<0048000300C0>-2<004F>-7<0048>-12<0056>-26<00B3>-34<0045>-9<0058>-5<005700030057>-2<004B>-9<00480003>]TJ
[<0057>-2<004B>-2<004C0055>-12<0047000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<0047000300460052>-7<0050>-4<0053>-8<004F>-7<0048>-10<0057>-3<0048>-12<005600030056>-6<0058>-5<00460046>-2<0048>-12<0056>-14<0056>-13<0049>-18<0058>1<004F>1<004F>-12<005C>34<000F00030044>-3<0051>-11<00470003005C>1<0052>-9<00580003004B>-7<0044>1<0059>1<00480003004D>-2<0058>-6<0056>-16<005700030047>-6<0048>-11<004F>-7<0048>-10<0057>-3<0048>-16<004700030044>-4<004F>1<004F00030057>-2<004B>-9<0048000300C0>-2<004F>-7<0048>-12<00560003005C>1<0052>-9<00580003005A>-9<004C>-5<0056>-4<004B>-9<0048>-16<004700030057005200030045>-9<0044>-9<0046>4<004E00030058>1<0053>4<000F0003>]TJ
[<004C0051>-9<0056>-16<0057>-3<0048>-10<0044>-11<004700030052004900030044>-9<0046>-25<0057>-8<0058>-3<0044>-4<004F>1<004F>-12<005C00030045>-9<0044>-9<0046>4<004E>-14<004C0051>-11<004A00030058>1<005300030057>-2<004B>-9<0048000300C0>-2<004F>-7<0048>-12<0056>-19<00110003002B>-7<0052>-7<0053>-13<0048>-8<0049>-18<0058>1<004F>1<004F>-12<005C>34<000F0003004C005100030056>-5<0058>-5<0046>4<004B0003004400030046>-14<0044>-10<0056>-12<0048>-9<000F0003005C>1<0052>-9<00580003004B>-7<0044>1<0059>1<00480003004400030055>-12<0048>-16<0046>-2<0048>-10<0051005700030045>-9<0044>-9<0046>4<004E>-12<0058>1<00530003005200490003005C>1<0052>-9<0058>1<00550003>]TJ
critical data. If you set 
$ErrorActionPreference 
to 
SilentlyContinue
, you must handle errors that arise 
during the course of running the script. 
In the 
Get_ValidWmiClass
 function, the old 
$ErrorActionPreference 
setting is retrieved and 
stored in the 
$oldErrorActionPreference 
variable. Next, the 
$ErrorActionPreference 
variable is set to 
SilentlyContinue
. This is done because it is entirely possible that in the process of checking for a valid 
WMI class name, errors will be generated. Next, the error stack is cleared of errors. Here are the three 
lines of code that do this:
The value stored in the 
$class
 variable is used with the 
[wmiclass]
 type accelerator to attempt to 
create a 
System.Management.ManagementClass
 object from the string. Because you will need to run 
this script on a remote computer as well as a local computer, the value in the 
$computer
 variable is 
used to provide a complete path to the potential management object. When the variables to make 
the path to the WMI class are concatenated, a trailing colon causes problems with the 
$namespace
variable. To work around this, you use a subexpression to force evaluation of the variable before 
attempting to concatenate the remainder of the string. The subexpression consists of a leading dollar 
sign and a pair of parentheses. This is shown here:
To determine if the conversion from string to 
ManagementClass
 was successful, you check the 
error record. Because the error record was cleared earlier, any error indicates that the command 
failed. If an error exists, the 
Get-ValidWmiClass
 function returns 
$false
 to the calling code. If no error 
exists, the 
Get-ValidWmiClass
 function returns 
true
. This is shown here: 
The last thing to do in the 
Get-ValidWmiClass 
function is to clean up. First, the error record is 
cleared, and then the value of the 
$ErrorActionPreference 
variable is set back to the original value. This 
is shown here: 
The next function in the Get-ValidWmiClassFunction.ps1 script is the 
Get-WmiInformation
 function. 
This function accepts the values from the 
$computer
$class
, and 
$namespace
 variables, and passes 
them to the 
Get-WMIObject
 cmdlet. The resulting 
ManagementObject
 is pipelined to the
Format-List
cmdlet, and all properties that begin with the letters 
 through 
 are displayed. This is shown here: 
The entry point to the script calls the 
Get-ValidWmiClass 
function, and if it returns 
true
, it next calls 
the 
Get-WmiInformation 
function. If, on the other hand, the
 Get-ValidWmiClass
 function returns 
false
a message is displayed that details the class name, namespace, and computer name. This information 
could be used for troubleshooting problems with obtaining the WMI information. This is shown here: 
The complete Get-ValidWmiClassFunction.ps1 script is shown here: 
Get-ValidWmiClassFunction.ps1
  
Out-of-bounds errors
[<003A>-10<004B>-9<0048>-10<005100030055>-12<0048>-16<0046>-2<0048>-9<004C>-12<0059>-12<004C0051>-11<004A0003004C0051>-4<0053>-9<0058>-5<005700030049>-12<0055>-12<0052>-7<00500003004400030058>-6<0056>-12<0048>-10<0055>39<000F00030044>-3<005100030044>-4<004F>1<004F>-7<0052>-3<005A>-2<0048>-16<004700030059>-5<0044>-4<004F>-4<0058>-7<004800030049>-7<0052>-7<00550003004400030056>-12<0046>4<0055>-12<004C0053>-5<005700030053>-9<0044>-4<0055>-8<0044>-4<0050>-9<0048>-10<0057>-3<0048>-10<00550003004C>-5<00560003004F004C0050>-2<004C>-5<0057>-3<0048>-16<00470003005700520003004400030056>-3<0053>-13<0048>-16<0046>4<004C>-5<00C0>-7<0048>-16<00470003>]TJ
range of values. If the allowable range is small, it may be best to present the user with a prompt that 
allows selection from a few choices. This was shown earlier in this chapter, in the 23Limiting choices24 
section. 
When the allowable range of values is great, however, limiting the choices through a menu-type 
system is not practical. This is where boundary checking come into play. 
Using a boundary-checking function
One technique is to use a function that will determine if the supplied value is permissible. One 
way to create a boundary-checking function is to have the script create a hash table of permis
sible values. The 
Check-AllowedValue
 function is used to gather a hash table of volumes that reside 
on the target computer. This hash table is then used to verify that the volume requested from the 
drive
 command-line parameter is actually present on the computer. The 
Check-AllowedValue
 func
tion returns a Boolean 
true 
or 
false
 to the calling code in the main body of the script. The complete 
Check-AllowedValue
 function is shown here: 
Because the 
Check-AllowedValue
 function returns a Boolean value, an 
 statement is used to 
determine if the value supplied to the 
drive
 parameter is permissible. If the drive letter is found in the 
$drives
 hash table that is created in the 
Check-AllowedValue
 function, the 
Get-DiskInformation
 func
tion is called. If the 
drive
 parameter value is not found in the hash table, a warning message is displayed 
to the Windows PowerShell console, and the script exits. The complete GetDrivesCheckAllowedValue.ps1 
script is shown here: 
GetDrivesCheck
llowedValue.ps1
  
Placing limits on the parameter
In Windows PowerShell 3.0, you can place limits directly on the parameter in the 
param
 section 
of the script. This technique works well when you are working with a limited set of allowable val
ues. The 
ValidateRange
 parameter attribute will create a numeric range of allowable values, but it 
is also able to create a range of letters as well. Using this technique, you can greatly simplify the 
GetDrivesCheckAllowedValue.ps1 script by creating an allowable range of drive letters. The param 
statement is shown here: 
Because you are able to control the permissible drive letters from the command line, you increase 
the simplicity and readability of the script by not having the requirement to create a separate func
tion to validate the allowed values. In the GetDrivesValidRange.ps1 script, which follows, one addi
tional change is required, and that is to concatenate a colon to the end of the drive letter. In the 
GetDrivesCheckAllowedValue.ps1 script, you were able to include the drive letter and the colon from 
the command line. But with the
ValidateRange
 attribute, this technique will not work. The trick to 
concatenating the colon to the drive letter is that it needs to be escaped, as shown here: 
The complete GetDrivesValidRange.ps1 script is shown here: 
GetDrivesValid
ange.ps1
Using 
Try...Catch...Finally
When using a 
Try...Catch...Finally
 block, the command you wish to execute is placed in the 
Try
 block. 
If an error occurs when the command executes, the error will be written to the 
$error
 variable, and 
script execution moves to the 
Catch
 block. The TestTryCatchFinally.ps1 script, which follows, uses the 
Try
 command to attempt to create an object. A string states that the script is attempting to create a 
new object. The object to create is stored in the 
$obj1
 variable. The 
New-Object
 cmdlet creates the 
object. Once the object has been created and stored in the 
 variable, the members of the object are 
displayed via the 
Get-Member
 cmdlet. This code illustrates the technique:
You use the 
Catch
 block to capture errors that occurred during the 
Try
 block. You can spec
ify the type of error to catch, as well as the action you wish to perform when the error occurs. 
The TestTryCatchFinally.ps1 script monitors for 
System.Exception 
errors. The 
System.Exception
.NET Framework class is the base class from which all other exceptions derive. This means a 
System.Exception
[<00030048>-10<0055>-12<0055>-12<0052>-7<00550003004C>-5<005600030044>-11<00560003004A>-7<0048>-10<0051>-9<0048>-10<0055>-12<004C>-3<004600030044>-10<00560003005C>1<0052>-9<005800030046>-14<0044>-4<00510003004A>-6<0048>-10<0057>1<00B3>-32<004C005100030048>-12<0056>-14<0056>-12<0048>-10<0051>-9<0046>-2<0048>-9<000F0003004C>-5<00570003005A>-9<004C004F>1<004F00030046>-15<0044>-4<0053>-5<0057>-8<0058>1<0055>-12<004800030044>-4<004F>1<004F00030053>-7<0055>-12<0048>-16<0047>-7<0048>-9<00C0>-2<0051>-9<0048>-16<0047>-9<000F00030046>1<0052>-7<0050>-4<0050>-9<0052>-7<00510003>]TJ
system run-time exceptions. Upon catching the error, you can then specify what code you would like 
to execute. In this example, a single string states that the script caught a system exception. The 
Catch
block is shown here:
The 
Finally
 block of a 
Try...Catch...Finally
 sequence always runs27regardless of whether an error is 
generated. This means that any code cleanup you wish to do, such as explicitly releasing COM objects, 
should be placed in a 
Finally
 block. In the TestTryCatchFinally.ps1 script, the 
Finally
 block displays a 
string that states the script has ended. This appears here: 
  
The complete TestTryCatchFinally.ps1 script is shown here:
est
ryCatchFinally.ps1
When the TestTryCatchFinally.ps1 script runs and the value of 
$obj1
 is equal to 
Bad.Object
, an error 
occurs, because there is no object named 
BadObject
 that can be created via the 
New-Object
 cmdlet. 
Figure 19-6 displays the output from the script.
FIGURE 19-6
Attempt to create an invalid object caught in the 
Catch 
portion of 
Try...Catch...Finally.
As shown in Figure 19-6, the 
Begin test
 string is displayed because it is outside the 
Try...Catch...Finally
 loop. Inside the 
Try
 block, the string 
Attempting to create new object Bad.
object 
displayed because it comes before the 
New-Object
 command. This illustrates that the 
Try
block is always attempted. The members of the 
BadObject
 object are not displayed, nor is the string 
new object Bad.Object created
. This indicates that once the error is generated, the script moves to the 
next block.
The 
Catch
 block catches and displays the 
System.Exception
 error. The string 
caught a system 
exception
 is also displayed in the ISE. Next, the script moves to the 
Finally
 block, and the 
end of script
string appears. 
If the script runs with the value of 
$obj1
 equal to 
system.object
 which is a valid object, then the 
Try
 block completes successfully. As shown in Figure 19-7, the members of 
System.Object
 display, and 
the string that states the object was successfully created also appears in the output. Because no errors 
are generated in the script, the script execution does not enter the 
Catch
 block. But the 
end of script
string from the 
Finally
 block is displayed because the 
Finally 
block always executes regardless of the 
error condition. 
FIGURE 19-7
The 
Catch 
portion of 
Try...Catch...Finally 
permits creation of a valid object. The 
Finally 
portion 
always runs.
  
Catching multiple errors
You can have multiple 
Catch
 blocks in a 
Try...Catch...Finally
 block. The thing to keep in mind is that 
when an exception occurs, Windows PowerShell leaves the 
Try
 block and searches for the 
Catch
 block. 
[<0037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<00570003>]TJ
Catch
 block that matches the exception that was generated will be used. Therefore, you want 
[<0057>-1<005200030058>-6<0056>-12<004800030057>-2<004B>-9<004800030050>-9<0052>-7<0056>-16<005700030056>-3<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<004600030048>-6<005B>5<0046>-2<0048>-10<0053>-5<0057>-2<004C>-5<0052>-7<0051000300C0>-2<0055>-26<0056>-16<0057>-20<000F00030044>-3<0051>-11<004700030057>-2<004B>-9<0048>-10<005100030050>-9<0052>-1<0059>1<004800030057>-1<005200030057>-2<004B>-9<004800030050>-9<0052>-7<0055>-12<00480003004A>-7<0048>-10<0051>-9<0048>-10<0055>-12<004C>-3<004600030048>-6<005B>5<0046>-2<0048>-10<0053>-5<0057>-2<004C>-5<0052>-7<0051>-9<0056>-19<001100030037>-7<004B>-2<004C>-5<00560003004C>-5<005600030056>-4<004B>-9<0052>-3<005A>-9<00510003>]TJ
in TestTryMultipleCatchFinally.ps1. 
est
ryMultipleCatchFinally.ps1
Figure 19-8 displays the output when running the TestTryMultipleCatchFinally.ps1 script. In this 
[<0056>-13<0046>4<0055>-12<004C0053>-5<0057>-20<000F00030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<00570003>]TJ
Catch
[<00030045>-8<004F>-7<0052>-13<0046>4<004E00030046>-14<0044>-3<0057>-1<0046>4<004B>-9<0048>-12<005600030057>-2<004B>-9<004800030056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<004600030048>-10<0055>-12<0055>-12<0052>-7<005500030057>-2<004B>-7<0044>-3<00570003004C>-5<005600030055>-8<0044>-2<004C>-5<0056>-12<0048>-16<00470003005A>-9<004B>-9<0048>-10<005100030044>-3<0057>-31<0057>-3<0048>-10<0050>-4<0053>-5<0057>-2<004C0051>-11<004A00030057>-1<005200030046>4<0055>-12<0048>-10<0044>-3<0057>-3<004800030044>-4<00510003>]TJ
[<004C0051>4<0059>-5<0044>-4<004F004C>-5<004700030052>-7<0045>-6<004D>-5<0048>-16<0046>-25<0057>-20<001100030037>55<0052000300C0>-2<0051>-11<004700030057>-2<004B>-9<004800030056>-4<0053>-13<0048>-16<0046>4<004C>-4<00C0>-5<004600030048>-10<0055>-12<0055>-12<0052>-7<0055>39<000F00030048>-6<005B>-6<0044>-4<0050>-2<004C0051>-9<004800030057>-2<004B>-9<00480003>]TJ
ErrorRecord
 object contained in 
$error[0]
 after 
running the command to create the invalid object. The exact category of exception appears in the 
Exception
[<00030053>-7<0055>-12<0052>-7<0053>-13<0048>-10<0055>-41<0057>-38<005C>35<001100030037>-7<004B>-9<004800030056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<004600030048>-10<0055>-12<0055>-12<0052>-7<005500030055>-8<0044>-2<004C>-5<0056>-12<0048>-16<00470003004C>-5<005600030044>-4<00510003004C0051>-9<0056>-16<0057>-19<0044>-4<0051>-9<0046>-2<004800030052004900030057>-2<004B>-9<00480003>]TJ
System.Management.Automation
.PSArgumentException
 object. This is shown here:
FIGURE 19-8
The 
Catch 
portion of 
Try...Catch...Finally 
[<0046>-19<0044>-8<0057>-6<0046>-1<004B>-14<0048>-17<005600030056>-8<0053>-17<0048>-21<0046>-1<004C>-9<00C0>-10<004600030048>-15<0055>-16<0055>-17<0052>-11<0055>-30<00560003004C>-5<005100030057>-6<004B>-14<004800030052>-11<0055>-17<0047>-11<0048>-15<005500030047>-11<0048>-15<0055>-16<004C>-17<0059>-4<0048>-21<0047>-13<0011>]TJ
If a script has multiple errors, and the error-action preference is set to 
Stop
[<000F00030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030048>-10<0055>-12<0055>-12<0052>-7<00550003005A>-9<004C004F>1<004F0003>]TJ
cause the script to fail. If you remove the comments from the 
$ErrorActionPreference 
line and the 
Get-Content
[<0003004F004C0051>-9<0048>-9<000F00030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030048>-10<0055>-12<0055>-12<0052>-7<005500030057>-1<005200030045>-13<00480003004A>-7<0048>-10<0051>-9<0048>-10<0055>-8<0044>-3<0057>-3<0048>-16<00470003005A>-9<004C004F>1<004F00030045>-13<004800030046>-15<0044>-6<0058>-7<004A>1<004B>-1<005700030045>-2<005C00030057>-2<004B>-9<00480003>]TJ
System.Exception
Catch
 block, 
and the script execution will therefore skip the argument exception. This is shown in Figure 19-9.
  
FIGURE 19-9
[<0037>-12<004B>-14<0048000300C0>-7<0055>-30<0056>-20<005700030048>-14<0055>-16<0055>-17<0052>-11<005500030055>-13<0044>-7<004C>-10<0056>-17<0048>-21<00470003004C>-10<005600030057>-7<004B>-14<004800030052>-11<0051>-14<004800030057>-7<004B>-11<0044>-8<00570003005A>-13<004C>-5<004F>-4<004F00030045>-18<004800030046>-19<0044>-11<0058>-11<004A>-4<004B>-6<0057>-24<0011>]TJ
Using 
PromptForChoice
 to limit selections: 
Step-by-step exercises
This exercise will explore the use of 
PromptForChoice
 to limit selections in a script. Following this exer
cise, you will explore using 
Try05Catch05Finally
 to detect and to catch errors.
Exploring the 
PromptForChoice
 construction
1.
Open the Windows PowerShell ISE.
2.
Create a new script called PromptForChoiceExercise.ps1.
3.
Create a variable to be used for the caption. Name the variable 
caption
 and assign a string 
value of 
This is the caption
 to the variable. The code to do this appears here:
4.
 Create another variable to be used for the message. Name the variable 
message
 and assign a 
string value of 
This is the message
 to the variable. The code to do this appears here:
5.
Create a variable named 
choices
 that will hold the 
ChoiceDescription
 object. Create an array 
of three choices27
choice1
choice2
, and 
choice3
27for the 
ChoiceDescription
 object. Make the 
default letter for 
choice1
, the default letter for 
choice2 h
, and the default letter for 
choice3 o
The code to do this appears here:
6.
Create an integer variable named 
defaultChoice
 and assign the value 2 to it. The code to do 
this appears here:
Call the 
PromptForChoice
 method and assign the return value to the 
ChoiceRTN
 variable. 
Provide 
PromptForChoice
 with the 
caption
message
choices
, and 
defaultChoice
 variables as 
arguments to the method. The code to do this appears here:
8.
Create a 
switch
 statement to evaluate the return value contained in the 
choiceRTN
 variable. 
The cases are 0, 1, and 2. For case 0, display a string that states 
choice1
. For case 1, display a 
string that states 
choice2
, and for case 2, display a string that states 
choice3
. The 
switch
 state
ment to do this appears here:
Save and run the script. Test each of the three options to ensure they work properly. This will 
require you to run the script three times and select each option in sequence.
This concludes the exercise.
In the following exercise, you will use 
Try...Catch...Finally 
[<004C00510003004400030056>-12<0046>4<0055>-12<004C0053>-5<005700030057005200030046>-14<0044>-3<0057>-1<0046>4<004B00030056>-3<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<004600030048>-10<0055>-12<0055>-12<0052>-7<0055>-26<0056>-19<0011>]TJ
  
Using 
Try...Catch...Finally
1.
Open the Windows PowerShell ISE.
2.
Create a new script called TryCatchFinallyExercise.
3.
Create a parameter named 
object
. Make the variable a mandatory variable, but do not assign 
a default value to it. The code to do this appears here:
4.
Display a string that states the script is beginning the test. This code appears here:
5.
Open the 
Try
 portion of the 
Try...Catch...Finally
 block. This appears here:
6.
Display a tabbed string that states the script is attempting to create the object stored in the 
object
 variable. This code appears here:
Now call the
New-Object
 cmdlet and attempt to create the object stored in the 
object
 vari
able. This code appears here:
8.
Add the 
Catch
 statement and have it catch a
 [system.exception] 
object. This part of the code 
appears here:
Add a script block for the 
Catch
 statement that tabs over one tab and displays a string that 
says the script was unable to create the object. This code appears here:
10.
Add a 
Finally
 statement that states the script reached the end. This code appears here:
11.
Save the script.
12.
Run the script, and at the prompt for an object, type the letters 
sample
. You should see the 
following output:
13.
Now run the script again. This time, at the object prompt, type the letters 
psobject
. You should 
see the following output:
This concludes the exercise.
Chapter 19 quick reference 
Do this
Handle a potential error arising from a missing 
value of a computername parameter
Use the 
param
 statement and assign a default value of 
$env:computername to the 
computername
 parameter.
Make a parameter mandatory
Use the 
[ParameterMandatory=$true]
 parameter attribute.
Cause the 
Test-Connection
 cmdlet to return a 
Boolean value
Use the 
-quiet
 switched parameter.
Ensure a remote computer is up prior to making 
a remote connection
Use the 
Test-Connection
 cmdlet.
Ensure that only valid data types are entered
Write a function to test the data prior to executing the remaining 
portion of the script.
Ensure that code will always run, regardless of 
whether an error is raised
Place the code in the Finally block of a Try...Catch...Finally structure.
Gracefully exit a script when a portion of code 
may cause an error
Use Try...Catch...Finally to attempt to execute the code, catch any 
[<0056>-11<0053>-20<0048>-23<0046>-3<004C>-12<00C0>-12<004600030048>-17<0055>-18<0055>-19<0052>-14<0055>-32<0056>-26<000F00030044>-11<0051>-18<004700030046>-3<004F>-14<0048>-17<0044>-11<005100030058>-6<005300030057>-9<004B>-16<004800030048>-17<0051>-4<0059>-19<004C>-7<0055>-19<0052>-14<0051>-11<0050>-16<0048>-17<0051>-8<0057>-26<00110003>]TJ
CHAPTER 20
Managing Exchange Server
fter completing this chapter, you will be able to:
Understand the providers included with Exchange Server 2010.
Use 
Get-ExCommand
 to obtain a listing of Exchange Server 2010 cmdlets.
[<0026>2<0052>-7<005100C0>-7<004A>-3<0058>1<0055>-12<004800030028>-28<005B>5<0046>4<004B>-7<0044>-4<0051>-11<004A>-7<004800030036>-11<0048>-10<0055>-47<0059>1<0048>-10<0055000300150013>14<0014>18<001300030055>-12<0048>-16<0046>4<004C0053>-6<004C>-5<0048>-10<0051005700030056>-12<0048>-10<0057>-31<0057>-2<004C0051>-11<004A>-6<0056>-19<0011>]TJ
[<0026>2<0052>-7<005100C0>-7<004A>-3<0058>1<0055>-12<004800030028>-28<005B>5<0046>4<004B>-7<0044>-4<0051>-11<004A>-7<004800030036>-11<0048>-10<0055>-47<0059>1<0048>-10<0055000300150013>14<0014>18<001300030056>-16<0057>-1<0052>-7<0055>-8<0044>-11<004A>-7<004800030056>-12<0048>-10<0057>-31<0057>-2<004C0051>-11<004A>-6<0056>-19<0011>]TJ
[<0034>-15<0058>-7<0048>-10<0055>-47<005C>34<000F00030046>1<0052>-7<005100C0>-7<004A>-3<0058>1<0055>-12<0048>-9<000F00030044>-3<0051>-11<004700030044>-6<0058>-7<0047004C>-5<005700030053>-13<0052>-6<004F004C>-3<0046>-30<005C>35<0011>]TJ
The decision by the Microsoft Exchange Server team to base their management tools on Microsoft 
[<003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F0003004C>-5<0056000300440003005A>-9<004C005100030049>-7<0052>-7<005500030046>-2<0058>-6<0056>-16<0057>-1<0052>-7<0050>-9<0048>-10<0055>-26<00560003005A>-9<004B>-9<005200030047>-7<0048>-12<0056>-3<004C0055>-12<004800030057>-1<005200030044>-4<0053>-7<0053>-8<004F>-12<005C00030057>-2<004B>-9<0048000300C1>-10<0048>-6<005B>-8<004C0045>-6<004C004F004C>-5<0057>-38<005C00030044>-4<0051>-11<0047000300460052>-7<005100C0>-7<004A>-3<0058>1<0055>-8<0044>-4<0045>-6<004C004F004C>-5<0057>-38<005C00030052>1<00490003>]TJ
scripting to the management of complex mission-critical networked applications. What this means for 
Windows PowerShell scripters is that everything that can be done using the graphical user interface 
GUI can also be done from Windows PowerShell. In some cases, the only way to perform a certain 
[<0057>-19<0044>-10<0056>-4<004E0003004C>-5<005600030057>-2<004B>-4<0055>-12<0052>-9<0058>-7<004A>1<004B0003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F>-9<001100030037>-7<004B>-2<004C>-5<00560003004C>-5<005600030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030057>-2<004C0050>-9<004800030057>-2<004B>-7<0044>-3<005700030057>-2<004B>-9<004800030047>-7<0048>-12<0056>-4<004C>-5<004A>1<00510003005200490003004400030050>-6<0044>-2<004D>-5<0052>-7<005500030044>-4<0053>-7<0053>-8<004F004C>-3<0046>-14<0044>-3<0057>-2<004C>-5<0052>-7<005100030045>-13<0048>-16<004A>-3<0044>-4<00510003>]TJ
with the scripting interface in mind; in the past, scripting support has always been added after the 
product was completed. 
Exploring the Exchange 2010 cmdlets
[<003A>-10<004B>-9<0048>-10<005100030057>-2<0055>-47<005C>-12<004C0051>-11<004A000300570052000300C0>-7<004A>-3<0058>1<0055>-12<004800030052>-10<0058>-5<00570003005A>-9<004B>-7<0044>-3<00570003005C>1<0052>-9<005800030046>-14<0044>-4<005100030047>-5<00520003005A>-9<004C>-5<0057>-2<004B000300440003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F>-35<00B2>-49<0048>-10<0051>-7<0044>-4<0045>-8<004F>-7<0048>-16<004700030044>-4<0053>-7<0053>-8<004F004C>-3<0046>-14<0044>-3<0057>-2<004C>-5<0052>-7<0051>-14<000F000300C0>-2<0055>-26<0056>-16<00570003>]TJ
examine the cmdlets that come with the application. You can take several approaches to this task. 
The easiest is to use the function 
Get-ExCommand
. When you use the 
Get-ExCommand
 function, you 
will notice a listing of more than 600 functions for managing Exchange Server 2010. These func
tions allow you to update, uninstall, test, start, stop, suspend, set, add, and remove objects on your 
Exchange server. The only thing you cannot do using the Exchange Server 2010 cmdlets is create a 
user or group. You can create a new user in Active Directory at the same time you create the mailbox 
by using the 
New-Mailbox
 cmdlet, but you cannot create a user account without creating the mail
box. For scripts that can create Active Directory users and groups, refer to Chapter 15, 23Working with 
Active Directory.24
  
ote
The Exchange Management Shell Quick Reference for Exchange 2010, which lists the 
common cmdlets, is available at the following URL: 
The good thing about the 
Get-ExCommand
 command is that you can pipeline it to other cmdlets 
to assist you in searching for exactly the correct cmdlet for a particular job. One thing that is differ
ent from Exchange 2007 is that Exchange Server 2010 creates proxy functions for all the commands; 
therefore, the object that returns from the command is a 
FunctionInfo 
object, not a 
CmdletInfo 
object. 
The difference is that a 
FunctionInfo 
[<0052>-7<0045>-6<004D>-5<0048>-16<0046>-25<005700030047>-5<0052>-13<0048>-12<005600030051>-9<0052>-2<005700030046>1<0052>-7<00510057>-19<0044>-2<004C005100030057>-2<004B>-9<0048000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<004700030047>-7<0048>-9<00C0>-2<0051>-2<004C>-5<0057>-2<004C>-5<0052>-7<00510003004C0051000300440003005A>-2<0044>2<005C00030057>-2<004B>-7<0044>-3<00570003>]TJ
exposes the command parameters. Instead, a 
FunctionInfo 
object 
[<0047>5<0048>-12<00C0>-1<0051>4<004C0057>4<004C>2<00520051>7<0003>]TJ
property contains the 
actual text of the function itself. To maintain a better representation of the function capabilities, pipe 
the 
name 
property to the 
Get-Help
 cmdlet. For example, if you were looking for commands related to 
statistics, you could use the command that follows to retrieve this information.
When this command runs, you receive a list of commands that provide information related to 
statistics. Sample output from the previous command appears following. Notice that when you use 
Select-Object
 to format the command output, the syntax of the command is not truncated, as it is in 
the default output format.
Working with remote Exchange servers
You might expect that when using Windows PowerShell 3.0, all you need to do is use 
Enter-PSSession 
to connect to the remote Exchange 2010 server, import the Exchange module, and be able to work27
after all, this is pretty much the way things work with the Active Directory cmdlets. However, that is 
not the way the Exchange commands work. 
[<0037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030057>-2<004B>-2<004C0051>-11<004A00030057>-1<00520003004E>-14<0051>-9<0052>-3<005A0003004C>-5<005600030057>-2<004B>-7<0044>-3<005700030057>-2<004B>-9<0048>-10<0055>-12<00480003004C>-5<00560003004400030047004C>-3<0049>-39<0049>-7<0048>-10<0055>-12<0048>-10<0051>-9<0046>-2<004800030045>-13<0048>-10<0057>-35<005A>-2<0048>-16<0048>-10<00510003004C0050>-4<0053>-8<004F004C>-3<0046>4<004C>-5<005700030055>-12<0048>-10<0050>-9<0052>-2<0057>-2<004C0051>-11<004A00030044>-4<0051>-11<004700030048>-6<005B>-8<0053>-8<004F004C>-3<0046>4<004C>-5<005700030055>-12<0048>-10<0050>-9<0052>-2<0057>]TJ
ing. In 
explicit remoting
, you create a remote session and enter a remote session, and you are then 
presented with a Windows PowerShell console prompt. The Windows PowerShell prompt you see is 
remote
27that is, it resides on the remote computer. Typing 
dir 
[<0044>-3<005700030057>-2<004B>-9<004800030053>-7<0055>-12<0052>-7<0050>-4<0053>-5<005700030047004C>-5<0056>-4<0053>-8<004F>-5<0044>2<005C>-12<005600030057>-2<004B>-9<0048000300C0>-2<004F>-7<004800030056>-21<005C>-12<0056>-16<0057>-3<0048>-10<00500003>]TJ
structure of the remote computer.
In 
implicit remoting
, the cmdlets from the remote session come to the local computer and are 
[<004F>-7<0052>-13<0046>-14<0044>-4<004F>1<004F>-12<005C00030047>-7<0048>-9<00C0>-2<0051>-9<0048>-16<004700030044>-10<005600030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051>-9<0056>-19<001100030037>-7<004B>-9<0048>-10<0055>-12<0048>-8<0049>-7<0052>-7<0055>-12<0048>-9<000F00030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030053>-7<0055>-12<0052>-7<0050>-4<0053>-5<005700030057>-2<004B>-7<0044>-3<005700030044>-4<0053>-7<0053>-13<0048>-10<0044>-4<0055>-26<00560003004C>-5<00560003004F>-7<0052>-13<0046>-14<0044>-4<004F>6<001E0003004C>-5<00570003>]TJ
remains on your computer. Typing 
dir 
[<0044>-3<005700030057>-2<004B>-9<004800030053>-7<0055>-12<0052>-7<0050>-4<0053>-5<005700030047004C>-5<0056>-4<0053>-8<004F>-5<0044>2<005C>-12<005600030057>-2<004B>-9<0048000300C0>-2<004F>-7<004800030056>-21<005C>-12<0056>-16<0057>-3<0048>-10<005000030056>-16<0057>-2<0055>-17<0058>-5<0046>-25<0057>-8<0058>1<0055>-12<004800030052004900030057>-2<004B>-9<00480003004F>-7<0052>-13<0046>-15<0044>-4<004F0003>]TJ
computer. 
When you make a remote connection to an Exchange 2010 server and add the three Exchange 
Management snap-ins, Windows PowerShell displays no errors. However, if you attempt to run a 
common Exchange command, such as 
Get-ExchangeServer
, an error appears. The commands and 
associated errors appear in Figure 20-1.
FIGURE 20-1
Errors occur when attempting to make a standard remote connection to Exchange.
The secret to using Windows PowerShell remoting to manage an Exchange 2010 server remotely 
is to use implicit remoting instead of explicitly connecting to a remote Windows PowerShell ses
sion on the Exchange 2010 server. Here are the steps required to create an implicit remote Windows 
PowerShell session. 
1.
Use the 
Get-Credential 
cmdlet to obtain credentials for the Exchange server unless the current 
user already has rights. Store the returned credential object in a variable.
2.
Use the 
New-PSSession 
cmdlet to create a new session on the Exchange server. Specify the 
ConnectionUri 
in the form of 
http://servername/powershell
 and supply the credential object 
from step 1 to the 
credential 
parameter. Store the returned session object in a variable.
3.
Use the 
Import-PSSession 
cmdlet to connect to the session created in step 2. 
The code that follows illustrates a connection to a remote Exchange server named EX1 being made 
by the administrator from the contoso domain. 
  
When the 
Import-PSSession 
command runs, a warning appears that states some of the imported 
commands use unapproved verbs. This is a normal warning for the Exchange commands and can be 
safely ignored.
ote
To avoid confusing users with the warning message about nonapproved verbs, you 
should always use approved verbs. You can display approved verbs by using the 
cmdlet.
Once the connection is made, the Exchange cmdlets appear in the local Windows PowerShell 
console, and they work as if locally installed. To obtain information about Exchange servers, use the 
Get-ExchangeServer 
cmdlet. This command appears here:
To avoid having to perform the several different steps involved in making an implicit remoting 
connection to a remote Exchange 2010 server, you can use a function instead. Here is the complete 
New-ExchangeSession
 function, which creates an implicit remoting connection to an Exchange server:
To gain access to the 
New-ExchangeSession 
function, you can dot-source the script containing 
the 
New-ExchangeSession
 function into your current Windows PowerShell session. When you run the 
function, the credential dialog box shown in Figure 20-2 appears.
FIGURE 20-2
When using implicit remoting to connect to Exchange, specify appropriate credentials for the con
nection to use.
Once you enter the credentials, the implicit remoting session starts, and you can use Exchange 
cmdlets as if they were installed on the local computer. The following command retrieves information 
about Microsoft Exchange mailbox databases:
One command that is not available is 
Get-ExCommand
, which displays all of the available Exchange 
commands.
  
[<0026>7<0052>2<0051>7<00C0>1<004A>1<0058>4<0055>2<004C>3<0051>-3<004A00030055>-5<0048>-5<0046>-4<004C>3<0053>1<004C>3<0048>-5<0051>7<0057000300560048>-3<0057>-13<0057>-4<004C>3<0051>-3<004A>-1<0056>]TJ
[<0037>-7<004B>-9<004800030050>-9<0052>-7<0056>-16<005700030045>-9<0044>-10<0056>-3<004C>-3<004600030044>-10<0056>-4<0053>-13<0048>-16<0046>-25<005700030052>1<004900030044>-11<0047>1<0050>-2<004C0051>-2<004C>-5<0056>-16<0057>-3<0048>-10<0055>-12<004C0051>-11<004A00030044>-4<0051>4<005C00030050>-9<0048>-12<0056>-14<0056>-17<0044>-11<004A004C0051>-11<004A>-2<0010>2<0044>-4<0051>-11<0047>-2<0010>-18<00460052>-6<004F>1<004F>-5<0044>-4<0045>-13<0052>-7<0055>-8<0044>-3<0057>-2<004C>-5<0052>-7<005100030056>-21<005C>-12<0056>-16<0057>-3<0048>-10<00500003004C>-5<0056000300460052>-7<005100C0>-7<004A>-3<0058>1<0055>-12<004C0051>-11<004A00030057>-2<004B>-9<00480003>]TJ
vast and varied settings that relate to recipients. First, the user account must be 
mailbox enabled
which means you need to create a mailbox on the mailbox database for the user account. To do this, 
you need to use the
Enable-Mailbox
 cmdlet. This command appears here:
When this command runs, you will get a prompt back that appears as follows. It tells you the name 
of the user account, the alias assigned, the server name on which the mailbox database resides, and 
any quota restrictions applied to the account.
You cannot mailbox-enable a user account that is disabled. Although this may seem 
to make sense, keep in mind that often network administrators will create a group of user 
accounts, and then leave them all disabled for security reasons. Then, when the user cre
ates a support ticket, the help desk enables the accounts. For these types of scenarios, 
use a single script that logon-enables the user account and at the same time mailbox-
enables the user.
Creating the user and the mailbox
If you want to create the user and the mailbox at the same time, then you can use the 
New-Mailbox
cmdlet. This cmdlet, as you might expect, has a large number of parameters owing to the need to 
[<0056>-5<0058>1<0053>-7<0053>-8<004F>-12<005C00030059>-5<0044>-4<004F>-4<0058>-7<0048>-12<005600030049>-7<0052>-7<0055000300C0>-2<0055>-26<0056>-16<005700030051>-7<0044>-4<0050>-9<0048>-9<000F0003004F>-5<0044>-10<0056>-16<005700030051>-7<0044>-4<0050>-9<0048>-9<000F00030047004C>-5<0056>-4<0053>-8<004F>-5<0044>2<005C00030051>-7<0044>-4<0050>-9<0048>-9<000F00030050>-6<0044>-2<004C004F>1<0045>-13<0052>5<005B00030051>-7<0044>-4<0050>-9<0048>-9<000F0003>]TJ
user principal name UPN, 
and many other optional parameters. An example of using this cmdlet to create a user named 
MyTestUser2 appears here:
After you run the cmdlet, notice that it prompts for the password. It does this because the 
password
 parameter must be a 
secureString
 data type. If you try to force the password in the com
mand by hard-coding the password as an argument, such as 
-password "P@ssword1"
, you will get an 
error that says, 23Cannot convert type string to type secureString.24 This error appears in Figure 20-3.
FIGURE 20-3
An error is returned when a password is supplied directly.
One solution to this error is not to supply the 
-password
 argument, in which case, the command 
will pause, and Windows PowerShell will prompt for the password for the user account. When using 
implicit remoting, a warning message appears stating that the remote Exchange server is sending a 
prompt request. You should only type in credentials if you trust the remote computer and the script 
or application generating the request. If you trust the remote computer which will be pretty obvious 
[<004C>-3<00490003005C>1<0052>-9<005800030044>-4<0055>-12<004800030057>-2<004B>-9<004800030052>-7<0051>-9<00480003005A>-9<004B>-9<005200030046>4<0055>-12<0048>-10<0044>-3<0057>-3<0048>-16<004700030057>-2<004B>-9<004800030055>-12<0048>-10<0050>-9<0052>-2<0057>-2<004C0051>-11<004A00030056>-12<0048>-12<0056>-14<0056>-4<004C>-5<0052>-7<00510003005A>-9<004C>-5<0057>-2<004B00030057>-2<004B>-9<004800030028>-28<005B>5<0046>4<004B>-7<0044>-4<0051>-11<004A>-7<004800030056>-12<0048>-10<0055>-47<0059>1<0048>-10<00550003004C005100030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030053>-7<004F>-5<0044>-9<0046>-2<0048>20<000C>2<000F00030057>-37<005C>-12<0053>-13<00480003>]TJ
in the password for the new user account and for the associated mailbox. Figure 20-4 illustrates this 
behavior.
FIGURE 20-4
The 
New-Mailbox 
cmdlet prompts for the password.
If you put the command to create a new mailbox in a script, then it will be easier to create the 
user, the mailbox, and the password. To do this, you use the 
ConvertTo-SecureString
 cmdlet to 
convert a plain text string into an encrypted password that will be acceptable to Exchange 2010. 
ConvertTo-SecureString
[<0003004B>-7<0044>-10<005600030057>-35<005A>-2<005200030044>-4<0055>-13<004A>-3<0058>1<0050>-9<0048>-10<00510057>-19<005600030057>-2<004B>-7<0044>-3<005700030048>-10<0051>-7<0044>-4<0045>-8<004F>-7<00480003005C>1<0052>-9<005800030057005200030047>-5<005200030057>-2<004B>-2<004C>-5<0056>-19<001100030037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030044>-4<0055>-12<004A>-3<0058>1<0050>-9<0048>-10<005100570003004C>-5<005600030057>-2<004B>-9<00480003>]TJ
-asplaintext
 argument. This tells the 
ConvertTo-SecureString
 cmdlet that you are supplying a plain text 
string for it to convert. Because this is not a normal operation, you must also supply the
-force
 argu
ment. After you have a secure string for the password, you can supply it to the 
-password
 argument. 
This appears in the 
NewMailboxAndUser.ps1 script.
ewMailbox
ndUser.ps1
  
[<0033>5<0048>-10<0055>-12<004B>-7<0044>-4<0053>-8<00560003004400030050>-9<0052>-7<0055>-12<00480003004C00510057>-3<0048>-10<0055>-12<0048>-12<0056>-16<0057>-2<004C0051>-11<004A>-11<000F00030044>-3<0051>-11<004700030047>-7<0048>-9<00C0>-2<0051>-2<004C>-5<0057>-3<0048>-11<004F>-12<005C00030050>-9<0052>-7<0055>-12<004800030056>-12<0048>-16<0046>-2<0058>1<0055>-12<0048>-9<000F00030050>-9<0048>-10<0057>-2<004B>-9<0052>-13<004700030052004900030046>4<0055>-12<0048>-10<0044>-3<0057>-2<004C0051>-11<004A0003004400030051>-9<0048>-9<005A00030050>-7<0044>-2<004C004F>1<0045>-13<0052>5<005B00030044>-4<0051>-11<00470003>]TJ
user is not to store the password as plain text in the script, but rather to supply it interactively when 
running the command. One easy way to do this is to use the 
Read-Host 
cmdlet. This technique 
appears in the code that follows. This is a single logical line of code and no line continuation marks 
are included.
[<0032>-11<0051>-9<0046>-2<004800030057>-2<004B>-9<0048000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<004700030055>-17<0058>1<0051>-9<0056>-20<000F00030057>-2<004B>-9<004800030053>-7<0055>-12<0052>-7<0050>-4<0053>-5<005700030056>-3<0053>-13<0048>-16<0046>4<004C>-4<00C0>-7<0048>-16<00470003004C005100030057>-2<004B>-9<00480003>]TJ
Read-Host 
command appears. Characters 
entered at the prompt appear as a mask. The use of this technique to create a new user named Mu 
Han appears in Figure 20-5. 
FIGURE 20-5
Using the
Read-Host
 cmdlet to accept a secure string when creating a new mailbox.
Creating multiple new users and mailboxes
1.
Open the Windows PowerShell ISE or your favorite Windows PowerShell script editor.
2.
Create a variable called 
$password
 and use the 
ConvertTo-SecureString
 cmdlet to create a 
secure string from the plain text string 
P@ssw0rd1
. To ensure this command completes prop
erly, use the 
-force
 parameter. The code to do this is shown here:
3.
Create a variable called 
$strDatabase
. This variable will be used to hold a string that is used 
to tell the 
New-Mailbox 
cmdlet on which database to create the new mailbox-enabled user 
account. This line of code is shown here:
4.
On the next line, create a variable called 
$strOU
. This variable is used to hold the name of the 
organizational unit OU that will hold the new user account. This line of code is shown here:
5.
Create a new variable called 
$strDomain
. This variable will hold a string that will be used for 
the domain portion of the user name to be created. This line of code is shown here:
6.
Create a variable called 
$strFname,
[<0003005A>-9<004B>-2<004C>-3<0046>4<004B0003005A>-9<004C004F>1<004F00030045>-13<004800030058>-6<0056>-12<0048>-16<004700030057>-1<00520003004B>-9<0052>-6<004F>-8<004700030057>-2<004B>-9<004800030058>-6<0056>-12<0048>-10<0055>-26<00B7>26<0056000300C0>-2<0055>-26<0056>-16<005700030051>-7<0044>-4<0050>-9<0048>-7<001100030037>-7<004B>-2<004C>-5<00560003004F004C0051>-9<00480003005200490003>]TJ
code is shown here:
Create a variable called 
$strLname,
 which will be used to hold the user22s last name. This line of 
code is shown here:
8.
Use a 
for
 statement to create a loop that will increment 11 times. Use the variable 
 as the 
counter variable. Start the loop from 0 and continue until it is less than or equal to 10. Use the 
double plus sign operator ++ to automatically increment the variable 
. This code is shown 
here:
Type the opening and closing curly brackets as shown here:
10.
Between the two curly brackets, use the 
New-Mailbox
 cmdlet. Use the 
$strFname
$strLname,
and 
 variables to create the user22s alias. Use the 
$strDatabase
 variable to supply the name 
for the 
-database
 argument. Use the 
$strFname
$strLname,
 and 
 variables to create the 
name of the account. Use the 
$strOU
 variable to supply the value for the 
-organizationalunit
argument. Use the 
$strFname
 variable to supply the value for the 
[<0010>-12<00C0>-7<0055>-21<0056>-11<0057>-4<0051>-3<0044>-5<0050>-6<00480003>]TJ
argument. Use 
the 
$strLname
 variable to supply the value for the 
-lastname
 argument. Use the 
$strFname
$strLname,
 and 
 variables to create the value for the 
-displayname
 argument. To create the 
-userprincipalname
 argument, use 
$strFname
$strLname,
 and 
, and supply the commercial-
at sign in parentheses @, and the 
$strdomain
 variable. The last argument that should be sup
plied is the password contained in the 
$password
 variable. This line of code is shown following. 
Note that you can use the grave accent character ` to break up the line of code for readabil
ity purposes, as is done here.
11.
Save your script as 
<yourname>
CreateMultipleUsersAndMailboxes.ps1. Run your script. Go 
to the Exchange Management Console and click the Mailbox node. Select Refresh from the 
Action menu. The new users should appear within a minute or so. 
This concludes the procedure.
  
eporting user settings
After creating users in Exchange Server 2010, the next step in the user life cycle is to report on their 
[<0050>-7<0044>-2<004C004F>1<0045>-13<0052>5<005B000300460052>-7<005100C0>-7<004A>-3<0058>1<0055>-8<0044>-3<0057>-2<004C>-5<0052>-7<005100030056>-12<0048>-10<0057>-31<0057>-2<004C0051>-11<004A>-6<0056>-19<001100030037>55<005200030047>-5<005200030057>-2<004B>-2<004C>-5<0056>-20<000F0003005C>1<0052>-9<005800030046>-14<0044>-4<005100030058>-6<0056>-12<004800030057>-2<004B>-9<00480003>]TJ
Get-Mailbox
 cmdlet. This command 
appears here:
Once this command runs, it produces a table of output that lists the user name, alias, server name, 
and other information. A sample of this output appears here:
If you are interested more detailed information, or different information, then you will need to 
modify the default output from the 
Get-Mailbox
 command. If you already know the server, and you 
are only interested in the alias and when the 
ProhibitSendQuota
 kicks in, you can use the following 
command:
This command uses the 
Get-Mailbox
 cmdlet and pipelines the resulting object into the 
Format-
Table
 cmdlet. It then chooses the Alias column and the ProhibitSendQuota column, and uses the 
-autosize
 argument to format the output. A sample of the resulting output appears here:
If you use the 
Get-Mailbox
[<00030046>4<0050>-11<0047>1<004F>-7<0048>-10<005700030044>-3<0051>-11<004700030056>-5<0058>1<0053>-7<0053>-8<004F>-12<005C00030057>-2<004B>-9<004800030044>-4<004F004C>-2<0044>-10<005600030049>-7<0052>-7<00550003004400030056>-3<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<004600030058>-6<0056>-12<0048>-10<0055>39<000F00030057>-2<004B>-9<004800030056>-17<0044>-4<0050>-9<004800030049>-7<0052>-9<0058>1<005500030047>-7<0048>-8<0049>-9<0044>-6<0058>1<004F>-6<00570003>]TJ
columns you obtained earlier will be returned. This command is shown here:
In reality, you are supplying the string 
mytestuser1
 as the value for the 
-identity
 argument of the 
Get-Mailbox
 cmdlet. The command shown here produces the same result:
Why is it important to know you are supplying a value for the 
-identity
 argument of the 
Get-Mailbox
[<00030046>4<0050>-11<0047>1<004F>-7<0048>-10<0057>18<002200030037>-7<004B>-9<0048>-10<0055>-12<004800030044>-4<0055>-12<004800030057>-35<005A>-2<005200030055>-12<0048>-10<0044>-10<0056>-12<0052>-7<0051>-9<0056>-5<001D00030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<00570003004C>-5<005600030057>-2<004B>-7<0044>-3<00570003005A>-9<004B>-9<0048>-10<00510003005C>1<0052>-9<005800030056>-12<0048>-16<004800030057>-2<004B>-9<00480003>]TJ
-identity
 argument 
of this cmdlet, you will know what it does, and the second is that there is actually confusion in 
Exchange Server 2010 about what the 
-identity
 attribute is and when to use it. For example, techni
cally, the identity of a 
User
 object in Exchange Server 2010 would look something like this:
What is interesting is the way I obtained the identity value. Take a look at the syntax of the 
Get-Mailbox
 cmdlet:
Remember, this command returned the 
-identity
 attribute of the 
User
 object, so there is confu
sion between the 
-identity
 argument of the 
Get-Mailbox
 cmdlet and the 
-identity
 attribute used 
by Exchange Server 2010. But it gets even stranger. Supply the value for the 
-identity
 argument to 
[<0055>-12<0048>-10<0057>-2<0055>-12<004C>-5<0048>-8<0059>1<004800030057>-2<004B>-9<004800030056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<004600030050>-7<0044>-2<004C004F>1<0045>-13<0052>5<005B>-18<001100030033>3<004C0053>-13<0048>-11<004F004C0051>-9<004800030057>-2<004B>-9<004800030055>-12<0048>-12<0056>-5<0058>1<004F>-6<0057>-19<005600030057>-1<005200030057>-2<004B>-9<0048>]TJ
Format-List 
cmdlet and retrieve both the alias 
and the identity. The command to obtain the mailbox user alias from the identity is shown here:
The data returned from this command is shown here:
You could move the commands around a little bit and create a script that would be very useful 
from an audit perspective. The FindUnrestrictedMailboxes.ps1 script uses the 
Get-Mailbox
 cmdlet to 
retrieve a listing of all user mailboxes. It then uses the 
Where-Object
[<00030046>4<0050>-11<0047>1<004F>-7<0048>-10<0057000300570052000300C0>-2<004F>-6<0057>-3<0048>-10<005500030052>-10<0058>-5<005700030057>-2<004B>-9<004800030044>-4<0050>-9<0052>-9<0058>1<005100570003>]TJ
of returned data. It looks for objects that have the 
ProhibitSendQuota
 property set to 
unlimited
. It 
then pipelines the resulting objects to return only the alias of each 
User
 object.
FindUnrestrictedMailboxes.ps1
If you were interested in the status of all the quota settings on the Exchange server, you could 
revise the script to use the following command:
[<0032>-11<0045>-3<0059>-12<004C>-5<0052>-9<0058>-6<0056>-5<004F>-12<005C>34<000F0003004C0051000300440003004F>-5<0044>-4<0055>-12<004A>-7<004800030048>-10<0051>4<0059>-12<004C0055>-12<0052>-7<0051>-4<0050>-9<0048>-10<0051>-1<00570003005A>-9<004C>-5<0057>-2<004B00030050>-6<0058>1<004F>-6<0057>-2<004C0053>-8<004F>-7<004800030028>-28<005B>5<0046>4<004B>-7<0044>-4<0051>-11<004A>-7<004800030056>-12<0048>-10<0055>-47<0059>1<0048>-10<0055>-26<0056>-20<000F0003004B>-6<0044>-4<0055>-12<0047>-2<0010>-18<00460052>-13<0047004C0051>-11<004A00030057>-2<004B>-9<004800030056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<004600030056>-12<0048>-10<0055>-47<0059>1<0048>-10<00550003>]TJ
name into a script is problematic. When working with user mailboxes, mailbox servers are the target. 
To avoid having to type in an array of mailbox server names, use the 
Get-MailboxServer 
cmdlet to 
retrieve all the mailbox servers. Unfortunately, the Exchange cmdlets do not accept pipelined input. If 
  
they did accept pipelined input, the command would be simple. Instead, pipeline the results from the 
Get-MailboxServer 
cmdlet to a 
Foreach-Object 
cmdlet and choose the 
name
 property from the piped 
object. The syntax of this command appears here:
Managing storage settings
It is an Exchange administrator22s truism that the user22s need for storage expands to meet the total 
amount of available storage plus 10 percent. Without management of storage demands, you will 
never have enough disk space. Unfortunately, estimates of storage requirements are often haphazard 
at best. It is very easy to go from 23We have plenty of storage24 to 23Where did all the disk space go?24 
Everything from attachments to deleted item retention to bulging inboxes demand storage space. 
Fortunately, you can employ Windows PowerShell to bring some sanity to the situation.
[<0037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030056>-16<0057>-3<0048>-10<00530003004C00510003005A>-2<0052>-7<0055>-12<004E>-14<004C0051>-11<004A0003005A>-9<004C>-5<0057>-2<004B00030057>-2<004B>-9<004800030056>-16<0057>-1<0052>-7<0055>-8<0044>-11<004A>-7<00480003004A>1<0055>-12<0052>-9<0058>1<0053>-8<00560003004C>-5<005600030057>-1<0052000300C0>-2<0051>-11<004700030052>-9<0058>-5<00570003004B>-9<0052>-3<005A00030050>-7<0044>-4<0051>4<005C00030047>-3<0044>-3<0057>-19<0044>-4<0045>-9<0044>-10<0056>-12<004800030052>-7<0045>-6<004D>-5<0048>-16<0046>-25<0057>-19<005600030057>-2<004B>-9<00480003>]TJ
server contains, along with names associated with the location of the database. Exchange Server 2010 
no longer uses storage groups which were used in Exchange 2007. Instead, the storage groups have 
moved up in the hierarchy and are on the same level as servers; the storage groups themselves having 
been deemed basically redundant and therefore do not exist. 
Examining the mailbox database
What most administrators think about when it comes to Exchange Server is the mailbox database itself. 
To retrieve information about the mailbox databases on your server, use the 
Get-MailboxDatabase
cmdlet with no arguments. This is shown here:
The results from this command, shown here, are useful for helping identify the name and location 
of the Exchange Server mailbox database:
After you have decided which mailbox database to work with, you can pipeline the object returned 
by the 
Get-MailboxDatabase
 cmdlet to the
Format-List
 cmdlet. This command appears here:
This command will return all the properties associated with the mailbox database and the associ
ated values. A sampling of the returned data is shown here:
If, however, you are only interested in storage quota limits, you can modify the command, as 
shown here:
The results of this command are nice, neat, and succinct, as shown here:
Managing the mailbox database
To create a new mailbox database, use the 
New-MailboxDatabase 
function. The Exchange server 
requires access to the disk that will house the new database. Also, the folder containing the data
base must exist. Even in you have a small Exchange 2010 installation that contains a single Exchange 
server, the 
-server 
parameter is mandatory. The minimum required parameters for using the 
New-MailboxDatabase 
command are the 
-name
-server
, and 
-edbFilePath 
parameters. The use of this 
command to create a new mailbox database named 
Mailbox2 
on a server named 
ex1 
in the 
mbdb2 
folder on the E
drive appears here:
Once the command to create the new Exchange mailbox database completes, it is a good idea to 
use the 
Get-MailboxDatabase 
command to verify that the mailbox database has been created prop
erly. The command to create a new mailbox database along with the use of the 
Get-MailboxDatabase 
command to verify the creation of the new data set, and the accompanying output from these com
mands appears in Figure 20-6.
FIGURE 20-6
Creating a new mailbox database via the 
New-MailboxDatabase 
command.
  
Once created via the 
New-MailBoxDatabase 
command, the new mailbox database is available for 
use when creating new users. However, new users will not be able to log on to their new mailboxes. 
This is because the new mailbox database appears only in the schema, not as a physical database 
[<00C0>-2<004F>-7<004800030055>-12<0048>-12<0056>-3<004C>-5<0047004C0051>-11<004A00030052>-7<005100030047004C>-5<0056>-4<004E>-26<001100030037>-7<004B>-9<004800030053>-7<004B>3<005C>-12<0056>-4<004C>-3<0046>-14<0044>-4<004F00030047>-3<0044>-3<0057>-19<0044>-4<0045>-9<0044>-10<0056>-12<0048000300C0>-2<004F>-7<004800030055>-12<0048>-12<0056>-4<004C>-5<0047004C0051>-11<004A00030052>-7<005100030047004C>-5<0056>-4<004E00030047>-5<0052>-13<0048>-12<005600030051>-9<0052>-2<005700030044>-4<0053>-7<0053>-13<0048>-10<0044>-4<005500030058>1<00510057>-2<004C004F00030057>-2<004B>-9<004800030047>-3<0044>-3<0057>-19<0044>-4<0045>-9<0044>-10<0056>-12<00480003004C>-5<00560003>]TJ
mounted. By default, the database mounts at the startup of Exchange27but that does not mean you 
must restart the Exchange server to mount the database. One reason for waiting is to permit staging 
[<0052004900030051>-9<0048>-9<005A00030050>-7<0044>-2<004C004F>1<0045>-13<0052>5<005B00030047>-3<0044>-3<0057>-19<0044>-4<0045>-9<0044>-10<0056>-12<0048>-12<0056>-20<000F0003005A>-8<004C>-5<0057>-2<004B00030044>-9<0046>-25<0057>-8<0058>-3<0044>-4<004F00030053>-7<004B>3<005C>-12<0056>-3<004C>-3<0046>-14<0044>-4<004F000300C0>-2<004F>-7<004800030046>4<0055>-12<0048>-10<0044>-3<0057>-2<004C>-5<0052>-7<005100030052>-13<00460046>-2<0058>1<0055>-12<0055>-12<004C0051>-11<004A00030047>-3<0058>1<0055>-12<004C0051>-11<004A00030053>-13<0048>-10<0055>-12<004C>-5<0052>-13<0047>-6<00560003005200490003004F>-7<0052>-3<005A00030056>-21<005C>-12<0056>-16<0057>-3<0048>-10<00500003>]TJ
utilization. It is, however, unfortunate there is no 
mount 
parameter on the 
New-MailBoxDatabase 
cmdlet. Due to the need to replicate the mailbox database information for Active Directory, you can22t 
write a script that creates the new mailbox database and then mounts it, because it will not work con
sistently. It is possible to add a 
sleep
 command to pause execution, but due to differences in replica
tion times, this technique would be hit or miss. A better approach would be to create a background 
job that monitors for a new-object-creation event in Active Directory. Once the new-object-creation 
event is triggered, then the script continues and mounts the database. To mount the mailbox data
base, use the 
Mount-Database
 function and specify the name of the database to mount. When the 
Mount-Database 
command runs, no feedback is returned to the command line. Here is an example of 
using the 
Mount-Database 
cmdlet to mount a mailbox database named mb4:
To remove a mailbox database, use the 
Remove-MailboxDatabase 
cmdlet. As with the 
Mount-Database 
[<0046>4<0050>-11<0047>1<004F>-7<0048>-10<0057>-20<000F00030057>-2<004B>-9<004800030051>-7<0044>-4<0050>-9<004800030052004900030057>-2<004B>-9<004800030047>-3<0044>-3<0057>-19<0044>-4<0045>-9<0044>-10<0056>-12<004800030050>-6<0058>-6<0056>-16<005700030058>1<0051>-2<004C>-5<0054>-3<0058>-7<0048>-11<004F>-12<005C0003004C>-5<0047>-7<0048>-10<0051>-1<0057>-2<004C>-3<0049>-48<005C00030057>-2<004B>-9<004800030047>-3<0044>-3<0057>-19<0044>-4<0045>-9<0044>-10<0056>-12<004800030044>-10<005600030055>-12<0048>-9<00C1>-10<0048>-16<0046>-25<0057>-3<0048>-16<00470003>]TJ
in Active Directory. If, for example, you wish to remove a mailbox database named mb5, and there is 
only one mb5 mailbox database in the organization, you can use the command syntax indicated here:
If, on the other hand, the name mb5 is not unique, you will need to determine the full value of the 
identity name. To do this, use the command that appears here:
The 
Remove-MailboxDatabase 
cmdlet does not have a 
-force 
switched parameter, which means 
that when using the command to remove a mailbox database, you must answer a prompt that 
[<0055>-12<0048>-16<0054>-3<0058>-7<0048>-12<0056>-16<0057>-19<0056000300460052>-7<005100C0>-2<0055>-12<0050>-7<0044>-3<0057>-2<004C>-5<0052>-7<005100030052004900030057>-2<004B>-9<004800030044>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051>-14<001100030038>-2<0053>-13<0052>-7<005100030055>-12<0048>-10<0050>-9<0052>-1<0059>-12<004C0051>-11<004A00030057>-2<004B>-9<004800030050>-7<0044>-2<004C004F>1<0045>-13<0052>5<005B00030047>-3<0044>-3<0057>-19<0044>-4<0045>-9<0044>-10<0056>-12<0048>-9<000F0003004C>-5<00570003004C>-5<005600030056>-16<0057>-2<004C004F>1<004F00030051>-9<0048>-16<0046>-2<0048>-12<0056>-14<0056>-17<0044>-4<0055>-47<005C0003005700520003>]TJ
[<0055>-12<0048>-10<0050>-9<0052>-1<0059>1<004800030057>-2<004B>-9<004800030044>-9<0046>-25<0057>-8<0058>-3<0044>-4<004F00030047>-3<0044>-3<0057>-19<0044>-4<0045>-9<0044>-10<0056>-12<0048000300C0>-2<004F>-7<0048>-12<0056>-19<001100030037>-7<004B>-2<004C>-5<00560003004C>-5<005600030052>-7<0051>-9<004800030055>-12<0048>-10<0044>-10<0056>-12<0052>-7<005100030049>-7<0052>-7<00550003004E>12<0048>-16<0048>-10<0053>-6<004C0051>-11<004A00030050>-7<0044>-2<004C004F>1<0045>-13<0052>5<005B00030047>-3<0044>-3<0057>-19<0044>-4<0045>-9<0044>-10<0056>-12<0048>-12<0056000300460052>-7<00510057>-19<0044>-2<004C0051>-9<0048>-16<00470003004C005100030057>-2<004B>-9<0048>-9<004C00550003>]TJ
[<0052>-3<005A>-9<005100030049>-7<0052>-6<004F>-8<0047>-7<0048>-10<0055>-26<0056>-26<00B3>-32<004C>-5<005700030056>-3<004C0050>-4<0053>-8<004F004C>-5<00C0>-7<0048>-12<005600030055>-12<0048>-10<0050>-9<0052>-1<0059>-5<0044>-4<004F0003004F>-5<0044>-3<0057>-3<0048>-10<0055>44<001100030029>-2<004C>-5<004A>-3<0058>1<0055>-12<0048000300150013>-30<0010>60<001A0003004C004F>1<004F>-4<0058>-6<0056>-16<0057>-2<0055>-8<0044>-3<0057>-3<0048>-12<005600030057>-2<004B>-9<004800030053>-7<0055>-12<0052>-13<0046>-2<0048>-12<0056>-14<005600030052004900030055>-12<0048>-10<0050>-9<0052>-1<0059>-12<004C0051>-11<004A0003004400030050>-6<0044>-2<004C004F>1<0045>-13<0052>5<005B0003>]TJ
database. 
FIGURE 20-7
[<0035>-7<0048>-15<0050>-14<0052>-6<0059>-17<004C>-5<0051>-15<004A0003004400030050>-11<0044>-7<004C>-5<004F>-4<0045>-17<0052005B00030047>-8<0044>-8<0057>-23<0044>-8<0045>-14<0044>-15<0056>-17<004800030055>-17<0048>-21<0054>-8<0058>-4<004C>-5<0055>-17<0048>-17<005600030044>-9<0051>-13<0056>-23<005A>-6<0048>-15<0055>-16<004C>-5<0051>-15<004A0003004400030046>-4<0052>-11<0051>-5<00C0>-7<0055>-16<0050>-11<0044>-8<0057>-7<004C>-10<0052>-11<005100030050>-14<0048>-17<0056>-18<0056>-22<0044>-15<004A>-11<0048>-12<0011>]TJ
Managing Exchange logging
[<002400030049>-18<0058>1<0051>-11<0047>-3<0044>-4<0050>-9<0048>-10<00510057>-19<0044>-4<004F00030044>-11<0056>-4<0053>-13<0048>-16<0046>-25<005700030052>1<004900030050>-7<0044>-2<004C00510057>-3<0048>-10<0051>-7<0044>-4<0051>-9<0046>-2<004800030044>-4<0051>-11<004700030057>-2<0055>-12<0052>-9<0058>1<0045>-8<004F>-7<0048>-12<0056>-4<004B>-9<0052>-13<0052>-2<0057>-2<004C0051>-11<004A0003004C0051>4<0059>1<0052>-6<004F>-12<0059>1<0048>-12<005600030057>-2<004B>-9<0048000300460052>-7<005100C0>-7<004A>-3<0058>1<0055>-8<0044>-3<0057>-2<004C>-5<0052>-7<005100030044>-4<0051>-11<004700030050>-9<0052>-13<0047004C>-5<00C0>-5<0046>-14<0044>]TJ
[<0057>-2<004C>-5<0052>-7<00510003005200490003004F>-7<0052>-13<004A>-7<004A004C0051>-11<004A00030056>-12<0048>-10<0057>-31<0057>-2<004C0051>-11<004A>-6<005600030052>-7<005100030028>-27<005B>5<0046>4<004B>-7<0044>-4<0051>-11<004A>-7<004800030036>-11<0048>-10<0055>-47<0059>1<0048>-10<0055000300150013>13<0014>18<0013>-8<001100030037>-7<004B>-9<0048>-10<0055>-12<004800030044>-4<0055>-12<004800030015>14<0014>18<001300030047004C>-3<0049>-39<0049>-7<0048>-10<0055>-12<0048>-10<005100570003004F>-7<0052>-13<004A>-6<005600030057>-2<004B>-7<0044>-3<005700030046>-14<0044>-4<005100030045>-13<0048000300460052>-7<005100C0>-7<004A>-3<0058>1<0055>-12<0048>-16<00470003>]TJ
[<0058>-6<0056>-4<004C0051>-11<004A0003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F>-9<00110003002C>-1<005100030057>-2<004B>-9<004800030052>-6<004F>-8<004700030047>-3<0044>2<005C>-12<0056>-20<000F00030050>-9<0048>-10<0055>-12<0048>-11<004F>-12<005C000300C0>-2<0051>-11<0047004C0051>-11<004A000300440003004F004C>-5<0056>-16<0057>-2<004C0051>-11<004A00030052004900030057>-2<004B>-9<004800030028>-28<005B>5<0046>4<004B>-7<0044>-4<0051>-11<004A>-7<004800030056>-12<0048>-10<0055>-47<0059>1<0048>-10<00550003004F>-7<0052>-13<004A000300C0>-2<004F>-7<0048>-12<00560003>]TJ
[<005A>-3<0044>-10<00560003004400030055>-8<0044>-3<0057>-2<004B>-9<0048>-10<005500030056>-4<0053>-13<0048>-16<0046>4<004C>-2<0044>-4<004F004C>-7<005D>-1<0048>-16<004700030044>-4<0051>-11<004700030047004C>-3<0049>-41<00C0>-5<0046>-2<0058>1<004F>-6<005700030057>-19<0044>-10<0056>-4<004E>-26<00110003003A>-10<004B>-9<0048>-10<00510003004400030053>-6<0055>-12<0052>-7<0045>-8<004F>-7<0048>-10<005000030044>-4<0055>-12<0052>-7<0056>-12<004800030052>-7<005100030057>-2<004B>-9<004800030028>-28<005B>5<0046>4<004B>-7<0044>-4<0051>-11<004A>-7<004800030056>-12<0048>-10<0055>-47<0059>1<0048>-10<0055>39<000F0003005C>1<0052>-9<00580003004B>-7<0044>-11<00470003>]TJ
[<0057>-1<005200030046>-14<0044>-4<004F>1<004F0003004400030030>-2<004C>-3<0046>4<0055>-12<0052>-7<0056>-12<00520049>-41<005700030056>-5<0058>1<0053>-7<0053>-13<0052>-7<0055>-41<005700030053>-7<0055>-12<00520049>-7<0048>-12<0056>-14<0056>-3<004C>-5<0052>-7<0051>-7<0044>-4<004F>-9<000F0003005A>-9<004B>-9<00520003005A>-2<0052>-9<0058>1<004F>-8<004700030056>-3<004C0050>-4<0053>-8<004F>-12<005C0003005A>-2<0044>-4<004F>1<004E0003005C>1<0052>-9<005800030057>-2<004B>-4<0055>-12<0052>-9<0058>-7<004A>1<004B00030057>-2<004B>-9<004800030057>-19<0044>-10<0056>-4<004E000300520049000300460052>-7<005100C0>-7<004A>-3<0058>1<0055>-12<004C0051>-11<004A0003>]TJ
[<004F>-7<0052>-13<004A>-7<004A004C0051>-11<004A>-11<000F00030055>-12<0048>-10<0053>-7<0055>-12<0052>-13<0047>-3<0058>-5<0046>4<004C0051>-11<004A00030057>-2<004B>-9<004800030053>-7<0055>-12<0052>-7<0045>-8<004F>-7<0048>-10<0050>-14<000F00030044>-3<0051>-11<004700030057>-2<004B>-9<0048>-10<005100030055>-12<0048>-10<0044>-11<0047004C0051>-11<004A00030057>-2<004B>-9<004800030044>-4<0053>-7<0053>-7<0055>-12<0052>-7<0053>-7<0055>-12<004C>-2<0044>-3<0057>-3<00480003004F>-7<0052>-13<004A000300C0>-2<004F>-7<0048>-7<001100030024>3<0049>-41<0057>-3<0048>-10<005500030055>-12<0048>-10<0044>-11<0047004C0051>-11<004A00030057>-2<004B>-9<004800030048>-10<0055>-12<0055>-12<0052>-7<00550003>]TJ
[<0050>-9<0048>-12<0056>-14<0056>-17<0044>-11<004A>-7<00480003004C005100030057>-2<004B>-9<00480003004F>-7<0052>-13<004A000300C0>-2<004F>-7<0048>-9<000F00030050>-9<0052>-7<0055>-12<0048000300520049>-41<0057>-3<0048>-10<005100030057>-2<004B>-7<0044>-4<005100030051>-9<0052>-2<0057>-20<000F00030057>-2<004B>-9<004800030056>-4<004C>-5<0057>-8<0058>-3<0044>-3<0057>-2<004C>-5<0052>-7<005100030045>-13<0048>-16<0046>-14<0044>-4<0050>-9<004800030055>-8<0044>-3<0057>-2<004B>-9<0048>-10<005500030057>-2<0055>-8<0044>-4<0051>-9<0056>-4<0053>-9<0044>-4<0055>-12<0048>-10<00510057>-20<0011>]TJ
[<002C>-1<005100030028>-28<005B>5<0046>4<004B>-7<0044>-4<0051>-11<004A>-7<004800030036>-11<0048>-10<0055>-47<0059>1<0048>-10<0055000300150013>14<0014>18<0013>-8<000F00030057>-2<0055>-12<0052>-9<0058>1<0045>-8<004F>-7<0048>-12<0056>-4<004B>-9<0052>-13<0052>-2<0057>-2<004C0051>-11<004A00030056>-16<0057>-2<004C004F>1<004F000300460052>-7<0051>-9<0056>-3<004C>-5<0056>-16<0057>-19<0056000300520049000300460052>-7<005100C0>-7<004A>-3<0058>1<0055>-12<004C0051>-11<004A00030057>-2<004B>-9<004800030044>-4<0053>-7<0053>-7<0055>-12<0052>-7<0053>-7<0055>-12<004C>-2<0044>-3<0057>-3<00480003004F>-7<0052>-13<004A000300C0>-2<004F>-7<0048>-9<000F0003>]TJ
but now you can easily do that yourself. For instance, to obtain a listing of all the event logs on your 
server, you use the 
Get-EventLogLevel
 cmdlet, as shown here:
When this command is run, output similar to that shown following appears. Notice the format of 
the 
Identity
[<00030053>-7<0055>-12<0052>-7<0053>-13<0048>-10<0055>-41<0057>-38<005C>34<000F00030045>-13<0048>-16<0046>-14<0044>-6<0058>-6<0056>-12<004800030057>-2<004B>-7<0044>-3<00570003004C>-5<005600030057>-2<004B>-9<004800030055>-12<0048>-16<0054>-3<0058004C0055>-12<0048>-16<004700030053>-9<0044>-4<0055>-8<0044>-4<0050>-9<0048>-10<0057>-3<0048>-10<005500030057>-1<0052000300460052>-7<005100C0>-7<004A>-3<0058>1<0055>-12<004800030057>-2<004B>-9<00480003004F>-7<0052>-13<004A>-7<004A004C0051>-11<004A0003004F>-7<0048>-8<0059>1<0048>-11<004F00030052>-7<005100030044>-4<0051>4<005C0003>]TJ
particular Exchange log.
[<003C>49<0052>-9<005800030046>-14<0044>-4<005100030058>-6<0056>-12<004800030057>-2<004B>-9<004800030051>-7<0044>-4<0050>-9<00480003005200490003004400030056>-3<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<004600030028>-28<005B>5<0046>4<004B>-7<0044>-4<0051>-11<004A>-7<00480003004F>-7<0052>-13<004A000300C0>-2<004F>-7<00480003005A>-9<004C>-5<0057>-2<004B0003>]TJ
Get-EventLogLevel
 to retrieve information 
[<0044>-4<0045>-13<0052>-9<0058>-5<00570003004400030056>-3<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<00460003004F>-7<0052>-13<004A000300C0>-2<004F>-7<0048>-7<001100030037>-7<004B>-2<004C>-5<00560003004C>-5<005600030056>-4<004B>-9<0052>-3<005A>-9<00510003004B>-9<0048>-10<0055>-12<0048>-9<000F0003005A>-9<004B>-9<0048>-10<0055>-12<00480003005C>1<0052>-9<005800030052>-7<0045>-5<0057>-19<0044>-2<004C005100030057>-2<004B>-9<00480003004F>-7<0052>-13<004A>-7<004A004C0051>-11<004A0003004F>-7<0048>-8<0059>1<0048>-11<004F00030052004900030057>-2<004B>-9<004800030055>-12<0052>-9<0058>-5<0057>-2<004C0051>-11<004A0003004F>-7<0052>-13<004A>8<001D>]TJ
  
If you try to use the 
Set-EventLogLevel
 cmdlet to change the logging level to medium, as shown 
here, an error occurs:
[<0037>-7<004B>-2<004C>-5<00560003004C>-5<005600030055>-8<0044>-3<0057>-2<004B>-9<0048>-10<005500030049>-13<0055>-17<0058>-6<0056>-16<0057>-2<0055>-8<0044>-3<0057>-2<004C0051>-11<004A00030045>-13<0048>-16<0046>-14<0044>-6<0058>-6<0056>-12<004800030057>-2<004B>-9<004800030048>-10<0055>-12<0055>-12<0052>-7<005500030057>-2<004B>-7<0044>-3<005700030052>-13<00460046>-2<0058>1<0055>-26<005600030056>-17<0044>2<005C>-12<00560003004400030056>-3<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<004600030048>-10<0055>-12<0055>-12<0052>-7<00550003004F>-7<0052>-13<004A00030050>-6<0058>-6<0056>-16<005700030045>-13<004800030056>-6<0058>1<0053>-7<0053>-8<004F004C>-5<0048>-16<0047>-8<00110003>]TJ
[<002B>-8<0052>-3<005A>-2<0048>-8<0059>1<0048>-10<0055>39<000F0003005C>1<0052>-9<005800030046>1<0052>-7<005100C0>-2<0055>-12<0050>-9<0048>-16<004700030057>-2<004B>-7<0044>-3<005700030057>-2<004B>-9<004800030055>-12<0052>-9<0058>-5<0057>-2<004C0051>-11<004A0003004F>-7<0052>-13<004A00030052>-7<0051>-4<004F>-12<005C00030055>-12<0048>-8<0049>-7<0048>-10<0055>-12<0055>-12<0048>-16<004700030057>-1<00520003004400030056>-3<004C0051>-11<004A>1<004F>-7<004800030048>-8<0059>1<0048>-10<0051>-1<00570003004F>-7<0052>-13<004A>-8<0011>]TJ
To try to identify what Windows PowerShell is expecting for the command, you can look at all the 
properties of the routing event log. To obtain these properties, you pipe the object returned by the 
Get-EventLogLevel
 cmdlet to the 
Format-List
 cmdlet, as shown here:
When you examine the properties of the routing event log, you see that it is not very complicated. 
When you use 
Get-Help
 on 
Set-EventLoglevel,
 you see that it wants the 
Identity
 property of the log 
[<00C0>-2<004F>-7<0048>-7<001100030024>-27<005600030056>-4<004B>-9<0052>-3<005A>-9<00510003004B>-9<0048>-10<0055>-12<0048>-9<000F00030057>-2<004B>-2<004C>-5<00560003005A>-2<0052>-9<0058>1<004F>-8<004700030055>-12<0048>-16<0054>-3<0058004C0055>-12<0048000300440003004F>-7<0052>-2<005700030052>1<004900030057>-38<005C>-12<0053>-6<004C0051>-11<004A>8<001D>]TJ
As discussed earlier in this section, the 
Get-EventLogLevel
 routing command only returns a single 
instance of an Exchange event log. You can use this fact to avoid typing. If you store the results of the 
Get-EventLogLevel
 routing command in a variable, as shown here, you can reuse that variable later:
Because the 
 variable holds only the routing event log, you can now use the 
Identity
 property of 
[<0057>-2<004B>-9<004800030055>-12<0052>-9<0058>-5<0057>-2<004C0051>-11<004A00030048>-8<0059>1<0048>-10<005100570003004F>-7<0052>-13<004A00030052>-7<0045>-6<004D>-5<0048>-16<0046>-25<005700030057005200030055>-12<0048>-8<0049>-7<0048>-10<005500030057>-1<005200030057>-2<004B>-7<0044>-3<005700030056>-3<0053>-13<0048>-16<0046>4<004C>-4<00C0>-5<00460003004F>-7<0052>-13<004A000300C0>-2<004F>-7<0048>-7<001100030024>-27<005600030056>-4<004B>-9<0052>-3<005A>-9<00510003004B>-9<0048>-10<0055>-12<0048>-9<000F0003005C>1<0052>-9<005800030046>-14<0044>-4<005100030058>-6<0056>-12<004800030057>-2<004B>-2<004C>-5<005600030055>-12<0048>-8<0049>-7<0048>-10<0055>-12<0048>-10<0051>-9<0046>-2<00480003>]TJ
to the routing event log when you use the 
Set-EventLogLevel
 cmdlet.
eporting transport-logging levels
1.
Open the Windows PowerShell ISE or your favorite Windows PowerShell script editor.
2.
Create a variable called 
$aryLog
 and use it to hold the object that is returned by using the 
Get-EventLogLevel
 cmdlet. At the end of the line, use the pipe character | both to pass the 
object to another object and to break the line for readability. This line of code is shown here:
3.
On the next line, use the 
Where-Object
[<00030046>4<0050>-11<0047>1<004F>-7<0048>-10<0057000300570052000300C0>-2<004F>-6<0057>-3<0048>-10<005500030057>-2<004B>-9<004800030046>-2<0058>1<0055>-12<0055>-12<0048>-10<0051005700030053>-6<004C0053>-13<0048>-11<004F004C0051>-9<004800030052>-7<0045>-6<004D>-5<0048>-16<0046>-25<005700030052>-7<005100030057>-2<004B>-9<00480003>]TJ
Identity
 property and do a regular-expression match on the word 
transport
. The line of code 
that does this is shown here:
4.
On the next line, use the 
foreach 
command to walk through the array of Exchange transport 
logs contained in the 
$aryLog
 variable. Use the variable 
$strLog
 as the individual instance of 
the event log from inside the array. This line of code is shown here:
5.
On the next line, open the code block with an opening curly bracket. Skip a couple of lines, 
and then close the code block with a closing curly bracket. These two lines of code are shown 
here:
6.
Inside the newly created code block, create a variable called 
$strLogIdent
 and use it to hold 
the object that is returned by querying the 
Identity
 property of the 
$strLog
 variable. This line 
of code is shown here:
On the next line, use the 
Get-EventLogLevel
 cmdlet. Pass the identity string stored in the 
$strLogIdent
 variable to the 
-identity
 argument of the 
Get-EventLogLevel
 cmdlet. The line of 
code that does this is shown here:
8.
Save your script as 
<yourname>
ReportTransportLogging.ps1 and run it. You should 
see a list of 26 transport logs. If this is not the case, compare your script with the 
ReportTransportLogging.ps1 script.
This concludes the procedure.
[<0026>6<0052>6<0051>8<00C0>4<004A>7<0058>11<0055004C>12<0051>1<004A>8<0003>8<0057>6<0055>3<0044>1<0051>-2<0056>5<0053>-2<0052>6<0055>-26<0057>38<0010>9<004F>4<0052>-1<004A>4<004A>11<004C>12<0051>1<004A>8<0003>8<004F>4<0048>3<0059>14<0048004F0056>]TJ
1.
Open the Windows PowerShell ISE or your favorite Windows PowerShell script editor.
2.
[<0032>-11<005100030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<00570003004F004C0051>-9<00480003005200490003005C>1<0052>-10<0058>1<005500030056>-13<0046>4<0055>-12<004C0053>-5<0057>-20<000F00030047>-6<0048>-16<0046>4<004F>-5<0044>-4<0055>-12<00480003004400030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<004800030046>-14<0044>-4<004F>1<004F>-7<0048>-16<00470003>]TJ
$strLevel
 and assign the value 
medium
to it. This line of code is shown here:
  
3.
On the next line in your script, use the 
Get-EventLogLevel
 cmdlet to get a collection of event 
log objects. At the end of the line, use the 
pipe character | to pass the object to the next line. 
At the beginning of the line, use the variable 
$aryLog
 to hold the resulting object. This line of 
code is shown here:
4.
On the next line, use the 
Where-Object
[<00030046>4<0050>-11<0047>1<004F>-7<0048>-10<0057000300570052000300C0>-2<004F>-6<0057>-3<0048>-10<005500030057>-2<004B>-9<004800030046>-2<0058>1<0055>-12<0055>-12<0048>-10<0051005700030053>-6<004C0053>-13<0048>-11<004F004C0051>-9<004800030052>-7<0045>-6<004D>-5<0048>-16<0046>-25<005700030052>-7<005100030057>-2<004B>-9<00480003>]TJ
Identity
 property and to perform a regular-expression match on the word 
transport
. The line 
of code that does this is shown here:
5.
On the next line, use the 
ForEach 
command to walk through the array of Exchange transport 
logs contained in the
$aryLog
 variable. Use the variable 
$strLog
 as the individual instance of 
the event log from inside the array. This line of code is shown here:
6.
On the next line, open the code block with an opening curly bracket. Skip a couple of lines, 
and then close the code block with a closing curly bracket. These two lines of code are shown 
here:
Inside the newly created script block, create a variable called 
$strLogIdent
 and use it to hold 
the object that is returned by querying the 
Identity
 property of the 
$strLog
 variable. This line 
of code is shown here:
8.
On the next line in your script, use the 
Set-EventLogLevel
 cmdlet to set the logging level of 
the transport logs. Use the string contained in the 
$strLogIdent
[<00030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<004800030057>-1<005200030056>-6<0058>1<0053>-7<0053>-8<004F>-12<005C00030057>-2<004B>-9<004800030056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<00460003>]TJ
log identity to the 
-identity
 argument of the cmdlet. Use the string in the 
$strLevel
 variable to 
supply the logging level to the 
-level
 argument of the 
Set-EventLogLevel
 cmdlet. This code is 
shown here:
Save your script as 
<yourname>
[<0026>2<0052>-7<005100C0>-7<004A>-3<0058>1<0055>-12<0048>52<0037>56<0055>-8<0044>-4<0051>-9<0056>-4<0053>-13<0052>-7<0055>-41<0057>-2<002F>-8<0052>-13<004A>-7<004A004C0051>-11<004A>-8<0011>-8<0053>-8<0056>8<0014>-10<0011000300350058>1<00510003005C>1<0052>-9<0058>1<005500030056>-13<0046>4<0055>-12<004C0053>-5<0057>-20<001100030024>3<0049>-41<0057>-3<0048>-10<00550003004400030049>-7<0048>-9<005A0003>]TJ
seconds, you will see the prompt return, but no output.
10.
Run the ReportTransportLogging.ps1 script. You should now see a listing of all the transport 
logs and see that their logging level has been changed to 
medium
11.
If you do not see the logging level changed, open the 
[<0026>2<0052>-7<005100C0>-7<004A>-3<0058>1<0055>-12<0048>52<0037>56<0055>-8<0044>-4<0051>-9<0056>-4<0053>-13<0052>-7<0055>-41<0057>-2<002F>-8<0052>-13<004A>-7<004A004C0051>-11<004A>-8<0011>-8<0053>-8<0056>8<001400030056>-13<0046>4<0055>-12<004C0053>-5<00570003>]TJ
and it compare it with yours.
This concludes the procedure.
Managing auditing
If your Exchange administrators use their own user accounts to do their work, and they are not using 
a generic login account, it is very possible that changes made to your Exchange 2010 server are 
logged. This is because Exchange 2010 has a feature called 
Administrator Audit Logging. The good 
news is that new installations of Exchange 2010 Service Pack SP 1 enable this logging by default. 
This feature logs when a user or an administrator makes a change to the Exchange organization. This 
[<0053>-13<0048>-10<0055>-12<0050>-2<004C>-5<0057>-19<005600030057>-2<004B>-9<004800030044>-4<0045>-6<004C004F004C>-5<0057>-38<005C00030057005200030057>-2<0055>-8<0044>-9<0046>-2<004800030046>4<004B>-7<0044>-4<0051>-11<004A>-7<0048>-12<005600030045>-9<0044>-9<0046>4<004E00030057>-1<00520003004400030056>-3<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<004600030058>-6<0056>-12<0048>-10<005500030049>-7<0052>-7<005500030044>-6<0058>-7<0047004C>-5<0057>-2<004C0051>-11<004A00030053>-9<0058>1<0055>-12<0053>-13<0052>-7<0056>-12<0048>-12<0056>-19<00110003002C>-1<005100030044>-11<0047>-7<0047004C>-5<0057>-2<004C>-5<0052>-7<0051>-14<000F00030057>-2<004B>-9<00480003>]TJ
detailed logging provides a history of changes to the organization that are useful from a regulatory 
compliance perspective, or as a troubleshooting tool. By default, Microsoft Exchange Server 2010 SP1 
enables audit logging on new installations. To determine the status of Administrator Audit Logging, 
use the 
[<002A>-6<0048>-7<0057>39<0010>-9<0024>-2<0047>5<0050>4<004C>5<0051>-13<00240058>2<0047>1<004C0057>5<002F>3<0052>-1<004A>1<0026>9<00520051>-1<00C0004A>]TJ
 command. The use of this command and associated output from 
the command appear in Figure 20-8.
FIGURE 20-8
The 
[<002A>-6<0048>-7<0057>38<0010>-9<0024>-2<0047>5<0050>4<004C>5<0051>-12<00240058>3<0047>2<004C0057>5<002F>3<0052>-1<004A>1<0026>9<0052>1<0051>-1<00C0004A>]TJ
 cmdlet returns valuable information about audit settings.
[<002C>-1<0051000300440003004F>-5<0044>-4<0055>-13<004A>-7<004800030051>-9<0048>-10<0057>-35<005A>-2<0052>-7<0055>-12<004E>-34<000F0003004C>-5<005700030050>-2<004C>-5<004A>1<004B>-1<005700030045>-13<004800030053>-7<0055>-12<0048>-8<0049>-7<0048>-10<0055>-8<0044>-4<0045>-8<004F>-7<004800030057>-1<005200030056>-4<0053>-13<0048>-16<0046>4<004C>-3<0049>-48<005C0003004400030056>-3<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<004600030047>-5<0052>-7<0050>-7<0044>-2<004C005100030046>1<0052>-7<00510057>-2<0055>-12<0052>-6<004F>1<004F>-7<0048>-10<005500030049>-12<0055>-12<0052>-7<00500003005A>-9<004B>-2<004C>-3<0046>4<004B0003>]TJ
[<0057>-1<005200030055>-12<0048>-10<0057>-2<0055>-12<004C>-5<0048>-8<0059>1<004800030057>-2<004B>-9<004800030024>-3<0047>1<0050>-2<004C0051>-2<004C>-5<0056>-16<0057>-2<0055>-8<0044>-3<0057>-2<004C>-12<0059>1<0048000300240058>-7<0047004C>-5<00570003002F>-7<0052>-13<004A>-7<004A004C0051>-11<004A000300460052>-7<005100C0>-7<004A>-3<0058>1<0055>-8<0044>-3<0057>-2<004C>-5<0052>-7<0051>-14<001100030037>55<005200030047>-5<005200030057>-2<004B>-2<004C>-5<0056>-20<000F00030058>-6<0056>-12<004800030057>-2<004B>-9<00480003>]TJ
-domaincontroller 
  
[<0053>-9<0044>-4<0055>-8<0044>-4<0050>-9<0048>-10<0057>-3<0048>-10<0055>44<001100030032>-11<005100030050>-9<0052>-7<0056>-16<005700030051>-9<0048>-10<0057>-35<005A>-2<0052>-7<0055>-12<004E>-31<0056>-20<000F0003005C>1<0052>-10<005800030046>-14<0044>-4<005100030058>-6<0056>-12<004800030048>-9<004C>-5<0057>-2<004B>-9<0048>-10<005500030057>-2<004B>-9<00480003004B>-9<0052>-7<0056>-16<005700030051>-7<0044>-4<0050>-9<004800030052>-7<005500030057>-2<004B>-9<004800030049>-18<0058>1<004F>1<004F>-12<005C00030054>-3<0058>-3<0044>-4<004F004C>-5<00C0>-7<0048>-16<004700030047>-5<0052>-7<0050>-7<0044>-2<004C005100030051>-7<0044>-4<0050>-9<0048>-7<00110003>]TJ
These two commands appear here:
[<0033>3<0055>-12<004C>-5<0052>-7<005500030057>-1<0052000300360033>5<0014>-8<000F0003005A>-9<004B>-9<0048>-10<005100030048>-10<0051>-7<0044>-4<0045>-8<004F>-7<0048>-16<0047>-9<000F00030057>-2<004B>-9<004800030024>-3<0047>1<0050>-2<004C0051>-2<004C>-5<0056>-16<0057>-2<0055>-8<0044>-3<0057>-1<0052>-7<0055000300240058>-7<0047004C>-5<00570003002F>-7<0052>-13<004A>-7<004A004C0051>-11<004A00030049>-7<0048>-10<0044>-3<0057>-8<0058>1<0055>-12<004800030056>-12<0048>-10<0051>-1<005700030048>-10<0050>-7<0044>-2<004C004F>-8<005600030057>-1<00520003004400030056>-3<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<00460003>]TJ
[<0050>-7<0044>-2<004C004F>1<0045>-13<0052>5<005B>18<0010>2<0044>-6<0058>-7<0047004C>-5<0057>33<0010>-5<004F>-7<0052>-13<004A00030050>-7<0044>-2<004C004F>1<0045>-13<0052>5<005B000300460052>-7<005100C0>-7<004A>-3<0058>1<0055>-12<0048>-16<004700030059>-12<004C>-2<004400030057>-2<004B>-9<00480003>]TJ
[<0036>3<0048>-7<0057>39<0010>-9<0024>-2<0047>5<0050>4<004C>5<0051>-13<00240058>2<0047>1<004C0057>5<002F>3<0052>-1<004A>1<0026>9<00520051>-1<00C0004A>7<0003>]TJ
cmdlet and examined via an 
email client. Since Exchange Server 2010 SP1, the audit entries reside in a hidden mailbox, and the 
Search-AdminAuditLog 
cmdlet retrieves the entries. The mailbox appears in the 
Users 
container in the 
Active Directory Users and Computers tool, and it is possible to obtain statistics about this mailbox by 
using the 
Get-MailboxStatistics 
cmdlet. This command appears here:
When the 
Search-AdminAuditLog
 cmdlet runs without any parameters, the 
Search-AdminAuditLog 
cmdlet returns all records. By default, the retention period for mailbox statistics is 90 days on 
[<004400030049>-12<0055>-12<0048>-12<0056>-4<004B00030028>-28<005B>5<0046>4<004B>-7<0044>-4<0051>-11<004A>-7<0048000300150013>13<0014>18<0013000300360033>5<001400030052>-7<00550003004F>-5<0044>-3<0057>-3<0048>-10<00550003004C0051>-9<0056>-16<0057>-19<0044>-4<004F>1<004F>-5<0044>-3<0057>-2<004C>-5<0052>-7<0051>26<000C>14<001100030026>2<0052>-7<005100C0>-7<004A>-3<0058>1<0055>-12<004800030057>-2<004B>-9<004800030055>-12<0048>-10<0057>-3<0048>-10<00510057>-2<004C>-5<0052>-7<005100030053>-13<0048>-10<0055>-12<004C>-5<0052>-13<004700030045>-2<005C00030058>-6<0056>-3<004C0051>-11<004A00030057>-2<004B>-9<00480003>]TJ
Set-AdminAuditLog 
cmdlet. When making a change to the admin audit logging, keep in mind that 
changes rely upon Active Directory replication to take place, and therefore could take up to an hour 
to replicate through the domain. Also keep in mind that changes to auditing apply to the entire 
Exchange organization27there is no granularity. The following command sets the retention period to 
120 days:
To retrieve all of the admin audit logs, use the 
Search-AdminAuditLog 
cmdlet without any param
eters. This command appears here:
The command to retrieve all of the admin audit logs, as well as the output associated with that 
command, appears in Figure 20-9.
FIGURE 20-9
Use the 
Search-AdminAuditLog
 cmdlet to view Exchange audit information.
It is certainly possible to pipeline the results from the 
Search-AdminAuditLog 
cmdlet to a 
Where-Object 
cmdlet, but it is better to use the parameters when possible. For example, to see only 
changes from the Administrator user account, use the 
-userids 
parameter, as appears here:
[<0037>55<005200030056>-12<0048>-16<004800030044>-6<0058>-7<0047004C>-5<00570003004F>-7<0052>-13<004A00030048>-10<00510057>-2<0055>-12<004C>-5<0048>-12<005600030057>-2<004B>-7<0044>-3<005700030052>-13<00460046>-2<0058>1<0055>-12<0055>-12<0048>-16<004700030053>-7<0055>-12<004C>-5<0052>-7<005500030057>-1<00520003004400030056>-3<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<004600030047>-3<0044>-3<0057>-3<0048>-9<000F00030058>-6<0056>-12<004800030057>-2<004B>-9<00480003>]TJ
-enddate 
parameter. The 
following commands retrieve audit entries from events that were created by the Administrator
user 
account and occurred prior to January 18, 2012. 
[<0037>55<005200030055>-12<0048>-8<0059>-12<004C>-5<0048>-9<005A00030052>-7<0051>-4<004F>-12<005C00030057>-2<004B>-9<004800030044>-6<0058>-7<0047004C>-5<005700030048>-10<00510057>-2<0055>-12<004C>-5<0048>-12<00560003004A>-7<0048>-10<0051>-9<0048>-10<0055>-8<0044>-3<0057>-3<0048>-16<004700030045>-2<005C0003004400030056>-3<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<004600030046>4<0050>-11<0047>1<004F>-7<0048>-10<0057>-20<000F00030058>-6<0056>-12<004800030057>-2<004B>-9<00480003>]TJ
-cmdlets 
parameter. The 
following example only retrieves audit entries generated by the
Enable-Mailbox 
cmdlet:
The 
-cmdlets 
[<0053>-9<0044>-4<0055>-8<0044>-4<0050>-9<0048>-10<0057>-3<0048>-10<00550003>1<0044>-9<00460046>-2<0048>-10<0053>-5<0057>-19<00560003>1<0044>-4<00510003>1<0044>-4<0055>-12<0055>-8<0044>2<005C0003>1<005200490003>1<0046>4<0050>-11<0047>1<004F>-7<0048>-10<00570003>1<0051>-7<0044>-4<0050>-9<0048>-12<0056>-19<00110003>1<0037>55<00520003>1<00C0>-2<0051>-11<00470003>1<0044>-6<0058>-7<0047004C>-5<00570003>1<0048>-8<0059>1<0048>-10<00510057>-19<00560003>1<004A>-7<0048>-10<0051>-9<0048>-10<0055>-8<0044>-3<0057>-3<0048>-16<00470003>1<0045>-3<005C0003>1<0048>-9<004C>-5<0057>-2<004B>-9<0048>-10<00550003>]TJ
the 
Enable-Mailbox 
or the 
Set-Mailbox 
cmdlet, use the command shown here:
  
One powerful feature of the admin auditing framework is the ability to use the 
New-AdminAuditLogSearch 
cmdlet. In addition to searching the admin audit logs, this cmdlet also 
emails the report when completed. The email includes an XML attachment containing the results 
from the search. The 
-startdate 
and 
-enddate 
parameters are mandatory parameters that limit the size 
of the returned report. Reports are limited to 10 MB in size, and can take up to 15 minutes to arrive in 
the inbox. The following command is a single logical line command containing no line-continuation 
characters that creates a new report of all 
Enable-Mailbox 
commands used between January 1, 2012 
and January 18, 2012. The command emails the report to 
edwilson@iammred.net
The command and the output associated with the command appear in Figure 20-10.
FIGURE 20-10
The 
New-AdminAuditLogSearch
[<00030046>-1<0050>-15<0047>-3<004F>-11<0048>-15<005700030048>-14<0050>-11<0044>-7<004C>-5<004F>-12<005600030055>-17<0048>-15<0053>-17<0052>-11<0055>-45<0057>-23<005600030057>-5<005200030057>-7<004B>-14<004800030056>-8<0053>-17<0048>-21<0046>-1<004C>-9<00C0>-12<0048>-21<004700030048>-15<0050>-11<0044>-7<004C>-5<004F00030044>-16<0047>-11<0047>-4<0055>-17<0048>-17<0056>-18<0056>-24<0011>]TJ
Figure 20-11 shows the email returning the search results from the previous query. 
FIGURE 20-11
Autogenerated email with attached search results.
The XML attachment appears in Figure 20-12.
FIGURE 20-12
[<0037>-12<004B>-14<004800030036>-15<0048>-14<0044>-8<0055>-14<0046>-1<004B>-11<0035>-7<0048>-17<0056>-10<0058>-3<004F>-10<0057>-24<0011>-25<005B>-13<0050>-8<004F000300C0>-7<004F>-11<004800030047>-5<004C>-10<0056>-8<0053>-12<004F>-9<0044>-3<005C>-4<0048>-21<00470003004C>-5<00510003002C>-6<0051>-5<0057>-7<0048>-15<0055>-16<0051>-14<0048>-15<005700030028>-32<005B>-13<0053>-12<004F>-11<0052>-11<0055>-17<0048>-15<0055>38<0011>]TJ
  
[<0033>16<0044>1<0055>-8<0056>1<004C>3<0051>-3<004A00030057>-9<004B>-1<004800030044>1<0058>-1<0047>4<004C>8<00570003003B>7<0030>8<002F000300C0>2<004F0048>]TJ
[<0037>-7<004B>-9<00480003003B>-6<0030>-4<002F000300C0>-2<004F>-7<004800030057>-2<004B>-7<0044>-3<00570003004C>-5<00560003004A>-7<0048>-10<0051>-9<0048>-10<0055>-8<0044>-3<0057>-3<0048>-16<004700030049>-12<0055>-12<0052>-7<005000030057>-2<004B>-9<00480003>]TJ
New-AdminAuditLogSearch
 cmdlet is a standard formatted 
[<00C0>-2<004F>-7<0048>-9<000F00030044>-3<0051>-11<004700030044>-4<0053>-7<0053>-13<0048>-10<0044>-4<0055>-26<00560003004C00510003003B>-6<0030>-4<002F00030031>-7<0052>-2<0057>-3<0048>-10<0053>-9<0044>-11<00470003004C005100030029>-2<004C>-5<004A>-3<0058>1<0055>-12<0048000300150013>-30<0010>59<0014>1<0016>-7<0011>]TJ
FIGURE 20-13
[<003B>-11<0030>-9<002F00030031>-12<0052>-7<0057>-8<0048>-15<0053>-14<0044>-15<004700030046>-1<004F>-11<0048>-14<0044>-8<0055>-16<004F>-17<005C00030047>-4<004C>-10<0056>-8<0053>-12<004F>-9<0044>-3<005C>-16<005600030057>-7<004B>-14<004800030056>-20<0057>-7<0055>-22<0058>-10<0046>-29<0057>-12<0058>-4<0055>-17<004800030052>-5<004900030057>-7<004B>-14<004800030036>-15<0048>-14<0044>-8<0055>-14<0046>-1<004B>-11<0035>-7<0048>-17<0056>-10<0058>-3<004F>-10<0057>-24<0011>-25<005B>-13<0050>-8<004F000300C0>-7<004F>-11<0048>-12<0011>]TJ
[<002C>-1<005100030029>-2<004C>-5<004A>-3<0058>1<0055>-12<0048000300150013>-30<0010>59<0014>1<0016>-9<000F00030057>-2<004B>-9<004800030053>-7<0055>-12<0052>-7<0053>-13<0048>-10<0055>-41<0057>-2<004C>-5<0048>-12<005600030052004900030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030048>-8<0059>1<0048>-10<0051>-1<005700030044>-3<0053>-7<0053>-13<0048>-10<0044>-4<0055>43<001100030037>-7<004B>-9<004800030056>-16<0057>-2<0055>-12<004C0051>-11<004A00030053>-7<0055>-12<0052>-7<0053>-13<0048>-10<0055>-41<0057>-2<004C>-5<0048>-12<005600030044>-4<0053>-7<0053>-13<0048>-10<0044>-4<00550003004B>-9<0048>-10<0055>-12<0048>5<001D>]TJ
Two of the properties contain not simple strings but other objects. These two properties show up 
as additional XML elements and appear here:
One thing that is often confusing is that the Windows PowerShell 
Import-CliXML 
cmdlet does 
[<0051>-9<0052>-2<00570003004C0050>-4<0053>-13<0052>-7<0055>-41<00570003004D>-2<0058>-6<0056>-16<005700030044>-4<0051>4<005C00030052>-6<004F>-8<00470003003B>-6<0030>-4<002F000300C0>-2<004F>-7<0048>3<001E0003004C>-5<00570003004C0050>-4<0053>-13<0052>-7<0055>-41<0057>-19<005600030052>-7<0051>-4<004F>-12<005C00030056>-4<0053>-13<0048>-16<0046>4<004C>-2<0044>-4<004F>1<004F>-12<005C00030049>-7<0052>-7<0055>-12<0050>-7<0044>-3<0057>-31<0057>-3<0048>-16<00470003003B>-6<0030>-4<002F00030057>-2<004B>-7<0044>-3<00570003004C>-5<00560003004A>-7<0048>-10<0051>-9<0048>-10<0055>-8<0044>-3<0057>-3<0048>-16<004700030049>-12<0055>-12<0052>-7<005000030057>-2<004B>-9<0048>10<0003>]TJ
Export-CliXML 
[<0046>4<0050>-11<0047>1<004F>-7<0048>-10<0057>-20<001100030037>-7<004B>-2<004C>-5<00560003004C>-5<00560003005A>-9<004B>3<005C00030048>-8<0049>-39<0049>-7<0052>-7<0055>-41<0057>-19<005600030057>-1<00520003004C0050>-4<0053>-13<0052>-7<0055>-41<005700030057>-2<004B>-9<004800030036>-11<0048>-10<0044>-4<0055>-10<0046>4<004B>-6<0035>-2<0048>-12<0056>-5<0058>1<004F>-6<0057>-20<0011>-21<005B>-8<0050>-4<004F000300C0>-2<004F>-7<004800030059>-12<004C>-2<00440003>]TJ
Import-CliXML 
do 
not work.
You can use the
Get-Content 
[<0046>4<0050>-11<0047>1<004F>-7<0048>-10<005700030057005200030048>-10<0044>-10<0056>-3<004C004F>-12<005C00030055>-12<0048>-10<0044>-11<004700030057>-2<004B>-9<0048000300460052>-7<00510057>-3<0048>-10<0051>-1<0057>-19<005600030052004900030057>-2<004B>-9<004800030036>-11<0048>-10<0044>-4<0055>-10<0046>4<004B>-6<0035>-2<0048>-12<0056>-5<0058>1<004F>-6<0057>-20<0011>-21<005B>-8<0050>-4<004F000300C0>-2<004F>-7<004800030044>-4<0051>-11<00470003>]TJ
cast the resulting text to a 
System.Xml.XmlDocument 
type by using the 
[xml] 
type accelerator. This is 
much easier to accomplish than it sounds. 
[<002C>-1<005100030057>-2<004B>-9<004800030049>-7<0052>-6<004F>1<004F>-7<0052>-3<005A>-9<004C0051>-11<004A00030048>-6<005B>-6<0044>-4<0050>-4<0053>-8<004F>-7<0048>-9<000F00030057>-2<004B>-9<004800030036>-11<0048>-10<0044>-4<0055>-10<0046>4<004B>-6<0035>-2<0048>-12<0056>-5<0058>1<004F>-6<0057>-20<0011>-21<005B>-8<0050>-4<004F000300C0>-2<004F>-7<0048>-9<000F00030056>-17<0044>1<0059>1<0048>-16<004700030049>-12<0055>-12<0052>-7<005000030032>-15<0058>-5<0057>-2<004F>-7<0052>-13<0052>-7<004E>-34<000F00030055>-12<0048>-12<0056>-3<004C>-5<0047>-7<0048>-12<00560003004C005100030057>-2<004B>-9<004800030026>-6<001D>3<003F>11<0049>-23<0056>-12<00520003>]TJ
folder. The 
[xml] 
type accelerator converts the text, derived via the 
Get-Content 
cmdlet, into an XML 
document
When viewed, the 
searchresults 
XML element27the contents of the 
$xml
 variable27appears as 
illustrated here:
To view the objects stored in the 
searchresults 
XML element, use dotted notation to access the 
searchresults 
property. This technique appears here:
In this example, the 
searchresults 
element contains three objects, each named 
event. 
To view the 
objects, use dotted notation to access the 
event 
property, as appears here:
As shown in Figure 20-14, the 
event 
property contains the audit information an Exchange adminis
trator seeks. 
  
FIGURE 20-14
Use the 
[xml] 
type accelerator to gain access to search-result events.
Now use standard Windows PowerShell techniques to analyze the data. For example, if you22re only 
interested in the caller and cmdlet run during the period of the report, use the 
Select-Object 
cmdlet, 
as appears here:
Output the results to a table by using the 
Format-Table 
cmdlet. The following command selects the 
rundate
caller
and 
cmdlet
and outputs the results to an automatically sized table:
The results, stored in the 
$xml 
variable, are addressable via array index notation. To view the run 
[<0047>-3<0044>-3<0057>-3<004800030052004900030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030048>-8<0059>1<0048>-10<00510057>-20<000F00030058>-6<0056>-12<004800030057>-2<004B>-9<00480003>]TJ
[0]
[<00030051>-9<0052>-2<0057>-19<0044>-3<0057>-2<004C>-5<0052>-7<005100030057005200030055>-12<0048>-10<0057>-2<0055>-12<004C>-5<0048>-8<0059>1<004800030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030048>-11<004F>-7<0048>-10<0050>-9<0048>-10<00510057>-20<001100030037>-7<004B>-2<004C>-5<005600030057>-3<0048>-16<0046>4<004B>-4<0051>-2<004C>-5<0054>-3<0058>-7<004800030044>-4<0053>-7<0053>-13<0048>-10<0044>-4<0055>-26<00560003004B>-9<0048>-10<0055>-12<0048>5<001D>]TJ
One cool way to parse the data is to select the appropriate properties and pipeline the results to 
the 
Out-GridView 
cmdlet. It is necessary to use the 
Select-Object 
cmdlet to choose the properties 
because 
Out-GridView 
does not accept a complex object; therefore, a direct pipeline fails. This tech
nique appears here:
The resulting grid appears in Figure 20-15.
FIGURE 20-15
The 
Out-GridView
 cmdlet provides an easy way to navigate audit entries.
Creating user accounts: step-by-step exercises
In this exercise, you will explore the use of Windows PowerShell to create several users whose names 
[<0044>-4<0055>-12<0048000300460052>-7<00510057>-19<0044>-2<004C0051>-9<0048>-16<00470003004C00510003004400030057>-3<0048>-6<005B>-37<0057000300C0>-2<004F>-7<0048>-7<001100030032>-11<0051>-9<0046>-2<004800030057>-2<004B>-9<0048>-12<0056>-12<004800030058>-6<0056>-12<0048>-10<005500030044>-9<004600460052>-10<0058>1<00510057>-19<005600030044>-4<0055>-12<004800030046>4<0055>-12<0048>-10<0044>-3<0057>-3<0048>-16<0047>-9<000F0003005C>1<0052>-9<00580003005A>-9<004C004F>1<004F00030058>-6<0056>-12<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030057>-1<00520003>]TJ
enable message tracking on an Exchange server.
[<0033>6<0044>-7<0055>-22<0056>-2<004C>4<0051>-7<004A0003004400030057>-2<0048>-5<005B>-32<0057000300C0>2<004F>-4<004800030044>-7<0051>-7<004700030046>-8<0055>-12<0048>-11<0044>-6<0057>3<004C>4<0051>-7<004A00030028>-27<005B>9<0046>-8<004B>-8<0044>-7<0051>-7<004A>-3<004800030058>-6<0056>-10<0048>-7<005500030044>-12<0046>-2<0046>-4<0052>-7<0058>3<0051>-1<0057>-12<0056>]TJ
1.
Open the Windows PowerShell ISE or some other Windows PowerShell script editor.
2.
Create a 
[<0038>-3<0056>-12<0048>-10<0055>-8<0031>-5<0044>-4<0050>-9<0048>-12<0056>-19<0011>12<0057>-34<005B>-37<0057000300C0>-2<004F>-7<0048>-9<000F00030044>-3<0051>-11<004700030048>-10<0051>-9<0056>-5<0058>1<0055>-12<00480003005C>1<0052>-10<00580003004B>-7<0044>1<0059>1<004800030044>-9<00460046>-2<0048>-12<0056>-14<005600030057>-1<005200030057>-2<004B>-9<004800030053>-9<0044>-3<0057>-2<004B00030057005200030057>-2<004B>-2<004C>-5<0056000300C0>-2<004F>-7<0048>-7<001100030037>-7<004B>-9<0048000300C0>-2<004F>-7<0048000300460052>-7<0051>]TJ
[<0057>-19<0044>-2<004C0051>-9<0056000300440003004F004C>-5<0056>-16<0057>-2<004C0051>-11<004A00030052004900030058>-6<0056>-12<0048>-10<0055>-26<0056>-1<00B7000300C0>-2<0055>-26<0056>-16<005700030044>-4<0051>-11<00470003004F>-5<0044>-10<0056>-16<005700030051>-7<0044>-4<0050>-9<0048>-12<0056>-19<00110003002400030056>-17<0044>-4<0050>-4<0053>-8<004F>-7<004800030049>-7<0052>-7<0055>-12<0050>-7<0044>-3<005700030049>-7<0052>-7<005500030057>-2<004B>-2<004C>-5<0056000300C0>-2<004F>-7<00480003004C>-5<005600030056>-4<004B>-9<0052>-3<005A>-9<00510003004B>-9<0048>-10<0055>-12<0048>5<001D>]TJ
  
3.
[<0032>-11<005100030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<00570003004F004C0051>-9<00480003005200490003005C>1<0052>-10<0058>1<005500030056>-13<0046>4<0055>-12<004C0053>-5<0057>-20<000F00030046>4<0055>-12<0048>-10<0044>-3<0057>-3<00480003004400030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<004800030046>-14<0044>-4<004F>1<004F>-7<0048>-16<00470003>]TJ
$aryUsers
 to hold the array of text that 
is returned by using the 
Get-Content
[<00030046>4<0050>-11<0047>1<004F>-7<0048>-10<005700030057005200030055>-12<0048>-10<0044>-11<00470003004400030057>-3<0048>-6<005B>-37<0057000300C0>-2<004F>-7<004800030057>-2<004B>-7<0044>-3<005700030046>1<0052>-7<0051>-1<0057>-19<0044>-2<004C0051>-9<005600030059>-5<0044>-4<0055>-12<004C>-5<0052>-9<0058>-6<005600030058>-6<0056>-12<0048>-10<0055000300C0>-2<0055>-26<0056>-16<00570003>]TJ
and last names. Make sure you edit the string that gets supplied to the 
-path
 argument of the 
Get-Content
 cmdlet as required for your computer. This line of code is shown here:
4.
On the next line of your script, declare a variable called 
$password
 that will contain the pass
word to use for all your users. For this example, the password is Password01. This line of code 
is shown here:
5.
On the next line of your script, declare a variable called 
$strOU
 to hold the OU to place the 
newly created users. For this example, place the users in the MyTestOU OU, which was created 
in Chapter 15, 23Working with Active Directory.24 This line of code is shown here:
6.
On the next line, declare a variable called 
$strDomain
. This variable will be used to hold the 
domain name of the organization. This will become part of the user22s email address. For this 
example, use nwtraders.msft, as shown here:
Now declare a variable called 
$strDatabase
. This variable will hold the name of the data
base where the users22 mailboxes will reside. On this system, the database is called Mailbox 
Database. This line of code is shown here:
8.
Use the 
ConvertTo-SecureString
 cmdlet to convert the string contained in the vari
able 
$password
 into a secure string that can be used for the 
-password
 argument of 
the 
New-Mailbox
 cmdlet. To convert a string to a secure string, you need to specify the
-asplaintext
 argument for the string contained in the 
$password
 variable, and use the 
-force
argument to force the conversion. Reuse the 
$password
 variable to hold the newly created 
secure string. This line of code is shown here:
Use the 
foreach
 statement to walk through the array of text that was created by using the 
Get-Content
[<00030046>4<0050>-11<0047>1<004F>-7<0048>-10<005700030057005200030055>-12<0048>-10<0044>-11<004700030057>-2<004B>-9<004800030057>-3<0048>-6<005B>-37<0057000300C0>-2<004F>-7<0048>-7<001100030038>-3<0056>-12<004800030057>-2<004B>-9<004800030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<00480003>]TJ
 as an individual counter. The vari
able that holds the array of text from the 
Get-Content
 cmdlet is 
$aryUsers
. This line of code is 
shown here:
10.
Open and close the code block by using the opening and closing curly brackets, as shown 
here. You will need space for at least 9 or 10 lines of code, but that can always be added later.
11.
[<0032>-11<005100030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<00570003004F004C0051>-9<00480003004C0051>-9<0056>-3<004C>-5<0047>-7<00480003005C>1<0052>-10<0058>1<0055000300460052>-13<0047>-7<004800030045>-8<004F>-7<0052>-13<0046>4<004E>-34<000F00030058>-6<0056>-12<004800030057>-2<004B>-9<004800030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<00480003>]TJ
$newAry
 to hold a new array you will 
create out of one line of text from the 
$aryUsers
 variable by using the 
Split
 method. When you 
call the 
Split
 method, supply a comma to it because the default value of the 
Split
 method is a 
blank space
The variable 
 holds the current line of text from the
 $aryUsers
 variable. This line 
of code is shown here:
12.
[<0037>-7<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030051>-7<0044>-4<0050>-9<00480003004C>-5<00560003004B>-9<0048>-11<004F>-8<00470003004C005100030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<0057000300460052>-6<004F>-4<0058>1<0050>-4<00510003004C00510003005C>1<0052>-9<0058>1<005500030057>-3<0048>-6<005B>-37<0057000300C0>-2<004F>-7<0048>-7<001100030024>3<0049>-41<0057>-3<0048>-10<005500030057>-2<004B>-2<004C>-5<00560003004F004C0051>-9<004800030052004900030057>-3<0048>-6<005B>-37<00570003004C>-5<005600030057>-8<0058>1<0055>-12<0051>-9<0048>-16<00470003004C00510057>-1<005200030044>-4<00510003>]TJ
[<0044>-4<0055>-12<0055>-8<0044>2<005C>34<000F00030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030046>1<0052>-6<004F>-4<0058>1<0050>-4<00510003004C>-5<005600030044>-11<0047>-7<0047>1<0055>-12<0048>-12<0056>-14<0056>-12<0048>-16<004700030044>-10<005600030048>-11<004F>-7<0048>-10<0050>-9<0048>-10<0051005700030013>-8<001100030037>55<005200030055>-12<0048>-10<0057>-2<0055>-12<004C>-5<0048>-8<0059>1<00480003004C>-5<0057>-20<000F0003005C>1<0052>-9<005800030058>-6<0056>-12<004800030057>-2<004B>-9<004800030051>-7<0044>-4<0050>-9<004800030052004900030057>-2<004B>-9<004800030051>-9<0048>-9<005A0003>]TJ
[<0044>-4<0055>-12<0055>-8<0044>2<005C00030044>-3<0051>-11<004700030048>-10<0051>-9<0046>4<004F>-7<0052>-7<0056>-12<004800030057>-2<004B>-9<004800030048>-11<004F>-7<0048>-10<0050>-9<0048>-10<0051005700030051>-6<0058>1<0050>-4<0045>-13<0048>-10<00550003004C005100030056>-13<0054>-3<0058>-3<0044>-4<0055>-12<004800030045>-7<0055>-8<0044>-9<0046>4<004E>12<0048>-10<0057>-19<0056>-19<00110003002B>-7<0052>-6<004F>-8<004700030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030051>-7<0044>-4<0050>-9<00480003004C005100030057>-2<004B>-9<004800030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<00480003>]TJ
$strFname,
 as shown here:
13.
[<0037>-7<004B>-9<00480003004F>-5<0044>-10<0056>-16<005700030051>-7<0044>-4<0050>-9<00480003004C>-5<00560003004C005100030057>-2<004B>-9<004800030056>-12<0048>-16<00460052>-7<0051>-11<0047000300460052>-6<004F>-4<0058>1<0050>-4<005100030052004900030057>-2<004B>-9<004800030057>-3<0048>-6<005B>-37<0057000300C0>-2<004F>-7<004800030044>-4<0051>-11<00470003004C>-5<005600030044>-11<0047>-7<0047>1<0055>-12<0048>-12<0056>-14<0056>-12<0048>-16<004700030044>-10<005600030048>-11<004F>-7<0048>-10<0050>-9<0048>-10<00510057000300140003004C005100030057>-2<004B>-9<004800030051>-9<0048>-9<005A0003>]TJ
array contained in the 
$newAry
 variable. Retrieve the value stored in 
$newAry[1] 
and store it in 
the variable 
$strLname,
 as shown here:
14.
Now you need to use the 
New-Mailbox
 cmdlet. Supply the values for each of the parameters 
[<005C>1<0052>-9<00580003004B>-7<0044>1<0059>1<00480003004B>-7<0044>-4<0055>-13<0047>-2<0010>-18<00460052>-13<0047>-7<0048>-16<00470003004C005100030057>-2<004B>-9<004800030056>-13<0046>4<0055>-12<004C0053>-5<0057>-20<001100030038>-3<0056>-12<004800030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030044>-4<0051>-11<00470003004F>-5<0044>-10<0056>-16<005700030051>-7<0044>-4<0050>-9<004800030059>-5<0044>-4<004F>-4<0058>-7<0048>-12<005600030056>-16<0057>-1<0052>-7<0055>-12<0048>-16<00470003004C005100030057>-2<004B>-9<004800030057>-3<0048>-6<005B>-37<0057000300C0>-2<004F>-7<00480003>]TJ
to create the user name. The goal is to not have any of the arguments of the 
New-Mailbox
cmdlet be hard coded. This will greatly facilitate changing the script to run in different 
domains and OUs, and with additional parameters
15.
On a new line, call the
 New-Mailbox
 cmdlet. For the 
-alias
 argument, create the user22s alias by 
[<00460052>-7<0051>-9<0046>-15<0044>-3<0057>-3<0048>-10<0051>-7<0044>-3<0057>-2<004C0051>-11<004A00030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030051>-7<0044>-4<0050>-9<0048000300460052>-7<0051>-1<0057>-19<0044>-2<004C0051>-9<0048>-16<00470003004C005100030057>-2<004B>-9<0048>]TJ
$strFname
 variable with the last name con
tained in the 
$strLname
 variable. The database that will hold the user22s mailbox is the one 
supplied in the 
$strDatabase
 variable. Because the command will stretch for several lines, use 
the line-continuation command the grave accent character [`] at the end of the line. This line 
of code is shown here:
16.
The next line of your 
New-Mailbox
 command creates the user name attribute. To create it, 
[<00460052>-7<0051>-9<0046>-15<0044>-3<0057>-3<0048>-10<0051>-7<0044>-3<0057>-3<004800030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030051>-7<0044>-4<0050>-9<004800030044>-4<0051>-11<00470003004F>-5<0044>-10<0056>-16<005700030051>-7<0044>-4<0050>-9<0048>-7<001100030037>-7<004B>-9<004800030032>-9<003800030051>-7<0044>-4<0050>-9<00480003004C>-5<005600030056>-16<0057>-1<0052>-7<0055>-12<0048>-16<00470003004C005100030057>-2<004B>-9<00480003>]TJ
$strOU
 variable. 
Continue the command to the next line. This line of code is shown here:
  
17.
The next line is easy. The value for the 
[<0010>-9<00C0>-4<0055>-18<0056>-8<0057>-1<00510044>-2<0050>-3<0048>]TJ
 argument is stored in 
$strFname
, and the 
value for the 
-lastname
 argument is stored in the 
$strLname
 variable. Use line continuation to 
continue the command to the next line. This code is shown here:
18.
[<0037>-7<004B>-9<004800030047004C>-5<0056>-4<0053>-8<004F>-5<0044>2<005C00030051>-7<0044>-4<0050>-9<004800030049>-7<0052>-7<005500030057>-2<004B>-9<0048>-12<0056>-12<004800030058>-6<0056>-12<0048>-10<0055>-26<00560003005A>-9<004C004F>1<004F00030045>-13<004800030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030051>-7<0044>-4<0050>-9<004800030044>-4<0051>-11<004700030057>-2<004B>-9<00480003004F>-5<0044>-10<0056>-16<005700030051>-7<0044>-4<0050>-9<0048000300460052>-7<0051>-9<0046>-14<0044>-3<0057>-3<0048>-10<0051>-7<0044>-3<0057>-3<0048>-16<0047>-8<001100030037>55<00520003>]TJ
[<00460052>-7<0051>-9<0046>-15<0044>-3<0057>-3<0048>-10<0051>-7<0044>-3<0057>-3<004800030057>-2<004B>-9<0048>-10<0050>-14<000F00030058>-6<0056>-12<004800030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030051>-7<0044>-4<0050>-9<004800030056>-16<0057>-1<0052>-7<0055>-12<0048>-16<00470003004C00510003>]TJ
$strFname
 and the last name stored in 
$strL
name
. Continue the command to the next line, as shown here:
19.
The 
userprincipalname
[<00030059>-5<0044>-4<004F>-4<0058>-7<00480003004C>-5<0056000300460052>-7<0050>-4<0053>-13<0052>-7<0056>-12<0048>-16<004700030052004900030057>-2<004B>-9<0048000300C0>-2<0055>-26<0056>-16<005700030051>-7<0044>-4<0050>-9<0048000300460052>-7<0051>-9<0046>-14<0044>-3<0057>-3<0048>-10<0051>-7<0044>-3<0057>-3<0048>-16<00470003005A>-9<004C>-5<0057>-2<004B00030057>-2<004B>-9<00480003004F>-5<0044>-10<0056>-16<005700030051>-7<0044>-4<0050>-9<0048>-9<000F0003>]TJ
followed by the @ symbol and then the domain name stored in the 
$strDomain
 variable. It 
looks like an email address, but it is not the same thing. The code to create this is shown here:
20.
The value for the 
-password
 argument is stored in the 
$password
 variable. This is the last 
parameter you need to supply for this command.
21.
Save your script as 
<yourname>
CreateUsersFromTxt.ps1. Run your script. 
This concludes this step-by-step exercise.
[<002C>-1<005100030057>-2<004B>-9<004800030051>-9<0048>-6<005B>-37<005700030048>-6<005B>2<0048>-10<0055>-10<0046>4<004C>-5<0056>-12<0048>-9<000F0003005C>1<0052>-9<00580003005A>-9<004C004F>1<004F00030048>-7<005B>-6<0044>-4<0050>-2<004C0051>-9<004800030057>-2<004B>-9<004800030058>-6<0056>-12<00480003005200490003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030057>-1<0052000300460052>-7<005100C0>-7<004A>-3<0058>1<0055>-12<004800030050>-9<0048>-12<0056>-14<0056>-17<0044>-11<004A>-7<004800030057>-2<0055>-8<0044>-9<0046>4<004E>]TJ
ing on an Exchange 2010 server.
[<0026>-2<0052>-2<005100C0>-4<004A>-1<0058>3<0055>-8<004C>4<0051>-7<004A00030050>-7<0048>-13<0056>-10<0056>-15<0044>-14<004A>-3<004800030057>-2<0055>-5<0044>-12<0046>-8<004E>-12<004C>4<0051>-7<004A>]TJ
1.
Open Windows PowerShell ISE or another Windows PowerShell script editor.
2.
Declare a variable called 
$dteMaxAge
 and use the 
[timespan]
 accelerator to convert a string 
type into a 
timespan
 data type. Set the time span to be equal to 30 days, 0 hours, 0 minutes, 
and 0 seconds. The line of code that does this is shown here:
3.
On the next line, create a variable called 
$intSize
 and use it to hold the value 
50MB
. The 
Set-
MailboxServer
[<00030046>4<0050>-11<0047>1<004F>-7<0048>-10<005700030048>-6<005B>-8<0053>-13<0048>-16<0046>-25<0057>-19<00560003004400030059>-5<0044>-4<004F>-4<0058>-7<00480003005A>-9<004C>-5<0057>-2<004B00030045>-13<0052>-2<0057>-2<004B00030057>-2<004B>-9<004800030051>-6<0058>1<0050>-4<0045>-13<0048>-10<005500030044>-4<0051>-11<004700030056>-5<0058>-2<0049>-41<00C0>-11<005B00030057>-1<00520003004C0051>-11<0047004C>-3<0046>-14<0044>-3<0057>-3<00480003005A>-9<004B>-9<0048>-10<0057>-2<004B>-9<0048>-10<005500030057>-2<004B>-9<00480003>]TJ
number is in megabytes or kilobytes or some other unit. To do this, use the following code:
4.
On the next line, use the variable 
$strLogPath
 to hold the string representing the path for 
storing the message-tracking logs. This needs to be a path that is local to the actual Exchange 
server. To do this, you use the following code:
5.
Use the variable 
$aryServer
 to hold a collection of Exchange mailbox servers obtained by 
using the 
Get-MailboxServer
 cmdlet. This line of code is shown here:
6.
Use the 
foreach
 statement to walk through the collection of Exchange servers held in the 
$aryServer
 variable. Use the variable 
$strServer
 as the counter variable while you go through 
the array. This line of code is shown here:
Open and close the code block by typing an opening curly bracket and a closing curly bracket, 
as shown here:
8.
Use the variable 
$strServer
 to hold the 
Identity
 property that is returned by querying the 
Identity
 property from the object contained in the 
$strServer
 variable. This line of code is 
shown here:
On the next line, use the 
Set-MailboxServer
 cmdlet and supply the value for the 
-identity
 argu
ment with the string contained in the 
$strServer
 variable. Use the grave accent character ` to 
continue the command to the next line. The code that does this is shown here:
10.
On the next line, use the
MessageTrackingLogEnabled
 argument to turn on message tracking. 
To do this, use the value 
$true
 for the 
MessageTrackingLogEnabled
 argument. The line of code 
that does this is shown following. Make sure you include the grave accent character at the end 
of the line to continue the command to the next line.
11.
On the next line, use the 
MessageTrackingLogMaxAge
 argument to set the maximum 
age of the message-tracking logs. Use the 
timespan
 data type to supply the value to the 
MessageTrackingLogMaxAge
 argument. To do this, use the value stored in the 
$dteMaxAge
variable. This line of code is shown following. At the end of the line, use the grave accent char
acter to continue the code to the next line.
  
12.
[<0031>-7<0052>-3<005A0003005C>1<0052>-9<005800030051>-9<0048>-16<0048>-16<0047000300570052000300460052>-7<005100C0>-7<004A>-3<0058>1<0055>-12<004800030057>-2<004B>-9<004800030056>-4<004C>-7<005D>-1<004800030052004900030057>-2<004B>-9<00480003004F>-7<0052>-13<004A>-7<004A004C0051>-11<004A00030047004C0055>-12<0048>-16<0046>-25<0057>-1<0052>-7<0055>-47<005C>35<001100030037>55<005200030047>-5<005200030057>-2<004B>-2<004C>-5<0056>-20<000F00030058>-6<0056>-12<004800030057>-2<004B>-9<00480003>]TJ
MessageTrackingLogMaxDirectorySize
 argument of the 
Set-MailboxServer
 cmdlet. When you 
specify a value for the directory size, you can tell it you want 
 for megabytes, 
GB
 for giga
bytes, 
 for kilobytes, and even 
 for bytes and 
 for terabytes. To make it easy to change 
later, you store the max directory size value in a variable called 
$intSize
. The code that sets this 
argument is shown here:
13.
[<0037>-7<004B>-9<00480003004F>-5<0044>-10<0056>-16<005700030053>-9<0044>-4<0055>-8<0044>-4<0050>-9<0048>-10<0057>-3<0048>-10<00550003005C>1<0052>-10<005800030051>-9<0048>-16<0048>-16<0047000300570052000300460052>-7<005100C0>-7<004A>-3<0058>1<0055>-12<004800030049>-7<0052>-7<005500030050>-9<0048>-12<0056>-14<0056>-17<0044>-11<004A>-7<004800030057>-2<0055>-8<0044>-9<0046>4<004E>-14<004C0051>-11<004A0003004C>-5<005600030057>-2<004B>-9<004800030053>-9<0044>-3<0057>-2<004B00030049>-7<0052>-7<00550003004F>-7<0052>-13<004A00030056>-16<0057>-1<0052>-7<0055>-8<0044>-11<004A>-7<0048>-7<00110003>]TJ
This needs to be a local path on the Exchange server. You use the following line of code to 
[<00460052>-7<0051>-1<00C0>-7<004A>-3<0058>1<0055>-12<004800030057>-2<004B>-9<00480003>]TJ
-MessageTrackingLogPath
 argument:
14.
Save your script as 
<yourname>
EnableMessageTracking.ps1, and run it.
This concludes the exercise.
Chapter 20 quick reference
Do this
Create a new user in both Windows and Exchange
Use the 
New-Mailbox
 cmdlet.
Find mailboxes that do not have quota limits applied to them
Use the 
Get-Mailbox
 cmdlet.
Disable a mailbox
Use the 
Disable-Mailbox
 cmdlet.
Enable a mailbox for an existing user
Use the 
Enable-Mailbox
 cmdlet.
Produce information about the Exchange mailbox database
Use the 
Get-MailboxDatabase
 cmdlet.
[<0033>-5<0055>-19<0052>-20<0047>-10<0058>-12<0046>-9<0048000300440003004F>-7<004C>-12<0056>-23<0057>-9<004C>-7<0051>-18<004A00030052>-7<004900030044>-11<004F>-6<004F00030028>-34<005B>-2<0046>-3<004B>-14<0044>-11<0051>-18<004A>-14<004800030015>-8<0013>6<0014>10<0013>-69<00B2>-40<0056>-11<0053>-20<0048>-23<0046>-3<004C>-12<00C0>-12<004600030046>-3<0050>-18<0047>-6<004F>-14<0048>-17<0057>-25<0056>]TJ
Use the 
Get-ExCommand
 cmdlet.
Produce a listing of the logging level of all Exchange event logs
Use the 
Get-EventLogLevel
 cmdlet.
APPENDIX A
Windows PowerShell Core Cmdlets
here 
are 208 core Microsoft Windows PowerShell 3.0 cmdlets that are contained in two modules. 
The two modules are the Microsoft.PowerShell.Management module and the Microsoft.Power
Shell.Utility module. These cmdlets and their descriptions appear in Table A.
TABLE A
Windows PowerShell 3.0 cmdlets
Name
Description
Adds the local computer to a domain or workgroup.
[<0024>-18<0053>-14<0053>-20<0048>-17<0051>-18<0047>-13<005600030046>-7<0052>-14<0051>-8<0057>-10<0048>-17<0051>-8<0057>-26<000F00030056>-12<0058>-12<0046>-3<004B00030044>-17<00560003005A>-9<0052>-14<0055>-19<0047>-13<005600030052>-14<005500030047>-10<0044>-10<0057>-26<0044>-21<000F00030057>-7<005200030044000300C0>-9<004F>-14<0048>-14<0011>]TJ
Adds custom properties and methods to an instance of a Windows PowerShell 
object.
[<0024>-10<0047>-14<0047>-13<00560003004400030053>-13<0055>-18<004C>-7<0051>-8<0057>-10<0048>-17<005500030057>-8<005200030057>-9<004B>-16<004800030056>-11<0053>-20<0048>-23<0046>-3<004C>-12<00C0>-14<0048>-23<004700030046>-7<0052>-14<0050>-11<0053>-16<0058>-12<0057>-10<0048>-17<0055>35<0011>]TJ
[<002C>-8<0051>-16<0056>-23<0057>-26<0044>-11<004F>-6<004F>-15<00560003004400030053>-14<0055>-18<004C>-7<0051>-8<0057>-10<0048>-17<005500030047>-6<0055>-19<004C>-19<0059>-6<0048>-17<005500030052>-14<005100030057>-9<004B>-16<004800030056>-11<0053>-20<0048>-23<0046>-3<004C>-12<00C0>-14<0048>-23<004700030046>-7<0052>-14<0050>-11<0053>-16<0058>-12<0057>-10<0048>-17<0055>35<0011>]TJ
[<002C>-8<0051>-16<0056>-23<0057>-26<0044>-11<004F>-6<004F>-15<00560003004400030053>-14<0055>-18<004C>-7<0051>-8<0057>-10<0048>-17<005500030053>-20<0052>-14<0055>-47<005700030052>-14<005100030057>-9<004B>-16<004800030056>-11<0053>-20<0048>-23<0046>-3<004C>-12<00C0>-14<0048>-23<004700030046>-7<0052>-14<0050>-11<0053>-16<0058>-12<0057>-10<0048>-17<0055>35<0011>]TJ
Adds a Microsoft .NET Framework type a class to a Windows PowerShell 
session.
Creates a system restore point on the local computer.
[<0027>-19<0048>-18<004F>-14<0048>-17<0057>-10<0048>-19<005600030057>-9<004B>-16<004800030046>-7<0052>-14<0051>-8<0057>-10<0048>-17<0051>-8<0057>-25<005600030052>-7<004900030044000300C0>-9<004F>-14<0048>-16<000F00030045>-16<0058>-12<005700030047>-12<0052>-20<0048>-19<005600030051>-16<0052>-9<005700030047>-14<0048>-18<004F>-14<0048>-17<0057>-10<004800030057>-9<004B>-16<0048000300C0>-10<004F>-14<0048>-14<0011>]TJ
[<0027>-19<0048>-18<004F>-14<0048>-17<0057>-10<0048>-19<005600030044>-11<004F>-6<004F00030048>-17<0051>-8<0057>-9<0055>-19<004C>-12<0048>-19<005600030049>-19<0055>-19<0052>-14<005000030056>-11<0053>-20<0048>-23<0046>-3<004C>-12<00C0>-14<0048>-23<004700030048>-15<0059>-6<0048>-17<0051>-8<00570003004F>-14<0052>-20<004A>-13<005600030052>-14<005100030057>-9<004B>-16<00480003004F>-14<0052>-20<0046>-21<0044>-11<004F00030052>-14<005500030055>-19<0048>-17<0050>-16<0052>-9<0057>-10<004800030046>-7<0052>-14<0050>-11<0053>-16<0058>-12<0057>-10<0048>-17<0055>-32<0056>-26<0011>]TJ
Deletes the contents of an item, but does not delete the item.
Deletes the value of a property but does not delete the property.
Deletes the value of a variable.
Compares two sets of objects.
Commits the active transaction.
Connects to the WinRM service on a remote computer.
Converts object properties in comma-separated value CSV format into CSV 
versions of the original objects.
Converts a JSON-formatted string to a custom object.
Converts a string containing one or more key/value pairs to a hash table.
Converts a path from a Windows PowerShell path to a Windows PowerShell 
provider path.
  
Name
Description
Converts objects into a series of variable-length CSV strings.
Converts .NET Framework objects into HTML that can be displayed in a web 
browser.
Converts an object to a JSON-formatted string.
Creates an XML-based representation of an object.
Copies an item from one location to another within a namespace.
[<0026>-6<0052>-14<0053>-13<004C>-12<0048>-19<005600030044>-11<00510003004C>-12<0057>-10<0048>-17<005000030053>-13<0055>-19<0052>-14<0053>-20<0048>-17<0055>-47<0057>-44<005C00030044>-11<0051>-18<004700030059>-12<0044>-11<004F>-11<0058>-14<004800030049>-19<0055>-19<0052>-14<00500003004400030056>-10<0053>-20<0048>-23<0046>-3<004C>-12<00C0>-14<0048>-23<00470003004C>-12<0057>-10<0048>-17<005000030057>-8<005200030044>-11<0051>-16<0052>-9<0057>-9<004B>-16<0048>-17<00550003004C>-13<0057>-10<0048>-17<0050>-21<0011>]TJ
Debugs one or more processes running on the local computer.
[<0027>-15<004C>-12<0056>-24<0044>-11<0045>-15<004F>-14<0048>-19<005600030057>-9<004B>-16<004800030036>10<005C>-19<0056>-23<0057>-10<0048>-17<005000030035>-9<0048>-19<0056>-23<0057>-8<0052>-14<0055>-19<004800030049>-14<0048>-17<0044>-10<0057>-15<0058>-6<0055>-19<004800030052>-14<005100030057>-9<004B>-16<004800030056>-11<0053>-20<0048>-23<0046>-3<004C>-12<00C0>-14<0048>-23<0047000300C0>-10<004F>-14<004800030056>-28<005C>-19<0056>-23<0057>-10<0048>-17<005000030047>-6<0055>-19<004C>-19<0059>-6<0048>-14<0011>]TJ
Disables the breakpoints in the current console.
Disables Credential Security Support Provider CredSSP authentication on a 
client computer.
Disconnects the client from the WinRM service on a remote computer.
[<0028>-4<0051>-14<0044>-11<0045>-15<004F>-14<0048>-19<005600030057>-9<004B>-16<004800030036>10<005C>-19<0056>-23<0057>-10<0048>-17<005000030035>-9<0048>-19<0056>-23<0057>-8<0052>-14<0055>-19<004800030049>-14<0048>-17<0044>-10<0057>-15<0058>-6<0055>-19<004800030052>-14<005100030057>-9<004B>-16<004800030056>-11<0053>-20<0048>-23<0046>-3<004C>-12<00C0>-14<0048>-23<0047000300C0>-10<004F>-14<004800030056>-28<005C>-19<0056>-23<0057>-10<0048>-17<005000030047>-6<0055>-18<004C>-19<0059>-6<0048>-14<0011>]TJ
Enables the breakpoints in the current console.
Enables CredSSP authentication on a client or on a server computer.
[<0028>-34<005B>-15<0053>-20<0052>-14<0055>-47<0057>-25<00560003004C>-7<0051>-5<0049>-14<0052>-14<0055>-18<0050>-14<0044>-10<0057>-9<004C>-12<0052>-14<005100030044>-11<0045>-20<0052>-16<0058>-12<005700030046>-8<0058>-6<0055>-18<0055>-19<0048>-17<0051>-8<0057>-9<004F>-19<005C00030047>-13<0048>-16<00C0>-9<0051>-16<0048>-23<004700030044>-11<004F>-7<004C>-9<0044>-17<0056>-19<0048>-19<005600030057>-8<005200030044000300C0>-10<004F>-14<0048>-14<0011>]TJ
Creates an XML-based representation of an object or objects and stores it in 
[<0044000300C0>-9<004F>-14<0048>-14<0011>]TJ
[<0026>-6<0052>-14<0051>-4<0059>-6<0048>-17<0055>-47<0057>-25<005600030052>-14<0045>-13<004D>-12<0048>-23<0046>-31<0057>-25<00560003004C>-7<0051>-8<0057>-8<00520003004400030056>-19<0048>-17<0055>-18<004C>-12<0048>-19<005600030052>-7<004900030026>-11<0036>-22<003900030056>-23<0057>-9<0055>-18<004C>-7<0051>-18<004A>-13<005600030044>-11<0051>-18<004700030056>-24<0044>-6<0059>-6<0048>-19<005600030057>-9<004B>-16<004800030056>-23<0057>-9<0055>-19<004C>-7<0051>-18<004A>-13<00560003004C>-7<00510003004400030026>-10<0036>-22<0039000300C0>-10<004F>-14<0048>-14<0011>]TJ
[<0036>-20<0044>-6<0059>-6<0048>-19<005600030049>-14<0052>-14<0055>-18<0050>-14<0044>-10<0057>-37<0057>-9<004C>-7<0051>-18<004A00030047>-10<0044>-10<0057>-26<004400030049>-19<0055>-19<0052>-14<005000030057>-9<004B>-16<004800030046>-9<0058>-6<0055>-18<0055>-19<0048>-17<0051>-8<005700030056>-19<0048>-19<0056>-21<0056>-11<004C>-12<0052>-14<00510003004C>-7<00510003004400030049>-13<0052>-14<0055>-18<0050>-14<0044>-10<0057>-37<0057>-9<004C>-7<0051>-18<004A000300C0>-9<004F>-14<0048>-14<0011>]TJ
Imports commands from another session and saves them in a Windows 
PowerShell module.
Uses a customized view to format the output.
Formats the output as a list of properties in which each property appears on 
a new line.
Formats the output as a table.
Formats objects as a wide table that displays only one property of each object.
Gets the aliases for the current session.
[<002A>-21<0048>-17<0057>-25<005600030057>-9<004B>-16<0048000300C0>-10<004F>-14<0048>-19<005600030044>-11<0051>-18<004700030049>-14<0052>-13<004F>-15<0047>-14<0048>-17<0055>-32<00560003004C>-7<005100030044000300C0>-9<004F>-14<004800030056>-28<005C>-19<0056>-23<0057>-10<0048>-17<005000030047>-6<0055>-18<004C>-19<0059>-6<0048>-14<0011>]TJ
Gets the restore points on the local computer.
[<002A>-21<0048>-17<0057>-25<005600030057>-9<004B>-16<004800030046>-7<0052>-14<0051>-8<0057>-10<0048>-17<0051>-8<0057>-25<005600030052>-7<004900030044000300C0>-9<004F>-14<0048>-14<0011>]TJ
Gets control panel items.
Gets the current culture set in the operating system.
Gets the current date and time.
Gets the events in the event queue.
Name
Description
Gets the events in an event log, or a list of the event logs, on the local or 
remote computers.
Gets the event subscribers in the current session.
Gets the formatting data in the current session.
Gets an object that represents the current host program.
[<002A>-21<0048>-17<0057>-25<005600030057>-9<004B>-16<00480003004B>-16<0052>-9<0057>-37<00C0>-18<005B>-5<0048>-19<005600030057>-9<004B>-14<0044>-10<00570003004B>-14<0044>-6<0059>-6<004800030045>-20<0048>-23<0048>-17<005100030044>-11<0053>-14<0053>-15<004F>-7<004C>-12<0048>-23<004700030057>-8<005200030057>-9<004B>-16<00480003004F>-14<0052>-20<0046>-21<0044>-11<004F00030044>-11<0051>-18<004700030055>-19<0048>-17<0050>-16<0052>-9<0057>-10<004800030046>-7<0052>-14<0050>-11<0053>-16<0058>-12<0057>-10<0048>-17<0055>-32<0056>-26<0011>]TJ
[<002A>-21<0048>-17<0057>-25<005600030057>-9<004B>-16<00480003004C>-13<0057>-10<0048>-17<005000030044>-10<005700030057>-9<004B>-16<004800030056>-11<0053>-20<0048>-23<0046>-3<004C>-12<00C0>-14<0048>-23<00470003004F>-14<0052>-20<0046>-21<0044>-10<0057>-9<004C>-12<0052>-14<0051>-21<0011>]TJ
[<002A>-21<0048>-17<0057>-25<005600030057>-9<004B>-16<004800030053>-14<0055>-19<0052>-14<0053>-20<0048>-17<0055>-47<0057>-9<004C>-12<0048>-19<005600030052>-7<00490003004400030056>-11<0053>-20<0048>-23<0046>-3<004C>-12<00C0>-14<0048>-23<00470003004C>-12<0057>-10<0048>-17<0050>-21<0011>]TJ
Gets information about the current working location or a location stack.
Gets the properties and methods of objects.
[<002A>-21<0048>-17<0057>-25<005600030057>-9<004B>-16<004800030046>-7<0052>-14<0051>-8<00C0>-14<004A>-10<0058>-6<0055>-15<0044>-10<0057>-9<004C>-12<0052>-14<00510003004C>-7<0051>-5<0049>-14<0052>-14<0055>-19<0050>-14<0044>-10<0057>-9<004C>-12<0052>-14<005100030052>-7<00490003004400030053>-14<0055>-19<004C>-7<0051>-8<0057>-10<0048>-17<0055>35<0011>]TJ
Retrieves a list of printers installed on a computer.
[<0035>-9<0048>-17<0057>-9<0055>-18<004C>-12<0048>-15<0059>-6<0048>-19<005600030057>-9<004B>-16<00480003004F>-7<004C>-12<0056>-23<005700030052>-7<004900030053>-14<0055>-19<004C>-7<0051>-8<0057>-10<0048>-17<005500030047>-6<0055>-19<004C>-19<0059>-6<0048>-17<0055>-32<00560003004C>-7<0051>-16<0056>-23<0057>-26<0044>-11<004F>-6<004F>-14<0048>-23<004700030052>-14<005100030057>-9<004B>-16<004800030056>-11<0053>-20<0048>-23<0046>-3<004C>-12<00C0>-14<0048>-23<004700030046>-7<0052>-14<0050>-11<0053>-16<0058>-12<0057>-10<0048>-17<0055>35<0011>]TJ
[<0035>-9<0048>-17<0057>-9<0055>-18<004C>-12<0048>-15<0059>-6<0048>-19<0056000300440003004F>-7<004C>-12<0056>-23<005700030052>-7<004900030053>-14<0055>-18<004C>-7<0051>-8<0057>-10<0048>-17<005500030053>-20<0052>-14<0055>-47<0057>-25<00560003004C>-7<0051>-16<0056>-23<0057>-26<0044>-11<004F>-6<004F>-14<0048>-23<004700030052>-14<005100030057>-9<004B>-16<004800030056>-11<0053>-20<0048>-23<0046>-3<004C>-12<00C0>-14<0048>-23<004700030046>-7<0052>-14<0050>-11<0053>-16<0058>-12<0057>-10<0048>-17<0055>35<0011>]TJ
[<0035>-9<0048>-17<0057>-9<0055>-18<004C>-12<0048>-15<0059>-6<0048>-19<005600030053>-14<0055>-18<004C>-7<0051>-8<0057>-10<0048>-17<005500030053>-14<0055>-19<0052>-14<0053>-20<0048>-17<0055>-47<0057>-9<004C>-12<0048>-19<005600030049>-14<0052>-14<005500030057>-9<004B>-16<004800030056>-11<0053>-20<0048>-23<0046>-3<004C>-12<00C0>-14<0048>-23<004700030053>-14<0055>-19<004C>-7<0051>-8<0057>-10<0048>-17<0055>35<0011>]TJ
[<0035>-9<0048>-17<0057>-9<0055>-18<004C>-12<0048>-15<0059>-6<0048>-19<0056000300440003004F>-7<004C>-12<0056>-23<005700030052>-7<004900030053>-14<0055>-18<004C>-7<0051>-8<00570003004D>-12<0052>-14<0045>-15<00560003004C>-7<005100030057>-9<004B>-16<004800030056>-11<0053>-20<0048>-23<0046>-3<004C>-12<00C0>-14<0048>-23<004700030053>-14<0055>-19<004C>-7<0051>-8<0057>-10<0048>-17<0055>35<0011>]TJ
Gets the processes that are running on the local computer or a remote 
computer.
Gets the breakpoints that are set in the current session.
Displays the current call stack.
Gets drives in the current session.
[<002A>-21<0048>-17<0057>-25<00560003004C>-7<0051>-5<0049>-14<0052>-14<0055>-19<0050>-14<0044>-10<0057>-9<004C>-12<0052>-14<005100030044>-11<0045>-20<0052>-16<0058>-12<005700030057>-9<004B>-16<004800030056>-11<0053>-20<0048>-23<0046>-3<004C>-12<00C0>-14<0048>-23<00470003003A>-23<004C>-7<0051>-18<0047>-12<0052>-10<005A>-18<005600030033>-2<0052>-10<005A>-9<0048>-17<0055>-30<0036>-7<004B>-16<0048>-18<004F>-6<004F00030053>-14<0055>-19<0052>-8<0059>-19<004C>-12<0047>-14<0048>-17<0055>35<0011>]TJ
Gets a random number, or selects objects randomly from a collection.
Gets the services on a local or remote computer.
Gets the Windows PowerShell components that are instrumented for tracing.
Gets the current active transaction.
Gets the extended type data in the current session.
Gets the current user interface UI culture settings in the operating system.
Returns unique items from a sorted list.
Gets the variables in the current console.
Gets instances of Windows Management Instrumentation WMI classes or 
information about the available classes.
[<002A>-21<0048>-17<0057>-25<005600030057>-9<004B>-16<004800030026>1<0055>-19<0048>-23<0047>-8<0036>-11<0036>-7<0033>2<0010>-12<0055>-19<0048>-18<004F>-12<0044>-10<0057>-10<0048>-23<004700030046>-7<0052>-14<0051>-8<00C0>-14<004A>-10<0058>-6<0055>-15<0044>-10<0057>-9<004C>-12<0052>-14<005100030049>-14<0052>-14<005500030057>-9<004B>-16<004800030046>-3<004F>-7<004C>-12<0048>-17<0051>-8<0057>-27<0011>]TJ
[<0027>-15<004C>-12<0056>-11<0053>-15<004F>-12<0044>-5<005C>-19<005600030050>-14<0044>-11<0051>-14<0044>-18<004A>-14<0048>-17<0050>-16<0048>-17<0051>-8<00570003004C>-7<0051>-5<0049>-14<0052>-14<0055>-19<0050>-14<0044>-10<0057>-9<004C>-12<0052>-14<005100030049>-14<0052>-14<00550003004400030055>-19<0048>-19<0056>-19<0052>-16<0058>-6<0055>-17<0046>-9<00480003004C>-7<0051>-16<0056>-23<0057>-26<0044>-11<0051>-16<0046>-9<004800030056>-11<0053>-20<0048>-23<0046>-3<004C>-12<00C0>-14<0048>-23<004700030045>-10<005C000300440003>]TJ
resource URI.
[<002A>-16<0055>-19<0052>-16<0058>-6<0053>-15<005600030052>-14<0045>-13<004D>-12<0048>-23<0046>-31<0057>-25<005600030057>-9<004B>-14<0044>-10<005700030046>-7<0052>-14<0051>-8<0057>-26<0044>-9<004C>-7<005100030057>-9<004B>-16<004800030056>-24<0044>-11<0050>-16<004800030059>-12<0044>-11<004F>-11<0058>-14<004800030049>-14<0052>-14<005500030056>-11<0053>-20<0048>-23<0046>-3<004C>-12<00C0>-14<0048>-23<004700030053>-14<0055>-19<0052>-14<0053>-20<0048>-17<0055>-47<0057>-9<004C>-12<0048>-19<0056>-26<0011>]TJ
  
Name
Description
[<002C>-8<0050>-11<0053>-20<0052>-14<0055>-47<0057>-25<005600030044>-11<005100030044>-11<004F>-7<004C>-9<0044>-17<00560003004F>-7<004C>-12<0056>-23<005700030049>-19<0055>-19<0052>-14<005000030044000300C0>-9<004F>-14<0048>-14<0011>]TJ
[<002C>-8<0050>-11<0053>-20<0052>-14<0055>-47<0057>-25<00560003004400030026>4<002F>-13<002C>-13<003B>-13<0030>-11<002F000300C0>-10<004F>-14<004800030044>-11<0051>-18<004700030046>-3<0055>-19<0048>-17<0044>-10<0057>-10<0048>-19<005600030046>-7<0052>-14<0055>-18<0055>-19<0048>-19<0056>-11<0053>-20<0052>-14<0051>-18<0047>-7<004C>-7<0051>-18<004A00030052>-14<0045>-13<004D>-12<0048>-23<0046>-31<0057>-25<00560003005A>-16<004C>-13<0057>-9<004B>-9<004C>-7<00510003003A>-23<004C>-7<0051>-18<0047>-12<0052>-10<005A>-19<00560003>]TJ
PowerShell.
[<0026>1<0055>-19<0048>-17<0044>-10<0057>-10<0048>-19<005600030057>-26<0044>-11<0045>-15<004F>-14<0048>-25<0010>-12<004F>-7<004C>-7<004E>4<004800030046>-9<0058>-13<0056>-23<0057>-8<0052>-14<005000030052>-14<0045>-13<004D>-12<0048>-23<0046>-31<0057>-25<005600030049>-19<0055>-19<0052>-14<005000030057>-9<004B>-16<00480003004C>-13<0057>-10<0048>-17<0050>-16<00560003004C>-7<00510003004400030026>-10<0036>-22<0039000300C0>-10<004F>-14<0048>-14<0011>]TJ
[<002C>-8<0050>-11<0053>-20<0052>-14<0055>-47<0057>-25<00560003004F>-12<0044>-11<0051>-18<004A>-10<0058>-10<0044>-18<004A>-14<0048>-25<0010>-11<0056>-11<0053>-20<0048>-23<0046>-3<004C>-12<00C0>-12<004600030047>-10<0044>-10<0057>-26<00440003004C>-7<0051>-8<0057>-8<005200030056>-19<0046>-3<0055>-19<004C>-7<0053>-12<0057>-25<005600030044>-11<0051>-18<004700030049>-25<0058>-6<0051>-16<0046>-31<0057>-9<004C>-12<0052>-14<0051>-16<005600030045>-16<0044>-17<0056>-19<0048>-23<004700030052>-14<005100030057>-9<004B>-16<004800030038>-14<002C0003>]TJ
culture that is selected for the operating system.
Imports commands from another session into the current session.
[<0035>-7<0058>-6<0051>-16<00560003004400030046>-7<0052>-14<0050>-11<0050>-14<0044>-11<0051>-18<004700030052>-14<005500030048>-13<005B>-15<0053>-14<0055>-19<0048>-19<0056>-21<0056>-11<004C>-12<0052>-14<005100030044>-17<0056000300440003003A>-23<004C>-7<0051>-18<0047>-12<0052>-10<005A>-19<005600030033>-2<0052>-10<005A>-9<0048>-17<0055>-30<0036>-7<004B>-16<0048>-18<004F>-6<004F0003005A>-9<0052>-14<0055>-19<004E>-40<00C1>-15<0052>-10<005A>12<0011>]TJ
Runs commands or expressions on the local computer.
[<0033>-2<0048>-17<0055>-44<0049>-14<0052>-14<0055>-18<0050>-16<005600030057>-9<004B>-16<004800030047>-14<0048>-15<0049>-16<0044>-13<0058>-6<004F>-13<005700030044>-16<0046>-31<0057>-9<004C>-12<0052>-14<005100030052>-14<005100030057>-9<004B>-16<004800030056>-11<0053>-20<0048>-23<0046>-3<004C>-12<00C0>-14<0048>-23<00470003004C>-12<0057>-10<0048>-17<0050>-20<0011>]TJ
Sends an HTTP or HTTPS request to a REST-compliant web service.
Sends an HTTP or HTTPS request to a web service.
Calls WMI methods.
[<002C>-8<0051>-4<0059>-6<0052>-14<004E>4<0048>-19<005600030044>-11<005100030044>-16<0046>-31<0057>-9<004C>-12<0052>-14<005100030052>-14<005100030057>-9<004B>-16<004800030052>-14<0045>-13<004D>-12<0048>-23<0046>-31<005700030057>-9<004B>-14<0044>-10<00570003004C>-12<005600030056>-11<0053>-20<0048>-23<0046>-3<004C>-12<00C0>-14<0048>-23<004700030045>-10<005C00030057>-9<004B>-16<004800030055>-19<0048>-19<0056>-19<0052>-16<0058>-6<0055>-17<0046>-9<004800030038>-14<0035>-13<002C00030044>-11<0051>-18<004700030045>-9<005C0003>]TJ
the selectors.
Combines a path and a child path into a single path. The provider supplies the 
path delimiters.
Sets the event log properties that limit the size of the event log and the age of 
its entries.
Measures the time it takes to run script blocks and cmdlets.
Calculates the numeric properties of objects, and the characters, words, and 
[<004F>-7<004C>-7<0051>-16<0048>-19<00560003004C>-7<005100030056>-23<0057>-9<0055>-19<004C>-7<0051>-18<004A00030052>-14<0045>-13<004D>-12<0048>-23<0046>-31<0057>-25<0056>-26<000F00030056>-12<0058>-12<0046>-3<004B00030044>-17<0056000300C0>-10<004F>-14<0048>-19<005600030052>-7<004900030057>-10<0048>-13<005B>-43<0057>-26<0011>]TJ
Moves an item from one location to another.
Moves a property from one location to another.
Creates a new alias.
Creates a new event.
Creates a new event log and a new event source on a local or remote 
computer.
Creates a new item.
Creates a new property for an item and sets its value. For example, you can 
use 
New-ItemProperty
 to create and change registry values and data, which 
are properties of a registry key.
Creates an instance of a.NET Framework or COM object.
Creates temporary and persistent mapped network drives.
Creates a new Windows service.
Creates a 
TimeSpan
 object.
Creates a new variable.
Creates a web service proxy object that lets you use and manage the web 
service in Windows PowerShell.
Name
Description
Creates a new instance of a management resource.
Creates a WS-Management session option hash table to use as input 
parameters to the following WS-Management cmdlets: 
Get-WSManInstance, 
Set-WSManInstance, Invoke-WSManAction,
 and 
Connect-WSMan.
[<0036>-18<0048>-17<0051>-18<0047>-13<005600030052>-16<0058>-12<0057>-9<0053>-16<0058>-12<005700030057>-7<005200030044000300C0>-10<004F>-14<0048>-14<0011>]TJ
Sends output to an interactive table in a separate window.
Sends output to a printer.
Sends objects to the host as a series of strings.
Changes the current location to the location most recently pushed onto the 
stack. You can pop the location from the default stack or from a stack that you 
create by using the 
Push-Location
 cmdlet.
Adds the current location to the top of a location stack.
Reads a line of input from the console.
Subscribes to events that are generated by the Windows PowerShell engine 
and by the 
New-Event
 cmdlet.
Subscribes to events that are generated by a.NET Framework object.
Subscribes to a WMI event.
Removes the local computer from its domain.
Deletes events from the event queue.
Deletes an event log or unregisters an event source.
[<0027>-19<0048>-18<004F>-14<0048>-17<0057>-10<0048>-19<005600030057>-9<004B>-16<004800030056>-11<0053>-20<0048>-23<0046>-3<004C>-12<00C0>-14<0048>-23<00470003004C>-12<0057>-10<0048>-17<0050>-16<0056>-26<0011>]TJ
Deletes the property and its value from an item.
[<0035>-9<0048>-17<0050>-16<0052>-8<0059>-6<0048>-19<00560003004400030053>-14<0055>-18<004C>-7<0051>-8<0057>-10<0048>-17<005500030049>-19<0055>-19<0052>-14<005000030057>-9<004B>-16<004800030056>-11<0053>-20<0048>-23<0046>-3<004C>-12<00C0>-14<0048>-23<004700030046>-7<0052>-14<0050>-11<0053>-16<0058>-12<0057>-10<0048>-17<0055>35<0011>]TJ
[<0027>-19<0048>-18<004F>-14<0048>-17<0057>-10<0048>-19<005600030057>-9<004B>-16<004800030053>-14<0055>-19<004C>-7<0051>-8<0057>-10<0048>-17<005500030047>-6<0055>-19<004C>-19<0059>-6<0048>-17<005500030049>-19<0055>-19<0052>-14<005000030057>-9<004B>-16<004800030056>-11<0053>-20<0048>-23<0046>-3<004C>-12<00C0>-14<0048>-23<004700030046>-7<0052>-14<0050>-11<0053>-16<0058>-12<0057>-10<0048>-17<0055>35<0011>]TJ
[<0035>-9<0048>-17<0050>-16<0052>-8<0059>-6<0048>-19<005600030057>-9<004B>-16<004800030056>-11<0053>-20<0048>-23<0046>-3<004C>-12<00C0>-14<0048>-23<004700030053>-14<0055>-18<004C>-7<0051>-8<0057>-10<0048>-17<005500030053>-20<0052>-14<0055>-47<005700030049>-19<0055>-19<0052>-14<005000030057>-9<004B>-16<004800030056>-11<0053>-20<0048>-23<0046>-3<004C>-12<00C0>-14<0048>-23<004700030046>-7<0052>-14<0050>-11<0053>-16<0058>-12<0057>-10<0048>-17<0055>35<0011>]TJ
[<0035>-9<0048>-17<0050>-16<0052>-8<0059>-6<0048>-19<00560003004400030053>-14<0055>-18<004C>-7<0051>-8<00570003004D>-12<0052>-14<004500030052>-14<005100030057>-9<004B>-16<004800030056>-11<0053>-20<0048>-23<0046>-3<004C>-12<00C0>-14<0048>-23<004700030053>-14<0055>-19<004C>-7<0051>-8<0057>-10<0048>-17<0055>35<0011>]TJ
Deletes breakpoints from the current console.
Deletes temporary Windows PowerShell drives and disconnects mapped 
network drives.
Deletes extended types from the current session
Deletes a variable and its value.
Deletes an instance of an existing WMI class.
Deletes a management resource instance.
Renames a computer.
Renames an item in a Windows PowerShell provider namespace.
Renames a property of an item.
[<0035>-9<0048>-17<0051>-14<0044>-11<0050>-16<0048>-19<005600030057>-9<004B>-16<004800030056>-11<0053>-20<0048>-23<0046>-3<004C>-12<00C0>-14<0048>-23<004700030053>-14<0055>-18<004C>-7<0051>-8<0057>-10<0048>-17<0055>35<0011>]TJ
  
Name
Description
Resets the machine account password for the computer.
Resolves the wildcard characters in a path and displays the path contents.
Restarts reboots the operating system on local and remote computers.
[<0035>-9<0048>-19<0056>-23<0057>-26<0044>-11<0055>-47<0057>-25<00560003004400030053>-14<0055>-18<004C>-7<0051>-8<00570003004D>-12<0052>-14<004500030052>-14<005100030057>-9<004B>-16<004800030056>-11<0053>-20<0048>-23<0046>-3<004C>-12<00C0>-14<0048>-23<004700030053>-14<0055>-18<004C>-7<0051>-8<0057>-10<0048>-17<0055>35<0011>]TJ
Stops and then starts one or more services.
Starts a system restore on the local computer.
Resumes a suspended print job.
Resumes one or more suspended paused services.
Selects objects or object properties.
[<0029>-9<004C>-7<0051>-18<0047>-13<005600030057>-10<0048>-13<005B>-43<00570003004C>-7<005100030056>-23<0057>-9<0055>-19<004C>-7<0051>-18<004A>-13<005600030044>-11<0051>-18<0047000300C0>-10<004F>-14<0048>-19<0056>-26<0011>]TJ
Finds text in an XML string or document.
Sends an email message.
Creates or changes an alias alternate name for a cmdlet or other command 
element in the current Windows PowerShell session.
[<0035>-9<0048>-17<0053>-15<004F>-12<0044>-16<0046>-9<0048>-19<005600030057>-9<004B>-16<004800030046>-7<0052>-14<0051>-8<0057>-10<0048>-17<0051>-8<0057>-25<005600030052>-7<004900030044000300C0>-9<004F>-14<00480003005A>-16<004C>-12<0057>-9<004B00030046>-7<0052>-14<0051>-8<0057>-10<0048>-17<0051>-8<0057>-25<005600030057>-9<004B>-14<0044>-10<00570003005C>-6<0052>-16<005800030056>-11<0053>-20<0048>-23<0046>-3<004C>-10<0049>-54<005C>26<0011>]TJ
Changes the system time on the computer to a time that you specify.
[<0026>1<004B>-14<0044>-11<0051>-18<004A>-14<0048>-19<005600030057>-9<004B>-16<004800030059>-12<0044>-11<004F>-11<0058>-14<004800030052>-7<004900030044>-11<00510003004C>-12<0057>-10<0048>-17<005000030057>-7<005200030057>-9<004B>-16<004800030059>-12<0044>-11<004F>-11<0058>-14<004800030056>-11<0053>-20<0048>-23<0046>-3<004C>-12<00C0>-14<0048>-23<00470003004C>-7<005100030057>-9<004B>-16<004800030046>-7<0052>-14<0050>-11<0050>-14<0044>-11<0051>-18<0047>-15<0011>]TJ
Creates or changes the value of a property of an item.
[<0036>-18<0048>-17<0057>-25<005600030057>-9<004B>-16<004800030046>-9<0058>-6<0055>-18<0055>-19<0048>-17<0051>-8<00570003005A>-8<0052>-14<0055>-19<004E>-21<004C>-7<0051>-18<004A0003004F>-14<0052>-20<0046>-21<0044>-10<0057>-9<004C>-12<0052>-14<005100030057>-8<00520003004400030056>-11<0053>-20<0048>-23<0046>-3<004C>-12<00C0>-14<0048>-23<00470003004F>-14<0052>-20<0046>-21<0044>-10<0057>-9<004C>-12<0052>-14<0051>-21<0011>]TJ
[<0036>-18<0048>-17<0057>-25<005600030057>-9<004B>-16<004800030046>-7<0052>-14<0051>-8<00C0>-14<004A>-10<0058>-6<0055>-15<0044>-10<0057>-9<004C>-12<0052>-14<00510003004C>-7<0051>-5<0049>-14<0052>-14<0055>-18<0050>-14<0044>-10<0057>-9<004C>-12<0052>-14<005100030049>-14<0052>-14<005500030057>-9<004B>-16<004800030056>-11<0053>-20<0048>-23<0046>-3<004C>-12<00C0>-14<0048>-23<004700030053>-14<0055>-19<004C>-7<0051>-8<0057>-10<0048>-17<0055>35<0011>]TJ
[<0038>-9<0053>-22<0047>-10<0044>-10<0057>-10<0048>-19<005600030057>-9<004B>-16<004800030046>-7<0052>-14<0051>-8<00C0>-14<004A>-10<0058>-6<0055>-15<0044>-10<0057>-9<004C>-12<0052>-14<005100030052>-7<004900030044>-11<005100030048>-13<005B>-15<004C>-12<0056>-23<0057>-9<004C>-7<0051>-18<004A00030053>-14<0055>-18<004C>-7<0051>-8<0057>-10<0048>-17<0055>35<0011>]TJ
[<0030>-15<0052>-20<0047>-7<004C>-12<00C0>-14<0048>-19<005600030057>-9<004B>-16<004800030053>-14<0055>-19<004C>-7<0051>-8<0057>-10<0048>-17<005500030053>-14<0055>-19<0052>-14<0053>-20<0048>-17<0055>-47<0057>-9<004C>-12<0048>-19<005600030049>-14<0052>-14<005500030057>-9<004B>-16<004800030056>-11<0053>-20<0048>-23<0046>-3<004C>-12<00C0>-14<0048>-23<004700030053>-14<0055>-18<004C>-7<0051>-8<0057>-10<0048>-17<0055>35<0011>]TJ
Sets a breakpoint on a line, command, or variable.
Starts, stops, and suspends a service, and changes its properties.
[<0026>-6<0052>-14<0051>-8<00C0>-14<004A>-10<0058>-6<0055>-19<0048>-19<0056>-26<000F00030056>-22<0057>-26<0044>-11<0055>-47<0057>-25<0056>-26<000F00030044>-11<0051>-18<004700030056>-23<0057>-8<0052>-14<0053>-15<00560003004400030057>-9<0055>-15<0044>-16<0046>-9<004800030052>-7<00490003003A>-23<004C>-7<0051>-18<0047>-12<0052>-10<005A>-18<005600030033>-2<0052>-10<005A>-9<0048>-17<0055>-30<0036>-7<004B>-16<0048>-18<004F>-6<004F00030046>-7<0052>-14<0050>-11<0053>-20<0052>-14<0051>-16<0048>-17<0051>-8<0057>-25<0056>-26<0011>]TJ
Sets the value of a variable. It creates the variable if one with the requested 
name does not exist.
Creates or updates an instance of an existing WMI class.
[<0030>-15<0052>-20<0047>-7<004C>-12<00C0>-14<0048>-19<005600030057>-9<004B>-16<004800030050>-14<0044>-11<0051>-14<0044>-18<004A>-14<0048>-17<0050>-16<0048>-17<0051>-8<00570003004C>-7<0051>-5<0049>-14<0052>-14<0055>-18<0050>-14<0044>-10<0057>-9<004C>-12<0052>-14<005100030057>-9<004B>-14<0044>-10<00570003004C>-12<005600030055>-19<0048>-18<004F>-12<0044>-10<0057>-10<0048>-23<004700030057>-8<00520003004400030055>-19<0048>-19<0056>-19<0052>-16<0058>-6<0055>-17<0046>-9<0048>-14<0011>]TJ
[<0026>-6<0052>-14<0051>-8<00C0>-14<004A>-10<0058>-6<0055>-19<0048>-19<005600030057>-9<004B>-16<00480003004F>-14<0052>-20<0046>-21<0044>-11<004F00030046>-7<0052>-14<0050>-11<0053>-16<0058>-12<0057>-10<0048>-17<005500030049>-14<0052>-14<005500030055>-19<0048>-17<0050>-16<0052>-9<0057>-10<004800030050>-14<0044>-11<0051>-14<0044>-18<004A>-14<0048>-17<0050>-16<0048>-17<0051>-8<0057>-26<0011>]TJ
Creates Windows PowerShell commands in a graphical command window.
Opens control panel items.
Displays the event logs of the local or a remote computer in the Event Viewer 
utility.
Sorts objects by property values.
[<0035>-9<0048>-17<0057>-15<0058>-6<0055>-19<0051>-16<005600030057>-9<004B>-16<004800030056>-11<0053>-20<0048>-23<0046>-3<004C>-12<00C0>-14<0048>-23<004700030053>-16<0044>-11<0055>-47<005700030052>-7<00490003004400030053>-16<0044>-10<0057>-9<004B>-21<0011>]TJ
Name
Description
Starts one or more processes on the local computer.
Starts one or more stopped services.
[<0036>-8<0058>-13<0056>-11<0053>-20<0048>-17<0051>-18<0047>-13<005600030057>-9<004B>-16<004800030044>-16<0046>-31<0057>-9<004C>-19<0059>-19<004C>-13<0057>-44<005C0003004C>-7<00510003004400030056>-19<0046>-3<0055>-19<004C>-7<0053>-12<005700030052>-14<005500030056>-19<0048>-19<0056>-21<0056>-11<004C>-12<0052>-14<005100030049>-14<0052>-14<005500030057>-9<004B>-16<004800030056>-11<0053>-20<0048>-23<0046>-3<004C>-12<00C0>-14<0048>-23<004700030053>-20<0048>-17<0055>-18<004C>-12<0052>-20<004700030052>-7<004900030057>-9<004C>-7<0050>-16<0048>-14<0011>]TJ
Starts a transaction.
Stops shuts down local and remote computers.
Stops one or more running processes.
Stops one or more running services.
[<0036>-8<0058>-13<0056>-11<0053>-20<0048>-17<0051>-18<0047>-13<00560003004400030053>-14<0055>-18<004C>-7<0051>-8<00570003004D>-12<0052>-14<004500030052>-14<005100030057>-9<004B>-16<004800030056>-11<0053>-20<0048>-23<0046>-3<004C>-12<00C0>-14<0048>-23<004700030053>-14<0055>-18<004C>-7<0051>-8<0057>-10<0048>-17<0055>35<0011>]TJ
Suspends pauses one or more running services.
[<0036>-20<0044>-6<0059>-6<0048>-19<005600030046>-7<0052>-14<0050>-11<0050>-14<0044>-11<0051>-18<004700030052>-16<0058>-12<0057>-9<0053>-16<0058>-12<00570003004C>-7<005100030044000300C0>-9<004F>-14<004800030052>-14<005500030059>-12<0044>-11<0055>-18<004C>-9<0044>-11<0045>-15<004F>-14<004800030044>-11<0051>-18<004700030044>-11<004F>-15<0056>-19<005200030056>-19<0048>-17<0051>-18<0047>-13<00560003004C>-13<005700030047>-12<0052>-10<005A>-16<005100030057>-9<004B>-16<00480003>]TJ
pipeline.
Tests and repairs the secure channel between the local computer and its 
domain.
Sends ICMP echo request packets pings to one or more computers.
[<0027>-19<0048>-17<0057>-10<0048>-17<0055>-19<0050>-9<004C>-7<0051>-16<0048>-19<00560003005A>-16<004B>-16<0048>-17<0057>-9<004B>-16<0048>-17<005500030044>-11<004F>-6<004F00030048>-18<004F>-14<0048>-17<0050>-16<0048>-17<0051>-8<0057>-25<005600030052>-7<004900030044000300C0>-9<004F>-14<004800030052>-14<005500030047>-7<004C>-7<0055>-19<0048>-23<0046>-31<0057>-8<0052>-14<0055>-53<005C00030053>-16<0044>-10<0057>-9<004B00030048>-13<005B>-15<004C>-12<0056>-23<0057>-27<0011>]TJ
Tests whether the WinRM service is running on a local or remote computer.
[<0026>-6<0052>-14<0051>-8<00C0>-14<004A>-10<0058>-6<0055>-19<0048>-19<005600030044>-11<0051>-18<004700030056>-23<0057>-26<0044>-11<0055>-47<0057>-25<00560003004400030057>-9<0055>-15<0044>-16<0046>-9<004800030052>-7<004900030057>-9<004B>-16<004800030056>-11<0053>-20<0048>-23<0046>-3<004C>-12<00C0>-14<0048>-23<004700030048>-13<005B>-15<0053>-14<0055>-19<0048>-19<0056>-21<0056>-11<004C>-12<0052>-14<005100030052>-14<005500030046>-7<0052>-14<0050>-11<0050>-14<0044>-11<0051>-18<0047>-15<0011>]TJ
[<0038>-9<0051>-11<0045>-15<004F>-14<0052>-20<0046>-3<004E>-37<0056000300C0>-10<004F>-14<0048>-19<005600030057>-9<004B>-14<0044>-10<00570003005A>-8<0048>-17<0055>-19<004800030047>-12<0052>-10<005A>-16<0051>-11<004F>-14<0052>-17<0044>-18<0047>-14<0048>-23<004700030049>-19<0055>-19<0052>-14<005000030057>-9<004B>-16<00480003002C>-8<0051>-8<0057>-10<0048>-17<0055>-19<0051>-16<0048>-17<0057>-27<0011>]TJ
Rolls back the active transaction.
Cancels an event subscription.
Updates the formatting data in the current session.
Adds items to and removes items from a property value that contains a 
collection of objects.
Updates the extended type data in the session.
Adds the script block to the active transaction.
Waits until a particular event is raised before continuing to run.
Waits for the processes to be stopped before accepting more input.
Writes a debug message to the console.
Writes an object to the error stream.
Writes an event to an event log.
Writes customized output to a host.
[<0036>-18<0048>-17<0051>-18<0047>-13<005600030057>-9<004B>-16<004800030056>-11<0053>-20<0048>-23<0046>-3<004C>-12<00C0>-14<0048>-23<004700030052>-14<0045>-13<004D>-12<0048>-23<0046>-31<0057>-25<005600030057>-8<005200030057>-9<004B>-16<004800030051>-16<0048>-13<005B>-43<005700030046>-7<0052>-14<0050>-11<0050>-14<0044>-11<0051>-18<00470003004C>-7<005100030057>-9<004B>-16<004800030053>-13<004C>-7<0053>-20<0048>-18<004F>-7<004C>-7<0051>-16<0048>-14<00110003002C>-7<004900030057>-9<004B>-16<00480003>]TJ
command is the last command in the pipeline, the objects are displayed in the 
console.
Displays a progress bar within a Windows PowerShell command window.
Writes text to the verbose message stream.
Writes a warning message.
APPENDIX B
Windows PowerShell 
Module Coverage
icrosoft 
Windows PowerShell 3.0 represents a major advance over Windows PowerShell 2.0. 
Especially on Windows 8 and Windows Server 2012, the amount of cmdlet coverage vastly 
increases. But many of the cmdlets are specialized, and the actual number of cmdlets varies depend
[<004C0051>-11<004A00030052>-7<00510003005A>-9<004B>-7<0044>-3<005700030055>-12<0052>-6<004F>-7<0048>-12<005600030044>-4<0051>-11<004700030049>-7<0048>-10<0044>-3<0057>-8<0058>1<0055>-12<0048>-12<005600030057>-2<004B>-9<0048000300460052>-7<005100C0>-7<004A>-3<0058>1<0055>-8<0044>-3<0057>-2<004C>-5<0052>-7<005100030048>-10<0051>-7<0044>-4<0045>-8<004F>-7<0048>-12<0056>-19<00110003002C>-1<005100030044>-11<0047>-7<0047004C>-5<0057>-2<004C>-5<0052>-7<0051>-14<000F0003005700520003004A>-7<0048>-10<00570003004400030049>-18<0058>1<004F>1<004F>-7<0048>-10<005500030053>-6<004C>-3<0046>-25<0057>-8<0058>1<0055>-12<0048000300520049000300460052>-1<0059>1<0048>-10<0055>]TJ
age, it is necessary to include functions27because the 
Common Information Model CIM provider 
wraps Windows Management Instrumentation WMI classes and exposes the result as a function, 
not a cmdlet27as well as cmdlets. On a default install of Windows Server 2012 with only the File and 
[<0036>14<0057>-1<0052>-7<0055>-8<0044>-11<004A>-7<004800030036>-11<0048>-10<0055>-47<0059>-12<004C>-3<0046>-2<0048>-12<005600030055>-12<0052>-6<004F>-7<0048000300460052>-7<005100C0>-7<004A>-3<0058>1<0055>-12<0048>-16<0047>-9<000F00030057>-2<004B>-9<0048>-10<0055>-12<004800030044>-4<0055>-12<004800030014>-8<000F>16<0014>22<0019>1<001500030046>4<0050>-11<0047>1<004F>-7<0048>-10<0057>-19<005600030044>-4<0051>-11<004700030049>-7<0048>-10<0044>-3<0057>-8<0058>1<0055>-12<0048>-12<0056>-19<001100030037>55<00520003004A>-7<0048>-10<005700030044>-4<00510003004C>-5<0047>-7<0048>-10<004400030052>1<004900030057>-2<004B>-9<004800030046>4<0050>-11<0047>1<004F>-7<0048>-10<00570003>]TJ
coverage, load all of the modules, and then use the 
Get-Command
 cmdlet to examine the cmdlets. 
The result is a list that details what modules exist and the number of cmdlets and functions exposed. 
[<0037>59<0044>-4<0045>-8<004F>-7<00480003002500030056>-4<004B>-9<0052>-3<005A>-12<005600030057>-2<004B>-2<004C>-5<00560003004F004C>-5<0056>-16<0057>-20<001100030037>-7<004B>-9<0048000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<004700030058>-6<0056>-12<0048>-16<004700030057>-1<0052000300C0>-2<0051>-11<004700030057>-2<004B>-2<004C>-5<00560003004C0051>2<0049>-7<0052>-7<0055>-12<0050>-7<0044>-3<0057>-2<004C>-5<0052>-7<005100030044>-4<0053>-7<0053>-13<0048>-10<0044>-4<0055>-26<00560003004B>-9<0048>-10<0055>-12<0048>5<001D>]TJ
TABLE B
Count of cmdlets and functions from modules on Windows Server 2012
Count
Name
135
ActiveDirectory
Microsoft.PowerShell.Utility
NetSecurity
Storage
Microsoft.PowerShell.Management
RemoteDesktop
NetAdapter
NFS
MsDtc
NetworkTransition
BranchCache
  
Count
Name
NetTCPIP
SmbShare
IscsiTarget
ServerManagerTasks
Dism
PrintManagement
ScheduledTasks
International
PKI
DnsClient
PSScheduledJob
UserAccessLogging
Microsoft.WSMan.Management
iSCSI
NetLbfo
CimCmdlets
Wdac
DirectAccessClientComponents
PSDiagnostics
Microsoft.PowerShell.Security
TrustedPlatformModule
BitsTransfer
NetSwitchTeam
Appx
Kds
VpnClient
AppLocker
Microsoft.PowerShell.Diagnostics
ServerManager
SecureBoot
MMAgent
NetworkConnectivityStatus
NetQos
BestPractices
Count
Name
ISE
WindowsDeveloperLicense
WindowsErrorReporting
[<0033>-23<0036>-27<003A0052>-21<0055>-25<004E>-47<00C1>-22<0052>-17<005A>]TJ
SmbWitness
NetConnection
TroubleshootingPack
Whea
ServerCore
Microsoft.PowerShell.Host
APPENDIX C
Windows PowerShell 
Cmdlet 
aming
he 
cmdlets installed with Microsoft Windows PowerShell all follow a standard naming convention. 
Windows PowerShell cmdlets use a verb-noun pair. For example, there are four commands that 
start with the verb 
Add
Add-Content
Add-History
Add-Member
, and 
Add-PSSnapin
. When creating 
cmdlets, you should endeavor to follow the same kind of naming convention. The recognition of this 
naming convention is helpful in learning the cmdlets that come with Windows PowerShell. Table C 
shows the number of Windows PowerShell cmdlets associated with each of the verbs. In addition, 
it shows sample Windows PowerShell cmdlet names.
TABLE C
Cmdlet naming
Count
Name
Sample use
  
Count
Name
Sample use
Count
Name
Sample use
APPENDIX D
Windows PowerShell F
his appendix answers many questions that come up when I teach Windows PowerShell classes and 
when making Windows PowerShell presentations at various events. 
How many 
cmdlets are available on a default Windows PowerShell 3.0 installation?
A.
403
[<002B>-8<0052>-3<005A00030047>-5<00520003005C>1<0052>-10<0058000300C0>-2<0051>-11<004700030052>-9<0058>-5<00570003004B>-9<0052>-3<005A00030050>-7<0044>-4<0051>4<005C00030046>4<0050>-11<0047>1<004F>-7<0048>-10<0057>-19<005600030044>-4<0055>-12<004800030044>1<0059>-5<0044>-2<004C004F>-5<0044>-4<0045>-8<004F>-7<004800030052>-7<00510003004400030047>-6<0048>-8<0049>-9<0044>-6<0058>1<004F>-6<00570003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F0003>]TJ
installation?
A.
Use the following:
What is the difference between a 
read-only variable and a constant?
A.
A read-only variable is one whose content is read-only. You can, however, modify it by using 
the 
Set-Variable
 cmdlet with the 
-force
 parameter. You can also delete it by using 
Remove-
Variable -force
[<001100030024000300460052>-7<0051>-9<0056>-16<0057>-19<0044>-4<0051005700030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<00480003004B>-9<0052>-3<005A>-2<0048>-8<0059>1<0048>-10<0055>39<000F00030046>-14<0044>-4<0051>-4<0051>-9<0052>-2<005700030045>-13<004800030047>-7<0048>-11<004F>-7<0048>-10<0057>-3<0048>-16<0047>-9<000F00030051>-9<0052>-7<005500030046>-15<0044>-4<00510003004C>-5<005700030045>-13<004800030050>-9<0052>-13<0047004C>-5<00C0>-7<0048>-16<0047>-9<000F00030048>-8<0059>1<0048>-10<00510003>]TJ
when using 
-force
What are the three most important 
cmdlets?
A.
The three most important cmdlets are 
Get-Command
Get-Help
, and 
Get-Member.
Which 
cmdlets can I use to work with event logs?
A.
To work with event logs, use the 
Get-EventLog
 cmdlet or the 
Get-WinEvent 
cmdlet. 
[<002B>-8<0052>-3<005A00030047004C>-5<00470003005C>1<0052>-9<0058000300C0>-2<0051>-11<004700030057>-2<004B>-7<0044>-3<005700030046>4<0050>-11<0047>1<004F>-7<0048>-10<0057>18<0022>]TJ
A.
Use the following:
  
What .NET Framework class is leveraged by the 
Get-EventLog
 cmdlet?
A.
The following class is used by the 
Get-EventLog
 cmdlet:
[<002B>-8<0052>-3<005A0003005A>-2<0052>-9<0058>1<004F>-8<00470003002C000300C0>-2<0051>-11<004700030057>-2<004B>-9<004800030044>-4<0045>-13<0052>-1<0059>1<00480003004C0051>2<0049>-7<0052>-7<0055>-12<0050>-7<0044>-3<0057>-2<004C>-5<0052>-7<0051>31<00220003>]TJ
A.
Use the following:
What is the most powerful 
command in PowerShell?
A.
Switch
 is the most powerful command.
What is 
 used for?
A.
 is used for a tab.
How would I use the
 in a script to produce a tab?
A.
You can do so as follows:
That syntax above is ugly. What happens if I put a space in it, like this: 
"`t hi"
A.
If you include a space in the line, then you will tab over one tab stop and one additional space. 
Is the 
 command case sensitive?
A.
Yes. It is one of the few things that is case sensitive in Windows PowerShell. If you use the 
 as 
shown here, then you will produce 
Thi
 on the line:
How do I run a script with a 
space in the path? 
A.
Use the following:
What is the easiest way to create an 
array?
A.
Use the following:
How do I display a calculated value for example, megabytes instead of bytes from a WMI 
query when pipelining data into a 
Format-Table
 cmdlet? 
A.
Create a hash table in the position where you wish to display the data and perform the calcu
lation inside curly brackets. Assign the results to the 
expression
 parameter. This is shown here:
Which parameter of the 
Get-WMIObject
 cmdlet takes the place of a WQL 
Where
 clause? 
A.
The 
[<0010>-5<00C0>-1<004F0057>7<0048>1<0055>]TJ
 parameter takes its place, as shown here: 
Which command, when typed at the beginning of a script, will cause Windows PowerShell to 
ignore 
errors and continue executing the code?
A.
The following command does this:
How can I display only the current year?
A.
Use the following: 
What is Windows PowerShell, in 30 words or less?
A.
Windows PowerShell is the next-generation CMD prompt and scripting language 
from Microsoft. It can be a replacement for VBScript and for the CMD prompt in most 
circumstances. 
  
How can you be sure that was 30 words or less?
A.
Use the following code:
What are three ways of querying 
Active Directory from within Windows PowerShell? 
A.
You can use ADO and perform an LDAP dialect query, or you can use ADO and perform an 
SQL dialect query. You can also use the 
Get-ADOObject
 cmdlet from the Active Directory 
module.
[<002B>-8<0052>-3<005A00030046>-14<0044>-4<00510003002C00030053>-7<0055>-12<004C0051005700030052>-9<0058>-5<005700030057>-2<004B>-9<004800030044>-4<0050>-9<0052>-9<0058>1<0051005700030052>1<004900030049>-12<0055>-12<0048>-16<004800030056>-4<0053>-9<0044>-9<0046>-2<004800030052>-7<005100030044000300C0>-10<005B>2<0048>-16<004700030047004C>-5<0056>-4<004E0003004C005100030050>-9<0048>-16<004A>-3<0044>-4<0045>-2<005C>-41<0057>-3<0048>-12<00560003005A>-9<004C>-5<0057>-2<004B00030057>-35<005A>-2<005200030047>-7<0048>-16<0046>4<004C0050>-7<0044>-4<004F0003>]TJ
places?
A.
[<0038>-3<0056>-12<00480003004400030049>-7<0052>-7<0055>-12<0050>-7<0044>-3<005700030056>-3<0053>-13<0048>-16<0046>4<004C>-5<00C0>-7<0048>-10<0055>39<000F00030044>-10<005600030056>-4<004B>-9<0052>-3<005A>-9<00510003004B>-9<0048>-10<0055>-12<0048>5<001D>]TJ
I need to replace the 
 with 
 in the following 
$array
 variable: 
$array = 23124,23224,23324,23424
. How 
can I do this?
A.
Use the following:
I have the following 
Switch
 statement and I want to prevent the line 
Write-Host 23switched24
from being executed. How can I do this?
A.
Add an 
exit
 statement to the default switch, as shown here:
How can I supply alternate credentials for a remote WMI call when using the 
Get-WmiObject
cmdlet? 
A.
Use the 
-credential
 parameter, as shown here:
or as shown here:
Once you have created the credential object, create a CIM session to the remote system by 
using 
New-CimSession
. You can also use the credential object to create a PS session to the 
remote system by using 
New-PSSession
How can I generate a 
random number? 
A.
Use the 
Get-Random
 cmdlet, or use the 
System.Random
 .NET Framework class, and call the 
next
 method, as shown here:
How can I generate a random number between the values of 1 and 10? 
A.
Use the S
ystem.Random
 .NET Framework class and call the 
next
 method, as shown here:
You can also use the 
Get-Random
 cmdlet, as shown here:
Which of the commands support 
regular expressions? 
A.
Where-Object 
supports regular expressions, as shown here using 
-match
In addition, the
 Switch
 statement uses regular expressions, as shown here:
[<002B>-8<0052>-3<005A00030046>-14<0044>-4<00510003002C00030046>4<0055>-12<0048>-10<0044>-3<0057>-3<004800030044>-4<005100030044>-6<0058>-7<0047004C>-5<0057000300C0>-2<004F>-7<004800030052004900030044>-4<004F>1<004F000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<0047>-6<005600030057>-38<005C>-12<0053>-13<0048>-16<004700030047>-3<0058>1<0055>-12<004C0051>-11<004A0003004400030033>6<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030056>-12<0048>-12<0056>-14<0056>-4<004C>-5<0052>-7<0051>31<0022>]TJ
A.
Use the 
Start-Transcript
 command, as shown here:
  
How can I see how many seconds it takes to retrieve objects from the application log?
A.
Use the following:
I want to get a list of all the 
modules installed with Windows PowerShell on my machine. How 
can I do this? 
A.
Inside a PowerShell console, type the following command:
[<002C0003005A>-3<0044>-4<0051005700030057005200030046>4<0055>-12<0048>-10<0044>-3<0057>-3<004800030044>-4<005100030024>-20<0036>-5<0026>11<002C>-3<002C00030057>-3<0048>-6<005B>-37<0057000300C0>-2<004F>-7<004800030057>-1<00520003004B>-9<0052>-6<004F>-8<004700030057>-2<004B>-9<004800030055>-12<0048>-12<0056>-5<0058>1<004F>-6<0057>-19<005600030052004900030057>-2<004B>-9<00480003>]TJ
Get-Process 
cmdlet. How can this 
be done? 
A.
You can pipeline the results to the 
Out-File
 cmdlet and use the 
-encoding
 parameter to specify 
ASCII. You can also use redirection, like this: 
Someone told me the 
Write-Host
 cmdlet can use color for output. Can you give me some 
samples of acceptable syntax?
A.
The following are some examples:
How can I tell if a 
command has completed successfully?
A.
Query the 
$error
 automatic variable. If 
$error[0]
 reports no information, then no errors have 
occurred. You can also query the 
$? 
automatic variable. If 
 Is equal to 
true
, then the com
mand completed successfully.
How can I split the string shown in the following 
$a 
variable?
A.
Use the 
split
 method, as follows:
How do I join an array such as the one in the 
 variable shown here?
A.
Use the 
join
 static method from the 
String
 class: 
I need to build up a path to the Windowssystem32 directory. How can I do this?
A.
Use the following:
How can l print out the value of %systemroot%?
A.
Use the following:
I need to display process output at the PowerShell prompt and write that same output to a 
[<0057>-3<0048>-6<005B>-37<0057000300C0>-2<004F>-7<0048>-7<00110003002B>-7<0052>-3<005A00030046>-15<0044>-4<00510003002C00030047>-5<005200030057>-2<004B>-2<004C>-5<0056>32<0022>]TJ
A.
Use the following:
I would like to display the ASCII character associated with the ASCII value 56. How can I do 
this?
A.
Use the following:
I want to create a strongly typed array of system diagnostics processes and store it in a vari
able called 
. How can I do this?
A.
Use the following:
I want to display the number 1234 in hexadecimal. How can I do this?
A.
Use the following:
  
I want to display the decimal value of the hexadecimal number 0x4d2. How can I do this?
A.
Use the following:
[<002C0003005A>-3<0044>-4<00510057000300570052000300C0>-2<0051>-11<004700030052>-9<0058>-5<00570003004C>-3<00490003004400030056>-16<0057>-2<0055>-12<004C0051>-11<004A000300460052>-7<00510057>-19<0044>-2<004C0051>-9<005600030057>-2<004B>-9<00480003004F>-7<0048>-10<0057>-31<0057>-3<0048>-10<00550003>]TJ
. The string is stored in the variable 
, as 
shown following. How can I do this? 
A.
Use the 
contains 
operator, as illustrated here:
How can I solicit input from the 
user? 
A.
Use the 
Read-Host
 cmdlet as shown here: 
Can I use a variable named 
$input
 to hold input from the 
Read-Host
 cmdlet?
A.
input
 is an automatic variable that is used for script blocks in the middle of a pipeline. As 
such, it would be a very poor choice. Call the variable 
$userInput 
or something similar if you 
wish, but don22t call it 
$input
How can I cause the script to generate an error if a variable has not been declared?
A.
Place 
Set-PSDebug -strict
 anywhere in the script. Any nondeclared variable will generate an 
error when accessed. You can also use 
Set-StrictMode -version latest
How can I increase the number of entries stored by the 
Get-History
 buffer?
A.
Assign the desired value to the 
$MaximumHistoryCount
 automatic variable, as shown here:
How can I specify the number 1 as a 16-bit integer array?
A.
Use the following:
I have the string 
"this`"is a string"
 and I want to replace the quotation mark with nothing27no 
space, just nothing. Effectively, I want to remove the quotation mark from the string. The 
backtick` is here used to escape the quotation mark. How can I use the 
Replace
 method to 
replace the quotation mark with nothing, if the string is held in a variable 
$arr
? I want the 
results to look like this: 
A.
Use the 
Replace
 method from the 
System.String
 .NET Framework class, as shown here:
You can also use the ASCII value of the quotation mark, and use the 
Replace
 method from the 
System.String
 .NET Framework class, as shown here:
How can I use 
Invoke-Expression
 to run a script inside PowerShell when the path has spaces 
in it?
A.
Escape the spaces with a backtick grave character ` and surround the string containing the 
path with single quotes, as shown here:
How can I create an array of byte values that contain hexadecimal values?
A.
Use the 
[byte]
 type constraint, but include the 
 array character such that the type constraint 
now looks like 
[byte[]]
. To specify a hexadecimal number, use 0x format. The resulting line of 
code is shown here:
I need to 
count backward. How can I do this?
A.
Use a 
for
 statement. In the second position the condition, ensure that you use greater-than-
or-equal-to for the condition. In the third position the repeat, use the decrement-and-assign 
character, which is a double minus --. When you put it all together, it will look like this: 
APPENDIX E
Useful WMI Classes
ith 
more than 2,000 WMI classes installed on a modern Microsoft Windows operating system, 
the question is not what you can use in a script, but what you should script. Some WMI classes 
return a lot of information, but for all practical purposes this information is basically useless. It makes 
sense to home in on the WMI classes that produce the most valuable information. This appendix 
doesn22t provide a complete list27rather, it offers a list of WMI classes that I have found myself using 
again and again over the last few years. Tables E-1 through E-32 list WMI class names, as well as their 
associated properties, methods, and descriptions. The tables are organized by hardware components, 
[<0056>-12<00520049>-41<0057>-35<005A>-3<0044>-4<0055>-12<0048000300460052>-7<0050>-4<0053>-13<0052>-7<0051>-9<0048>-10<00510057>-19<0056>-20<000F00030044>-3<0051>-11<0047000300C0>-2<0051>-7<0044>-4<004F>1<004F>-12<005C00030045>-2<005C00030053>-13<0048>-10<0055>-38<0049>-7<0052>-7<0055>-12<0050>-7<0044>-4<0051>-9<0046>-2<0048000300460052>-10<0058>1<00510057>-3<0048>-10<005500030046>4<004F>-5<0044>-10<0056>-14<0056>-12<0048>-12<0056>-19<0011>]TJ
TABLE E-1
Cooling device classes
Class
Properties
Methods
Description
Represents the properties of a fan device in the computer 
system.
Represents the properties of a heat pipe cooling device.
Represents the properties of a refrigeration device.
Represents the properties of a temperature sensor 
electronic thermometer.
TABLE E-2
Input device classes
Class
Properties
Methods
Description
Represents a keyboard installed on a Windows system.
Represents an input device used to point to and select 
regions on the display of a Windows computer system.
  
TABLE E-3
Mass storage classes
Class
Properties
Methods
Description
Represents the settings for the autocheck operation of a 
disk.
Represents a CD-ROM drive on a Windows computer 
system.
Represents a physical disk drive as shown by a computer 
running the Windows operating system.
[<0030>-12<0044>-11<0051>-14<0044>-18<004A>-14<0048>-19<005600030057>-9<004B>-16<004800030046>-21<0044>-11<0053>-16<0044>-11<0045>-13<004C>-8<004F>-7<004C>-13<0057>-9<004C>-12<0048>-19<005600030052>-7<004900030044000300C1>-15<0052>-14<0053>-14<0053>-10<005C00030047>-7<004C>-12<0056>-11<004E00030047>-6<0055>-18<004C>-19<0059>-6<0048>-14<0011>]TJ
Represents any type of documentation or storage medium.
Represents a tape drive on a Windows computer.
TABLE E-4
Motherboard, controller, and port classes
Class
Properties
Methods
Description
Represents the capabilities and management 
of a 1394 controller.
Relates the high-speed serial bus IEEE 
1394 FireWire controller and the 
Win32_LogonSession
 instance connected to it.
Relates a logical device to a system resource.
Relates a processor and its cache memory.
Represents a baseboard also known as a 
motherboard or system board.
Represents the attributes of the computer 
system22s basic input/output services BIOS 
that are installed on the computer.
Represents a physical bus as shown by a 
Windows operating system.
Represents cache memory internal and 
external on a computer system.
Represents the hubs downstream from the 
universal serial bus USB controller.
Relates a system bus and a logical device 
using the bus.
Represents a device memory address on a 
Windows system.
Relates a logical device and a setting that can 
be applied to it.
Represents a direct memory access DMA 
channel on a Windows computer system.
Represents the capabilities and management 
[<0046>-21<0044>-11<0053>-16<0044>-16<0046>-3<004C>-13<0057>-44<005C00030052>-7<004900030044000300C1>-15<0052>-14<0053>-14<0053>-10<005C00030047>-7<004C>-12<0056>-11<004E00030047>-6<0055>-18<004C>-19<0059>-6<004800030046>-7<0052>-14<0051>-8<0057>-9<0055>-19<0052>-13<004F>-6<004F>-14<0048>-17<0055>35<0011>]TJ
Class
Properties
Methods
Description
Represents the capabilities of an Integrated 
Drive Electronics IDE controller device.
Association class that relates an IDE controller 
and the logical device.
Represents the capabilities and management 
of an infrared device.
Represents an interrupt request line IRQ 
number on a Windows computer system.
Represents the properties of the computer 
system memory array and mapped addresses.
Relates a logical memory array and the 
physical memory array upon which it exists.
Represents the properties of a computer 
system's memory device along with its 
associated mapped addresses.
Relates a memory device and the memory 
array in which it resides.
Association class that relates a memory device 
and the physical memory on which it exists.
Represents a device that contains the central 
components of the Windows computer 
system.
Represents common adapter devices built 
into the motherboard system board.
Represents the properties of a parallel port on 
a Windows computer system.
Manages the capabilities of a Personal 
Computer Memory Card Interface Adapter 
PCMCIA controller device.
Represents a physical memory device located 
on a computer as available to the operating 
system.
Represents details about the computer 
system22s physical memory.
Relates an array of physical memory and its 
physical memory.
Represents an association between logical 
devices and system resources.
[<0035>-9<0048>-18<004F>-12<0044>-10<0057>-10<0048>-19<00560003004400030047>-14<0048>-15<0059>-19<004C>-10<0046>-9<00480003000B>-18<004E>-21<0051>-16<0052>-10<005A>-16<005100030057>-8<005200030026>-6<0052>-14<0051>-8<00C0>-14<004A>-10<0058>-6<0055>-15<0044>-10<0057>-9<004C>-12<0052>-14<00510003>]TJ
Manager as a PNPEntity to the function it 
performs.
Represents the properties of a plug-and-play 
device.
Represents physical connection ports, such as 
DD-25 pin male, Centronics, and PS/2.
  
Class
Properties
Methods
Description
Represents an I/O port on a Windows 
computer system.
Represents a device capable of interpreting 
a sequence of machine instructions on a 
Windows computer system.
Represents a small computer system interface 
SCSI controller on a Windows system.
Relates a SCSI controller and the logical 
device disk drive connected to it.
Represents a serial port on a Windows system.
Represents the settings for data transmission 
on a Windows serial port.
[<0035>-9<0048>-18<004F>-12<0044>-10<0057>-10<0048>-19<00560003004400030056>-19<0048>-17<0055>-18<004C>-9<0044>-11<004F00030053>-20<0052>-14<0055>-47<005700030044>-11<0051>-18<00470003004C>-12<0057>-25<005600030046>-7<0052>-14<0051>-8<00C0>-14<004A>-10<0058>-6<0055>-15<0044>-10<0057>-9<004C>-12<0052>-14<00510003>]TJ
settings.
Represents the capabilities and management 
of memory-related logical devices.
Represents the properties of a sound device 
on a Windows computer system.
Relates a computer system including data 
such as startup properties, time zones, boot 
[<0046>-7<0052>-14<0051>-8<00C0>-14<004A>-10<0058>-6<0055>-15<0044>-10<0057>-9<004C>-12<0052>-14<0051>-16<0056>-26<000F00030052>-13<005500030044>-18<0047>-6<0050>-9<004C>-7<0051>-9<004C>-12<0056>-23<0057>-9<0055>-15<0044>-10<0057>-9<004C>-19<0059>-6<004800030053>-16<0044>-17<0056>-21<0056>-25<005A>-9<0052>-14<0055>-19<0047>-13<0056>20<000C0003>]TJ
to a system BIOS services, languages, system 
management properties.
Relates a plug-and-play device on the 
Windows computer system to the driver that 
supports the plug-and-play device.
Represents the properties associated with a 
physical system enclosure.
Represents a system memory resource on a 
Windows system.
Represents physical connection points 
including ports, motherboard slots and 
peripherals, and proprietary connections 
points.
Manages the capabilities of a universal serial 
bus USB controller.
Relates a USB controller and the 
Win32_LogonSession
 instances connected to 
it.
Represents the management characteristics of 
a USB hub.
TABLE E-5
Network device classes
Class
Properties
Methods
Description
Represents a network adapter on a 
Windows system.
Represents the attributes and behaviors 
of a network adapter. This class is not 
guaranteed to be supported after 
[<0057>-9<004B>-16<004800030055>-15<0044>-10<0057>-9<004C>-12<00C0>-12<0046>-21<0044>-10<0057>-9<004C>-12<0052>-14<005100030052>-7<004900030057>-9<004B>-16<004800030027>-15<004C>-12<0056>-23<0057>-9<0055>-18<004C>-7<0045>-16<0058>-12<0057>-10<0048>-23<00470003>]TJ
Management Task Force DMTF CIM 
[<0051>-4<0048>-5<0057>-29<005A>3<0052>-2<0055>-7<004E>12<0003>12<0056>1<0053>-8<0048>-11<0046>9<004C00C00046>-9<0044>2<0057>3<004C0052>-2<0051>-9<0011>]TJ
Relates a network adapter to its 
[<0046>7<00520051>6<00C0004A>4<0058>8<0055>-1<0044>4<0057>5<004C>2<00520051>14<0003>14<0056>-5<0048>-3<0057>-23<0057>5<004C>7<0051>-4<004A>1<0056>-12<0011>]TJ
TABLE E-6
Power classes
Class
Properties
Methods
Description
Relates a logical device to the battery it is 
using.
Represents a battery connected to the 
computer system.
Represents the properties of a current 
monitoring sensor ammeter.
Represents the properties of a portable 
battery, such as one used for a notebook 
computer.
Represents power management events 
resulting from power state changes.
Represents the capabilities and management 
capacity of an uninterruptible power supply.
Represents the properties of a voltage sensor 
electronic voltmeter.
TABLE E-7
Printing classes
Class
Properties
Methods
Description
Relates a printer to a printer driver.
Represents a device connected to a Windows 
computer system that is capable of reproducing a 
visual image on a medium.
[<0027>-19<0048>-16<00C0>-9<0051>-16<0048>-19<005600030057>-9<004B>-16<004800030046>-7<0052>-14<0051>-8<00C0>-14<004A>-10<0058>-6<0055>-15<0044>-10<0057>-9<004C>-12<0052>-14<005100030049>-14<0052>-14<00550003004400030053>-14<0055>-18<004C>-7<0051>-8<0057>-10<0048>-17<005500030047>-14<0048>-15<0059>-19<004C>-10<0046>-9<0048>-14<0011>]TJ
Relates a printer and the local device to which the 
printer is connected.
Represents the drivers for a 
Win32_Printer
 instance.
[<0035>-9<0048>-18<004F>-12<0044>-10<0057>-10<0048>-19<0056000300440003004F>-14<0052>-20<0046>-21<0044>-11<004F00030053>-14<0055>-18<004C>-7<0051>-8<0057>-10<0048>-17<005500030057>-8<00520003004C>-13<0057>-25<005600030047>-6<0055>-18<004C>-19<0059>-6<0048>-17<0055000300C0>-10<004F>-14<00480003000B>20<0051>-16<0052>-9<005700030057>-9<004B>-16<004800030047>-6<0055>-18<004C>-19<0059>-6<0048>-17<00550003>]TJ
itself.
  
Class
Properties
Methods
Description
[<0035>-9<0048>-18<004F>-12<0044>-10<0057>-10<0048>-19<00560003004400030053>-14<0055>-18<004C>-7<0051>-8<0057>-10<0048>-17<005500030057>-8<00520003004C>-13<0057>-25<005600030046>-7<0052>-14<0051>-8<00C0>-14<004A>-10<0058>-6<0055>-15<0044>-10<0057>-9<004C>-12<0052>-14<005100030056>-19<0048>-17<0057>-37<0057>-9<004C>-7<0051>-18<004A>-13<0056>-26<0011>]TJ
Represents a print job generated by a Windows 
application.
Represents a TCP/IP service access point.
TABLE E-8
Telephony classes
Class
Properties
Methods
Description
Represents the services and characteristics of a 
plain-old telephone service POTS modem on a 
Windows system.
Relates a modem to the serial port the modem 
uses.
TABLE E-9
Video and monitor classes
Class
Properties
Methods
Description
Represents the type of monitor or display 
device attached to the computer system.
[<0035>5<0048>-3<00530055>-5<0048>-5<0056>-5<0048>-3<0051>6<0057>-11<0056>14<0003>14<0046>7<00520051>6<00C0004A>4<0058>8<0055>-1<0044>4<0057>5<004C>2<00520051>14<0003>14<004C>7<0051>9<004900520055>-4<00500044>4<0057>5<004C>2<00520051>14<0003>]TJ
for the display device on a Windows 
system. This class is obsolete. In 
place of this class, use the properties 
in the 
Win32_VideoController, 
Win32_DesktopMonitor, 
and 
CIM_VideoControllerResolution
 classes.
Represents the video adapter 
[<0046>-7<0052>-14<0051>-8<00C0>-14<004A>-10<0058>-6<0055>-15<0044>-10<0057>-9<004C>-12<0052>-14<00510003004C>-7<0051>-5<0049>-14<0052>-14<0055>-18<0050>-14<0044>-10<0057>-9<004C>-12<0052>-14<005100030052>-7<0049000300440003003A>-22<004C>-7<0051>-18<0047>-12<0052>-10<005A>-18<00560003>]TJ
system. This class is obsolete. In 
place of this class, use the properties 
in the 
Win32_VideoController, 
Win32_DesktopMonitor,
 and 
CIM_VideoControllerResolution
 classes.
This class has been eliminated from 
Windows XP and later operating systems; 
attempts to use it generate a fatal error. 
In place of this class, use the properties 
contained in the 
Win32_VideoController, 
Win32_DesktopMonitor,
 and 
CIM_VideoControllerResolution
 classes.
Represents the capabilities and 
management capacity of the video 
controller on a Windows computer 
system.
Relates a video controller to video 
settings that can be applied to it.
TABLE E-10
COM classes
Class
Properties
Methods
Description
Association class. Relates a 
DCOM application to a COM 
component grouped under it.
Instance class. Represents the 
properties of a COM component.
Association class. Relates a COM 
class to the settings used to 
[<0046>-7<0052>-14<0051>-8<00C0>-14<004A>-10<0058>-6<0055>-19<00480003004C>-7<0051>-16<0056>-23<0057>-26<0044>-11<0051>-16<0046>-9<0048>-19<005600030052>-7<004900030057>-9<004B>-16<004800030026>12<0032>-16<00300003>]TJ
class.
Association class. Relates 
an executable to a DCOM 
application that contains the 
[<0027>-20<0026>12<0032>-16<003000030046>-7<0052>-14<0051>-8<00C0>-14<004A>-10<0058>-6<0055>-15<0044>-10<0057>-9<004C>-12<0052>-14<005100030052>-14<0053>-12<0057>-9<004C>-12<0052>-14<0051>-16<005600030049>-14<0052>-14<00550003>]TJ
[<0057>-9<004B>-16<004800030048>-13<005B>-5<0048>-23<0046>-9<0058>-12<0057>-26<0044>-11<0045>-15<004F>-14<0048000300C0>-10<004F>-14<0048>-14<0011>]TJ
Instance class. Represents a COM 
application.
Association class. Relates a 
COM component to the COM 
application where it resides.
Association class. Relates 
a DCOM application to its 
[<0046>7<00520051>6<00C0004A>4<0058>8<0055>-1<0044>4<0057>5<004C>2<00520051>14<0003>14<0056>-5<0048>-3<0057>-23<0057>5<004C>7<0051>-4<004A>1<0056>-12<0011>]TJ
Instance class. Represents the 
properties of a COM component.
Association class. Relates a COM 
class to another COM class that it 
automatically emulates.
Association class. Relates two 
versions of a COM class.
Instance class. Represents a 
component category.
Instance class. Represents the 
settings associated with a COM 
component or COM application.
Instance class. Represents 
the properties of a DCOM 
application.
Association class. Relates the 
Win32_DCOMApplication
instance to the user security 
[<004C>-12<0047>-14<0048>-17<0051>-8<0057>-9<004C>-12<00C0>-12<0046>-21<0044>-10<0057>-9<004C>-12<0052>-14<0051>-16<00560003000B>3<0036>-7<002C>-11<0027>9<000C00030057>-9<004B>-14<0044>-10<005700030046>-21<0044>-11<00510003>]TJ
access it.
  
Class
Properties
Methods
Description
Association class. Relates the 
Win32_DCOMApplication
instance to the user SIDs that can 
launch it.
Instance class. Represents the 
settings of a DCOM application.
Association class. Relates a 
component category to the 
COM class using its interfaces.
TABLE E-11
Desktop classes
Class
Properties
Methods
Description
Instance class. Represents the common characteristics of a 
user22s desktop.
Instance class. Represents an environment or system 
environment setting on a Windows computer system.
Instance class. Represents the time zone information for a 
Windows system.
Association class. Relates a user account to desktop settings 
[<0057>-9<004B>-14<0044>-10<005700030044>-11<0055>-19<004800030056>-11<0053>-20<0048>-23<0046>-3<004C>-12<00C0>-12<004600030057>-8<00520003004C>-13<0057>-27<0011>]TJ
TABLE E-12
Driver classes
Class
Properties
Methods
Description
Instance class. Represents a virtual device driver on a 
Windows computer system.
Instance class. Represents the system driver for a base service.
TABLE E-13
File system classes
Class
Properties
Methods
Description
Association class. Relates logical devices and 
[<0047>-10<0044>-10<0057>-26<0044000300C0>-9<004F>-14<0048>-19<0056>-26<000F0003004C>-7<0051>-18<0047>-7<004C>-10<0046>-21<0044>-10<0057>-9<004C>-7<0051>-18<004A00030057>-9<004B>-16<004800030047>-6<0055>-18<004C>-19<0059>-6<0048>-17<0055000300C0>-10<004F>-14<0048>-19<005600030058>-13<0056>-19<0048>-23<004700030045>-10<005C0003>]TJ
the device.
Represents a directory entry on a Windows 
computer system.
Instance class. Represents the directory 
layout for the product.
Association class. Relates a disk drive to a 
partition existing on it.
Instance class. Represents the capabilities 
and management capacity of a partitioned 
area of a physical disk on a Windows system.
Association class. Tracks disk space usage for 
[<0031>-10<0037>-11<0029>-6<0036000300C0>-10<004F>-14<004800030056>-28<005C>-19<0056>-23<0057>-10<0048>-17<005000030059>-6<0052>-13<004F>-11<0058>-6<0050>-16<0048>-19<0056>-26<0011>]TJ
Class
Properties
Methods
Description
Represents a data source that resolves to an 
actual local storage device on a Windows 
system.
Association class. Relates a logical disk to its 
directory structure.
Association class. Relates a logical disk drive 
to the disk partition it resides on.
Represents network storage devices that are 
mapped as logical disks on the computer 
system.
Association class. Represents the association 
between a 
CIM_ManagedSystemElement
[<004C>-7<0051>-16<0056>-23<0057>-26<0044>-11<0051>-16<0046>-9<004800030044>-11<0051>-18<004700030057>-9<004B>-16<004800030056>-19<0048>-17<0057>-37<0057>-9<004C>-7<0051>-18<004A>-13<005600030047>-14<0048>-16<00C0>-9<0051>-16<0048>-23<004700030049>-14<0052>-14<00550003004C>-13<0057>-27<0011>]TJ
Instance class. Contains settings information 
for disk quotas on a volume.
[<0035>-9<0048>-17<0053>-14<0055>-19<0048>-19<0056>-19<0048>-17<0051>-8<0057>-25<0056000300C0>-10<004F>-14<0048>-19<005600030057>-9<004B>-14<0044>-10<005700030044>-11<0055>-19<004800030056>-11<004B>-16<0052>-14<0055>-47<0057>-8<0046>-9<0058>-12<0057>-25<005600030057>-8<005200030052>-9<0057>-9<004B>-16<0048>-17<00550003>]TJ
[<00C0>-10<004F>-14<0048>-19<0056>-26<000F00030047>-7<004C>-7<0055>-19<0048>-23<0046>-31<0057>-8<0052>-14<0055>-18<004C>-12<0048>-19<0056>-26<000F00030044>-11<0051>-18<004700030046>-7<0052>-14<0050>-11<0050>-14<0044>-11<0051>-18<0047>-13<0056>-26<0011>]TJ
Association class. Relates a directory folder 
and one of its subdirectories subfolders.
Association class. Relates a computer system 
to a disk partition on that system.
Instance class. Represents an area of storage 
on a hard disk.
Association class. Relates a volume to the 
per-volume quota settings.
Association class. Relates disk quota settings 
[<005A>-16<004C>-13<0057>-9<004B0003004400030056>-10<0053>-20<0048>-23<0046>-3<004C>-12<00C0>-12<004600030047>-7<004C>-12<0056>-11<004E00030059>-6<0052>-13<004F>-11<0058>-6<0050>-16<0048>-14<0011>]TJ
Association class. Relates per-user quotas to 
quota-enabled volumes.
TABLE E-14
Job object classes
Class
Properties
Methods
Description
Association class. Relates a managed 
system element collection and the class 
representing statistical information about 
the collection.
Instance class. Represents a locally unique 
[<004C>2<00470048>-3<0051>6<0057>5<004C>2<00C00048>-3<0055>14<0003>14<000B>-1<002F>16<0038002C>3<0027>23<000C>20<0011>]TJ
Instance class. Represents a LUID and its 
attributes.
Instance class. Represents a kernel object 
that is used to group processes for the sake 
of controlling the life and resources of the 
processes within the job object.
  
Class
Properties
Methods
Description
Instance class. Represents the I/O 
accounting information for a job object.
Instance class. Represents an association 
between a job object and the job object 
limit settings.
Instance class. Represents the limit settings 
for a job object.
Instance class. Relates a job object to the 
process contained in the job object.
Instance class. Relates a job object to the 
job object security limit settings.
Instance class. Represents the security limit 
settings for a job object.
Instance class. Represents an association 
between a job object and the job object I/O 
accounting information class.
Instance class. Represents a security 
[<004C>-12<0047>-14<0048>-17<0051>-8<0057>-9<004C>-12<00C0>-14<0048>-17<00550003000B>3<0036>-7<002C>-11<0027>9<000C00030044>-11<0051>-18<00470003004C>-12<0057>-25<005600030044>-10<0057>-37<0057>-9<0055>-18<004C>-7<0045>-16<0058>-12<0057>-10<0048>-19<0056>-26<0011>]TJ
Event class. Represents information about 
the group SIDs in an access token.
Event class. Represents information about a 
set of privileges for an access token.
TABLE E-15
[<0030>-11<0048>-12<0050>-11<0052>-9<0055>-49<005C00030044>-6<0051>-13<004700030053>-11<0044>-13<004A>-9<0048000300C0>-5<004F>-9<004800030046>2<004F>-7<0044>-13<0056>-16<0056>-14<0048>-14<0056>]TJ
Class
Properties
Methods
Description
Instance class. This class is obsolete 
and has been replaced by the 
Win32_OperatingSystem
 class.
[<002C>-8<0051>-16<0056>-23<0057>-26<0044>-11<0051>-16<0046>-9<004800030046>-3<004F>-12<0044>-17<0056>-21<0056>-26<001100030035>-9<0048>-17<0053>-14<0055>-19<0048>-19<0056>-19<0048>-17<0051>-8<0057>-25<005600030057>-9<004B>-16<0048000300C0>-10<004F>-14<00480003>]TJ
[<0058>-13<0056>-19<0048>-23<004700030049>-14<0052>-14<00550003004B>-14<0044>-11<0051>-18<0047>-6<004F>-7<004C>-7<0051>-18<004A00030059>-19<004C>-7<0055>-47<0057>-15<0058>-10<0044>-11<004F00030050>-16<0048>-17<0050>-16<0052>-14<0055>-53<005C000300C0>-9<004F>-14<00480003>]TJ
swapping on a Windows system.
Association class. Relates the initial 
[<0056>-19<0048>-17<0057>-37<0057>-9<004C>-7<0051>-18<004A>-13<005600030052>-7<00490003004400030053>-16<0044>-18<004A>-14<0048000300C0>-10<004F>-14<004800030044>-11<0051>-18<004700030057>-9<004B>-16<004800030056>-23<0057>-26<0044>-10<0057>-10<004800030052>-7<00490003>]TJ
those setting during normal use.
Instance class. Represents the settings 
[<0052>-7<00490003004400030053>-16<0044>-18<004A>-14<0048000300C0>-10<004F>-14<0048>-14<0011>]TJ
[<002C>-8<0051>-16<0056>-23<0057>-26<0044>-11<0051>-16<0046>-9<004800030046>-3<004F>-12<0044>-17<0056>-21<0056>-26<001100030035>-9<0048>-17<0053>-14<0055>-19<0048>-19<0056>-19<0048>-17<0051>-8<0057>-25<005600030057>-9<004B>-16<0048000300C0>-10<004F>-14<00480003>]TJ
[<0058>-13<0056>-19<0048>-23<004700030049>-14<0052>-14<00550003004B>-14<0044>-11<0051>-18<0047>-6<004F>-7<004C>-7<0051>-18<004A00030059>-19<004C>-7<0055>-47<0057>-15<0058>-10<0044>-11<004F00030050>-16<0048>-17<0050>-16<0052>-14<0055>-53<005C000300C0>-9<004F>-14<00480003>]TJ
swapping on a Windows system.
Association class. This class is obsolete 
because the properties existing in the 
[<003A>-18<004C0051>11<0016>3<0015>-25<0042>-39<002F>-2<0052>-6<004A004C0046>7<0044>-2<004F>-6<0030>-6<0048>-5<0050>-4<0052>-4<0055>-32<005C>-26<0026>4<0052>-5<0051>-6<00C0>-5<004A00580055>-3<0044>-5<0057>-1<004C>-3<0052>-5<0051>]TJ
class are now a part of the 
Win32_OperatingSystem
 class.
TABLE E-16
Media and audio class
Class
Properties
Methods
Description
Instance class. Represents the audio or video codec installed on 
the computer system.
TABLE E-17
Networking classes
Class
Properties
Methods
Description
Association class. Relates the current IP4 route to 
the persisted IP route table.
Instance class. Represents persisted IP routes.
Instance class. Represents information that governs 
the routing of network data packets.
Event class. Represents IP route change events.
Instance class. Represents a network client on a 
Windows system.
Instance class. Represents an active network 
connection in a Windows environment.
Instance class. Represents a protocol and its 
network characteristics on a Windows computer 
system.
Instance class. Represents a Windows NT domain.
Instance class. Represents the values returned by 
the standard ping command.
Association class. Relates a system-level driver, 
network protocol, and network adapter.
TABLE E-18
Operating system event classes
Class
Properties
Methods
Description
Represents computer shutdown events.
Represents events related to a computer 
system.
Represents device-change events 
resulting from the addition, removal, or 
[<0050>-16<0052>-20<0047>-7<004C>-12<00C0>-12<0046>-21<0044>-10<0057>-9<004C>-12<0052>-14<005100030052>-7<004900030047>-14<0048>-15<0059>-19<004C>-10<0046>-9<0048>-19<005600030052>-14<005100030057>-9<004B>-16<004800030046>-7<0052>-14<0050>-11<0053>-16<0058>-12<0057>-10<0048>-17<00550003>]TJ
system.
Indicates that a process has loaded a new 
module.
Base event for module events.
Indicates that a new process has started.
Indicates that a process has terminated.
Base event for process events.
  
Class
Properties
Methods
Description
Indicates that the device list on the system 
has been refreshed a device has been 
[<0044>-18<0047>-14<0047>-14<0048>-23<004700030052>-14<005500030055>-19<0048>-17<0050>-16<0052>-8<0059>-6<0048>-23<0047>-16<000F00030052>-14<005500030057>-9<004B>-16<004800030046>-7<0052>-14<0051>-8<00C0>-14<004A>-10<0058>-6<0055>-15<0044>-10<0057>-9<004C>-12<0052>-14<00510003>]TJ
has changed.
Base class for all system trace events, 
including module, process, and thread 
traces.
Indicates that a new thread has started.
Indicates that a thread has stopped.
Base event class for thread events.
Represents a network-mapped drive event 
resulting from the addition of a network 
drive letter or mounted drive on the 
computer system.
TABLE E-19
Operating system settings classes
Class
Properties
Methods
Description
Instance class. Represents the 
[<0045>-20<0052>-20<0052>-9<005700030046>-7<0052>-14<0051>-8<00C0>-14<004A>-10<0058>-6<0055>-15<0044>-10<0057>-9<004C>-12<0052>-14<005100030052>-7<0049000300440003003A>-22<004C>-7<0051>-18<0047>-12<0052>-10<005A>-18<00560003>]TJ
system.
Instance class. Represents a 
computer system operating in a 
Windows environment.
Association class. Relates a 
computer system to a processor 
running on that system.
Instance class. Represents a 
product.
Association class. Relates two 
interdependent base services.
Instance class. Represents a group 
[<0052>-7<004900030056>-28<005C>-19<0056>-23<0057>-10<0048>-17<005000030056>-19<0048>-17<0055>-53<0059>-19<004C>-10<0046>-9<0048>-19<005600030057>-9<004B>-14<0044>-10<005700030047>-14<0048>-16<00C0>-9<0051>-16<00480003>]TJ
execution dependencies.
Instance class. Represents an 
association between a base service 
and a load order group that 
the service depends on to start 
running.
Association class. Relates a load 
order group and a base service.
Instance class. Represents an 
operating system installed on a 
Windows computer system.
Association class. Relates an 
operating system to product 
updates applied, as represented in 
Win32_QuickFixEngineering
Class
Properties
Methods
Description
Instance class. Represents the 
types of information that will be 
gathered from memory when the 
operating system fails.
Instance class. Represents system-
wide Quick Fix Engineering QFE 
or updates that have been applied 
to the current operating system.
Instance class. Represents a 
command that runs automatically 
when a user logs on to the 
computer system.
Association class. Relates a 
computer system to its boot 
[<0046>7<00520051>6<00C0004A>4<0058>8<0055>-1<0044>4<0057>5<004C>2<00520051>-7<0011>]TJ
Association class. Relates a 
computer system to its desktop 
[<0046>7<00520051>6<00C0004A>4<0058>8<0055>-1<0044>4<0057>5<004C>2<00520051>-7<0011>]TJ
Association class. Relates a 
computer system to a logical 
device installed on that system.
Association class. Relates a 
computer system to a load order 
group.
Association class. Relates a network 
connection to the computer 
system on which it resides.
Association class. Relates a 
computer system to its operating 
system.
Association class. Relates a 
computer system to a process 
running on that system.
Association class. Relates a 
computer system to a logical 
program group.
Association class. Relates a system 
resource to the computer system it 
resides on.
Association class. Relates a 
computer system to a service 
program that exists on the system.
Association class. Relates a 
computer system to a general 
setting on that system.
  
Class
Properties
Methods
Description
Association class. Relates a 
computer system to a system 
driver running on that computer 
system.
Association class. Relates a 
computer system to a time zone.
Association class. Relates a 
computer system to a user account 
on that system.
TABLE E-20
Process classes
Class
Properties
Methods
Description
Instance class. Represents a sequence of events on a 
Windows system.
[<002C>-8<0051>-16<0056>-23<0057>-26<0044>-11<0051>-16<0046>-9<004800030046>-3<004F>-12<0044>-17<0056>-21<0056>-26<001100030035>-9<0048>-17<0053>-14<0055>-19<0048>-19<0056>-19<0048>-17<0051>-8<0057>-25<005600030057>-9<004B>-16<004800030056>-23<0057>-26<0044>-11<0055>-47<0057>-15<0058>-6<005300030046>-7<0052>-14<0051>-8<00C0>-14<004A>-10<0058>-6<0055>-15<0044>-10<0057>-9<004C>-12<0052>-14<005100030052>-7<0049000300440003>]TJ
Windows process.
Instance class. Represents a thread of execution.
TABLE E-21
Registry class
Class
Properties
Methods
Description
Instance class. Represents the system registry on a Windows 
computer system.
TABLE E-22
Scheduler job classes
Class
Properties
Methods
Description
Instance class. Represents an instance in time as component 
seconds, minutes, day of the week, and so on.
Instance class. Represents a job scheduled using the Windows 
NT schedule service.
TABLE E-23
Security classes
Class
Properties
Methods
Description
Association class. Relates a security 
account instance with a security descriptor 
instance.
Instance class. Represents an access 
control entry ACE.
Class
Properties
Methods
Description
Association class. Relates the security 
[<0056>-19<0048>-17<0057>-37<0057>-9<004C>-7<0051>-18<004A>-13<005600030052>-7<004900030044000300C0>-9<004F>-14<004800030052>-14<005500030047>-7<004C>-7<0055>-19<0048>-23<0046>-31<0057>-8<0052>-14<0055>-53<005C00030057>-8<005200030052>-14<0051>-16<00480003>]TJ
member of its discretionary access control 
list DACL.
Association class. Relates the security 
[<0056>-19<0048>-17<0057>-37<0057>-9<004C>-7<0051>-18<004A>-13<005600030052>-7<004900030044000300C0>-9<004F>-14<004800030052>-14<005500030047>-7<004C>-7<0055>-19<0048>-23<0046>-31<0057>-8<0052>-14<0055>-53<005C00030057>-8<005200030052>-14<0051>-16<00480003>]TJ
member of its system access control list 
SACL.
Association class. Relates the security 
[<0056>-19<0048>-17<0057>-37<0057>-9<004C>-7<0051>-18<004A>-13<005600030052>-7<004900030044000300C0>-9<004F>-14<004800030052>-14<005500030047>-7<004C>-7<0055>-19<0048>-23<0046>-31<0057>-8<0052>-14<0055>-53<005C00030057>-8<00520003004C>-13<0057>-25<00560003004A>-6<0055>-19<0052>-16<0058>-6<0053>-6<0011>]TJ
Association class. Relates the security 
[<0056>-19<0048>-17<0057>-37<0057>-9<004C>-7<0051>-18<004A>-13<005600030052>-7<004900030044000300C0>-9<004F>-14<004800030052>-14<005500030047>-7<004C>-7<0055>-19<0048>-23<0046>-31<0057>-8<0052>-14<0055>-53<005C00030057>-8<00520003004C>-13<0057>-25<005600030052>-10<005A>-16<0051>-16<0048>-17<0055>35<0011>]TJ
Instance class. Represents the security 
[<0056>-19<0048>-17<0057>-37<0057>-9<004C>-7<0051>-18<004A>-13<005600030049>-14<0052>-14<0055000300440003004F>-14<0052>-20<004A>-7<004C>-10<0046>-21<0044>-11<004F000300C0>-10<004F>-14<0048>-14<0011>]TJ
Association class. Relates the security 
settings of a share to one member of its 
DACL.
Association class. Relates the security 
settings of a share to one member of its 
SACL.
Instance class. Represents the security 
settings for a logical share.
Instance class. Represents information 
about privileges required to complete an 
operation.
Instance class. Represents a structural 
representation of a SECURITY_
DESCRIPTOR.
Instance class. Represents the security 
settings for a managed element.
Instance class. Represents the rights 
granted and denied to a trustee for a 
given object.
Instance class. Represents the auditing for 
a given trustee on a given object.
Association class. Relates the security of an 
object to its group.
Instance class. Represents the security 
[<0056>-19<0048>-17<0057>-37<0057>-9<004C>-7<0051>-18<004A>-13<005600030052>-7<004900030044000300C0>-9<004F>-14<004800030052>-14<005500030047>-7<004C>-7<0055>-19<0048>-23<0046>-31<0057>-8<0052>-14<0055>-53<005C00030052>-14<0045>-13<004D>-12<0048>-23<0046>-31<0057>-27<0011>]TJ
Instance class. Represents the security 
settings of a share object.
Association class. Relates an object to its 
security settings.
Association class. Relates the security 
settings of an object to its owner.
Instance class. Represents an arbitrary SID.
Instance class. Represents a trustee.
  
TABLE E-24
Service classes
Class
Properties
Methods
Description
Instance class. Represents executable objects that are installed 
in a registry database maintained by the Service Control 
Manager.
Instance class. Represents a service on a Windows computer 
system.
TABLE E-25
Share classes
Class
Properties
Methods
Description
Association class. Represents a root or junction node of 
[<004400030047>-12<0052>-14<0050>-14<0044>-9<004C>-7<0051>-14<0010>-12<0045>-16<0044>-17<0056>-19<0048>-23<004700030052>-14<005500030056>-23<0057>-26<0044>-11<0051>-18<0047>-9<0010>-5<0044>-11<004F>-14<0052>-14<0051>-16<004800030047>-7<004C>-12<0056>-23<0057>-9<0055>-19<004C>-7<0045>-16<0058>-12<0057>-10<0048>-23<0047000300C0>-9<004F>-14<004800030056>-28<005C>-19<0056>-23<0057>-10<0048>-17<00500003>]TJ
DFS.
Association class. Represents the relationship of a DFS 
node to one of its targets.
Association class. Represents the target of a DFS node.
Instance class. Represents the connections made from 
a remote computer to a shared resource on the local 
computer.
Instance class. Represents the sessions that are 
established with the local computer by users on a remote 
computer.
Association class. Relates a shared resource on the 
computer and the connection made to the shared 
resource.
Association class. Relates a local printer and the share 
that represents it as it is viewed over a network.
Association class. Represents an association between a 
session established with the local server by a user on a 
remote machine and the connections that depend on the 
session.
Association class. Represents an association between 
a logon session and the processes associated with that 
session.
Association class. Relates a shared resource on the 
computer system and the directory to which it is mapped.
Instance class. Represents a shared resource on a 
Windows system.
TABLE E-26
Start menu classes
Class
Properties
Methods
Description
Instance class. Represents a program 
group in a Windows system.
Association class. Relates logical program 
groups groupings in the Start menu 
[<0057>-8<005200030057>-9<004B>-16<0048000300C0>-10<004F>-14<004800030047>-7<004C>-7<0055>-19<0048>-23<0046>-31<0057>-8<0052>-14<0055>-19<004C>-12<0048>-19<00560003004C>-7<00510003005A>-16<004B>-9<004C>-10<0046>-3<004B00030057>-9<004B>-16<0048>-14<005C00030044>-11<0055>-19<00480003>]TJ
stored.
Class
Properties
Methods
Description
Instance class. Represents an element 
contained by a 
Win32_ProgramGroup
instance that is not itself another 
Win32_ProgramGroup
 instance.
Association class. Relates the program 
[<004A>-6<0055>-19<0052>-16<0058>-6<00530003004C>-13<0057>-10<0048>-17<0050>-16<005600030052>-7<004900030057>-9<004B>-16<004800030036>6<0057>-26<0044>-11<0055>-47<005700030050>-16<0048>-17<0051>-13<005800030057>-8<005200030057>-9<004B>-16<0048000300C0>-10<004F>-14<0048>-19<00560003>]TJ
in which they are stored.
Instance class. Deprecated. 
Represents a program group in a 
Windows computer system. Use the 
Win32_LogicalProgramGroup
 class 
instead.
Association class. Relates 
a program group order to an individual 
program group or item contained in it.
Instance class. Represents a logical 
grouping of programs on the user22s Start 
| Programs menu.
TABLE E-27
Storage classes
Class
Properties
Methods
Description
Association class. Represents the association 
between a shadow copy and the provider that 
creates the shadow copy.
[<0024>-34<0056>-21<0056>-19<0052>-20<0046>-3<004C>-9<0044>-10<0057>-9<004C>-12<0052>-14<005100030046>-3<004F>-12<0044>-17<0056>-21<0056>-26<001100030036>-6<0053>-20<0048>-23<0046>-3<004C>-12<00C0>-14<0048>-19<00560003004B>-16<0052>-10<005A0003004400030056>-11<004B>-14<0044>-18<0047>-12<0052>-10<005A00030046>-7<0052>-14<0053>-10<005C0003>]TJ
is to be created, queried, or deleted.
Instance class. Represents a duplicate copy of 
the original volume at a previous time.
Association class. Represents an association 
between a shadow copy provider and a storage 
volume.
Association class. Represents an association 
between a shadow copy and the volume for 
which the shadow copy is created.
Association class. Represents an association 
between a shadow copy and where the 
differential data is written.
Association class. Represents a component that 
creates and represents volume shadow copies.
Association class. Represents an association 
between a shadow copy and where the 
differential data is written.
  
Class
Properties
Methods
Description
Association class. Represents an association 
between a shadow copy provider and a 
supported volume.
Instance class. Represents an area of storage on 
a hard disk.
Association class. Represents a volume to the 
per-volume quota settings.
TABLE E-28
User classes
Class
Properties
Methods
Description
Instance class. Represents information about 
user accounts and group accounts known to the 
Windows system.
Instance class. Represents data about a group 
account.
[<0024>-34<0056>-21<0056>-19<0052>-20<0046>-3<004C>-9<0044>-10<0057>-9<004C>-12<0052>-14<005100030046>-3<004F>-12<0044>-17<0056>-21<0056>-26<00110003002C>-16<0047>-14<0048>-17<0051>-8<0057>-9<004C>-12<00C0>-14<0048>-19<005600030057>-9<004B>-16<00480003004A>-6<0055>-19<0052>-16<0058>-6<005300030044>-16<0046>-7<0046>-7<0052>-16<0058>-6<0051>-8<0057>-25<00560003>]TJ
associated with a Windows NT domain.
Association class. Relates a group to an account 
that is a member of that group.
Instance class. Describes the logon session or 
sessions associated with a user.
Association class. Represents the mapped logical 
disks associated with the session.
Instance class. Represents the network login 
[<004C>-7<0051>-5<0049>-14<0052>-14<0055>-19<0050>-14<0044>-10<0057>-9<004C>-12<0052>-14<005100030052>-7<00490003004400030056>-11<0053>-20<0048>-23<0046>-3<004C>-12<00C0>-12<004600030058>-13<0056>-19<0048>-17<005500030052>-14<0051000300440003003A>-22<004C>-7<0051>-18<0047>-12<0052>-10<005A>-19<00560003>]TJ
system.
Instance class. Represents a system account.
Instance class. Represents information about a 
user account on a Windows system.
Association class. Relates a user account and a 
Windows domain.
TABLE E-29
Event log classes
Class
Properties
Methods
Description
Instance class. Represents data stored in a Windows 
[<004F0052>-6<004A>14<0003>14<00C0>4<004F00480011>]TJ
Instance class. Represents Windows NT/Windows 
2000 events.
Association class. Relates instances of 
Win32_NTLogEvent
 to 
Win32_ComputerSystem
Association class. Relates instances of 
Win32_NTLogEvent
 to 
Win32_NTEventLogFile
 classes.
Association class. Relates instances of 
Win32_NTLogEvent
 to 
Win32_UserAccount
TABLE E-30
Windows product-activation classes
Class
Properties
Methods
Description
Association class. Relates instances 
of 
Win32_ComputerSystem
 to 
Win32_WindowsProductActivation
Instance class. Contains properties and methods 
[<0057>-8<005200030054>-10<0058>-14<0048>-17<0055>-53<005C00030044>-11<0051>-18<004700030046>-7<0052>-14<0051>-8<00C0>-14<004A>-10<0058>-6<0055>-19<004800030044>-11<00510003002C>-8<0051>-8<0057>-10<0048>-17<0055>-18<0051>-16<0048>-17<005700030046>-7<0052>-14<0051>-11<0051>-16<0048>-23<0046>-31<0057>-9<004C>-12<0052>-14<00510003>]TJ
related to WPA.
Instance class. Contains properties and methods 
related to WPA.
TABLE E-31
Formatted-data classes
Class
Properties
Methods
Description
Abstract base class for the formatted-
data classes.
Represents performance counters for 
the Active Server Pages ASP device 
on the computer system.
Represents performance information 
[<0044>-11<0045>-20<0052>-16<0058>-12<005700030044>-11<00510003002C>-8<0051>-18<0047>-14<0048>-13<005B>-15<004C>-7<0051>-18<004A00030036>-17<0048>-17<0055>-53<0059>-19<004C>-10<0046>-9<0048000300C0>-10<004F>-13<0057>-10<0048>-17<0055>35<0011>]TJ
Represents performance data about 
the state of the Indexing Service.
Represents counters that monitor 
Internet Information Services IIS the 
web service and the FTP service as a 
whole.
Represents performance data from 
the HTTP Indexing Service.
Represents Microsoft Distributed 
Transaction Coordinator DTC 
performance counters.
Represents global counters for the 
Exchange NTFS store driver.
Represents counters that monitor 
[<004F>-14<0052>-20<004A>-7<004C>-10<0046>-21<0044>-11<004F00030053>-16<0044>-11<0055>-47<0057>-9<004C>-13<0057>-9<004C>-12<0052>-14<0051>-16<005600030052>-7<0049000300440003004B>-14<0044>-11<0055>-19<004700030052>-14<0055000300C0>-18<005B>-5<0048>-23<00470003>]TJ
disk drive.
Represents counters that monitor 
[<004B>-14<0044>-11<0055>-19<004700030052>-14<0055000300C0>-18<005B>-5<0048>-23<004700030047>-7<004C>-12<0056>-11<004E00030047>-6<0055>-18<004C>-19<0059>-6<0048>-19<005600030052>-14<0051000300440003>]TJ
computer.
Represents counters that measure 
the rates of announcements, 
enumerations, and other browser 
transmissions.
Represents counters that monitor 
network connections originating at 
the local computer.
  
Class
Properties
Methods
Description
Represents counters that monitor 
communications using the WINS 
Server service.
Represents counters that monitor the 
length of the queues and objects in 
the queues.
Represents counters that monitor the 
[<00C0>-10<004F>-14<004800030056>-28<005C>-19<0056>-23<0057>-10<0048>-17<005000030046>-21<0044>-16<0046>-3<004B>-16<0048>-16<000F00030044>-11<005100030044>-11<0055>-19<0048>-17<004400030052>-7<004900030053>-14<004B>-4<005C>-19<0056>-11<004C>-10<0046>-21<0044>-11<004F0003>]TJ
memory that stores recently used data 
as long as possible to permit access to 
the data without having to read from 
the disk.
Represents counters that describe 
the behavior of physical and virtual 
memory on the computer.
Represents counts of the objects 
contained by the operating system 
for example, events, mutexes, 
processes, sections, semaphores, and 
threads.
Represents counters that monitor the 
[<0053>-16<0044>-18<004A>-7<004C>-7<0051>-18<004A000300C0>-10<004F>-14<0048>-19<005600030052>-14<005100030057>-9<004B>-16<004800030046>-7<0052>-14<0050>-11<0053>-16<0058>-12<0057>-10<0048>-17<0055>35<0011>]TJ
Represents counters that measure 
aspects of processor activity.
Represents counters that apply 
to more than one instance of 
a component processor on the 
computer.
Represents counters that monitor 
the virtual address usage of images 
executed by processes on the 
computer.
Represents counters that monitor 
the virtual address usage of images 
executed by processes on the 
computer.
Represents the accounting and 
processor usage data collected by 
each active named job object.
Represents detailed performance 
information about the active 
processes that make up a job object.
Represents counters that monitor 
running application program and 
system processes.
Represent counters that monitor 
memory allocation and use for a 
selected process.
Class
Properties
Methods
Description
Represents counters that measure 
aspects of thread behavior.
Represents counters that measure 
aspects of thread behavior that are 
[<0047>-7<004C>-10<0049>-47<00C0>-12<0046>-9<0058>-6<004F>-13<005700030052>-14<005500030057>-9<004C>-7<0050>-16<0048>-25<0010>-24<0046>-7<0052>-14<0051>-16<0056>-13<0058>-6<0050>-9<004C>-7<0051>-18<004A00030057>-8<005200030046>-7<0052>-13<004F>-6<004F>-14<0048>-23<0046>-31<0057>-26<0011>]TJ
[<0035>-9<0048>-17<0053>-14<0055>-19<0048>-19<0056>-19<0048>-17<0051>-8<0057>-25<0056000300C1>-15<0052>-10<005A00030056>-23<0057>-26<0044>-10<0057>-9<004C>-12<0056>-23<0057>-9<004C>-10<0046>-19<005600030049>-19<0055>-19<0052>-14<005000030057>-9<004B>-16<00480003>]TJ
packet scheduler.
Represents pipe statistics from the 
packet scheduler.
Represents counters that monitor 
individual Remote Access Service 
RAS ports of the RAS device on the 
computer.
Represents counters that combine 
values for all ports of the RAS device 
on the computer.
Represents the number of local 
network interfaces visible to and used 
by the RSVP service.
Represents RSVP or ACS service 
performance counters.
[<0035>-9<0048>-17<0053>-14<0055>-19<0048>-19<0056>-19<0048>-17<0051>-8<0057>-25<005600030046>-7<0052>-16<0058>-6<0051>-8<0057>-10<0048>-17<0055>-32<005600030056>-11<0053>-20<0048>-23<0046>-3<004C>-12<00C0>-12<004600030057>-8<005200030057>-9<004B>-16<00480003>]TJ
SMTP server.
Represents performance statistics 
about a print queue.
Represents the telephony system.
Consists of counters that measure the 
rates at which messages are sent and 
received by using ICMP protocols.
Represents counters that measure the 
rates at which IP datagrams are sent 
and received by using IP protocols.
Represents counters that measure 
the rates at which bytes are sent and 
received over the NBT connection 
between the local computer and a 
remote computer.
Represents counters that measure 
the rates at which bytes and packets 
are sent and received over a TCP/IP 
network connection.
Represents counters that measure 
the rates at which TCP segments are 
sent and received by using the TCP 
protocol.
  
Class
Properties
Methods
Description
Represents counters that measure 
the rates at which UDP datagrams are 
sent and received by using the UDP 
protocol.
Represents terminal services summary 
information.
Represents terminal services per-
session resource monitoring.
[<0035>-9<0048>-17<0053>-14<0055>-19<0048>-19<0056>-19<0048>-17<0051>-8<0057>-25<005600030046>-7<0052>-16<0058>-6<0051>-8<0057>-10<0048>-17<0055>-32<005600030056>-11<0053>-20<0048>-23<0046>-3<004C>-12<00C0>-12<004600030057>-8<005200030057>-9<004B>-16<00480003>]TJ
World Wide Web Publishing Service.
TABLE E-32
Raw performance monitor classes
Class
Properties
Methods
Description
Abstract base class for all concrete 
raw performance counter classes.
Represents the ASP device on the 
computer system.
Represents performance information 
[<0044>-11<0045>-20<0052>-16<0058>-12<005700030044>-11<00510003002C>-8<0051>-18<0047>-14<0048>-13<005B>-15<004C>-7<0051>-18<004A00030036>-17<0048>-17<0055>-53<0059>-19<004C>-10<0046>-9<0048000300C0>-10<004F>-13<0057>-10<0048>-17<0055>35<0011>]TJ
Represents performance data about 
the state of the Indexing Service.
Represents counters that monitor IIS 
the web service and the FTP service 
as a whole.
Represents performance data from 
the HTTP Indexing Service.
Represents Microsoft DTC 
performance counters.
Represents global counters for the 
Exchange NTFS store driver.
Represents counters that monitor 
[<004F>-14<0052>-20<004A>-7<004C>-10<0046>-21<0044>-11<004F00030053>-16<0044>-11<0055>-47<0057>-9<004C>-13<0057>-9<004C>-12<0052>-14<0051>-16<005600030052>-7<0049000300440003004B>-14<0044>-11<0055>-19<004700030052>-14<0055000300C0>-18<005B>-5<0048>-23<00470003>]TJ
disk drive.
Represents counters that monitor 
[<004B>-14<0044>-11<0055>-19<004700030052>-14<0055000300C0>-18<005B>-5<0048>-23<004700030047>-7<004C>-12<0056>-11<004E00030047>-6<0055>-19<004C>-19<0059>-6<0048>-19<005600030052>-14<0051000300440003>]TJ
computer.
Represents counters that measure 
the rates of announcements, 
enumerations, and other browser 
transmissions.
Represents counters that monitor 
network connections originating at 
the local computer.
Class
Properties
Methods
Description
Represents counters that monitor 
communications using the WINS 
Server service.
Represents counters that monitor the 
length of the queues and objects in 
the queues.
Represents counters that monitor the 
[<00C0>-10<004F>-14<004800030056>-28<005C>-19<0056>-23<0057>-10<0048>-17<005000030046>-21<0044>-16<0046>-3<004B>-16<0048>-14<0011>]TJ
Represents counters that describe 
the behavior of physical and virtual 
memory on the computer.
Represents counts of the objects 
contained by the operating system 
for example, events, mutexes, 
processes, sections, semaphores, and 
threads.
Represents counters that monitor the 
[<0053>-16<0044>-18<004A>-7<004C>-7<0051>-18<004A000300C0>-10<004F>-14<0048>-19<005600030052>-14<005100030057>-9<004B>-16<004800030046>-7<0052>-14<0050>-11<0053>-16<0058>-12<0057>-10<0048>-17<0055>35<0011>]TJ
Represents counters that measure 
aspects of processor activity.
Represents counters that apply 
to more than one instance of 
a component processor on the 
computer.
Represents counters that monitor 
the virtual address usage of images 
executed by processes on the 
computer.
Represents counters that monitor 
the virtual address usage of images 
executed by processes on the 
computer.
Represents the accounting and 
processor usage data collected by 
each active named job object.
Represents detailed performance 
information about the active 
processes that make up a job object.
Represents counters that monitor 
running application program and 
system processes.
Represents counters that monitor 
memory allocation and use for a 
selected process.
Represents counters that measure 
aspects of thread behavior.
Represents counters that measure 
aspects of thread behavior that are 
[<0047>-7<004C>-10<0049>-47<00C0>-12<0046>-9<0058>-6<004F>-13<005700030052>-14<005500030057>-9<004C>-7<0050>-16<0048>-25<0010>-24<0046>-7<0052>-14<0051>-16<0056>-13<0058>-6<0050>-9<004C>-7<0051>-18<004A00030057>-8<005200030046>-7<0052>-13<004F>-6<004F>-14<0048>-23<0046>-31<0057>-27<0011>]TJ
  
Class
Properties
Methods
Description
[<0035>-9<0048>-17<0053>-14<0055>-19<0048>-19<0056>-19<0048>-17<0051>-8<0057>-25<0056000300C1>-15<0052>-10<005A00030056>-23<0057>-26<0044>-10<0057>-9<004C>-12<0056>-23<0057>-9<004C>-10<0046>-19<005600030049>-19<0055>-19<0052>-14<005000030057>-9<004B>-16<00480003>]TJ
packet scheduler.
Represents pipe statistics from the 
packet scheduler.
Represents counters that monitor 
individual RAS ports of the RAS 
device on the computer.
Represents counters that combine 
values for all ports of the RAS device 
on the computer.
Represents the number of local 
network interfaces visible to and used 
by the RSVP service.
Represents RSVP or ACS service 
performance counters.
[<0035>-9<0048>-17<0053>-14<0055>-19<0048>-19<0056>-19<0048>-17<0051>-8<0057>-25<005600030057>-9<004B>-16<004800030046>-7<0052>-16<0058>-6<0051>-8<0057>-10<0048>-17<0055>-32<005600030056>-11<0053>-20<0048>-23<0046>-3<004C>-12<00C0>-12<004600030057>-8<00520003>]TJ
the SMTP server.
Represents performance statistics 
about a print queue.
Represents the telephony system.
Represents counters that measure the 
rates at which messages are sent and 
received by using ICMP protocols.
Represents counters that measure the 
rates at which IP datagrams are sent 
and received by using IP protocols.
Represents counters that measure 
the rates at which bytes are sent and 
received over the NBT connection 
between the local computer and a 
remote computer.
Represents counters that measure 
the rates at which bytes and packets 
are sent and received over a TCP/IP 
network connection.
Represents counters that measure 
the rates at which TCP segments are 
sent and received by using the TCP 
protocol.
Represents counters that measure 
the rates at which UDP datagrams are 
sent and received by using the UDP 
protocol.
Represents terminal services 
summary information.
Represents terminal services per-
session resource monitoring.
[<0035>-9<0048>-17<0053>-14<0055>-19<0048>-19<0056>-19<0048>-17<0051>-8<0057>-25<005600030046>-7<0052>-16<0058>-6<0051>-8<0057>-10<0048>-17<0055>-32<005600030056>-11<0053>-20<0048>-23<0046>-3<004C>-12<00C0>-12<004600030057>-8<005200030057>-9<004B>-16<00480003>]TJ
World Wide Web Publishing Service.
APPENDIX F
Basic 
roubleshooting 
ips
his appendix contains a collection of general 
troubleshooting tips. They are not necessarily in any 
particular order of importance.
Remember, 
spelling counts. Always look for 
misspelled cmdlet names, property names, 
method calls, and so on. In Windows PowerShell, if you do not spell a property name correctly, 
when you try to run the script, it will not generate an error. When the following code is typed 
inside the shell, there is no output27nothing to indicate that you choose a bad property of the 
WIN32_Service
 WMI class.
Do not break the 
pipeline. This one is particularly easy to do. For example, say you start off 
with a command you typed at the Windows PowerShell console. You then decide to add 
something else to it, so you press the up arrow key and add a pipe character. Next, you 
decide you like the results so much, you want to create a script. Finally, you decide to clean 
it up and add a column header to the top of the printout27which means that you break your 
pipeline. The following code illustrates this. In the 
Get-WMIObject
 statement, you end the line 
with a pipe character. But you then call a function that prints out the name of the computer. 
The problem is that this breaks the pipeline, and the script will end with only the line 
Service 
Dependencies on localhost
. Since you called a function, the code does not generate an error. 
  
On the other hand, if you do not call the function, then an error will be generated. This 
is shown in the following code. Note that just as in the preceding code sample, after the 
Get-WMIObject
 command, you end the line with a 
pipe character. You then break the pipeline 
by printing out the string 
Dependent services on the local computer
When this code is run, an error will be generated. The error, shown here, explains that you are 
not allowed to use an expression in the middle of a pipeline, which of course is true. 
Use debug statements when trying to see what is going on with your script. If a script is pro
ducing some strange results, then print out the value of the variable. I always try to include a 
debug statement behind the variable so I will know it is safe to delete the variable when I am 
done testing my script. In the following script, you are trying to add two numbers. However, 
you want to make sure the results that are printed out are correct. To do this, you use debug 
[<0056>-16<0057>-19<0044>-3<0057>-3<0048>-10<0050>-9<0048>-10<00510057>-19<005600030057>-1<0052000300460052>-7<005100C0>-2<0055>-12<005000030057>-2<004B>-9<004800030044>-4<0051>-9<0056>-18<005A>-2<0048>-10<00550003004C>-5<005600030044>-9<0046>-25<0057>-8<0058>-3<0044>-4<004F>1<004F>-12<005C00030046>1<0052>-7<0055>-12<0055>-12<0048>-16<0046>-25<0057>-20<001100030032>-11<0051>-9<0046>-2<00480003005C>1<0052>-10<00580003004B>-7<0044>1<0059>1<0048000300C0>-11<005B>2<0048>-16<004700030057>-2<004B>-9<004800030056>-13<0046>4<0055>-12<004C0053>-5<005700030052>-7<005500030059>1<0048>-10<0055>-12<004C>]TJ
[<00C0>-7<0048>-16<004700030057>-2<004B>-7<0044>-3<00570003004C>-5<00570003004C>-5<00560003005A>-2<0052>-7<0055>-12<004E>-14<004C0051>-11<004A00030053>-7<0055>-12<0052>-7<0053>-13<0048>-10<0055>-12<004F>-12<005C>34<000F0003005C>1<0052>-9<00580003005A>-9<004C004F>1<004F00030047>-7<0048>-11<004F>-7<0048>-10<0057>-3<004800030057>-2<004B>-9<00480003004F004C0051>-9<0048>-12<0056000300460052>-7<00510057>-19<0044>-2<004C0051>-2<004C0051>-11<004A00030057>-2<004B>-9<004800030047>-7<0048>-10<0045>-9<0058>-7<004A00030056>-16<0057>-19<0044>-3<0057>-3<0048>-10<0050>-9<0048>-10<00510057>-19<0056>-19<00110003002C>1<00490003>]TJ
you always make your debug statements the same, then it will be easy to search for them. 
You could clean the script up by using the 
Find and Replace feature of Notepad. The code is 
shown here:
Use the 
Test-Path
[<00030046>4<0050>-11<0047>1<004F>-7<0048>-10<005700030057005200030059>1<0048>-10<0055>-12<004C>-3<0049>-48<005C00030057>-2<004B>-7<0044>-3<005700030044000300C0>-2<004F>-7<004800030052>-7<005500030052>-2<0057>-2<004B>-9<0048>-10<005500030052>-7<0045>-6<004D>-5<0048>-16<0046>-25<005700030044>-9<0046>-25<0057>-8<0058>-3<0044>-4<004F>1<004F>-12<005C00030048>-6<005B>-8<004C>-5<0056>-16<0057>-19<00560003005A>-9<004B>-9<0048>-10<005100030057>-2<0055>-47<005C>-12<004C0051>-11<004A0003005700520003005A>-2<0052>-7<0055>-12<004E0003>]TJ
with the object. Of course, make sure that you use a # debug statement following the com
mand if it is not an essential part of your script. An example of using the 
Test-Path
 technique is 
shown in the following code:
Initialize 
variables and set their value to 
$null
 or 0, as appropriate. When using variables to 
count the number of items, if you remain inside the same Windows PowerShell console ses
sion, then the values of the variables can produce unexpected results if they are not properly 
initialized. An example of doing this is shown in the ParseAppLog.ps1 script from the Extras 
folder. This script is shown here:
Parse
ppLog.ps1
$ErrorActionPreference
[<00030056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-7<0048>-12<005600030057>-2<004B>-9<004800030044>-9<0046>-25<0057>-2<004C>-5<0052>-7<005100030057005200030057>-19<0044>-4<004E>12<00480003005A>-9<004B>-9<0048>-10<005100030047>-3<0044>-3<0057>-19<00440003004C>-5<00560003005A>-9<0055>-12<004C>-5<0057>-31<0057>-3<0048>-10<005100030058>-6<0056>-4<004C0051>-11<004A0003>]TJ
Write-Error 
a script, or 
WriteError
 in a cmdlet or provider. In scripts, check for 
$ErrorActionPreference = 
"SilentlyContinue"
. By default, Windows PowerShell issues an error message the moment an 
error occurs. If you prefer that processing continue without an error message being displayed, 
then set the value of the Windows PowerShell automatic variable to 
$ErrorActionPreference 
to 
SilentlyContinue
  
The 
$error
 variable contains objects for which an error occurred while being processed in a 
cmdlet. The following example illustrates working with error objects contained in the 
$error
variable.
You
can use 
Set-PSDebug
 to enable debugging features in your script. It can turn script 
debugging features on and off, set the trace level, and toggle strict mode. Here22s an example:
This command turns on stepping and then runs a script that displays the numbers 1, 2, and 3.
Not all objects are created equal. Just because that old COM object had a method called 
cre
ate 
does not mean it exists in Windows PowerShell.
APPENDIX G
General PowerShell 
Scripting Guidelines
his appendix details Microsoft Windows PowerShell scripting guidelines. These scripting guide
lines have been collected from more than a dozen different script writers from around the world. 
Most of these are Microsoft employees actively involved in the world of Windows PowerShell. Some 
are non-Microsoft employees such as network administrators and consultants who use Windows 
PowerShell on a daily basis to improve their work/life balance. Not every script will adhere to all of 
[<0057>-2<004B>-9<0048>-12<0056>-12<00480003004A>-3<0058004C>-5<0047>-7<0048>-11<004F004C0051>-9<0048>-12<0056>-4<001E0003004B>-9<0052>-3<005A>-2<0048>-8<0059>1<0048>-10<0055>39<000F0003005C>1<0052>-9<00580003005A>-9<004C004F>1<004F000300C0>-2<0051>-11<004700030057>-2<004B>-7<0044>-3<005700030057>-2<004B>-9<004800030046>4<004F>-7<0052>-7<0056>-12<0048>-10<00550003005C>1<0052>-10<005800030044>-11<0047>1<004B>-9<0048>-10<0055>-12<004800030057>-1<005200030057>-2<004B>-9<0048>-12<0056>-12<00480003004A>-3<0058004C>-5<0047>-7<0048>-11<004F004C0051>-9<0048>-12<0056>-20<000F00030057>-2<004B>-9<004800030048>-10<0044>-10<0056>-3<004C>-5<0048>-10<00550003005C>1<0052>-9<0058>1<00550003>]TJ
scripts will be to understand and to maintain. They will not necessarily be easier to write, but they will 
[<0045>-13<004800030048>-10<0044>-10<0056>-3<004C>-5<0048>-10<005500030057>-1<005200030050>-7<0044>-4<0051>-7<0044>-11<004A>-7<0048>-9<000F00030044>-3<0051>-11<00470003005C>1<0052>-10<00580003005A>-9<004C004F>1<004F000300C0>-2<0051>-11<004700030057>-2<004B>-7<0044>-3<00570003005C>1<0052>-9<0058>1<005500030057>-1<0052>-2<0057>-19<0044>-4<004F000300460052>-7<0056>-16<005700030052>1<004900030052>-3<005A>-9<0051>-9<0048>-10<0055>-26<0056>-4<004B>-2<004C005300030052>-7<005100030057>-2<004B>-9<004800030056>-13<0046>4<0055>-12<004C0053>-5<0057>-19<005600030056>-4<004B>-9<0052>-9<0058>1<004F>-8<004700030045>-13<00480003004F>-7<0052>-3<005A>]TJ
[<0048>-10<0055>-12<0048>-16<004700030056>-3<004C>-5<004A>1<0051>-2<004C>-5<00C0>-5<0046>-14<0044>-4<00510057>-2<004F>-12<005C>35<00110003002C>-1<005100030057>-2<004B>-9<004800030048>-10<0051>-11<0047>-9<000F0003002C00030052>-6<0051>-4<004F>-12<005C0003004B>-7<0044>1<0059>1<004800030057>-2<004B>-4<0055>-12<0048>-16<004800030055>-12<0048>-16<0054>-3<0058004C0055>-12<0048>-10<0050>-9<0048>-10<00510057>-19<005600030049>-7<0052>-7<00550003004400030056>-12<0046>4<0055>-12<004C0053>-5<0057>-16<001D00030057>-2<004B>-7<0044>-3<00570003004C>-5<00570003004C>-5<005600030048>-10<0044>-10<0056>-21<005C00030057005200030055>-12<0048>-10<0044>-11<0047>-9<000F00030048>-9<0044>-10<0056>-21<005C0003005700520003>]TJ
understand, and easy to maintain. 
General script construction
This section will look at some general considerations for the overall construction of scripts. This in
cludes the use of functions, a related module, and other considerations.
Include functions in the script that uses the function
[<003A>-10<004B>-2<004C004F>-7<00480003004C>-5<00570003004C>-5<005600030053>-13<0052>-7<0056>-14<0056>-3<004C0045>-8<004F>-7<004800030057>-1<005200030058>-6<0056>-12<004800030044>-4<00510003004C0051>-9<0046>4<004F>-4<0058>-7<0047>-7<0048000300C0>-2<004F>-7<004800030052>-7<005500030047>-5<0052>-2<0057>33<0010>-4<0056>-12<0052>-9<0058>1<0055>-10<0046>-2<00480003004400030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<00510003005A>-9<004C>-5<0057>-2<004B>-2<004C00510003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F>-9<000F0003004C>-5<005700030046>-14<0044>-4<00510003>]TJ
become a support nightmare. If you know which function you want to use, but don22t know which 
script provides it, you have to go looking unless the function resides in a module stored in a known 
location. If a script provides the function you want but has other elements that you don22t want, it22s 
[<004B>-7<0044>-4<0055>-13<004700030057>-1<005200030053>-6<004C>-3<0046>4<004E00030044>-4<0051>-11<004700030046>4<004B>-9<0052>-13<0052>-7<0056>-12<004800030049>-13<0055>-12<0052>-7<005000030057>-2<004B>-9<004800030056>-13<0046>4<0055>-12<004C0053>-5<0057000300C0>-2<004F>-7<0048>-7<001100030024>-3<0047>-7<0047004C>-5<0057>-2<004C>-5<0052>-7<0051>-7<0044>-4<004F>1<004F>-12<005C>34<000F0003005C>1<0052>-9<005800030050>-6<0058>-6<0056>-16<005700030045>-13<004800030059>1<0048>-10<0055>-47<005C00030046>-14<0044>-4<0055>-12<0048>-8<0049>-18<0058>1<004F0003005A>-9<004B>-9<0048>-10<00510003004C>-5<005700030046>1<0052>-7<0050>-9<0048>-12<005600030057>-1<00520003>]TJ
[<0059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<0048>-18<0010>-4<0051>-7<0044>-4<0050>-2<004C0051>-11<004A000300460052>-7<0051>4<0059>1<0048>-10<0051>-1<0057>-2<004C>-5<0052>-7<0051>-9<005600030045>-13<0048>-16<0046>-14<0044>-6<0058>-6<0056>-12<00480003005C>1<0052>-10<005800030046>1<0052>-9<0058>1<004F>-8<004700030048>-10<0051>-11<004700030058>1<00530003005A>-9<004C>-5<0057>-2<004B000300460052>-7<005100C1>-3<004C>-3<0046>-25<0057>-2<004C0051>-11<004A00030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<004800030051>-7<0044>-4<0050>-9<0048>-12<0056>-19<00110003003A>-10<004B>-9<0048>-10<00510003005C>1<0052>-9<00580003>]TJ
[<0058>-7<0056>-13<0048>-1<00030044>-5<0051>-1<0003004C>-1<0051>-10<0046>3<004F>-5<0058>-8<0047>-8<0048>-1<000300C0>-3<004F>-8<0048>-10<000F>-1<0003005C0052>-10<0058>-1<00030051>-10<0052>-1<0003004F>-8<0052>-8<0051>-12<004A>-8<0048>-11<0055>-1<0003004B>-8<004400590048>-1<00030044>-1<00030053>-14<0052>-8<0055>-42<0057>-20<0044>-5<0045>-9<004F>-8<0048>-1<00030056>-14<0046>3<0055>-13<004C>-1<0053>-6<0057>-21<0011>-1<0003002C>-2<0057>-1<00030050>-7<0058>-7<0056>-17<0057>-1<00030044>-5<004F>-10<005A>-4<0044>1<005C>-13<0056>-1<00030057>-3<0055>-9<004400590048>-12<004F>-1<0003005A>-10<004C>-6<0057>-3<004B>-1<00030057>-3<004B>-10<0048>-1<00030049>-19<00580051>-10<0046>-26<0057>-3<004C>-6<0052>-8<0051>-1<0003004F>-1<004C>-1<0045>-8<0055>-9<0044>-5<0055>-48<005C>34<0011>-1<0003>]TJ
I use functions in my scripts because it makes them easier to read and maintain. If I were to store 
[<0057>-2<004B>-9<0048>-12<0056>-12<004800030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<0051>-9<00560003004C005100030056>-12<0048>-10<0053>-9<0044>-4<0055>-8<0044>-3<0057>-3<0048000300C0>-2<004F>-7<0048>-12<005600030044>-4<0051>-11<004700030057>-2<004B>-9<0048>-10<005100030047>-5<0052>-2<0057>33<0010>-4<0056>-12<0052>-10<0058>1<0055>-10<0046>-2<0048>]TJ
them, then neither of my two personal objec
tives of function use would really be met. 
There is one other consideration: when a script references an external script containing functions, 
there now exists a relationship that must not be disturbed. If, for instance, you decide you would like 
  
to update the function, you may not remember how many external scripts are calling this function 
and how it will affect their performance and operation. If there is only one script calling the function, 
[<0057>-2<004B>-9<0048>-10<005100030057>-2<004B>-9<004800030050>-7<0044>-2<004C00510057>-3<0048>-10<0051>-7<0044>-4<0051>-9<0046>-2<00480003004C>-5<005600030048>-10<0044>-10<0056>-21<005C>35<00110003002B>-7<0052>-3<005A>-2<0048>-8<0059>1<0048>-10<0055>39<000F00030049>-7<0052>-7<005500030052>-7<0051>-4<004F>-12<005C00030052>-7<0051>-9<004800030056>-13<0046>4<0055>-12<004C0053>-5<0057>-20<000F0003004D>-2<0058>-6<0056>-16<005700030046>1<0052>-7<0053>-3<005C00030057>-2<004B>-9<004800030056>-4<004C004F>1<004F>-12<005C00030057>-2<004B>-2<004C0051>-11<004A0003004C00510057>-1<005200030057>-2<004B>-9<004800030056>-13<0046>4<0055>-12<004C0053>-5<0057000300C0>-2<004F>-7<00480003>]TJ
itself and be done with the whole business. The best way to deal with these situations is to store the 
functions in modules. 
Use full cmdlet names and full parameter names
There are several advantages to spelling out cmdlet names and avoiding the use of aliases in scripts. 
First of all, this makes your scripts nearly self-documenting and therefore much easier to read. 
Secondly, it makes the scripts resilient to alias changes by the user and more compatible with future 
versions of Windows PowerShell. This is easy to do using the IntelliSense feature of the Windows 
PowerShell 3.0 ISE.
Understanding the use of aliases
There are three kinds of aliases in Windows PowerShell: compatibility 
aliases, canonical aliases, and 
[<0058>-6<0056>-12<0048>-10<0055>-10<0010>-18<0047>-7<0048>-9<00C0>-2<0051>-9<0048>-16<004700030044>-4<004F004C>-2<0044>-10<0056>-12<0048>-12<0056>-19<00110003>]TJ
You can identify the 
compatibility aliases by using this command:
The compatibility aliases are present in Windows PowerShell to provide an easier transition from 
using older command shells. You can remove the compatibility aliases by deleting aliases that are not 
ReadOnly. To do this every time you start Windows PowerShell, add the following command to your 
[<003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>20<000C>10<001D>]TJ
The 
[<0046>-14<0044>-4<0051>-9<0052>-7<0051>-2<004C>-3<0046>-14<0044>-4<004F00030044>-4<004F004C>-2<0044>-10<0056>-12<0048>-12<00560003005A>-2<0048>-10<0055>-12<004800030046>4<0055>-12<0048>-10<0044>-3<0057>-3<0048>-16<004700030056>-3<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<0046>-14<0044>-4<004F>1<004F>-12<005C00030057005200030050>-7<0044>-4<004E>12<004800030057>-2<004B>-9<00480003003A>-16<004C0051>-11<0047>-5<0052>-3<005A>-12<005600030033>5<0052>-3<005A>-2<0048>-10<0055>-23<0036>1<004B>-9<0048>-11<004F>1<004F00030046>4<0050>-11<0047>1<004F>-7<0048>-10<0057>-19<005600030048>-10<0044>-10<0056>-3<004C>-5<0048>-10<005500030057>-1<00520003>]TJ
use from within the Windows PowerShell console. Shortness of length and ease of typing were the 
[<0053>-7<0055>-12<004C0050>-7<0044>-4<0055>-47<005C00030047>1<0055>-12<004C>-12<0059>-12<004C0051>-11<004A00030049>-9<0044>-9<0046>-25<0057>-1<0052>-7<0055>-26<00560003004C005100030057>-2<004B>-9<0048>-9<004C005500030046>4<0055>-12<0048>-10<0044>-3<0057>-2<004C>-5<0052>-7<0051>-14<001100030037>55<0052000300C0>-2<0051>-11<004700030057>-2<004B>-9<004800030046>-15<0044>-4<0051>-9<0052>-7<0051>-2<004C>-3<0046>-14<0044>-4<004F00030044>-4<004F004C>-2<0044>-10<0056>-12<0048>-12<0056>-20<000F00030058>-6<0056>-12<004800030057>-2<004B>-2<004C>-5<0056000300460052>-7<0050>-4<0050>-7<0044>-4<0051>-11<0047>8<001D>]TJ
If you must use an alias, only use canonical aliases in a script
You are reasonably safe in using the canonical aliases in a script; however, they make the script much 
harder to read. Also, because there are often several aliases for the same cmdlet, different users of 
Windows PowerShell may have their own personal favorite aliases. Additionally, because the canonical 
aliases are only read-only, even a canonical alias can be removed. But worse than deleting an alias is 
changing its meaning.
lways use the 
description
 property when creating an alias
[<003A>-10<004B>-9<0048>-10<005100030044>-11<0047>-7<0047004C0051>-11<004A00030044>-4<004F004C>-2<0044>-10<0056>-12<0048>-12<005600030057>-1<00520003005C>1<0052>-9<0058>1<005500030053>-7<0055>-12<0052>-1<00C0>-2<004F>-7<0048>-9<000F0003005C>1<0052>-10<005800030050>-7<0044>2<005C0003005A>-9<004C>-5<0056>-4<004B00030057005200030056>-4<0053>-13<0048>-16<0046>4<004C>-3<0049>-48<005C00030057>-2<004B>-9<00480003>]TJ
read-only
 or 
constant
 options. You 
should always include the 
description
 property for your personal aliases and make the description 
something that is relatively constant. Here is an example from my personal Windows PowerShell 
[<00530055>-5<0052>6<00C0>5<004F0048>12<001D>]TJ
Use 
Get-Item
 to convert path strings to rich types
[<0037>-7<004B>-2<004C>-5<00560003004C>-5<005600030044>-9<0046>-25<0057>-8<0058>-3<0044>-4<004F>1<004F>-12<005C0003004400030053>-6<0055>-12<0048>-10<0057>-31<0057>-38<005C00030046>1<0052>-13<0052>-6<004F00030057>-2<0055>-12<004C>-3<0046>4<004E>-26<00110003003A>-10<004B>-9<0048>-10<00510003005A>-2<0052>-7<0055>-12<004E>-14<004C0051>-11<004A0003005A>-9<004C>-5<0057>-2<004B000300440003004F004C>-5<0056>-16<0057>-2<004C0051>-11<004A000300520049000300C0>-2<004F>-7<0048>-12<0056>-20<000F0003004C>-3<00490003005C>1<0052>-10<005800030058>-6<0056>-12<004800030057>-2<004B>-9<00480003>]TJ
Get-Content 
cmdlet, you can only read each line and have it as a path to work with. If, however, you use 
Get-Item
then you have an object with a corresponding number of both properties and methods to work with. 
Here22s an example that illustrates this:
  
General script readability
The following are points to keep in mind to promote the readability of your script:
When creating an alias, include the 
-description
 parameter, and use it when searching for your 
personal aliases. An example of this is shown here a better approach is to load the aliases 
from a private module. This way, the 
modulepath 
parameter also loads.
 Scripts should provide help. Use 
comment-based help to do this.
All procedures should begin with a brief comment describing what they do. This description 
should not describe the implementation details how the procedure works because these 
often change over time, resulting in unnecessary comment-maintenance work, or worse, er
roneous comments. Place comments on individual lines27do not use inline comments.
Arguments passed to a function should be described when their purpose is not obvious and 
[<005A>-9<004B>-9<0048>-10<005100030057>-2<004B>-9<004800030049>-18<0058>1<0051>-9<0046>-25<0057>-2<004C>-5<0052>-7<005100030048>-6<005B>-8<0053>-13<0048>-16<0046>-25<0057>-19<005600030057>-2<004B>-9<004800030044>-4<0055>-12<004A>-3<0058>1<0050>-9<0048>-10<0051>-1<0057>-19<005600030057>-1<005200030045>-13<00480003004C00510003004400030056>-3<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<004600030055>-8<0044>-4<0051>-11<004A>-7<0048>-7<00110003>]TJ
Return values for variables that are changed by a function should also be described at the 
beginning of each function.
  
Every important variable declaration should include an inline comment describing the use of 
the variable if the name of the variable is not obvious.
Variables and functions should be named clearly to ensure that inline comments are only 
needed for complex functions.
When creating a complex function with multiple code blocks, place an inline comment for 
each closing curly bracket at the end of the closing brace.
At the beginning of your script, you should include an overview that describes the script, sig
[<0051>-2<004C>-5<00C0>-5<0046>-14<0044>-4<0051005700030052>-7<0045>-6<004D>-5<0048>-16<0046>-25<0057>-19<005600030044>-4<0051>-11<004700030046>4<0050>-11<0047>1<004F>-7<0048>-10<0057>-19<0056>-20<000F00030044>-3<0051>-11<004700030044>-4<0051>4<005C00030058>1<0051>-2<004C>-5<0054>-3<0058>-7<004800030055>-12<0048>-16<0054>-3<0058004C0055>-12<0048>-10<0050>-9<0048>-10<00510057>-19<005600030049>-7<0052>-7<005500030057>-2<004B>-9<004800030056>-13<0046>4<0055>-12<004C0053>-5<0057>-20<00110003>]TJ
When naming 
functions, use the verb-noun construction used by cmdlet names.
Scripts should use named 
parameters if they accept more than one argument. If a script only 
accepts a single argument, then it is okay to use an unnamed positional argument.
Always assume that the users will copy your script and modify it to meet their needs. Place 
comments in the code to facilitate this process.
Never assume the current path. Always use the full path, either via an environment variable or 
an explicitly named path. 
Formatting your code
[<0036>-11<0046>4<0055>-12<0048>-16<0048>-10<005100030056>-3<0053>-9<0044>-9<0046>-2<004800030056>-4<004B>-9<0052>-9<0058>1<004F>-8<004700030045>-13<0048000300460052>-7<0051>-9<0056>-12<0048>-10<0055>-47<0059>1<0048>-16<004700030044>-10<005600030050>-6<0058>-5<0046>4<004B00030044>-10<005600030053>-13<0052>-7<0056>-14<0056>-3<004C0045>-8<004F>-7<00480003005A>-9<004B>-2<004C004F>-7<004800030056>-16<0057>-2<004C004F>1<004F00030044>-4<004F>1<004F>-7<0052>-3<005A>-9<004C0051>-11<004A00030046>1<0052>-13<0047>-7<004800030049>-7<0052>-7<0055>-12<0050>-7<0044>-3<0057>-31<0057>-2<004C0051>-11<004A00030057>-1<005200030055>-12<0048>-9<00C1>-10<0048>-16<0046>-25<00570003>]TJ
logical structure and nesting. Here are a few suggestions: 
Indent standard nested blocks by at least two spaces. 
Block overview comments for a function by using the Windows PowerShell multiline comment 
feature. 
Block the highest-level statements, with each nested block indented an additional two spaces.
You should align the begin and end script block brackets. This will make it easier to follow the 
[<00460052>-13<0047>-7<0048000300C1>-8<0052>-3<005A>20<0011>]TJ
[<0024>13<0059>1<0052>-4<004C>-5<004700030056>-3<004C0051>-11<004A>1<004F>-7<0048>-18<0010>-5<004F004C0051>-9<004800030056>-16<0057>-19<0044>-3<0057>-3<0048>-10<0050>-9<0048>-10<00510057>-19<0056>-19<00110003002C>-1<005100030044>-11<0047>-7<0047004C>-5<0057>-2<004C>-5<0052>-7<005100030057005200030050>-7<0044>-4<004E>-14<004C0051>-11<004A0003004C>-5<005700030048>-9<0044>-10<0056>-3<004C>-5<0048>-10<005500030057>-1<005200030049>-7<0052>-6<004F>1<004F>-7<0052>-3<005A00030057>-2<004B>-9<0048000300C1>-8<0052>-3<005A00030052004900030057>-2<004B>-9<0048000300460052>-13<0047>-7<0048>-9<000F00030057>-2<004B>-2<004C>-5<00560003>]TJ
also makes it easier when you end up searching for a missing curly bracket. 
Break each pipelined object at the pipe. Leave all pipes on the right. Do this unless it is a very 
short, simple pipe statement.
Avoid line continuation27the
 backtick character `. The exception here is when not using line 
continuation would cause the user to have to scroll to read the code or the output27generally 
around 90 characters. One way to avoid extremely long command lines for cmdlets with a 
large number of parameters is through the use of hash tables and splatting of parameters to 
Windows PowerShell cmdlets.
Scripts should follow
Pascal-case guidelines for long variable names27the same as Windows 
PowerShell parameters. 
Scripts should use the 
Write-Progress
 cmdlet if they take more than 1 or 2 seconds to run.
Consider supporting the
whatif
 and 
[<0010>-16<0046>9<00520051>-1<00C00055>1<0050>]TJ
 parameters in your functions as well as in your 
scripts, especially if they will change system state. Following is an example using the 
-whatif
parameter:
If your script does not accept a variable set of arguments, you should check the value of 
$args.count
 and call the 
help
 function if the number is incorrect. Here is an example:
If your script does not accept any arguments, you should use code such as the following:
Working with functions
The 
following are points to keep in mind when working with your functions. It will make your code 
easier to read and understand.
Functions should handle mandatory parameter checking. To make this possible, use parameter 
property attributes. 
Utility or shared functions should be placed in a module. 
If you are writing a function library script, consider using feature and parameter variable 
[<0051>-7<0044>-4<0050>-9<0048>-12<005600030057>-2<004B>-7<0044>-3<00570003004C0051>-9<00460052>-7<0055>-12<0053>-13<0052>-7<0055>-8<0044>-3<0057>-3<00480003004400030058>1<0051>-2<004C>-5<0054>-3<0058>-7<004800030051>-7<0044>-4<0050>-9<004800030057>-1<005200030050>-2<004C0051>-2<004C0050>-2<004C>-7<005D>-1<004800030057>-2<004B>-9<004800030046>4<004B>-7<0044>-4<0051>-9<0046>-2<0048>-12<0056000300520049000300460052>-7<005100C1>-3<004C>-3<0046>-25<00570003005A>-9<004C>-5<0057>-2<004B00030052>-2<0057>-2<004B>-9<0048>-10<005500030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<0048>-12<00560003>]TJ
  
in the scripts that call them. It is best to store these function libraries in modules to facilitate 
sharing and use.
Consider supporting standard parameters when it makes sense for your script. The easiest way 
to do this is to implement cmdlet binding.
[<0026>16<0055>-3<0048>-2<0044>3<0057>13<004C>13<0051>2<004A00030057>8<0048>2<0050>9<0053>4<004F>5<0044>3<0057>7<0048000300C0>12<004F>5<0048>-4<0056>]TJ
[<0037>-7<004B>-9<004800030049>-7<0052>-6<004F>1<004F>-7<0052>-3<005A>-9<004C0051>-11<004A00030044>-4<0055>-12<004800030053>-13<0052>-4<004C0051>-1<0057>-19<005600030057>-1<00520003004E>12<0048>-16<0048>-10<00530003004C005100030050>-2<004C0051>-11<00470003005A>-9<004B>-9<0048>-10<005100030046>4<0055>-12<0048>-10<0044>-3<0057>-2<004C0051>-11<004A00030057>-3<0048>-10<0050>-4<0053>-8<004F>-5<0044>-3<0057>-3<0048000300C0>-2<004F>-7<0048>-12<0056>-19<001100030026>9<0055>-12<0048>-10<0044>-3<0057>-3<004800030057>-3<0048>-10<0050>-4<0053>-8<004F>-5<0044>-3<0057>-3<0048>-12<005600030057>-2<004B>-7<0044>-3<005700030046>-14<0044>-4<00510003>]TJ
be used for different types of scripts. Some examples might be WMI scripts, ADSI scripts, and ADO 
scripts. You can then add these templates to the Windows PowerShell ISE as snippets by using the 
New-ISESnippet
 cmdlet. When you are creating your templates, consider the following:
Add in common functions that you would use on a regular basis.
[<0027>-12<005200030051>-9<0052>-2<00570003004B>-7<0044>-4<0055>-12<0047>-2<0010>-18<00460052>-13<0047>-7<004800030056>-4<0053>-13<0048>-16<0046>4<004C>-5<00C0>-5<004600030059>-5<0044>-4<004F>-4<0058>-7<0048>-12<005600030057>-2<004B>-7<0044>-3<005700030057>-2<004B>-9<0048000300460052>-7<0051>-4<0051>-9<0048>-16<0046>-25<0057>-2<004C>-5<0052>-7<005100030056>-16<0057>-2<0055>-12<004C0051>-11<004A>-6<005600030050>-2<004C>-5<004A>1<004B>-1<005700030055>-12<0048>-16<0054>-3<0058004C0055>-12<0048>5<001D00030056>-12<0048>-10<0055>-47<0059>1<0048>-10<005500030051>-7<0044>-4<0050>-9<0048>-12<0056>-20<000F0003>]TJ
[<004C0051>-4<0053>-9<0058>-5<0057000300C0>-2<004F>-7<004800030053>-9<0044>-3<0057>-2<004B>-9<0056>-20<000F00030052>-9<0058>-5<0057>-2<0053>-9<0058>-5<0057000300C0>-2<004F>-7<004800030053>-9<0044>-3<0057>-2<004B>-9<0056>-20<000F00030044>-3<0051>-11<004700030056>-12<005200030052>-7<0051>-14<00110003002C>-1<0051>-9<0056>-16<0057>-3<0048>-10<0044>-11<0047>-9<000F00030046>1<0052>-7<00510057>-19<0044>-2<004C005100030057>-2<004B>-9<0048>-12<0056>-12<004800030059>-5<0044>-4<004F>-4<0058>-7<0048>-12<00560003004C005100030059>-5<0044>-4<0055>-12<004C>-2<0044>-4<0045>-8<004F>-7<0048>-12<0056>-19<0011>]TJ
Do not hard-code version information into the template.
[<0030>-5<0044>-4<004E>12<004800030056>-6<0058>1<0055>-12<00480003005C>1<0052>-9<00580003004C0051>-9<0046>4<004F>-4<0058>-7<0047>-7<0048000300460052>-7<0050>-4<0050>-9<0048>-10<00510057>-19<00560003005A>-9<004B>-9<0048>-10<0055>-12<004800030057>-2<004B>-9<004800030057>-3<0048>-10<0050>-4<0053>-8<004F>-5<0044>-3<0057>-3<00480003005A>-9<004C004F>1<004F00030055>-12<0048>-16<0054>-3<0058004C0055>-12<004800030050>-9<0052>-13<0047004C>-5<00C0>-5<0046>-14<0044>-3<0057>-2<004C>-5<0052>-7<005100030057005200030045>-13<004800030050>-7<0044>-11<0047>-7<00480003>]TJ
functional.
You may want to turn your templates into code snippets to facilitate their usage.
Functions
When writing your own functions, there are some things you may want to consider:
Create highly specialized functions. Good functions do one thing well.
Make the function completely self-contained. Good functions should be portable.
Alphabetize the functions in your script if possible. This promotes readability and 
maintainability.
Give your functions descriptive names and follow verb-noun naming convention. Nouns 
should be singular. If the function name becomes too long, create an alias for the function and 
store the alias in the same module as the function.
Every function should have a single output point this does not include the error, verbose, or 
debug streams.
Every function should have a single entry point.
Use parameters to avoid problems with local and global variable scopes. 
Implement the common parameters 
-verbose
-debug
-whatif
, and 
[<0010>-16<0046>9<00520051>-1<00C00055>1<0050>]TJ
 where appropriate 
to promote reusability.
Variables, constants, and naming
When creating variables and constants, and when naming, there are some things to consider.
Avoid 
hard-coded numbers. When calling methods or functions, avoid hard-coding numeric 
literals. Instead, create a 
constant that is descriptive enough that someone reading the code 
[<005A>-2<0052>-10<0058>1<004F>-8<004700030045>-13<004800030044>-4<0045>-8<004F>-7<004800030057>-1<0052000300C0>-7<004A>-3<0058>1<0055>-12<004800030052>-10<0058>-5<00570003005A>-9<004B>-7<0044>-3<00570003004C>-5<00570003004C>-5<005600030056>-6<0058>1<0053>-7<0053>-13<0052>-7<0056>-12<0048>-16<004700030057>-1<005200030047>-5<0052>1<00110003002C>-1<005100030057>-2<004B>-9<00480003>]TJ
ServiceDependencies.ps1 script, a 
portion of which follows, you use a number to offset the printout. This number is determined 
by the position of a certain character in the output. Rather than just writing 23+14,24 you create a 
constant with a descriptive name. Refer to Chapter 12, 23Remoting WMI,24 for more information 
on this script. The applicable portion of the code is shown here:
Do not recycle variables. 
Recycled variables are referred to as 
unfocused variables
. Variables 
should serve a single purpose, and those that do are called 
focused variables
Give 
variables descriptive names. Remember that you can use tab completion to simplify 
typing. 
Minimize 
variable scope. If you are only going to use a variable in a function, then declare it in 
the function. 
When a constant is needed, use a read-only variable instead. Remember that constants cannot 
be deleted, nor can their value change. 
Avoid hard-coding values into method calls or in the worker section of the script. Instead, 
place values into variables.
When possible, group your 
variables into a single section of each level of the script. 
Avoid using 
Hungarian Notation, in which you embed type names into the variable names. 
Remember that everything in PowerShell is basically an object, so there is no value in naming 
a variable 
$objWMI
There are times when it makes sense to use the following: 
bln
int
dbl
err
dte
, and 
str
. This is 
due to the fact that Windows PowerShell is a strongly typed language. It just acts like it is not. 
Scripts should avoid populating the global variable space. Instead, consider passing values to a 
function by reference 
[ref]
$ErrorActionPreference variable,
391
392
524
525
623
$error.clear method,
391
$error variable,
142
191
389
390
392
624
$ExecutionContext variable,
142
$false variable,
142
$foreach variable,
142
$FormatEnumerationLimit value,
381
$formatEnumeration variable,
225
$help parameter,
184
$HOME variable,
142
$host variable,
142
$input variable,
142
202
594
$intGroupType variable,
394
395
$intSize variable,
568
570
$intUsers variable,
415
$i++ operator,
415
$i++ syntax,
149
$item variable,
264
$i variable,
143
148
152
328
390
415
547
566
$LastExitCode variable,
142
$logon variable,
374
$Match variable,
142
$MaximumHistoryCount variable,
594
$message variable,
505
$modulepath variable,
233
$month parameter,
206
$MyInvocation variable,
142
$namespace variable,
524
525
$newAry variable,
567
$noun variable,
507
$null variable,
142
$num variable,
477
478
485
486
487
490
$obj1 variable,
529
530
$objADSI variable,
384
413
415
$objDisk variable,
313
$objEnv variable,
104
105
$objGroup variable,
395
Index
$$ variable,
142
$acl variable,
362
$args variable,
139
142
211
213
$aryElement variable,
413
$aryLog variable,
554
556
$aryServer variable,
569
$aryText array,
413
$aryText variable,
413
416
$aryUsers variable,
566
567
$ary variable,
151
154
158
$bios variable,
354
$caps array,
153
$caption variable,
505
$_ character,
$choiceRTN variable,
505
$class variable,
525
$clsID variable,
520
$cn variable,
344
464
$colDrives variable,
$colPrinters variable,
$computerName variable,
502
503
[<00070046>5<0052>-2<0051>4<00C0>2<0055>-7<0050>1<0053>-2<0055>-8<0048>-3<0049>-2<0048>-6<0055>-8<0048>-6<0051>-5<0046>3<0048>9<0003>9<0059>-1<0044>1<0055>-7<004C>2<0044>1<0045>-3<004F>-2<0048>-5<000F>]TJ
216
$constASCII variable,
324
$credential variable,
341
464
$cred variable,
118
127
$dc1 variable,
116
$DebugPreference variable,
465
$ dollar sign  character,
141
$driveData variable,
187
189
$drives hash table,
527
$dteDiff variable,
329
$dteEnd variable,
329
$dteMaxAge variable,
568
$dteStart variable,
329
$env:psmodulepath variable,
  
$objOU variable,
384
$objUser variable,
395
415
$objWMIServices variable,
322
328
$objWMI variable,
631
$OFS variable,
142
$oldVerbosePreference variable,
516
521
$oupath variable,
435
$password variable,
546
566
568
$path parameter,
206
207
$process variable,
138
264
345
364
[<0007>2<0053>-11<0055>-17<0052>-6<00C0>-7<004F>-11<004800030059>-10<0044>-8<0055>-16<004C>-7<0044>-8<0045>-12<004F>-11<0048>-14<000F>]TJ
268
270
279
$providername variable,
518
521
$provider variable,
518
$PSCmdlet variable,
219
$PSHome variable,
142
267
272
$PSModulePath variable,
232
$psSession variable,
353
$PSVersionTable variable,
225
$query variable,
326
$rtn variable,
124
$scriptRoot variable,
469
470
$servers array,
509
510
$session variable,
345
352
$share variable,
365
$ShellID variable,
142
$StackTrace variable,
142
$strClass variable,
384
395
412
413
414
415
$strComputer variable,
320
322
327
$strDatabase variable,
546
566
$strDomain variable,
410
546
566
$strFile variable,
323
$strFname variable,
547
567
$strLevel variable,
$strLname variable,
547
$strLogIdent variable,
556
$strLogPath variable,
569
$strLog variable,
$strManager variable,
410
$strName variable,
142
143
408
412
415
$strOUName variable,
384
413
414
$strOU variable,
410
546
566
567
$strPath variable,
142
$strUserName variable,
142
$strUserPath variable,
142
$strUser variable,
410
415
$this variable,
142
$true variable,
142
$userDomain variable,
$userName variable,
$users variable,
443
$^ variable,
142
$_ variable,
137
142
183
332
$? variable,
142
$VerbosePreference variable,
210
516
519
521
$verbose variable,
516
$v variable,
381
$wmiClass variable,
320
$wmiFilter variable,
320
$wmiNS variable,
322
327
$wmiQuery variable,
322
328
$wshnetwork.EnumPrinterConnections 
command,
$wshnetwork variable,
$xml variable,
563
565
$year parameter,
206
$zip parameter,
190
[0] syntax,
230
& ampersand character,
* asterisk wildcard operator,
293
309
442
' backtick character,
137
480
628
 backward slash,
[<000400030026>-29<0024>-12<002F>-11<002F00030053>-11<0055>-17<0048>-14<00C0>-15<005B>-30<000F>]TJ
470
^ character,
291
__CLASS property,
188
: colon,
-computername parameter,
108
118
124
246
{ } curly brackets, missing,
177
178
__DERIVATION property,
188
__DYNASTY property,
188
= equal character,
162
320
= equal sign,
162
320
! exclamation mark ,
470
-Force parameter,
459
__GENUS property,
188
' grave accent character,
143
319
321
> greater-than symbol,
320
< less-than symbol,
320
__NameSpace class,
287
__NAMESPACE property,
188
`n escape sequence,
328
__PATH property,
188
| pipe character,
324
556
+ plus symbol,
137
143
-property argument,
__PROPERTY_COUNT property,
188
__provider class,
289
? question mark,
291
>> redirect-and-append arrow,
> redirection arrow,
318
__RELPATH property,
188
#requires statement,
234
__SERVER property,
188
! SET keyword,
470
. shortcut dot,
320
' single quote character,
__SUPERCLASS property,
188
%windir% variable,
[<0044>-8<0045>-12<0056>-20<0057>-7<0055>-13<0044>-14<0046>-29<005700030054>-8<0058>-8<0044>-9<004F>-5<004C>-9<00C0>-12<0048>-15<0055>34<000F>]TJ
371
abstract WMI classes,
370
access control lists ACLs,
362
Access Denied error,
287
463
464
Access property,
187
account lockout policy, checking,
430
accounts, user
creating,
395
396
deleting,
411
412
AccountsWithNoRequiredPassword.ps1 script,
132
ACLs access control lists,
362
-action parameter,
488
Active Directory
cmdlets for
creating users using,
435
436
discovering information about forest and 
domain,
428
431
[<00C0>-7<0051>-15<0047>-5<004C>-5<0051>-15<004A0003004C>-4<0051>-3<0049>-11<0052>-11<0055>-16<0050>-11<0044>-8<0057>-7<004C>-10<0052>-11<005100030044>-8<0045>-17<0052>-14<0058>-10<005700030047>-10<0052>-11<0050>-11<0044>-7<004C>-5<005100030046>-4<0052>-11<0051>-5<0057>-7<0055>-17<0052>-11<004F>-4<004F>-11<0048>-15<00550003>]TJ
using,
424
428
committing changes to,
389
[<00C0>-7<0051>-15<0047>-5<004C>-5<0051>-15<004A00030058>-3<0051>-11<0058>-11<0056>-17<0048>-21<004700030058>-11<0056>-17<0048>-15<005500030044>-14<0046>-5<0046>-4<0052>-14<0058>-4<0051>-5<0057>-23<005600030058>-11<0056>-8<004C>-5<0051>-15<004A>-15<000F>]TJ
440
442
installing RSAT for,
420
locked-out users, unlocking,
436
437
managing users using,
432
434
objects in
ADSI providers and,
385
387
binding and,
388
connecting to,
388
error handling, adding,
392
errors,
389
392
LDAP naming convention and,
387
388
organizational units, creating,
383
384
413
414
overview,
383
objects, updating using Active Directory 
module,
443
querying,
590
renaming sites,
431
432
users
address information, exposing,
400
401
computer account,
395
396
creating,
435
436
deleting,
411
412
[<0047>-5<004C>-10<0056>-22<0044>-8<0045>-12<004F>-11<0048>-21<0047>-13<000F000300C0>-6<0051>-15<0047>-4<004C>-5<0051>-15<004A>-15<000F>]TJ
438
439
[<00C0>-7<0051>-15<0047>-5<004C>-5<0051>-15<004A00030044>-8<0051>-15<004700030058>-4<0051>-8<004F>-11<0052>-17<0046>-1<004E>-19<004C>-5<0051>-15<004A00030058>-11<0056>-17<0048>-15<005500030044>-14<0046>-5<0046>-4<0052>-14<0058>-4<0051>-5<0057>-23<0056>-24<000F>]TJ
436
437
general user information,
398
399
groups,
394
395
managing,
432
434
multiple users, creating,
408
409
multivalued users, creating,
414
417
organizational settings, modifying,
409
411
overview,
393
394
passwords, changing,
445
[<0053>-11<0055>-17<0052>-6<00C0>-7<004F>-11<004800030056>-17<0048>-15<0057>-35<0057>-7<004C>-5<0051>-15<004A>-11<0056>-24<000F00030050>-14<0052>-17<0047>-4<004C>-8<0049>-52<005C>-17<004C>-5<0051>-15<004A>-15<000F>]TJ
403
405
properties, modifying,
397
398
telephone settings, modifying,
405
407
[<0058>-4<0051>-11<0058>-11<0056>-17<0048>-21<004700030058>-11<0056>-17<0048>-15<005500030044>-14<0046>-5<0046>-4<0052>-14<0058>-4<0051>-5<0057>-23<0056>-24<000F000300C0>-6<0051>-15<0047>-5<004C>-5<0051>-15<004A>-15<000F>]TJ
440
442
user account control,
396
397
Active Directory Domain Services.
See
AD DS
Active Directory Management Gateway Service 
ADMGS,
419
Active Directory Migration Tool ADMT,
385
Active Directory module
automatic loading of,
421
connecting to server containing,
421
422
default module locations,
421
[<00C0>-7<0051>-15<0047>-5<004C>-5<0051>-15<004A00030029>-3<0036>-5<0030>-14<003200030055>-16<0052>-11<004F>-11<00480003004B>-14<0052>-11<004F>-13<0047>-11<0048>-15<0055>-30<0056>-24<000F>]TJ
422
427
[<004C>-5<0050>-8<0053>-17<0052>-11<0055>-45<0057>-7<004C>-5<0051>-15<004A00030059>-17<004C>-7<00440003003A>-20<004C>-5<0051>-15<0047>-10<0052>-7<005A>-16<0056000300330052>-7<005A>-6<0048>-15<0055>-27<0036>-4<004B>-14<0048>-16<004F>-4<004F00030053>-11<0055>-17<0052>-6<00C0>-7<004F>-11<0048>-14<000F>]TJ
436
installing,
419
420
overview,
419
updating Active Directory objects using,
443
verifying,
421
Active Directory Service Interfaces ADSI,
383
385
387
ActiveX Data Object ADO,
153
Add cmdlet,
583
Add-Computer cmdlet,
571
Add-Content cmdlet,
571
Add Criteria button,
Add-Member cmdlet,
571
[<0024>-12<0027>-8<0042>-38<0027>-16<0052>-17<0046>-20<0011>7<0057>-38<005B>-41<0057000300C0>-7<004F>-11<0048>-14<000F>]TJ
431
462
[<0024>-8<0047>-11<0047>-17<0032>-16<0051>-14<0048000300C0>-7<004F>-10<0057>-8<0048>-15<0055>34<000F>]TJ
202
AddOne function,
490
  
Add-Printer cmdlet,
571
Add-PrinterDriver cmdlet,
571
Add-PrinterPort cmdlet,
571
Add-RegistryValue function,
467
468
469
470
address information,
400
401
Address tab,  Active Directory Users and 
Computers,
401
AD DS Active Directory Domain Services
AD DS Tool,
385
deploying
domain controller, adding  to domain,
453
455
domain controller, adding to new forest,
458
459
domain controller prerequisites, 
installing,
457
458
features, adding,
448
forests, creating,
452
453
infrastructure prerequisites,
447
IP address assignment,
448
read-only domain controller, adding,
455
457
renaming computer,
448
restarting computer,
449
role-based prerequisites,
448
script execution policy, setting,
447
[<0059>-4<0048>-15<0055>-16<004C>-9<00C0>-10<0046>-19<0044>-7<0057>-7<004C>-10<0052>-11<005100030056>-20<0057>-8<0048>-15<0053>-12<0056>-24<000F>]TJ
449
450
tools installation,
448
ADDSDeployment module,
452
454
456
459
AddTwo function,
490
Add-Type cmdlet,
571
Add-WindowsFeature cmdlet,
386
420
448
455
458
AD LDS Tool,
385
ADMGS Active Directory Management Gateway 
Service,
419
admin environment variable,
Administrator Audit Logging feature,
557
administrator variable,
100
ADMT Active Directory Migration Tool,
385
ADO ActiveX Data Object,
153
ADSI Active Directory Service Interfaces,
383
385
387
ADsPath,
384
[<0024>-1<0027>5<0036>-31<0042>-7<00380029>54<0042>-53<0024>19<0026>24<0026>25<0032>-2<00380031>3<0037>2<0027>-3<002C>-1<0036>-1<0024>-1<0025002F0028>11<0003>11<00C10044>-4<004A>-4<000F>]TJ
397
[<0024>-1<0027>5<0036>-31<0042>-7<00380029>54<0042>-27<0027>-7<0032>-2<0031>3<0037>34<0042>-27<0028>-23<003B0033>12<002C>3<00350028>-23<0042>-27<0033>51<0024>-14<0036>2<0036>-7<003A>-1<0027>11<0003>11<00C10044>-4<004A>-4<000F>]TJ
397
[<0024>-1<0027>5<0036>-31<0042>-7<00380029>54<0042>-27<0027>-7<0032>-2<0031>3<0037>34<0042>-27<00350028>9<0034>-2<0038>-1<002C>3<00350028>-23<0042>-27<0033>12<00350028>-24<0024>24<0038>-1<0037>2<002B>11<0003>11<00C10044>-4<004A>-4<000F>]TJ
397
ADS_UF_ENCRYPTED_TEXT_PASSWORD_ALLOWED 
[<00C1>5<0044>1<004A>1<000F>]TJ
397
[<0024>-1<0027>5<0036>-31<0042>-7<00380029>54<0042>-27<002B>-3<0032>-2<0030>2<0028>9<0027>-3<002C>3<0035>-40<0042>-27<00350028>9<0034>-2<0038>-1<002C>3<00350028>9<0027>11<0003>11<00C10044>-4<004A>-4<000F>]TJ
397
[<0024>-4<0027>2<0036>-34<0042>-10<0038>-3<0029>51<0042>-29<002C00310037>-1<0028>6<0035>-3<0027>-10<0032>-5<0030>-4<0024>-4<002C0031>-29<0042>31<0037>-1<0035>2<00380036>-7<0037>31<0042>-56<0024>16<0026>21<0026>22<0032>-5<0038>-3<00310037>8<0003>8<00C1>-3<0044>-7<004A>-7<000F>]TJ
397
[<0024>-12<0027>-6<0036>-42<0042>-18<0038>-11<0029>43<0042>-38<002F>8<0032>-18<0026>6<002E>22<0032>-13<0038>-12<0037000300C1>-11<0044>-15<004A>-15<000F>]TJ
397
[<0024>-12<0027>-6<0036>-42<0042>-18<0038>-11<0029>43<0042>-38<0030>-9<0031>-11<0036>-42<0042>-38<002F>8<0032>-18<002A>-13<0032>-13<0031>-37<0042>-64<0024>8<0026>13<0026>14<0032>-13<0038>-11<0031>-8<0037000300C1>-11<0044>-15<004A>-15<000F>]TJ
397
[<0024>-1<0027>5<0036>-31<0042>-7<00380029>54<0042>-27<0031>-2<0032>-2<00350030>-1<0024>-1<002F>-35<0042>-53<0024>19<0026>24<0026>25<0032>-2<00380031>3<0037>11<0003>11<00C10044>-4<004A>-4<000F>]TJ
397
[<0024>-12<0027>-6<0036>-42<0042>-18<0038>-11<0029>43<0042>-38<0031>-13<0032>10<0037>23<0042>-38<0027>-13<0028>-2<002F>-11<0028>-2<002A>-17<0024>49<0037>-9<0028>-2<0027000300C1>-11<0044>-15<004A>-15<000F>]TJ
397
[<00240027>6<0036>-30<0042>-6<0038>1<0029>55<0042>-26<0033>52<0024>-13<0036>3<0036>-6<003A0027>4<0042>-4<0026>-17<00240031>4<0037>35<0042>-4<0026>18<002B00240031>-1<002A>-1<0028>12<0003>12<00C1>1<0044>-3<004A>-3<000F>]TJ
397
[<0024>-12<0027>-6<0036>-42<0042>-18<0038>-11<0029>43<0042>-38<0033>40<0024>-25<0036>-9<0036>-18<003A>-12<0027>-8<0042>-38<0031>-13<0032>10<0037>-9<0035>-11<0028>-2<0034>-13<0027000300C1>-11<0044>-15<004A>-15<000F>]TJ
396
397
[<0024>-1<0027>5<0036>-31<0042>-7<00380029>54<0042>-27<0033>51<0024>-14<0036>2<0036>-7<003A>8<0032>-2<00350027>3<0042>-27<0028>-23<003B0033>12<002C>3<00350028>9<0027>11<0003>11<00C10044>-4<004A>-4<000F>]TJ
397
[<0024>-12<0027>-6<0036>-42<0042>-18<0038>-11<0029>43<0042>-49<0036>-10<0026>6<0035>-11<002C>-8<0033>-17<0037000300C1>-11<0044>-15<004A>-15<000F>]TJ
397
[<0024>-12<0027>-6<0036>-42<0042>-18<0038>-11<0029>43<0042>-49<0036>-5<0028>-2<0035>-6<0039>-13<0028>-2<0035>-51<0042>23<0037>-9<0035>-6<0038>-7<0036>-15<0037>23<0042>-64<0024>8<0026>13<0026>14<0032>-13<0038>-11<0031>-8<0037000300C1>-11<0044>-15<004A>-15<000F>]TJ
397
[<0024>-1<0027>5<0036>-31<0042>-7<00380029>54<0042>-38<0036>6<0030>-1<0024>-1<00350037>29<0026>-18<0024>-1<00350027>3<0042>-27<00350028>9<0034>-2<0038>-1<002C>3<00350028>9<0027>11<0003>11<00C10044>-4<004A>-4<000F>]TJ
397
[<0024>-1<0027>5<0036>-31<0042>-7<00380029>54<0042>34<0037>2<0028>9<0030>2<0033>82<0042>-27<0027>-2<00380033>12<002F002C>-2<0026>-18<0024>60<0037>2<0028>-23<0042>-53<0024>19<0026>24<0026>25<0032>-2<00380031>3<0037>11<0003>11<00C10044>-4<004A>-4<000F>]TJ
397
[<0024>-12<0027>-6<0036>-42<0042>-18<0038>-11<0029>43<0042>23<0037>-9<0035>-6<0038>-7<0036>-15<0037>-9<0028>-2<0027>-8<0042>-38<0029>-10<0032>-13<0035>-51<0042>-38<0027>-13<0028>-2<002F>-11<0028>-2<002A>-17<0024>49<0037>-9<002C>-14<0032>-13<0031000300C1>-11<0044>-15<004A>-15<000F>]TJ
397
ADS_UF_TRUSTED_TO_AUTHENTICATE_FOR_
[<0027>-13<0028>-2<002F>-11<0028>-2<002A>-17<0024>49<0037>-9<002C>-14<0032>-13<0031000300C1>-11<0044>-15<004A>-15<000F>]TJ
397
[<0024>-12<0027>-6<0036>-42<0042>-18<0038>-11<0029>43<0042>-18<0038>-8<0036>-5<0028>-34<0042>-38<0027>-13<0028>-12<0036>-42<0042>-38<002E>-17<0028>-29<003C>31<0042>-16<0032>-13<0031>-8<002F>56<003C000300C1>-11<0044>-15<004A>-15<000F>]TJ
397
[<0024>-1<0027>5<0036>-31<0042>-7<00380029>54<0042>18<003A>8<0032>-2<0035002E>-17<0036>-4<0037>59<0024>60<0037>2<002C>-3<0032>-2<0031>-26<0042>34<0037>2<0035>5<0038>3<0036>-4<0037>34<0042>-53<0024>19<0026>24<0026>25<0032>-2<00380031>3<0037>11<0003>11<00C10044>-4<004A>-4<000F>]TJ
396
397
-alias argument,
567
aliases,
489
626
627
creating for cmdlets,
[<00C0>-7<0051>-15<0047>-5<004C>-5<0051>-15<004A00030044>-8<004F>-4<004F00030049>-12<0052>-11<005500030052>-11<0045>-11<004D>-10<0048>-21<0046>-29<0057>-24<000F>]TJ
[<00C0>-7<0051>-15<0047>-5<004C>-5<0051>-15<004A00030049>-11<0052>-11<005500030046>-1<0050>-15<0047>-3<004F>-11<0048>-15<0057>-23<0056>-24<000F>]TJ
150
151
provider for,
setting,
246
AllowMaximum property,
315
AllowPasswordReplicationAccountName 
parameter,
456
AllSigned execution policy,
134
[<0024>-15<004F>-4<004F00030038>-8<0056>-17<0048>-15<0055>-30<0056>-24<000F00030024>-15<004F>-4<004F0003002B>-13<0052>-11<0056>-20<0057>-23<005600030053>-11<0055>-17<0052>-6<00C0>-7<004F>-11<0048>-14<000F>]TJ
275
276
[<0024>-15<004F>-4<004F>-8<0038>-8<0056>-17<0048>-15<0055>-30<0056>-13<0026>1<0058>-4<0055>-16<0055>-17<0048>-15<0051>-5<0057>-7<002B>-12<0052>-11<0056>-20<005700030053>-11<0055>-17<0052>-6<00C0>-7<004F>-11<0048>-14<000F>]TJ
269
alphabetical sorting,
ampersand & character,
-a parameter,
212
AppLocker module,
580
Appx module,
580
ArgumentList block,
263
arguments, for cmdlets,
[array] alias,
146
190
Array function,
151
array objects,
arrays
using -contains operator to examine contents 
of,
507
509
creating,
589
indexing,
377
ASCII values, casting to,
152
153
-asjob parameter,
350
353
-asplaintext argument,
545
566
assignment operators,
163
association classes, WMI,
370
373
378
asterisk * wildcard operator,
293
309
442
ast-write-time property,
Attributes property,
audit logging Exchange Server 2010,
557
561
-autosize argument,
313
327
331
-AutoSize parameter,
Availability property,
187
Backspace key,
backtick ` character,
137
480
628
backup domain controllers BDCs,
385
backward slash ,
basename property,
230
BDCs backup domain controllers,
385
Begin block,
199
205
BestPractices module,
580
binary SD format,
362
binding,
388
BIOS information,
115
308
311
371
bios pattern,
291
BitsTransfer module,
236
580
BlockSize property,
187
bogus module,
234
[bool] alias,
146
190
boundary-checking function,
526
527
BranchCache module,
breakpoints
deleting,
494
enabling and disabling,
494
ID number,
494
listing,
492
493
purpose of,
483
responding to,
490
492
script location and,
485
setting
on commands,
489
490
on line number,
483
484
on variables,
485
489
overview,
483
vs. stepping functionality,
483
storage location,
492
Break statement,
160
167
business logic
encapsulating with functions,
194
196
program logic vs.,
194
BusinessLogicDemo.ps1 script,
194
Bypass execution policy,
134
bypass option,
134
136
238
[byte] alias,
146
190
canonical aliases,
626
627
Caption property,
187
315
Case Else expression,
165
casting,
152
153
Catch block,
529
See also
Try05Catch05Finally blocks
CategoryInfo property,
389
C attribute,
388
-ccontains operator,
507
cd alias,
cd .. command,
[<0026>-5<0048>-15<0055>-45<0057>-7<004C>-9<00C0>-10<0046>-19<0044>-7<0057>-8<004800030047>-4<0055>-16<004C>-17<0059>-4<0048>-14<000F>]TJ
102
[<0046>2<0048>-7<0055>-37<0057>1<004C>-1<00C0>-2<0046>-11<0044>1<00570048>-9<0056>]TJ
deleting,
[<00C0>-7<0051>-15<0047>-5<004C>-5<0051>-15<004A00030048>-11<005B>-13<0053>-11<004C>-5<0055>-17<0048>-21<0047>-14<000F>]TJ
listing,
provider for,
searching,
viewing properties of,
[<0026>-5<0048>-15<0055>-45<0057>-7<004C>-9<00C0>-10<0046>-19<0044>-7<0057>-8<0048>-17<005600030030>-7<004C>-8<0046>-1<0055>-17<0052>-11<0056>-17<0052>-4<0049>-45<005700030030>-10<0044>-8<0051>-11<0044>-15<004A>-11<0048>-15<0050>-14<0048>-15<0051>-5<005700030026>-3<0052>-11<0051>-14<0056>-17<0052>-11<004F>-11<00480003>]TJ
MMC,
[<0026>-5<0048>-15<0055>-45<0057>-7<0050>-15<004A>-4<0055>38<0011>-13<0050>-14<0056>-17<0046000300C0>-7<004F>-11<0048>-14<000F>]TJ
[char] alias,
146
190
char data type,
153
chdir alias,
Check-AllowedValue function,
526
Checkpoint cmdlet,
584
Checkpoint-Computer cmdlet,
571
Chkdsk method,
187
ChoiceDescription class,
505
choices, limiting.
See
limiting choices
cimclassname property,
380
381
[<0046>-1<004C>-5<0050>-14<0046>-1<004F>-9<0044>-15<0056>-18<0056>-17<0054>-8<0058>-8<0044>-9<004F>-5<004C>-9<00C0>-12<0048>-15<0055>-30<005600030053>-11<0055>-17<0052>-11<0053>-17<0048>-15<0055>-45<0057>-42<005C>29<000F>]TJ
380
CIM cmdlets
[<00C0>-7<004F>-10<0057>-7<0048>-15<0055>-16<004C>-5<0051>-15<004A00030046>-1<004F>-9<0044>-15<0056>-18<0056>-17<0048>-17<005600030045>-7<005C00030054>-8<0058>-8<0044>-9<004F>-5<004C>-9<00C0>-12<0048>-15<0055>34<000F>]TJ
369
371
[<00C0>-7<0051>-15<0047>-5<004C>-5<0051>-15<004A0003003A>-12<0030>-9<002C00030046>-1<004F>-9<0044>-15<0056>-18<005600030050>-14<0048>-15<0057>-7<004B>-14<0052>-17<0047>-11<0056>-24<000F>]TJ
368
369
module for,
580
overview,
367
retrieving associated WMI classes,
381
382
using -classname parameter,
367
368
video classes,
380
381
CIM Common Information Model,
108
112
343
344
See also
CIM cmdlets
  
CIM_LogicalDevice class,
362
CIM_UnitaryComputerSystem class,
290
CIMWin32WMI provider,
516
-class argument,
321
Class box,
253
classes
in WMI,
289
293
querying WMI,
293
296
[<0055>-17<0048>-15<0057>-7<0055>-16<004C>-10<0048>-12<0059>-17<004C>-5<0051>-15<004A00030047>-8<0044>-8<0057>-23<004400030049>-17<0055>-17<0052>-11<005000030056>-8<0053>-17<0048>-21<0046>-1<004C>-9<00C0>-10<00460003004C>-5<0051>-13<0056>-20<0057>-23<0044>-8<0051>-14<0046>-6<0048>-17<005600030052>-5<0049>7<000F>]TJ
319
320
retrieving every property from every instance 
of,
314
[<0055>-17<0048>-15<0057>-7<0055>-16<004C>-10<0048>-12<0059>-17<004C>-5<0051>-15<004A00030056>-8<0053>-17<0048>-21<0046>-1<004C>-9<00C0>-10<004600030053>-11<0055>-17<0052>-11<0053>-17<0048>-15<0055>-45<0057>-7<004C>-10<0048>-17<005600030049>-17<0055>-17<0052>-11<0050>-19<000F>]TJ
316
-classname parameter,
348
367
368
368
372
-class parameter,
264
523
__CLASS property,
517
Clear cmdlet,
583
Clear-Content cmdlet,
571
Clear-EventLog cmdlet,
571
Clear-Host cmdlet,
478
Clear-Item cmdlet,
571
Clear-ItemProperty cmdlet,
571
clear method,
392
Clear-Variable cmdlet,
571
ClientLoadableCLSID property,
517
cls command,
CLSID property,
517
519
CMD command shell,
[cmdletbinding] attribute
[<0044>-15<0047>-11<0047>-5<004C>-5<0051>-15<004A00030010>-22<0046>-4<0052>-11<0051>-5<00C0>-7<0055>-16<005000030056>-10<0058>-4<0053>-11<0053>-17<0052>-11<0055>-45<0057>-24<000F>]TJ
215
216
adding -whatif support to function,
214
215
enabling for functions,
210
for functions, checking parameters 
automatically,
211
214
overview,
209
209
210
specifying default parameter set,
216
217
-verbose switch for,
210
211
[CmdletBinding] attribute,
464
465
CmdletInfo object,
540
cmdlets.
See also
CIM cmdlets
Active Directory
creating users using,
435
436
[<00C0>-7<0051>-15<0047>-5<004C>-5<0051>-15<004A0003004C>-4<0051>-3<0049>-11<0052>-11<0055>-16<0050>-11<0044>-8<0057>-7<004C>-10<0052>-11<005100030044>-8<0045>-17<0052>-14<0058>-10<005700030047>-10<0052>-11<0050>-11<0044>-7<004C>-5<005100030046>-4<0052>-11<0051>-5<0057>-7<0055>-17<0052>-11<004F>-4<004F>-11<0048>-15<00550003>]TJ
using,
424
428
[<00C0>-7<0051>-15<0047>-5<004C>-5<0051>-15<004A0003004F>-11<0052>-18<0046>-1<004E>7<0048>-21<004700030052>-14<0058>-9<005700030058>-11<0056>-17<0048>-15<0055>-30<005600030058>-11<0056>-8<004C>-5<0051>-15<004A>-15<000F>]TJ
436
[<00C0>-7<0051>-15<0047>-5<004C>-5<0051>-15<004A00030058>-3<0051>-11<0058>-11<0056>-17<0048>-21<004700030058>-11<0056>-17<0048>-15<005500030044>-14<0046>-5<0046>-4<0052>-14<0058>-4<0051>-5<0057>-23<005600030058>-11<0056>-8<004C>-5<0051>-15<004A>-15<000F>]TJ
440
442
managing users using,
432
434
[<0047>3<004800C0>7<00510048>-7<0047>1<000F>]TJ
descriptions of all,
571
578
displaying graphical command picker of,
execution of
[<0046>12<0052>5<0051>11<00C0>9<00550050>9<004C>11<0051>1<004A>1<000F>]TJ
controlling,
[<00C0>-7<0051>-15<0047>-5<004C>-5<0051>-15<004A00030044>-8<004F>-5<004C>-7<0044>-15<0056>-17<0048>-17<005600030049>-11<0052>-11<0055>34<000F>]TJ
150
151
for working with event logs,
587
most important,
587
names of,
626
627
naming,
583
586
verb distribution,
verb grouping for,
number of on installation,
587
options for,
overview,
searching for using wildcards,
suspending execution of,
using Get-Command cmdlet for,
verbs for,
174
with Exchange Server 2010,
539
540
-cmdlets parameter,
559
cn alias,
124
CN attribute,
388
cn parameter,
465
code formatting.
See
formatting code
code, reusing,
178
179
colon  : , using after PS drive name,
column heading buttons,
-columns argument,
command CMD shell,
commandlets.
See
cmdlets
command-line input,
501
command-line parameter,
502
503
command-line utilities
exercises using,
[<004C>-5<0053>-17<0046>-4<0052>-11<0051>-5<00C0>-12<004A00030046>-4<0052>-11<0050>-8<0050>-11<0044>-8<0051>-15<0047>-14<000F>]TJ
multiple, running,
overview,
-command parameter,
489
commands
most powerful,
588
setting breakpoints on,
489
490
whether completed successfully,
592
Commands add-on
overview,
252
256
turning off,
256
using with script pane,
255
command window, prompt for,
comments,
179
627
628
Common Information Model.
See
CIM
-comobject parameter,
Compare cmdlet,
584
Compare-Object cmdlet,
571
comparison operators,
162
163
compatibility aliases,
626
Complete cmdlet,
584
Complete-Transaction cmdlet,
571
Compressed property,
187
computer account,
395
396
computer connectivity, identifying,
506
-computername parameter,
182
293
344
Concurrency property,
517
[<0026>8<00520051>6<00C0>-1<004A>5<0030>1<0044>3<00510044>-4<004A0048>-4<0055>-2<0028>9<0055>-5<0055>-6<00520055>-22<0026>8<0052>-6<00470048>11<0003>11<00530055>-6<00520053>-6<0048>-4<0055>-34<0057>-31<005C>40<000F>]TJ
187
[<0026>8<00520051>6<00C0>-1<004A>5<0030>1<0044>3<00510044>-4<004A0048>-4<0055>-6<0038>3<0056>-6<0048>-4<0055>-22<0026>8<00520051>6<00C0>-1<004A>11<0003>11<00530055>-6<00520053>-6<0048>-4<0055>-34<0057>-31<005C>40<000F>]TJ
187
[<0026>8<00520051>6<00C0>-1<004A>3<0058>7<0055>-2<0044>3<0057>4<004C>1<005200510031>1<0044>3<0050>4<004C>6<0051>-4<004A>-6<0026>8<00520051>6<0057>3<0048005B>-30<0057>11<0003>11<00530055>-6<00520053>-6<0048>-4<0055>-34<0057>-31<005C>40<000F>]TJ
431
[<0026>2<0052>-6<005100C0>-7<004A>-3<0058>1<0055>-12<0048>52<0037>55<0055>-8<0044>-3<0051>-8<0056>-3<0053>-12<0052>-6<0055>-40<0057>-2<002F>-7<0052>-13<004A>-6<004A004C0051>-10<004A>-8<0011>-8<0053>-7<0056>8<0014>5<0003>5<0056>-12<0046>4<0055>-11<004C0053>-5<0057>-19<000F>]TJ
557
[<0010>-35<0026>-3<0052>-11<0051>-5<00C0>-7<0055>-16<0050001D>2<0007>18<0049>-14<0044>-9<004F>-12<0056>-17<004800030046>-4<0052>-11<0050>-8<0050>-11<0044>-8<0051>-15<0047>-13<000F>]TJ
434
[<0010>-22<0046>-4<0052>-11<0051>-5<00C0>-7<0055>-16<005000030044>-8<0055>-17<004A>-8<0058>-4<0050>-14<0048>-15<0051>-5<0057>-24<000F>]TJ
[<0026>-3<0052>-11<0051>-5<00C0>-7<0055>-16<0050000300460050>-15<0047>-4<004F>-11<0048>-15<0057>-24<000F>]TJ
585
[<0046>-4<0052>-11<0051>-5<00C0>-7<0055>-16<0050>-7<004C>-5<0050>-8<0053>-14<0044>-14<0046>-29<005700030053>-11<0055>-17<0052>-11<0053>-17<0048>-15<0055>-45<0057>-42<005C>29<000F>]TJ
216
[<0026>4<0052>-4<0051>2<00C00055>-9<0050004C>2<0051>-8<004A>1<0028>-25<005B>4<0048>-14<0046>1<0058>-2<0057004C>-3<0052>-4<0051>-11<0032>-17<0049>-25<0026>10<0050>-8<0047>3<004F>-4<0048>-8<0057>-16<0056>-17<0011>14<0057>-31<005B>-34<0057>7<0003>7<00C0004F>-4<0048>-7<000F>]TJ
[<0010>-22<0046>-4<0052>-11<0051>-5<00C0>-7<0055>-16<005000030053>-14<0044>-8<0055>-13<0044>-8<0050>-14<0048>-15<0057>-8<0048>-15<0055>34<000F>]TJ
438
629
[<0010>-22<0046>-4<0052>-11<0051>-5<00C0>-7<0055>-16<005000030056>-23<005A>-13<004C>-10<0057>-6<0046>-1<004B>-19<000F>]TJ
215
216
437
Connect cmdlet,
584
connectivity.
See
computer connectivity
Connect-WSMan cmdlet,
571
console, launch options for,
[<0026>8<00520051>-2<0056>-6<0052004F0048>-6<0033>9<0055>-6<0052>5<00C0>4<004F0048>11<0003>11<0059>1<0044>3<0055>-5<004C>4<0044>3<0045>-1<004F0048>-3<000F>]TJ
280
console window
copying in,
quotation marks in,
133
constants,
587
631
compared with variables,
146
creating,
170
creating in scripts,
146
using,
146
147
-contains operator,
504
594
using to examine contents of array,
507
509
using to test for properties,
509
511
Continue command,
491
Continue statement,
191
Control Properties dialog box,
285
ConversionFunctions.ps1 script,
179
ConversionModuleV6 module,
237
Convert cmdlet,
585
ConvertFrom cmdlet,
584
ConvertFrom-Csv cmdlet,
571
ConvertFromDateTime method,
188
ConvertFrom-Json cmdlet,
571
ConvertFrom-StringData cmdlet,
571
Convert-Path cmdlet,
571
ConvertTo cmdlet,
584
ConvertTo-Csv cmdlet,
572
ConvertToDateTime method,
188
ConvertTo-Html cmdlet,
572
ConvertTo-Json cmdlet,
572
ConvertToMeters.ps1 script,
178
ConvertTo-SecureString cmdlet,
435
545
566
ConvertTo-Xml cmdlet,
572
Copy button, Commands add-on,
255
Copy cmdlet,
584
copying from PowerShell window,
Copy-Item cmdlet,
230
279
572
Copy-ItemProperty cmdlet,
572
Copy-Module function,
229
231
Copy-Modules.ps1 script,
229
231
237
241
244
counting backward,
595
-count parameter,
506
count property,
104
125
212
389
CountryCode attribute,
401
country codes,
401
402
CPU central processing unit, listing processes using 
CPU time criteria,
-CreateDnsDelegation parameter,
459
CreateShortCutToPowerShell.vbs script,
141
[<0026>14<0055>-6<0048>-3<0044>3<0057>4<004C>6<0051>-4<004A>5<0029>3<0052004F>-2<00470048>-4<0055>-19<0056>-10<0024>-4<0051>-4<0047>5<0029>4<004C>6<004F0048>-6<0056>-13<0011>18<0057>-27<005B>-30<0057>11<0003>11<00C0>4<004F0048>-3<000F>]TJ
CreationClassName property,
187
CreationTime property,
CreationTimeUtc property,
credentials
-credential parameter,
109
110
591
for remote connection,
339
342
CRSS process,
216
Ctrl+J shortcut,
257
Ctrl+N shortcut,
254
258
Ctrl+V shortcut,
255
258
curly brackets { }, missing,
177
178
[<0026>1<0058>-4<0055>-16<0055>-17<0048>-15<0051>-5<00570003002B>-12<0052>-11<0056>-20<005700030053>-11<0055>-17<0052>-6<00C0>-7<004F>-11<0048>-14<000F>]TJ
268
current property,
202
CurrentUserCurrentHost property,
269
270
[<0026>1<0058>-4<0055>-16<0055>-17<0048>-15<0051>-5<005700030038>-8<0056>-17<0048>-15<005500030053>-11<0055>-17<0052>-6<00C0>-7<004F>-11<0048>-14<000F>]TJ
268
CurrentUser scope,
134
-DatabasePath parameter,
459
data types, incorrect,
523
525
date, obtaining current,
DateTime object,
205
[<003E>-6<0027>-13<0025>-11<002A>-9<004000030053>-11<0055>-17<0048>-14<00C0>-15<005B>-30<000F>]TJ
495
DC attribute,
388
  
[<0027>-13<0027>-13<002F0003000B>22<0047>-16<005C>-17<0051>-11<0044>-8<0050>-7<004C>-8<00460010>-10<004F>-5<004C>-5<0051>-8<004E0003004F>-5<004C>-5<0045>-11<0055>-13<0044>-8<0055>-51<005C>2<000C000300C0>-7<004F>-11<0048>-14<000F>]TJ
Debug cmdlet,
585
debugging.
See also
errors
cmdlets for, list of,
483
functions,
495
496
scripts, using breakpoints
deleting breakpoints,
494
enabling and disabling breakpoints,
494
exercise,
496
498
listing breakpoints,
492
493
responding to breakpoints,
490
492
setting on commands,
489
490
setting on line number,
483
484
setting on variables,
485
489
using Set-PSDebug cmdlet
overview,
467
script-level tracing,
467
471
stepping through script,
471
479
strict mode, enabling
overview,
479
using Set-PSDebug -Strict,
479
480
using Set-StrictMode cmdlet,
481
482
-debug parameter,
465
Debug-Process cmdlet,
572
[decimal] alias,
146
190
[<0027>-5<0048>-1<0049>-3<00440058>8<004F>1<0057>4<0027>-1<004C>1<0056>3<0053>-1<004F>2<0044>8<005C>-3<0033>9<0055>-6<00520053>-6<0048>-4<0055>-34<0057>-31<005C>-17<0036>-4<0048>-4<0057>11<0003>11<0046>7<00520051>6<00C0>-1<004A>3<0058>7<0055>-2<0044>3<0057>4<004C>1<00520051>-8<000F>]TJ
294
DEFAULT IMPERSONATION LEVEL key,
307
DefaultMachineName property,
517
DefaultParameterSetName property,
216
217
default property,
default value, setting for registry keys,
[<0047>-4<0048>-7<00C00051004C>-3<0057004C>-3<0052>-4<0051>7<0003>7<0044>-1<0057>-28<00570055>-9<004C>2<0045>-7<0058>-2<00570048>-7<000F>]TJ
[<0010>-22<0047>-11<0048>-14<00C0>-7<0051>-7<004C>-10<0057>-7<004C>-10<0052>-11<005100030053>-13<0044>-8<0055>-13<0044>-8<0050>-14<0048>-15<0057>-7<0048>-15<0055>34<000F>]TJ
150
Delete method,
412
DeleteUser.ps1 script,
412
deleting
breakpoints,
494
users,
411
412
DemoAddOneFilter.ps1 script,
203
DemoAddOneR2Function.ps1 script,
203
DemoBreakFor.ps1 script,
160
DemoDoUntil.vbs script,
154
DemoDoWhile.ps1 script,
151
DemoDoWhile.vbs script,
151
DemoExitFor.ps1 script,
160
DemoExitFor.vbs script,
160
DemoForEachNext.vbs script,
158
DemoForEach.ps1 scrip,
158
DemoForLoop.ps1 script,
156
157
DemoForLoop.vbs script,
156
DemoForWithoutInitOrRepeat.ps1 script,
156
157
demoIfElseIfElse.ps1 script,
164
DemoIfElse.vbs script,
163
DemoIf.ps1 script,
DemoIf.vbs script,
162
DemoQuitFor.vbs script,
DemoSelectCase.vbs script,
164
166
DemoSwitchArrayBreak.ps1 script,
167
DemoSwitchArray.ps1 scrip,
167
DemoSwitchMultiMatch.ps1 script,
166
DemoTrapSystemException.ps1 script,
191
DemoWhileLessThan.ps1 script,
148
149
dependencies, checking for modules,
234
236
deploying
AD DS Active Directory Domain Services
domain controller, adding to domain,
453
455
domain controller, adding to new forest,
458
459
domain controller prerequisites, 
installing,
457
458
features, adding,
448
forest, creating,
452
453
infrastructure prerequisites,
447
IP address assignment,
448
read-only domain controller, adding,
455
457
renaming computer,
448
restarting computer,
449
role-based prerequisites,
448
script execution policy, setting,
447
[<0059>-4<0048>-15<0055>-16<004C>-9<00C0>-10<0046>-19<0044>-7<0057>-7<004C>-10<0052>-11<005100030056>-20<0057>-8<0048>-15<0053>-12<0056>-24<000F>]TJ
449
450
PowerShell to enterprise systems,
[<0047>-3<0048>-7<0053>-3<0055>-9<0048>-13<0046>-11<004400570048>-13<0047>8<0003>8<005400580044>-1<004F>3<004C>-1<00C0>-4<0048>-7<0055>42<000F>]TJ
370
__DERIVATION property,
517
-Descending parameter,
-description parameter,
187
260
315
627
design considerations, analyzing before 
development,
-detailed argument,
DeviceID property,
187
dir alias,
DirectAccessClientComponents module,
580
directories
creating,
listing contents of,
listing contents with Get-ChildItem cmdlet,
formatting with Format-List cmdlet,
formatting with Format-Table cmdlet,
formatting with Format-Wide cmdlet,
properties for,
DirectoryInfo object,
DirectoryListWithArguments.ps1 script,
131
132
DirectoryName property,
Directory property,
Directory Restore Password prompt,
456
Disable cmdlet,
583
Disable-ComputerRestore cmdlet,
572
Disable-PSBreakpoint cmdlet,
483
494
572
Disable-WSManCredSSP cmdlet,
572
Disconnect cmdlet,
584
Disconnect-WSMan cmdlet,
572
-Discover switch,
424
[<0027>-12<004C>-10<0056>-8<004E>-19<004C>-5<0051>-3<0049>-11<0052>-4<0011>7<0057>-38<005B>-41<0057000300C0>-7<004F>-11<0048>-14<000F>]TJ
318
disktype property,
146
Dism module,
580
Dismount cmdlet,
585
DisplayCapitalLetters.ps1 script,
153
displaying commands, using Show-Command 
cmdlet,
DisplayName property,
302
303
432
divide-by-zero error,
492
DivideNum function,
490
491
492
492
DnsClient module,
580
DNS Manager tool,
453
[<0027>-13<0031>-11<003600030056>-17<0048>-15<0055>-51<0059>-4<0048>-15<0055>34<000F00030044>-15<0047>-11<0047>-5<004C>-5<0051>-15<004A00030057>-5<00520003002C>-9<003300030046>-4<0052>-11<0051>-5<00C0>-12<004A>-8<0058>-4<0055>-13<0044>-8<0057>-7<004C>-10<0052>-11<0051>-19<000F>]TJ
453
DNSServerSearchOrder property,
196
Documents and Settings%username% folder,
141
Do keyword,
154
dollar sign $,
141
189
domain controller
adding to domain,
453
455
adding to new forest,
458
459
checking,
430
prerequisites, installing,
457
458
-DomainMode parameter,
459
-DomainName parameter,
459
DomainNamingMaster role,
425
-DomainNetbiosName parameter,
459
domain password policy, checking,
429
Do statement,
152
154
dot-sourced functions, using,
182
184
DotSourceScripts.ps1 script,
198
dot-sourcing scripts,
178
179
181
180
181
dotted notation,
357
[double] alias,
146
190
Do...Until statement,
155
DoWhileAlwaysRuns.ps1 script,
155
Do...While statement
always runs once,
155
casting and,
152
153
in VBScript compared with in PowerShell,
151
range operator,
152
drives
creating for modules,
232
233
creating for registry,
for registry,
using WMI with,
312
314
DriveType property,
187
312
314
[<0047>-16<005C>-17<0051>-11<0044>-8<0050>-7<004C>-8<00460010>-10<004F>-5<004C>-5<0051>-8<004E0003004F>-5<004C>-5<0045>-11<0055>-13<0044>-8<0055>-51<005C0003000B>-12<0027>-13<002F>-11<002F>-4<000C000300C0>-7<004F>-11<0048>-14<000F>]TJ
[<0047>-16<005C>-17<0051>-11<0044>-8<0050>-7<004C>-8<004600030054>-8<0058>-8<0044>-9<004F>-5<004C>-9<00C0>-12<0048>-15<0055>34<000F>]TJ
370
371
dynamic WMI classes,
370
__DYNASTY property,
517
ea alias,
136
-ea parameter,
echo command,
-edbFilePath parameter,
551
Else clause,
163
169
236
Else If clause,
163
empty parentheses,
105
Enable cmdlet,
583
Enable-ComputerRestore cmdlet,
572
Enabled property,
517
Enable-Mailbox cmdlet,
544
559
Enable-PSBreakpoint cmdlet,
483
494
572
Enable-PSRemoting function,
112
Enable-WSManCredSSP cmdlet,
572
-enddate parameter,
559
EndlessDoUntil.ps1 script,
155
End parameter,
201
Enter cmdlet,
585
Enter in Windows PowerShell option,
enterprise systems, deploying PowerShell to,
Enter-PSSession cmdlet,
115
116
127
428
EnumNetworkDrives method,
EnumPrinterConnections method,
Environment PS drive,
environment variables
creating temporary,
deleting,
listing,
provider for,
renaming,
viewing using WMI,
330
335
-eq operator,
162
-equals argument,
300
304
equal sign =,
162
320
  
error[0] variable,
389
-erroraction parameter,
136
-ErrorAction parameter,
ErrorCleared property,
187
ErrorDescription property,
187
error handling
incorrect data types,
523
525
limiting choices
using -contains operator to examine contents 
of array,
507
509
using -contains operator to test for 
properties,
509
511
overview,
504
using PromptForChoice,
504
505
534
535
using Test-Connection to identify computer 
connectivity,
506
missing parameters
assigning value in param statement,
502
503
detecting missing value and assigning in 
script,
502
making parameter mandatory,
503
overview,
501
missing rights
attempt and fail,
512
checking for rights and exiting gracefully,
513
overview,
512
missing WMI providers,
513
523
out-of-bounds errors
overview,
526
placing limits on parameter,
528
using boundary-checking function,
526
527
using Try05Catch05Finally
Catch block,
529
catching multiple errors,
532
533
exercise,
536
537
Finally block,
529
530
error messages
importance of,
136
using Trap keyword to avoid confusing 
messages,
191
192
ErrorMethodology property,
187
ErrorRecord class,
191
ErrorRecord object,
532
errors.
See also
debugging
command for ignoring,
589
logic,
466
run-time,
462
465
simple typing errors,
479
480
syntax,
461
462
terminating vs. nonterminating,
512
-ErrorVariable parameter,
escape character ,
149
157
-examples argument,
Exception property,
532
Exchange Server 2010,
562
565
audit logging,
557
561
cmdlets with,
539
540
logging settings,
553
557
overview,
553
transport-logging levels,
554
557
mailboxes, creating
multiple mailboxes,
546
547
using Enable-Mailbox cmdlet,
543
544
when creating user,
544
546
message tracking,
568
570
[<0053>-14<0044>-8<0055>-30<0056>-8<004C>-5<0051>-15<004A00030044>-11<0058>-11<0047>-5<004C>-10<00570003003B>-11<0030>-9<002F000300C0>-7<004F>-11<0048>-14<000F>]TJ
562
565
remote servers,
540
543
reporting user settings,
548
550
storage settings
mailbox database,
550
552
overview,
550
551
user accounts, creating
exercise,
565
568
when creating mailbox,
544
546
exclamation mark !,
470
execution policies for scripts
overview,
134
[<0055>-17<0048>-21<0054>-8<0058>-5<004C>-5<0055>-17<0048>-21<004700030049>-11<0052>-11<005500030058>-11<0056>-8<004C>-5<0051>-15<004A00030053>-11<0055>-17<0052>-6<00C0>-7<004F>-11<0048>-17<0056>-24<000F>]TJ
268
required for using snippets,
259
retrieving current,
135
136
setting,
135
136
execution policy, restricted,
513
execution, unwanted, preventing using While 
statement,
155
156
Exists property,
Exit cmdlet,
585
exit command,
115
128
Exit For statement,
159
Exit statement,
160
ExpandEnvironmentStrings method,
expanding strings,
148
157
[<0048>-11<005B>-13<0053>-11<004C>-5<0055>-17<0048>-21<004700030046>-6<0048>-15<0055>-45<0057>-7<004C>-9<00C0>-10<0046>-19<0044>-8<0057>-7<0048>-17<0056>]TJ
[<00C0>9<0051>1<0047>12<004C>11<0051>1<004A>1<000F>]TJ
needed for old executables,
[<0048>-11<005B>-13<0053>-12<004F>-11<0052>-11<0055>-17<0048>-15<0055000300C0>-7<004F>-10<0057>-8<0048>-15<0055>34<000F>]TJ
Export-Alias cmdlet,
572
Export-CliXML cmdlet,
345
563
572
Export cmdlet,
583
Export-Console cmdlet,
Export-Csv cmdlet,
572
exportedcommands property,
225
Export-FormatData cmdlet,
572
Export-ModuleMember cmdlet,
241
248
Export-PSSession cmdlet,
572
Extension property,
193
FacsimileTelephoneNumber attribute,
406
[<0029>-8<0048>-14<0044>-8<0057>-12<0058>-4<0055>-17<0048>-17<002F>-12<0052>-17<004A>-13<0011>7<0057>-38<005B>-41<0057000300C0>-7<004F>-11<0048>-14<000F>]TJ
450
FileInfo object,
[<0010>-2<00C0>-7<004F>-11<0048>-17<0033>1<0044>-7<0057>-7<004B00030044>-8<0055>-17<004A>-8<0058>-4<0050>-14<0048>-15<0051>-5<0057>-24<000F>]TJ
323
[<00C0004F>-4<0048>-10<0056>]TJ
creating,
overwriting contents of,
reading from,
writing to,
FileSystemObject,
150
FileSystem property,
187
[<00C0>10<004F>6<00480056>-8<005C>1<0056>-3<0057>10<0048>2<0050>17<0003>17<0053>6<00550052>11<0059004C>7<0047>6<0048>2<0055>51<000F>]TJ
FilterHasMessage.ps1 script,
204
Filter keyword,
196
204
[<0010>-2<00C0>-7<004F>-10<0057>-7<0048>-15<005500030053>-14<0044>-8<0055>-13<0044>-8<0050>-14<0048>-15<0057>-8<0048>-15<0055>34<000F>]TJ
199
312
326
327
347
372
425
440
518
589
quotation marks used with,
318
using to reduce number of returned WMI class 
instances,
378
[<00C0004F>-3<0057>-1<0048>-8<0055>-23<0056>]TJ
advantages of,
204
205
overview,
201
203
performance and,
203
204
readability of,
204
205
FilterToday.ps1 script,
205
Finally block, of Try05Catch05Finally,
529
530
Find and Replace feature,
622
FindLargeDocs.ps1 script,
196
[<00C0>-7<0055>-17<0048>-13<005A>-7<0044>-9<004F>-4<004F00030048>-11<005B0046>-6<0048>-15<0053>-10<0057>-7<004C>-10<0052>-11<0051>-13<0056>-24<000F>]TJ
114
[<0010>-2<00C0>-7<0055>-30<0056>-20<0057>-7<0051>-11<0044>-8<0050>-14<004800030044>-8<0055>-17<004A>-8<0058>-4<0050>-14<0048>-15<0051>-5<0057>-24<000F>]TJ
568
[<00C100030044>-9<004F>-5<004C>-7<0044>-15<0056>-24<000F>]TJ
295
folders
creating,
for user modules,
227
230
multiple
creating using scripts,
168
169
deleting using scripts,
169
170
-force parameter,
112
134
269
279
434
440
545
552
foreach alias,
143
Foreach alias,
489
ForEach cmdlet,
413
585
ForEach-Object cmdlet,
137
159
183
287
292
381
382
489
550
foreach snippet,
264
Foreach statement
exiting early,
159
160
overview,
158
using from inside PowerShell consule,
159
ForEach statement,
443
-foregroundcolor argument,
328
ForEndlessLoop.ps1 script,
157
-ForestMode parameter,
459
forests
adding domain controller to,
458
459
creating,
452
453
For keyword,
156
Format cmdlet,
309
584
Format-Custom cmdlet,
572
Format-IPOutput function,
200
Format-List cmdlet,
143
269
309
316
321
386
485
525
549
550
572
Format-NonIPOutput function,
200
[<000D>40<0011>3<0049>-11<0052>-11<0055>-16<0050>-11<0044>-8<0057>-24<0011>-13<0053>-12<0056>3<0014>-26<005B>-13<0050>-8<004F000300C0>-7<004F>-11<0048>-17<0056>-24<000F>]TJ
371
Format-Table cmdlet,
139
255
313
318
373
380
493
564
572
formatting code,
628
629
constants,
631
functions,
629
630
[<0057>-8<0048>-15<0050>-8<0053>-12<004F>-9<0044>-8<0057>-8<0048000300C0>-7<004F>-11<0048>-17<0056>-24<000F>]TJ
630
formatting returned data,
189
Format-Wide cmdlet,
572
alias for,
formatting output with,
using,
For...Next loop,
152
For statement
[<00C1>-14<0048>-11<005B>-13<004C>-5<0045>-11<004C>-5<004F>-5<004C>-10<0057>-42<005C00030052>-4<0049>7<000F>]TJ
156
157
in VBScript compared with in PowerShell,
156
[<0050>-11<0044>-8<004E>-19<004C>-5<0051>-15<004A0003004C>-5<0051>-5<0057>-5<00520003004C>-5<0051>-5<00C0>-7<0051>-7<004C>-10<0057>-8<00480003004F>-11<0052>-17<0052>-11<0053>-1<000F>]TJ
157
158
FreeSpace property,
187
189
FSMO Flexible Single Master Operation,
422
427
fsutil utility,
ft alias,
295
-full argument,
FullName property,
231
[<0029>2<0058>-3<004F>-4<004F>-17<005C>-26<0034>-20<0058>-8<0044>-9<004F>-5<004C>-9<00C0>-12<0048>-21<0047>-6<0028>-2<0055>-16<0055>-17<0052>-11<0055>-13<002C>-14<004700030053>-11<0055>-17<0052>-11<0053>-17<0048>-15<0055>-45<0057>-42<005C>29<000F>]TJ
389
Function drive,
181
FunctionGetIPDemo.ps1 script,
198
FunctionInfo object,
540
Function keyword,
172
174
177
186
193
205
279
  
function libraries, creating,
178
179
function notation,
481
function provider,
functions
adding help for
overview,
184
using here-string object for,
184
186
advantages of using,
197
198
[<0044>-15<0056000300C0>-7<004F>-10<0057>-8<0048>-15<0055>-30<0056>-24<000F>]TJ
201
204
[cmdletbinding] attribute for,
209
210
[<0044>-15<0047>-11<0047>-5<004C>-5<0051>-15<004A00030010>-22<0046>-4<0052>-11<0051>-5<00C0>-7<0055>-16<005000030056>-10<0058>-4<0053>-11<0053>-17<0052>-11<0055>-45<0057>-24<000F>]TJ
215
216
adding -whatif support,
214
215
checking parameters automatically,
211
214
specifying default parameter set,
216
217
-verbose switch,
210
211
comments at end of,
179
creating,
172
debugging,
495
496
delimiting script block on,
177
dot-sourced,
182
184
enabling [cmdletbinding] attribute for,
210
encapsulating business logic with,
194
196
[<00C1>-14<0048>-11<005B>-13<004C>-5<0045>-11<004C>-5<004F>-5<004C>-10<0057>-42<005C00030052>-4<0049>7<000F>]TJ
198
199
formatting,
629
630
including in PowerShell using dot-sourcing,
180
181
including in scripts,
625
in VBScript,
171
listing all,
naming,
174
175
628
parameters for
overview,
176
using more than two,
192
193
using two input parameters,
186
187
passing values to,
175
performance of,
203
204
readability of,
198
reusability of,
198
separating data and presentation activities into 
different functions,
199
202
signature of,
195
type constraints in,
190
191
using for code reuse,
178
179
using from imported module,
242
244
using Get-Help cmdlet with,
243
245
Functions.psm1 module,
239
fw alias,
gal alias,
gc alias,
150
gci alias,
gcm alias,
238
__GENUS property,
517
-ge operator,
162
Get-Acl cmdlet,
362
Get-ADDefaultDomainPasswordPolicy cmdlet,
429
Get-ADDomain cmdlet,
429
Get-ADDomainController cmdlet,
424
430
Get-ADForest cmdlet,
428
Get-ADObject cmdlet,
425
431
Get-ADOrganizationalUnit cmdlet,
435
Get-ADRootDSE cmdlet,
431
Get-ADUser cmdlet,
435
443
Get-Alias cmdlet,
150
332
572
Get-AllowedComputerAndProperty.ps1 script,
511
Get-AllowedComputer function,
508
509
510
Get-ChildItem cmdlet,
131
196
231
237
331
572
alias for,
exercises using,
[<004F>-5<004C>-10<0056>-20<0057>-7<004C>-5<0051>-15<004A00030046>-6<0048>-15<0055>-45<0057>-7<004C>-9<00C0>-10<0046>-19<0044>-8<0057>-7<0048>-17<005600030058>-11<0056>-8<004C>-5<0051>-15<004A>-15<000F>]TJ
listing directory contents with,
listing registry keys using,
Get-Choice function,
505
Get-CimAssociatedInstance cmdlet,
374
377
378
381
382
Get-CimClass cmdlet,
367
368
380
381
Get-CimInstance cmdlet,
183
246
343
353
371
373
381
Get cmdlet,
583
Get-Command cmdlet,
172
238
242
421
423
Get-Command -module <modulename> 
command,
225
Get-ComputerInfo function,
241
242
Get-ComputerRestorePoint cmdlet,
572
Get-Content cmdlet,
150
177
185
413
415
462
463
508
563
572
627
Get-ControlPanelItem cmdlet,
572
Get_Count method.,
105
Get-Credential cmdlet,
127
339
456
541
Get-Culture cmdlet,
572
Get-Date cmdlet,
329
572
Get-DirectoryListing function,
192
193
Get-DirectoryListingToday.ps1 script,
193
Get-Discount function,
194
Get-DiskInformation function,
527
Get-DiskSpace.ps1 script,
189
Get-Doc function,
196
Get-Event cmdlet,
572
Get-EventLog cmdlet,
573
588
Get-EventLogLevel cmdlet,
553
Get-EventSubscriber cmdlet,
573
Get-ExchangeServer cmdlet,
542
Get-ExCommand cmdlet,
539
540
543
Get-ExecutionPolicy cmdlet,
135
259
278
Get-FilesByDate function,
194
205
Get-FilesByDate.ps1 script,
207
[<002A>-8<0048>-4<0057>39<0010>-7<0029>4<004C>6<004F0048>-6<00560025>-3<005C>-3<0027>4<0044>3<0057>4<0048>31<00390015>6<0011>-2<0053>-1<0056>14<0014>11<0003>11<00C0>4<004F0048>-3<000F>]TJ
207
GetFolderPath method,
272
Get-FormatData cmdlet,
573
Get-FreeDiskSpace function,
186
Get-FreeDiskSpace.ps1 script,
186
GetHardDiskDetails.ps1 script,
146
Get-Help cmdlet,
243
245
540
creating alias for,
examples using,
overview,
Get-History cmdlet,
332
Get-Host cmdlet,
573
Get-HotFix cmdlet,
573
GetInfoByZip method,
190
GetIPDemoSingleFunction.ps1 script,
197
Get-IPObjectDefaultEnabledFormatNonIPOutput.ps1 
script,
200
Get-IPObjectDefaultEnabled.ps1 script,
199
Get-IPObject function,
199
200
Get-IseSnippet cmdlet,
261
Get-Item cmdlet,
573
Get-ItemProperty cmdlet,
143
308
573
Get-Job cmdlet,
121
351
Get-Location cmdlet,
573
Get-Mailbox cmdlet,
548
Get-MailboxDatabase cmdlet,
550
551
Get-MailboxServer cmdlet,
550
Get-MailboxStatistics cmdlet,
558
Get-Member cmdlet,
122
268
269
374
378
381
529
573
exercises using,
retrieving information about objects using,
Get-Member object,
376
Get-Module cmdlet,
223
241
Get-MyBios function,
245
248
[<002A>-19<0048>-15<0057>28<0010>-18<0030>-13<005C>-14<0025>-10<004C>-10<0052>-11<0056>-24<0011>-13<0053>-12<0056>3<0014000300C0>-7<004F>-11<0048>-14<000F>]TJ
248
Get-MyModule function,
234
236
419
Get-MyModule.ps1 script,
236
[<002A>-19<0048>-15<0057>28<0010>-18<0031>-14<0048>-15<0057>-17<0019>-5<0057>-5<0052>-36<0017>-21<0026>-3<0052>-11<0051>-5<00C0>-12<004A>-8<0058>-4<0055>-13<0044>-8<0057>-7<004C>-10<0052>-11<00510003004D>-10<0052>-11<0045>-7<000F>]TJ
124
Get-NetAdapter cmdlet,
126
448
457
[<002A>-8<0048>-4<0057>39<0010>-7<0031>-3<0048>-4<0057>-11<0026>8<00520051>3<0051>-3<0048>-10<0046>-18<0057>4<004C>1<005200510033>9<0055>-6<0052>5<00C0>4<004F0048>11<0003>11<0049>-12<0058>7<0051>-3<0046>-18<0057>4<004C>1<00520051>-8<000F>]TJ
225
Get-OperatingSystemVersion function,
174
228
Get-OperatingSystemVersion.ps1 script,
174
Get-OptimalSize function,
244
Get-PowerShellRequirements.ps1 script,
[<002A>-19<0048>-15<0057>28<0010>-18<0033>-2<0055>-16<004C>-5<0051>-5<0057>-22<0026>-3<0052>-11<0051>-5<00C0>-12<004A>-8<0058>-4<0055>-13<0044>-8<0057>-7<004C>-10<0052>-11<0051000300460050>-15<0047>-4<004F>-11<0048>-15<0057>-24<000F>]TJ
573
Get-Printer cmdlet,
573
Get-PrinterDriver cmdlet,
573
Get-PrinterPort cmdlet,
573
Get-PrinterProperty cmdlet,
573
Get-PrintJob cmdlet,
573
Get-Process cmdlet,
129
174
263
317
573
592
Get-Process note* command,
Get-PSBreakPoint cmdlet,
483
485
492
493
494
498
573
Get-PSCallStack cmdlet,
483
491
573
Get-PSDrive cmdlet,
520
573
Get-PSProvider cmdlet,
573
Get-PSSession cmdlet,
116
Get-Random cmdlet,
573
Get-Service cmdlet,
174
573
Get-TextStatistics function,
174
176
Get-TextStats function,
180
183
Get-TraceSource cmdlet,
573
Get-Transaction cmdlet,
573
Get-TypeData cmdlet,
573
GetType method,
523
Get-UICulture cmdlet,
573
Get-Unique cmdlet,
573
Get-ValidWmiClass function,
523
524
525
Get-Variable administrator command,
101
Get-Variable cmdlet,
573
Get-Variable ShellId command,
100
Get-Verb cmdlet,
205
542
Get-WindowsFeature cmdlet,
385
386
420
448
GetWmiClassesFunction.ps1 script,
184
Get-WmiInformation function,
525
Get-WmiNameSpace function,
286
288
Get-WmiObject cmdlet,
115
124
139
174
189
196
199
253
255
264
286
291
308
311
312
314
316
317
318
322
326
338
350
355
358
364
373
428
502
509
511
514
525
573
621
Get-WmiProvider function,
289
516
521
Get-WSManCredSSP cmdlet,
573
Get-WSManInstance cmdlet,
573
gh alias,
281
  
G+H keystroke combination,
ghy alias,
332
334
gi alias,
[<004A>-4<004F>-11<0052>-11<0045>-14<0044>-9<004F>-4<004F>-17<005C00030058>-3<0051>-7<004C>-10<0054>-8<0058>-11<00480003004C>-10<0047>-11<0048>-15<0051>-5<0057>-7<004C>-9<00C0>-12<0048>-15<00550003000B>10<002A>-11<0038>-12<002C>-8<0027>11<000C>-3<000F>]TJ
425
gm alias,
122
292
361
gmb alias,
248
GPO Group Policy Object,
gps alias,
122
129
grave accent character `,
137
143
319
321
greater-than > symbol,
320
Group cmdlet,
585
Group-Object cmdlet,
172
573
group policy,
337
338
513
Group Policy Object GPO,
groups,
394
395
-groupScope parameter,
433
gsv alias,
130
-gt argument,
162
[<002A>-11<0038>-12<002C>-8<00270003000B>-17<004A>-4<004F>-11<0052>-11<0045>-14<0044>-9<004F>-4<004F>-17<005C00030058>-3<0051>-7<004C>-10<0054>-8<0058>-11<00480003004C>-10<0047>-11<0048>-15<0051>-5<0057>-7<004C>-9<00C0>-12<0048>-15<0055>1<000C>-3<000F>]TJ
425
gwmi alias,
291
296
301
311
330
355
gwmi win32_logicaldisk command,
312
hard-coded numbers, avoiding,
631
[hashtable] alias,
146
190
[<002B>-10<0044>-15<0056>-11<0030>-14<0048>-17<0056>-18<0056>-22<0044>-15<004A>-11<0048000300C0>-7<004F>-10<0057>-8<0048>-15<0055>34<000F>]TJ
204
hasmoredata property,
129
-Height parameter,
Help command,
491
Help function,
249
HelpMessage parameter property,
217
221
here-string object,
184
186
Hit Variable breakpoint,
486
HKEY_CLASSES_ROOT registry hive,
281
519
HomeDirectory attribute,
404
HomeDrive attribute,
405
HomePhone attribute,
405
HostingModel property,
517
hostname command,
HSG key,
Hungarian Notation,
631
Hyperv server,
425
-icontains operator,
507
[<002C>3<0047>6<0048>2<0051>12<0057>10<004C>9<0049>-35<005C004C>12<0051>2<004A>11<0033>15<00550052>6<00530048>2<0055>-28<0057>10<004C>7<00480056>4<0032>-7<0049>-6<0027>5<004C>12<00550048>-4<0046>-12<0057>12<0052>6<0055>1<004C>7<00480056>-7<0011>24<0057>-21<005B>-24<0057>17<0003>17<00C0>10<004F>6<0048>3<000F>]TJ
IdentifyServiceAccounts.ps1 script,
323
-identity parameter,
425
434
438
439
443
548
-id parameter,
494
IDs for jobs,
120
If statement,
157
515
assignment operators,
163
compared with VBScript's If...Then...End 
statement,
comparison operators,
162
163
ihy alias,
334
ImpersonationLevel property,
517
Import-Alias cmdlet,
574
Import-Clixml cmdlet,
574
Import cmdlet,
583
Import-Csv cmdlet,
574
importing modules,
241
242
Import-LocalizedData cmdlet,
574
Import-Module cmdlet,
225
226
237
241
248
421
422
443
Import-PSSession cmdlet,
541
574
in32_PerfFormattedData_TermService_
TerminalServicesSession class,
618
incorrect data types,
523
525
info attribute,
407
InitializationReentrancy property,
517
InitializationTimeoutInterval property,
517
InitializeAsAdminFirst property,
517
Initialize cmdlet,
585
initializing variables,
623
inline code vs. functions,
197
198
InLineGetIPDemo.ps1 script,
196
197
-inputobject argument,
300
377
381
Insert button,
253
255
Install-ADDSDomainController cmdlet,
454
456
Install-ADDSForest cmdlet,
459
InstallDate property,
187
315
-installDNS parameter,
454
459
[<004C>-5<0051>-13<0056>-20<0057>-24<0044>-9<004F>-4<004F>-11<0048>-21<004700030056>-16<0052>-5<0049>-45<0057>-39<005A>-7<0044>-8<0055>-17<0048>-14<000F000300C0>-7<0051>-15<0047>-5<004C>-5<0051>-15<004A>-15<000F>]TJ
327
330
installing
Active Directory module,
419
420
PowerShell 3.0,
RSAT for Active Directory,
420
InstallNewForest.ps1 script,
452
instance methods, executing
Invoke-WmiMethod cmdlet,
358
360
overview,
355
357
using terminate method directly,
357
358
[wmi] type accelerator,
360
361
[int] alias,
146
190
integers,
145
IntelliSense,
256
462
International module,
580
Internet Protocol IP addresses,
112
196
adding DNS servers,
453
assigning,
448
InvocationInfo property,
390
[<002C>-6<0051>-1<0059>-4<0052>-11<004E>7<0048>-23<0010>-5<0024>-32<0056>2<003A>10<0052>-11<0055>-16<004E>-38<00C1>-13<0052>-7<005A00030046>-1<0050>-15<0047>-3<004F>-11<0048>-15<0057>-24<000F>]TJ
574
Invoke cmdlet,
583
Invoke-Command cmdlet,
308
341
342
350
running command on multiple computers 
using,
118
120
running single command using,
117
118
Invoke-Expression cmdlet,
574
Invoke-History cmdlet,
281
Invoke-Item cmdlet,
574
Invoke-RestMethod cmdlet,
574
Invoke-WebRequest cmdlet,
574
Invoke-WmiMethod cmdlet,
262
357
358
360
359
574
Invoke-WSManAction cmdlet,
574
IPAddress property,
196
[<004C>-5<0053>-17<0046>-4<0052>-11<0051>-5<00C0>-12<004A00030046>-4<0052>-11<0050>-8<0050>-11<0044>-8<0051>-15<0047>-14<000F>]TJ
IP Internet Protocol addresses,
112
196
adding DNS servers,
453
assigning,
448
IPPhone attribute,
406
IPSubNet property,
196
iSCSI module,
580
IscsiTarget module,
580
ise alias,
271
ISE module,
581
[<002C>-12<0036>-5<0028>-2<0033>-2<0055>-17<0052>-6<00C0>-7<004F>-11<004800030059>-10<0044>-8<0055>-16<004C>-7<0044>-8<0045>-12<004F>-11<0048>-14<000F>]TJ
280
IsGlobalCatalog property,
425
isNullOrEmpty method,
443
IsReadOnly property,
[<002C>-14<0056>51<0037>49<0052>-17<0047>-8<0044>-3<005C000300C0>-7<004F>-10<0057>-8<0048>-15<0055>34<000F>]TJ
205
i variable,
151
IwbemObjectSet object,
328
iwmi alias,
iwr alias,
jobs
checking status of,
124
127
IDs for,
120
naming,
121
122
naming return object,
123
124
overview,
119
receiving,
120
121
123
125
removing,
121
running,
120
using cmdlets with,
122
124
Join cmdlet,
584
Join-Path cmdlet,
230
287
574
join static method, String class,
593
Kds module,
580
-keep parameter,
121
126
130
351
-key parameter,
468
keys, registry
creating and setting value at once,
creating using full path,
creating with New-Item cmdlet,
listing,
overwriting,
setting default value,
language parser,
461
LastAccessTime property,
LastAccessTimeUtc property,
LastErrorCode property,
187
LastWriteTime property,
206
LastWriteTimeUtc property,
-latest parameter,
176
l attribute,
401
launch options for console,
-LDAPFilter parameter,
435
LDAP Lightweight Directory Access Protocol,
284
385
387
388
425
length property,
150
Length property,
-le operator,
162
less-than < symbol,
320
Lightweight Directory Access Protocol LDAP,
284
385
387
388
425
-like operator,
162
Limit cmdlet,
585
Limit-EventLog cmdlet,
574
limiting choices
using -contains operator to examine contents of 
array,
507
509
using -contains operator to test for 
properties,
509
511
  
overview,
504
using PromptForChoice,
504
505
534
535
using Test-Connection to identify computer 
connectivity,
506
line number, setting breakpoints,
483
484
-list argument,
290
-ListAvailable parameter,
223
226
235
241
278
421
List command,
491
listing
[<0046>2<0048>-7<0055>-37<0057>1<004C>-1<00C0>-2<0046>-11<0044>1<00570048>-9<0056>-16<000F>]TJ
directory contents,
directory contents with Get-ChildItem cmdlet
formatting with Format-List cmdlet,
formatting with Format-Table cmdlet,
formatting with Format-Wide cmdlet,
overview,
environment variables,
[<00C0>-7<004F>-10<0057>-7<0048>-15<0055>-17<0048>-21<004700030053>-11<0055>-17<0052>-17<0046>-6<0048>-17<0056>-18<00560003004F>-5<004C>-10<0056>-20<0057>-24<000F>]TJ
functions,
modules,
223
225
providers,
registry keys,
WMI classes,
290
291
ListProcessesSortResults.ps1 script,
132
literal strings,
149
loading modules,
225
227
LocalMachine scope,
134
Local User Management module,
445
locations for modules,
-LockedOut parameter,
436
locked-out users,
436
437
logging service accounts,
323
324
logging settings Exchange Server 2010
overview,
553
transport-logging levels
[<0046>12<0052>5<0051>11<00C0>4<004A>8<0058>12<0055004C>11<0051>1<004A>1<000F>]TJ
554
557
reporting,
554
logic errors,
466
logon.vbs script,
404
-LogPath parameter,
459
[long] alias,
146
190
looping
Do...While statement,
152
154
Foreach statement,
159
160
While statement,
150
-lt operator,
162
Mailbox2 database,
551
mailboxes Exchange Server 2010
creating
using Enable-Mailbox cmdlet,
544
when creating user,
544
database for
examining,
550
551
managing,
551
552
ManagementClass object,
291
mandatory parameter property,
217
218
503
manifest for modules,
241
-match operator,
162
291
MaximumAllowed property,
315
MaximumComponentLength property,
187
MD alias,
365
MeasureAddOneFilter.ps1 script,
201
MeasureAddOneR2Function.ps1 script,
204
Measure cmdlet,
584
Measure-Command cmdlet,
574
Measure-Object cmdlet,
313
574
MediaType property,
187
-Members parameter,
434
MemberType method,
-membertype parameter,
122
message tracking Exchange Server 2010,
568
570
MessageTrackingLogEnabled argument,
569
MessageTrackingLogMaxAge argument,
569
MessageTrackingLogMaxDirectorySize 
argument,
570
-MessageTrackingLogPath argument,
570
method notation,
481
methods
of WMI classes,
368
369
retrieving for objects using Get-Member 
cmdlet,
Microsoft Exchange Server 2010.
See
Exchange 
Server 2010
Microsoft Management Console MMC,
386
Microsoft.PowerShell.Diagnostics module,
580
Microsoft.PowerShell.Host module,
581
Microsoft.PowerShell.Management module,
223
Microsoft.PowerShell.Security module,
580
Microsoft.PowerShell.Utility module,
223
[<0030>-7<004C>-8<0046>-1<0055>-17<0052>-11<0056>-17<0052>-5<0049>-45<005700030036>13<005C>-16<0056>-20<0057>-8<0048>-15<0050>-13<005600030026>-5<0048>-15<0051>-5<0057>-8<0048>-15<005500030026>-3<0052>-11<0051>-5<00C0>-12<004A>-8<0058>-4<0055>-13<0044>-8<0057>-7<004C>-10<0052>-11<005100030030>-10<0044>-8<0051>-11<0044>-15<004A>-11<0048>-15<00550003>]TJ
package,
Microsoft TechNet article KB310516,
Microsoft TechNet article KB322756,
Microsoft TechNet Script Center,
153
Microsoft.WSMan.Management module,
580
missing parameters, handling
assigning value in param statement,
502
503
detecting missing value and assigning in 
script,
502
making parameter mandatory,
503
overview,
501
missing rights, handling
attempt and fail,
512
checking for rights and exiting gracefully,
513
overview,
512
missing WMI providers, handling,
513
523
misspelled words,
462
621
mkdir function,
365
MMAgent module,
580
MMC Microsoft Management Console,
386
Mobile attribute,
406
-mode parameter,
486
487
ModifySecondPage.ps1 script,
405
ModifyUserProperties.ps1 script,
398
module coverage,
-Module parameter,
242
421
$modulePath variable,
230
231
modules
checking for dependencies,
234
236
creating
manifest for,
241
overview,
244
using Get-Help cmdlet with,
243
245
using Windows PowerShell ISE,
238
239
creating drive for,
232
233
deploying providers in,
directory for,
229
features of,
227
user folders for,
227
230
using functions from imported,
242
244
getting list of,
592
[<004A>-4<0055>-17<0052>-14<0058>-4<0053>-11<004C>-5<0051>-15<004A00030053>-11<0055>-17<0052>-6<00C0>-7<004F>-11<004800030049>-23<0058>-4<0051>-14<0046>-29<0057>-7<004C>-10<0052>-11<0051>-11<0044>-9<004F>-5<004C>-10<0057>-42<005C0003004C>-4<0051>-5<0057>-5<0052>-5<000F>]TJ
277
278
importing,
241
242
244
installing,
244
listing all available,
223
225
listing loaded,
223
loading,
225
227
locations for,
$modulePath variable,
230
231
overview,
[<0058>-11<0056>-8<004C>-5<0051>-15<004A0003005A>-13<004C>-10<0057>-7<004B00030053>-11<0055>-17<0052>-6<00C0>-7<004F>-11<0048>-17<0056>-24<000F>]TJ
274
script execution policy required to install,
232
using from shared location,
237
239
Mount cmdlet,
585
Mount-Database function,
552
Move-ADObject cmdlet,
435
Move cmdlet,
584
Move-Item cmdlet,
574
Move-ItemProperty cmdlet,
574
moveNext method,
202
mred alias,
MsDtc module,
MSIPROV WMI provider,
516
multiple commands, running,
multiple folders
creating using scripts,
168
169
deleting using scripts,
169
170
multiple users, creating,
408
409
multivalued users, creating,
414
417
MyDocuments variable,
280
[<0050>-2<005C>-45<00C0>-7<004F>-11<0048>-12<0011>7<0057>-38<005B>-41<0057000300C0>-7<004F>-11<0048>-14<000F>]TJ
[<0030>-13<005C>-45<0057>-8<0048>-17<0056>-20<0057>-34<00C0>-7<004F>-11<0048>-12<0011>7<0057>-38<005B>-41<0057000300C0>-7<004F>-11<0048>-14<000F>]TJ
Mytest folder,
named parameters,
628
Name input box,
252
-name parameter,
143
218
317
433
551
Name property,
187
289
291
315
517
-namespace parameter,
285
289
293
328
__NAMESPACE property,
517
namespaces
explained,
284
exploring,
367
in WMI,
284
288
__namespace WMI class,
517
Name variable,
331
naming
cmdlets,
583
586
verb distribution,
verb grouping for,
functions,
174
175
628
jobs,
121
122
return object for job,
123
124
variables,
631
NDS provider,
385
-ne operator,
162
NetAdapter module,
NetBIOS name,
458
NetConnection module,
225
581
NetLbfo module,
580
  
NetQos module,
580
NetSecurity module,
NetSwitchTeam module,
580
NetTCPIP module,
580
NetworkConnectivityStatus module,
580
network shares, modules from,
237
239
NetworkTransition module,
New-ADComputer cmdlet,
432
New-ADGroup cmdlet,
433
New-AdminAuditLogSearch cmdlet,
560
562
New-ADOrganizationalUnit cmdlet,
432
New-Alias cmdlet,
248
574
New-CimSession cmdlet,
343
New cmdlet,
583
-newest parameter,
126
New-Event cmdlet,
574
New-EventLog cmdlet,
574
New-ExchangeSession function,
542
New-IseSnippet cmdlet,
259
260
630
New-Item cmdlet,
169
230
270
278
574
New-ItemProperty cmdlet,
574
New-Line function,
180
183
NewMailboxAndUser.ps1 script,
545
New-Mailbox cmdlet,
539
545
New-MailBoxDatabase cmdlet,
551
552
-NewName parameter,
New-NetIPAddress cmdlet,
453
458
New-Object cmdlet,
529
530
536
574
exercises,
using,
New-PSDrive cmdlet,
103
232
520
574
New-PSSession cmdlet,
116
353
541
New-Service cmdlet,
574
New-TimeSpan cmdlet,
329
574
New-Variable cmdlet,
100
168
324
574
New-WebServiceProxy cmdlet,
574
New-WSManInstance cmdlet,
575
New-WSManSessionOption cmdlet,
575
Next keyword,
156
NFS module,
-noexit parameter,
138
140
nonterminating errors,
512
[<0010>-9<0051>-14<0052>-11<0053>-11<0055>-17<0052>-6<00C0>-7<004F>-11<004800030053>-14<0044>-8<0055>-13<0044>-8<0050>-14<0048>-15<0057>-8<0048>-15<0055>34<000F>]TJ
223
notafter property,
[<0031>-12<0052>-7<0057>-7<0048>-15<0053>-14<0044>-15<0047>-13<0011>-8<0048>-11<005B>-3<0048000300C0>-7<004F>-11<0048>-14<000F>]TJ
-notlike operator,
162
-notmatch operator,
162
-not operator,
228
235
-noun parameter,
Novell Directory Services servers,
385
Novell NetWare 3.x servers,
385
NumberOfBlocks property,
188
numbers
hard-coded, avoiding,
631
random, generating,
591
NWCOMPAT provider,
385
NwTraders.msft domain,
384
385
413
O attribute,
388
Object Editor, for Win32_Product WMI class,
518
objects
[<00C0>-7<0051>-15<0047>-5<004C>-5<0051>-15<004A00030044>-8<004F>-5<004C>-7<0044>-15<0056>-17<0048>-17<005600030049>-11<0052>-11<0055>34<000F>]TJ
New-Object cmdlet,
retrieving information about using Get-Member 
cmdlet,
objFile variable,
147
objFSO variable,
147
objWMIServices variable,
320
-off parameter,
479
ogv alias,
On Error Resume Next command,
136
[<0032>-2<00510048>5<0036>23<0057>6<0048>-1<00530029>16<0058>10<0055>-31<0057>7<004B0048>-1<0055>-10<003A>-7<004C>9<0051>-1<0047>4<0052>7<005A>-2<0056>3<0028>12<0051>13<0059>-3<004C>9<0055>-3<0052>3<0051>6<00500048>-1<0051>9<0057>-10<0011>21<0057>-24<005B>-27<0057>14<0003>14<00C0>7<004F>3<0048000F>]TJ
335
opening PowerShell,
OpenTextFile method,
147
OperationTimeoutInterval property,
517
operators for WMI queries,
321
322
optional modules,
419
-option parameter,
146
168
options for cmdlets,
organizational settings, modifying,
409
411
organizational units OUs,
383
384
413
432
Organization tab, Active Directory Users and 
Computers,
409
411
[<0032>-6<0036>-3<004C>-5<0051>-3<0049>-11<0052>-4<0011>7<0057>-38<005B>-41<0057000300C0>-7<004F>-11<0048>-14<000F>]TJ
319
OtherFacsimileTelephoneNumber attribute,
407
OtherHomePhone attribute,
407
OtherIPPhone attribute,
407
OtherMobile attribute,
407
OtherPager attribute,
407
OtherTelephone attribute,
399
OU attribute,
388
OUs organizational units,
383
384
413
432
-OutBuffer parameter,
Out cmdlet,
583
Out-File cmdlet,
324
575
592
Out-GridView cmdlet,
309
565
575
Out-Null cmdlet,
230
233
520
out-of-bounds errors, handling
overview,
526
placing limits on parameter,
528
using boundary-checking function,
526
527
Out-Printer cmdlet,
575
output
formatting with Format-Table cmdlet,
formatting with Format-Wide cmdlet,
formatting with Out-GridView cmdlet,
transcript tool and,
115
116
Out-String cmdlet,
575
-OutVariable parameter,
Pager attribute,
406
parameter attribute
HelpMessage property,
221
mandatory property,
217
218
overview,
217
ParameterSetName property,
219
position property,
218
219
ValueFromPipeline property,
220
221
parameters
missing, handling
assigning value in param statement,
502
503
detecting missing value and assigning in 
script,
502
making parameter mandatory,
503
overview,
501
named vs. unnamed,
628
placing limits on,
528
reducing data via,
347
350
ParameterSetName parameter property,
217
219
246
Parameters For... parameter box,
254
parameters, function
avoiding use of many,
194
checking automatically,
211
214
using more than two,
192
193
using multiple,
186
187
positional,
specifying,
176
specifying default parameter set,
216
217
switched parameters,
193
unhandled,
213
214
param keyword,
465
502
503
Param statement,
192
209
Pascal case,
385
-passthru parameter,
137
passwords
changing,
domain password policy, checking,
429
Paste button, Command add-on,
255
Paste command,
255
-path parameter,
143
150
176
192
415
432
433
Path property,
315
359
517
paths
for module location,
229
[<0049>-11<0052>-11<005500030053>-11<0055>-17<0052>-6<00C0>-7<004F>-11<0048>-17<0056>-24<000F>]TJ
267
pause function,
PDCs primary domain controllers,
385
performance, of functions,
203
204
PerLocaleInitialization property,
517
permission issues,
462
463
PerUserInitialization property,
517
PING commands,
114
PinToStartAndTaskBar.ps1 script,
pipe character |,
324
556
622
pipeline, avoiding breaking,
621
PKI module,
580
plus symbol +,
137
143
PNPDeviceID property,
188
Pop cmdlet,
585
Pop-Location cmdlet,
575
Popup method,
poshlog directory,
448
positional parameters,
175
position message,
136
position parameter property,
218
219
postalCode attribute,
401
[<0053>-17<0052>-11<0056>-20<0057>-22<0032>-24<0049>-45<00C0>-10<0046>-6<0048>-17<0025>-17<0052005B00030044>-7<0057>-35<0057>-7<0055>-16<004C>-5<0045>-14<0058>-10<0057>-7<0048>-14<000F>]TJ
401
PowerManagementCapabilities property,
188
PowerManagementSupported property,
188
PowerShell
adding to task bar in Windows 7,
deploying to enterprise systems,
opening,
[<0053>-11<0055>-17<0052>-6<00C0>-7<004F>-11<0048>-17<005600030049>-11<0052>-11<0055>34<000F>]TJ
[<00330052>-7<005A>-6<0048>-15<0055>-27<0036>-4<004B>-14<0048>-15<004F>-4<004F>-14<0011>-8<0048>-11<005B>-3<0048000300C0>-7<004F>-11<0048>-14<000F>]TJ
141
primary domain controllers PDCs,
385
PrintManagement module,
580
Process block,
200
203
205
processes
[<00C0>-7<004F>-10<0057>-7<0048>-15<0055>-17<0048>-21<00470003004F>-4<004C>-10<0056>-20<005700030052>-4<0049>7<000F>]TJ
retrieving list of running processes,
317
318
process ID,
Process scope,
134
  
[<0053>-11<0055>-17<0052>-6<00C0>-7<004F>-11<0048>-17<0025>-16<0044>-14<0046>-1<004E>-16<0058>-4<0053>-4<0011>-13<0053>-12<0056>3<0014000300C0>-7<004F>-11<0048>-14<000F>]TJ
279
[<0033>-2<0055>-17<0052>-6<00C0>-7<004F>-11<0048>-17<0033>1<0044>-8<0057>-7<004B00030044>-7<0057>-35<0057>-7<0055>-16<004C>-5<0045>-14<0058>-9<0057>-8<0048>-14<000F>]TJ
404
[<00530055>-6<0052>5<00C0>4<004F0048>-6<0056>]TJ
[<0024>-15<004F>-4<004F00030038>-8<0056>-17<0048>-15<0055>-30<0056>-24<000F00030024>-15<004F>-4<004F0003002B>-13<0052>-11<0056>-20<0057>-23<005600030053>-11<0055>-17<0052>-6<00C0>-7<004F>-11<0048>-14<000F>]TJ
275
276
using central script for,
276
277
creating,
270
271
deciding how to use,
271
272
determining existence of,
270
grouping functionality into module,
277
278
using modules with,
274
using multiple,
273
275
overview,
267
268
paths for,
267
[<0007>2<0053>-11<0055>-17<0052>-6<00C0>-7<004F>-11<004800030059>-10<0044>-8<0055>-16<004C>-7<0044>-8<0045>-12<004F>-11<0048>-14<000F>]TJ
268
270
script execution policy required for,
268
usage patterns for,
272
program logic,
194
ProhibitSendQuota property,
549
PromptForChoice method,
504
505
534
535
prompt, PowerShell,
properties
using -contains operator to test for,
509
511
[<0049>-11<0052>-11<005500030046>-6<0048>-15<0055>-45<0057>-7<004C>-9<00C0>-10<0046>-19<0044>-8<0057>-8<0048>-17<0056>-24<000F>]TJ
for directories,
retrieving every property from every instance of 
class,
314
retrieving for objects using Get-Member 
cmdlet,
[<0055>-17<0048>-15<0057>-7<0055>-16<004C>-10<0048>-12<0059>-17<004C>-5<0051>-15<004A00030056>-8<0053>-17<0048>-21<0046>-1<004C>-9<00C0>-10<004600030053>-11<0055>-17<0052>-11<0053>-17<0048>-15<0055>-45<0057>-7<004C>-10<0048>-17<005600030049>-17<0055>-17<0052>-11<0050>-19<000F>]TJ
316
__PROPERTY_COUNT property,
518
-property parameter,
256
296
313
325
326
347
372
373
441
-ProtectedFromAccidentalDeletion parameter,
433
__provider class,
517
ProviderName property,
188
provider property,
providers
alias,
[<0046>2<0048>-7<0055>-37<0057>1<004C>-1<00C0>-2<0046>-11<0044>1<00570048>-6<000F>]TJ
[<0047>3<004800C0>7<00510048>-7<0047>1<000F>]TJ
environment provider,
[<00C0>10<004F>6<00480056>-8<005C>1<0056>-3<0057>10<0048>2<0050>17<0003>17<0053>6<00550052>11<0059004C>7<0047>6<0048>2<0055>51<000F>]TJ
function provider,
in WMI,
289
listing,
overview,
registry,
variable,
__provider WMI system class,
517
.ps1 extension,
133
PSComputerName property,
118
183
342
[<00330056>-6<0046>7<00520051>-2<0056>-6<0052004F0048>11<0003>11<00C0>4<004F0048>-3<000F>]TJ
[<0010>2<0053>-1<0056>-6<0046>7<00520051>-2<0056>-6<0052004F0048>-3<00C0>4<004F0048>11<0003>11<0044>3<0055>-6<004A>3<0058>7<0050>-3<0048>-4<0051>6<0057>-13<000F>]TJ
.psd1 extension,
228
PSDiagnostics module,
580
PSDrives
for registry,
520
switching,
PsisContainer property,
.psm1 extension,
228
237
239
PSModulePath variable,
229
421
-PSProvider parameter,
103
PSScheduledJob module,
580
PSStatus property,
188
295
[<0033>-14<0036>-18<003A>10<0052>-11<0055>-16<004E>-38<00C1>-13<0052>-7<005A00030050>-14<0052>-17<0047>-8<0058>-4<004F>-11<0048>-14<000F>]TJ
581
Pure property,
517
Purpose property,
188
Push cmdlet,
585
Push-Location cmdlet,
575
Put method,
393
395
pwd alias,
[<0010>-25<0034>-11<0058>1<0044004F>4<004C00C0>-3<0048>-6<0055>-4<0031>-1<0044>1<0050>-5<0048>9<0003>9<0053>-5<0044>1<0055>-4<0044>1<0050>-5<0048>-6<0057>2<0048>-6<0055>43<000F>]TJ
367
369
querying
Active Directory,
590
WMI
eliminating WMI query argument,
320
321
[<00C0>-7<0051>-15<0047>-5<004C>-5<0051>-15<004A0003004C>-4<0051>-13<0056>-20<0057>-24<0044>-9<004F>-4<004F>-11<0048>-21<004700030056>-17<0052>-4<0049>-45<0057>-39<005A>-7<0044>-8<0055>-17<0048>-14<000F>]TJ
327
330
identifying service accounts,
322
323
logging service accounts,
323
324
obtaining BIOS information,
308
311
using operators,
321
322
overview,
293
[<0055>-17<0048>-15<0057>-7<0055>-16<004C>-10<0048>-12<0059>-17<004C>-5<0051>-15<004A00030047>-8<0044>-8<0057>-23<004400030049>-17<0055>-17<0052>-11<005000030056>-8<0053>-17<0048>-21<0046>-1<004C>-9<00C0>-10<00460003004C>-5<0051>-13<0056>-20<0057>-23<0044>-8<0051>-14<0046>-6<0048>-17<005600030052>-5<00490003>]TJ
class,
319
320
retrieving default WMI settings,
308
retrieving every property from every instance 
of class,
314
retrieving information about all shares on 
local machine,
315
retrieving list of running processes,
317
318
[<0055>-17<0048>-15<0057>-7<0055>-16<004C>-10<0048>-12<0059>-17<004C>-5<0051>-15<004A00030056>-8<0053>-17<0048>-21<0046>-1<004C>-9<00C0>-10<004600030053>-11<0055>-17<0052>-11<0053>-17<0048>-15<0055>-45<0057>-7<004C>-10<0048>-17<005600030049>-17<0055>-17<0052>-11<005000030046004F>-9<0044>-15<0056>-18<0056>-24<000F>]TJ
316
shortening syntax,
325
326
[<0056>-8<0053>-17<0048>-21<0046>-1<004C>-9<00C0>-10<004600030046>-1<004F>-9<0044>-15<0056>-18<0056>-24<000F>]TJ
293
296
specifying maximum number of connections 
to server,
316
317
substituting Where clause with variable,
325
viewing Windows environment 
variables,
330
335
Win32_Desktop class,
296
298
working with disk drives,
312
314
-query parameter,
314
348
QuickEdit mode,
-quiet parameter,
506
QuotasDisabled property,
188
QuotasIncomplete property,
188
QuotasRebuilding property,
188
quotation marks,
189
in console,
133
[<0058>-11<0056>-17<0048>-21<00470003005A>-13<004C>-10<0057>-7<004B00030010>-1<00C0>-7<004F>-10<0057>-8<0048>-15<005500030044>-8<0055>-17<004A>-8<0058>-4<0050>-14<0048>-15<0051>-5<0057>-24<000F>]TJ
318
random numbers,
591
range operator,
152
-rate parameter,
195
RDN relative distinguished name,
384
387
readability
[<0052>-4<0049000300C0>-7<004F>-10<0057>-8<0048>-15<0055>-30<0056>-24<000F>]TJ
204
205
of functions,
198
Read cmdlet,
585
Read-Host cmdlet,
174
546
575
594
[<0035>9<0048>2<0044>1<0047>11<004C>11<0051>1<004A>1<0024>1<0051>1<0047>2<003A>26<0055004C>6<0057>9<004C>11<0051>1<004A>10<0029>8<0052>5<0055>3<0029>9<004C>11<004F>5<0048>-1<0056>-8<0011>23<0057>-22<005B>-25<0057>16<0003>16<00C0>9<004F>5<0048>2<000F>]TJ
Read mode,
485
read-only variables,
587
ReadUserInfoFromReg.ps1 script
cmdlets used,
143
code,
143
144
variables used,
142
ReadWrite mode,
485
rebooting server,
454
456
-rebootoncompletion parameter,
459
Receive cmdlet,
584
Receive-Job cmdlet,
120
123
129
350
353
354
[<0055>-17<0048>-21<0046>-1<004C>-5<0053>-11<004C>-10<0048>-15<0051>-5<005700030056>-17<0048>-15<0057>-35<0057>-7<004C>-5<0051>-15<004A>-11<0056>-24<000F00030046>-4<0052>-11<0051>-5<00C0>-12<004A>-8<0058>-4<0055>-16<004C>-5<0051>-15<004A0003000B>-12<0028>-32<005B0046>-1<004B>-11<0044>-8<0051>-15<004A>-11<004800030036>-15<0048>-15<0055>-51<0059>-4<0048>-15<00550003>]TJ
2010
mailbox, creating
multiple mailboxes,
546
547
using Enable-Mailbox cmdlet,
544
when creating user,
544
546
reporting user settings,
548
550
-recurse parameter,
102
196
231
recycled variables,
631
redirect-and-append arrow >>,
redirection arrow >,
318
red squiggly lines,
462
[<0035>-7<0048>-21<004A>-11<0048>-21<0047>-5<004C>-10<0057>-24<0011>-8<0048>-11<005B>-3<0048000300C0>-7<004F>-11<0048>-14<000F>]TJ
Register cmdlet,
583
Register-EngineEvent cmdlet,
575
Register-ObjectEvent cmdlet,
575
Register-WmiEvent cmdlet,
575
registry
backing up,
determining existence of property,
drives for,
keys for
creating and setting value at once,
creating using full path,
creating with New-Item cmdlet,
overwriting,
setting default value,
listing keys in,
modifying property value,
modifying property value using full path,
provider overview,
remote access to,
retrieving default property value from,
retrieving values from,
searching for software in,
taking care when modifying,
testing for property before writing,
regular expressions,
591
relative distinguished name RDN,
384
387
__RelPath property,
358
359
360
518
RemoteDesktop module,
[<0035>-7<0048>-15<0050>-14<0052>-7<0057>-8<004800030030>-10<0044>-8<0051>-11<0044>-15<004A>-11<0048>-15<0050>-14<0048>-15<0051>-5<0057000300C0>-6<0055>-17<0048>-13<005A>-7<0044>-9<004F>-4<004F00030048>-11<005B0046>-6<0048>-15<0053>-10<0057>-7<004C>-10<0052>-11<0051>-19<000F>]TJ
114
remote procedure call RPC,
338
Remote Server Administration Tools RSAT,
419
remote servers,
540
543
RemoteSigned execution policy,
134
remoting
accessing local registry,
cmdlets for,
107
112
[<0046>12<0052>5<0051>11<00C0>4<004A>8<0058>12<0055004C>11<0051>1<004A>1<000F>]TJ
112
114
creating session,
115
118
-credential parameter support,
110
[<00C0>-7<0055>-17<0048>-13<005A>-7<0044>-9<004F>-4<004F00030048>-11<005B0046>-6<0048>-15<0053>-10<0057>-7<004C>-10<0052>-11<0051>-13<0056>-24<000F>]TJ
114
impersonating current user,
115
running command as different user,
110
running single command
on multiple computers,
118
120
on single computer,
117
118
saving sessions,
116
117
[<0057>-8<0048>-17<0056>-20<0057>-7<004C>-5<0051>-15<004A00030046>-4<0052>-11<0051>-5<00C0>-12<004A>-8<0058>-4<0055>-13<0044>-7<0057>-7<004C>-10<0052>-11<0051>-19<000F>]TJ
113
114
  
Windows PowerShell
discovering information about forest and 
domain,
428
431
obtaining FSMO information using,
428
WMI
disadvantages of,
341
remote results,
344
348
supplying alternate credentials for  remote 
connection,
338
341
using CIM classes to query WMI classes,
343
344
[<0058>-11<0056>-8<004C>-5<0051>-15<004A0003004A>-4<0055>-17<0052>-14<0058>-4<005300030053>-17<0052>-11<004F>-5<004C>-8<0046>-34<005C00030057>-5<005200030046>-4<0052>-11<0051>-5<00C0>-12<004A>-8<0058>-4<0055>-17<00480003003A>-12<0030>-9<002C>-21<000F>]TJ
337
338
Remove-ADGroupMember cmdlet,
434
Remove cmdlet,
583
Remove-Computer cmdlet,
575
Remove-Event cmdlet,
575
Remove-EventLog cmdlet,
575
Remove-IseSnippet cmdlet,
261
Remove-Item cmdlet,
169
279
575
Remove-ItemProperty cmdlet,
575
Remove-Job cmdlet,
121
Remove-MailboxDatabase cmdlet,
552
Remove-Printer cmdlet,
575
Remove-PrinterDriver cmdlet,
575
Remove-PrinterPort cmdlet,
575
Remove-PrintJob cmdlet,
575
Remove-PSBreakPoint cmdlet,
483
494
498
575
Remove-PSDrive cmdlet,
103
521
575
Remove-PSSession cmdlet,
116
Remove-TypeData cmdlet,
575
RemoveUserFromGroup.ps1 script,
434
Remove-Variable cmdlet,
101
575
Remove-WmiObject cmdlet,
365
575
Remove-WSManInstance cmdlet,
575
Rename-ADObject cmdlet,
432
Rename cmdlet,
584
Rename-Computer cmdlet,
448
455
458
575
Rename-Item cmdlet,
575
Rename-ItemProperty cmdlet,
575
Rename-Printer cmdlet,
575
renaming environment variables,
Repair cmdlet,
585
Repeat command,
491
Replace method, System.String .NET Framework 
class,
595
-replicationsourcedc parameter,
454
reporting user settings Exchange Server 
2010,
548
550
ReportTransportLogging.ps1 script,
requires statement,
246
Reset cmdlet,
585
Reset-ComputerMachinePassword cmdlet,
576
Reset method,
187
362
Resolve cmdlet,
584
Resolve-Path cmdlet,
576
Resolve-ZipCode function,
190
Resolve-ZipCode.ps1 script,
190
23Resource not available24 run-time error,
462
resources, unavailable,
462
Restart cmdlet,
584
Restart-Computer cmdlet,
449
454
456
458
576
-restart parameter,
448
Restart-PrintJob cmdlet,
576
Restart-Service cmdlet,
576
Restore cmdlet,
585
Restore-Computer cmdlet,
576
Restricted execution policy,
134
136
513
resultclassname parameter,
377
Resume cmdlet,
584
Resume-PrintJob cmdlet,
576
Resume-Service cmdlet,
576
RetrieveAndSortServiceState.ps1 script,
139
ReturnValue,
304
returnvalue property,
reusability of functions,
198
rich types,
627
rights, missing.
See
missing rights, handling
root/cimv2 WMI namespace,
369
370
route print command,
RPC remote procedure call,
338
rsat-ad-tools feature,
421
RSAT Remote Server Administration Tools,
419
420
Run as different user command,
110
Run As Different User dialog box,
Run button,
252
Run dialog box,
138
Run ISE As Administrator option,
251
run method,
[<0035>6<0058>7<0051>3<0051>4<004C>6<0051>-4<004A>5<00300058>8<004F>1<0057>4<004C>6<0053>-1<004F0048>-14<0026>8<00520050>3<00500044>3<0051>-4<00470056>-13<0011>18<0057>-27<005B>-30<0057>11<0003>11<00C0>4<004F0048>-3<000F>]TJ
Run Script button,
255
run-time errors,
462
465
rwmi alias,
sal alias,
sAMAccountName attribute,
393
394
Save cmdlet,
584
sbp alias,
sc alias,
scheduled tasks,
132
ScheduledTasks module,
580
SchemaMaster role,
425
ScreenSaverExecutable property,
297
ScreenSaverSecure property,
297
ScreenSaverTimeout property,
297
Screen* wildcard pattern,
297
script block,
148
-scriptblock parameter,
128
script execution policies
overview,
134
[<0055>-17<0048>-21<0054>-8<0058>-5<004C>-5<0055>-17<0048>-21<004700030049>-11<0052>-11<005500030058>-11<0056>-8<004C>-5<0051>-15<004A00030053>-11<0055>-17<0052>-6<00C0>-7<004F>-11<0048>-17<0056>-24<000F>]TJ
268
required for using snippets,
259
required to install modules,
232
retrieving current,
135
136
setting,
135
136
script-level tracing
enabling,
467
trace level 1,
468
469
trace level 2,
470
471
script pane
in Windows PowerShell ISE,
254
255
opening new,
254
running commands in,
255
using Commands add-on with,
255
-script parameter,
485
486
489
ScriptPath attribute,
404
scripts.
See also
constants; error handling; variables
advantages of using,
131
133
using arrays to run commands multiple 
times,
138
creating multiple folders using,
168
169
debugging using breakpoints
deleting breakpoints,
494
enabling and disabling breakpoints,
494
exercise,
496
498
listing breakpoints,
492
493
responding to breakpoints,
490
492
setting on commands,
489
490
setting on line number,
483
484
setting on variables,
485
489
deleting multiple folders using,
169
170
dot-sourcing,
178
179
180
180
181
enabling support for,
134
135
execution policies for
overview,
134
513
retrieving current,
135
136
setting,
135
136
functions in,
197
198
625
[<0058>-11<0056>-8<004C>-5<0051>-15<004A00030057>-5<00520003004B>-14<0052>-11<004F>-13<004700030053>-11<0055>-17<0052>-6<00C0>-7<004F>-11<00480003004C>-5<0051>-3<0049>-11<0052>-11<0055>-16<0050>-11<0044>-8<0057>-7<004C>-10<0052>-11<0051>-19<000F>]TJ
276
277
[<0051>-14<0048>-21<0048>-21<004700030049>-11<0052>-11<005500030050>-14<0052>-17<0047>-5<004C>-9<00C0>-10<0046>-19<0044>-7<0057>-7<004C>-10<0052>-11<005100030052>-4<0049>7<000F>]TJ
196
overview,
133
using -passthru parameter,
137
138
readability of,
627
628
running,
133
as scheduled tasks,
132
inside PowerShell,
140
outside PowerShell,
140
141
overview,
138
140
sharing,
132
writing,
136
138
[<0036>-5<0027>-13<0027>-13<002F0003000B>6<0036>-15<0048>-21<0046>-6<0058>-4<0055>-16<004C>-10<0057>-42<005C00030027>-16<0048>-17<0056>-17<0046>-1<0055>-16<004C>-5<0053>-10<0057>-5<0052>-11<005500030027>-16<0048>-14<00C0>-7<0051>-7<004C>-10<0057>-7<004C>-10<0052>-11<00510003002F>-30<0044>-8<0051>-15<004A>-8<0058>-8<0044>-15<004A>-11<0048>15<000C>-3<000F>]TJ
362
SDDLToBinarySD method,
SDDLToWin32SD method,
Search-ADAccount cmdlet,
436
437
438
Search-AdminAuditLog cmdlet,
558
- SearchBase parameter,
440
searching
[<0046>2<0048>-7<0055>-37<0057>1<004C>-1<00C0>-2<0046>-11<0044>1<00570048>-9<0056>-16<000F>]TJ
for cmdlets using wildcards,
secret commands,
132
SecureBoot module,
580
security
[<0046>-4<0052>-11<0051>-5<00C0>-7<0055>-16<0050>-7<004C>-5<0051>-15<004A00030048>-11<005B>-3<0048>-21<0046>-6<0058>-9<0057>-7<004C>-10<0052>-11<005100030052>-4<004900030046>-1<0050>-15<0047>-4<004F>-11<0048>-15<0057>-23<0056>-24<000F>]TJ
controlling cmdlet execution,
overview,
suspending execution of cmdlets,
[<0036>-15<0048>-21<0046>-6<0058>-4<0055>-16<004C>-10<0057>-42<005C00030027>-16<0048>-17<0056>-17<0046>-1<0055>-16<004C>-5<0053>-10<0057>-5<0052>-11<005500030027>-16<0048>-14<00C0>-7<0051>-7<004C>-10<0057>-7<004C>-10<0052>-11<00510003002F>-30<0044>-8<0051>-15<004A>-8<0058>-8<0044>-15<004A>-11<00480003000B>6<0036>-5<0027>-13<0027>-13<002F>-4<000C>-3<000F>]TJ
362
SecurityDescriptor property,
517
select alias,
293
296
340
Select Case statement VBScript,
164
165
Select cmdlet,
584
Select Columns dialog box,
Select-Object cmdlet,
225
286
293
296
309
313
340
381
564
576
Select statement,
316
Select-String cmdlet,
294
576
Select-Xml cmdlet,
576
Send cmdlet,
584
Send-MailMessage cmdlet,
576
SendTo folder shortcut,
141
-serveraddresses parameter,
453
ServerCore module,
581
  
ServerManager module,
448
580
ServerManagerTasks module,
580
-server parameter,
551
__SERVER property,
518
servers, maximum number of connections to,
316
317
service accounts
identifying,
322
323
logging,
323
324
[<0036>-15<0048>-15<0055>-51<0059>-17<004C>-8<0046>-6<0048>-17<0024>-5<0046>-5<0046>-4<0052>-14<0058>-4<0051>-5<0057>-23<0056>-24<0011>7<0057>-38<005B>-41<0057000300C0>-7<004F>-11<0048>-14<000F>]TJ
324
ServiceDependencies.ps1 script,
631
Service Pack SP 1,
sessions
creating remote,
115
118
saving remote,
116
117
Set-ADAccountPassword cmdlet,
435
Set-AdminAuditLog cmdlet,
558
[<0036>-10<0048>-10<0057>33<00100024>-3<0047>1<0050>-2<004C0051>-16<0024>1<0058>-6<0047>1<004C>-5<0057>-2<002F>-7<0052>-12<004A>-12<0026>2<0052>-6<005100C0>-7<004A>5<0003>5<0046>4<0050>-10<0047>1<004F>-6<0048>-10<0057>-19<000F>]TJ
558
Set-ADOObject cmdlet,
432
Set-ADUser cmdlet,
443
set alias,
Set-Alias cmdlet,
576
Set cmdlet,
583
Set-Content cmdlet,
576
Set-Date cmdlet,
576
Set-DNSClientServerAddress cmdlet,
453
Set-EventLogLevel cmdlet,
554
Set-ExecutionPolicy cmdlet,
134
232
259
513
SetInfo method,
389
393
396
414
416
Set-Item cmdlet,
576
Set-ItemProperty cmdlet,
576
Set-Location cmdlet,
331
576
alias for,
switching PS drive using,
working with aliases using,
Set-MailboxServer cmdlet,
569
SetPowerState method,
187
362
[<0036>-15<0048>-15<0057>28<0010>-18<0033>-2<0055>-16<004C>-5<0051>-5<0057>-22<0026>-3<0052>-11<0051>-5<00C0>-12<004A>-8<0058>-4<0055>-13<0044>-8<0057>-7<004C>-10<0052>-11<0051000300460050>-15<0047>-3<004F>-11<0048>-15<0057>-24<000F>]TJ
576
Set-Printer cmdlet,
576
Set-PrinterProperty cmdlet,
576
[<0036>-15<0048>-15<0057>28<0010>-18<0033>-2<0055>-17<0052>-6<00C0>-7<004F>-11<004800030049>-23<0058>-4<0051>-14<0046>-29<0057>-7<004C>-10<0052>-11<0051>-19<000F>]TJ
279
280
Set-PropertyItem cmdlet,
Set-PSBreakPoint cmdlet,
483
496
576
Set-PSDebug cmdlet,
624
overview,
467
script-level tracing using
enabling,
467
trace level 1,
468
469
trace level 2,
470
471
-step parameter,
472
478
stepping through script,
471
479
strict mode, enabling,
479
480
Set-Service cmdlet,
576
Set-StrictMode cmdlet,
481
482
Set-StrictMode -Version 2 command,
481
Set-TraceSource cmdlet,
576
Set-Variable cmdlet,
101
146
576
Set-WmiInstance cmdlet,
576
Set-WSManInstance cmdlet,
576
[<0036>-15<0048>-15<0057>28<0010>3<003A>-10<0036>-5<0030>-10<0044>-8<0051>-18<0034>-20<0058>-4<004C>-8<0046>-1<004E>-18<0026>-3<0052>-11<0051>-5<00C0>-12<004A00030046>-1<0050>-15<0047>-3<004F>-11<0048>-15<0057>-24<000F>]TJ
576
shared folders,
237
239
ShareNoQuery.ps1 script,
321
shares, retrieving information about,
315
ShellId variable,
100
shortcut dot .,
320
shortcuts, adding to SendTo folder,
141
Show cmdlet,
584
Show-Command cmdlet,
576
Show Commands Add-On option,
256
Show-ControlPanelItem cmdlet,
576
Show-EventLog cmdlet,
576
Show MOF button,
361
si alias,
signature of functions,
195
SilentlyContinue parameter,
392
simple typing errors,
479
480
[single] alias,
146
190
single quote ' character,
320
Single-Threaded Apartment model STA,
273
SIN method,
Size property,
188
sl alias,
115
331
SmallBios.ps1 script,
309
SmbShare module,
580
SmbWitness module,
581
snap-ins
[<0047>3<004800C0>7<00510048>-7<0047>1<000F>]TJ
234
uninstalling,
snippets
creating code with,
257
259
[<0046>13<0055>-3<00480044>7<0057>7<004C>9<0051>-1<004A>14<0003>14<0058>3<0056>-3<0048>-1<0055>-1<0010>-8<0047>3<004800C0>7<00510048>-7<0047>1<000F>]TJ
259
260
[<0047>3<004800C0>7<00510048>-7<0047>1<000F>]TJ
257
[<0055>-3<0048>-1<00500052>8<0059>-3<004C>9<0051>-1<004A>14<0003>14<0058>3<0056>-3<0048>-1<0055>-1<0010>-8<0047>3<004800C0>7<00510048>-7<0047>1<000F>]TJ
261
262
script execution policy required for,
259
software, installed
[<00C0>-7<0051>-15<0047>-5<004C>-5<0051>-15<004A00030058>-11<0056>-8<004C>-5<0051>-15<004A0003003A>-12<0030>-9<002C>-21<000F>]TJ
327
330
searching for in registry,
Software Update Services SUS,
sort alias,
299
Sort cmdlet,
584
sorting
alphabetical listings,
list of processes,
Sort-Object cmdlet,
139
298
302
322
576
space, in path of script,
588
sp alias,
special variables,
142
spelling,
621
Split cmdlet,
567
584
split method,
229
232
Split-Path cmdlet,
576
SP Service Pack 1,
squiggly lines,
462
Start cmdlet,
583
-startdate parameter,
560
Start-Job cmdlet,
120
123
125
Start-Process cmdlet,
577
Start-Service cmdlet,
300
577
StartService method,
305
Start-Sleep cmdlet,
577
Start Snippets option,
257
Start-Transaction cmdlet,
577
Start-Transcript cmdlet,
115
273
591
STA Single-Threaded Apartment model,
273
state property,
302
static methods,
361
365
366
st attribute,
401
StatusInfo property,
188
status of jobs, checking,
124
127
Status property,
188
298
301
315
Step-Into command,
491
Step-Out command,
491
Step-Over command,
491
-step parameter,
472
478
Stop cmdlet,
491
584
Stop-Computer cmdlet,
577
Stop-Job cmdlet,
125
StopNotepadSilentlyContinuePassThru.ps1 
script,
138
Stop-Process cmdlet,
137
214
263
577
Stop-Service cmdlet,
214
300
577
Storage module,
storage settings Exchange Server 2010
mailbox database
examining,
550
551
managing,
551
552
overview,
550
551
streetAddress attribute,
401
Street attribute,
388
strict mode, enabling
overview,
479
using Set-PSDebug -Strict,
479
480
using Set-StrictMode cmdlet,
481
482
-Strict parameter,
480
[string] alias,
146
190
String Attribute Editor, ADSI Edit,
388
String class,
232
strings
expanding,
148
157
literal,
149
subject property,
subroutines in VBScript,
171
__SUPERCLASS property,
518
supervariable,
SupportsDiskQuotas property,
188
SupportsExplicitShutdown property,
517
SupportsExtendedStatus property,
517
SupportsFileBasedCompression property,
188
SupportsQuotas property,
517
SupportsSendStatus property,
517
SupportsShouldProcess attribute,
214
215
SupportsShutdown property,
517
SupportsThrottling property,
517
suspend argument,
Suspend cmdlet,
584
suspending execution of cmdlets,
Suspend-PrintJob cmdlet,
577
Suspend-Service cmdlet,
577
SUS Software Update Services,
sv alias,
Switch cmdlet,
584
Switch_DebugRemoteWMISession.ps1 script,
465
switched parameters,
193
Switch statement
compared with VBScript's Select Case 
statement,
164
165
[<0027>-16<0048>-14<00C0>-7<0051>-7<004C>-5<0051>-15<004A00030047>-11<0048>-12<0049>-14<0044>-11<0058>-3<004F>-10<005700030046>-4<0052>-11<0051>-15<0047>-5<004C>-10<0057>-7<004C>-10<0052>-11<0051>-19<000F>]TJ
165
166
evaluating arrays,
166
167
handling multiple parameters using,
219
matching behavior, controlling,
167
matching with,
166
swmi alias,
-syntax argument,
syntax errors,
461
462
SystemCreationClassName property,
188
System.Diagnostics.Process .NET Framework 
object,
122
System.DirectoryServices.DirectoryEntry object,
384
System.Environment .NET Framework class,
272
  
System.Exception Catch block,
534
System.Exception error,
529
531
System.IO.DirectoryInfo object,
System.IO.FileInfo class,
230
System.Management.Automation.LineBreak .NET 
Framework class,
483
485
System.Management.Automation.
PSArgumentException object,
532
System.Management.ManagementClass class,
523
System.Math class,
SystemName property,
188
SystemSecurity class,
290
System.String class,
229
System.SystemException class,
191
System.Xml.XmlDocument type,
563
-SysVolpath parameter,
459
`t command,
588
tab completion,
104
140
tab expansion,
256
358
367
381
462
463
TargetObject property,
390
taskbar, adding shortcuts to,
Tasks menu,
251
TechNet Script Center Script Repository,
445
TechNet Script Repository,
TechNet wiki,
257
Tee cmdlet,
584
Tee-Object cmdlet,
577
telephone settings, modifying,
405
407
Telephones tab, Active Directory Users and 
Computers,
405
[<0057>-8<0048>-15<0050>-8<0053>-12<004F>-9<0044>-8<0057>-8<0048000300C0>-7<004F>-11<0048>-17<0056>-24<000F>]TJ
630
terminate method,
355
357
358
360
terminating errors,
512
testB object,
391
Test cmdlet,
583
Test-ComputerPath.ps1 script,
506
Test-ComputerSecureChannel cmdlet,
577
Test-Connection cmdlet,
464
504
506
577
Test-Mandatory function,
218
Test-ModulePath function,
228
231
Test-ParameterSet function,
219
Test-Path cmdlet,
228
270
278
467
469
519
520
577
623
Test-PipedValueByPropertyName function,
220
Test-ValueFromRemainingArguments function,
220
Test-WSMan cmdlet,
113
577
TextFunctions.ps1 script,
180
183
Text parameter,
260
TextStreamObject,
150
Then keyword,
thumbprint attribute,
Title parameter,
260
Today parameter,
193
totalSeconds property,
329
Trace cmdlet,
584
Trace-Command cmdlet,
577
-trace parameter,
470
tracing, script-level.
See
script-level tracing
Transcript command,
transcript tool,
115
116
transport-logging levels Exchange Server 2010
[<0046>12<0052>5<0051>11<00C0>4<004A>8<0058>12<0055004C>11<0051>1<004A>1<000F>]TJ
554
557
reporting,
554
Trap statement,
191
513
triple-arrow prompt,
troubleshooting,
621
624
TroubleshootingPack module,
581
TrustedPlatformModule module,
580
Try05Catch05Finally, error handling using
Catch block,
529
catching multiple errors,
532
533
exercise,
536
537
Finally block,
529
530
overview,
529
[<0037>51<0056>-8<004B>-14<0052>-17<0052>-7<0057>-24<0011>7<0057>-38<005B>-41<0057000300C0>-7<004F>-11<0048>-14<000F>]TJ
-type argument,
170
type constraints in functions,
190
191
typename property,
378
Type property,
315
[<0037>47<005C>-17<0053>-17<0048>-17<0056>-24<0011>-13<0053>-12<0056>3<0014>-26<005B>-13<0050>-9<004F000300C0>-7<004F>-11<0048>-14<000F>]TJ
294
typing errors,
479
480
UAC User Account Control,
512
UID attribute,
388
unavailable resources,
462
Unblock cmdlet,
584
Unblock-File cmdlet,
577
UNC Universal Naming Convention,
237
404
462
[<0038>-7<0051>-15<0047>-11<0048>-14<00C0>-7<0051>-14<0048>-21<004700030048>-11<005B>-3<0048>-21<0046>-6<0058>-9<0057>-7<004C>-10<0052>-11<005100030053>-17<0052>-11<004F>-5<004C>-8<0046>-34<005C>29<000F>]TJ
134
[<00380051>-8<0047>-4<0048>-8<0055>-23<0056>-13<0057>-16<0044>-1<0051>-8<0047>2<004C>2<0051>-8<004A>58<0037>-5<004B>-7<0048>-10<00350048>-14<004A>2<004C>-3<0056>-13<00570055>-44<005C>-7<0033>5<0055>-10<0052>1<0059>-10<004C>-3<0047>-4<0048>-8<0055>45<0011>14<0057>-31<005B>-34<0057>7<0003>7<00C0004F>-4<0048>-7<000F>]TJ
[<0038>4<0051>-4<00470048>-4<0055>-19<0056>-9<0057>-13<0044>3<0051>-4<0047>7<004C>6<0051>-4<004A>62<0037>-1<004B>-3<0048>31<0039>36<0044>3<0055>-5<004C>4<0044>3<0045>-1<004F0048>-6<0033>9<0055>-6<0052>5<0059>-6<004C>1<00470048>-4<0055>49<0011>18<0057>-27<005B>-30<0057>11<0003>11<00C0>4<004F0048>-3<000F>]TJ
Undo cmdlet,
584
Undo-Transaction cmdlet,
577
unfocused variables,
631
unhandled parameters,
213
214
-unique parameter,
381
Universal Naming Convention UNC,
237
404
UnloadTimeout property,
517
Unlock-ADAccount cmdlet,
437
438
unlocking locked-out users,
436
437
unnamed parameters,
628
Unregister cmdlet,
584
Unregister-Event cmdlet,
577
Unrestricted execution policy,
134
unwanted execution, preventing,
155
156
Update cmdlet,
584
Update-FormatData cmdlet,
577
Update-Help cmdlet,
UpdateHelpTrackErrors.ps1 script,
Update-List cmdlet,
577
Update-TypeData cmdlet,
577
UPN user principal name,
544
url attribute,
399
[<0058>-11<0056>-22<0044>-15<004A>-11<004800030053>-14<0044>-8<0057>-35<0057>-8<0048>-15<0055>-16<0051>-14<005600030049>-11<0052>-11<005500030053>-11<0055>-17<0052>-6<00C0>-7<004F>-11<0048>-17<0056>-24<000F>]TJ
272
UseADCmdletsToCreateOuComputerAndUser.ps1 
script,
433
use-case scenario,
501
Use cmdlet,
584
UserAccessLogging module,
580
UserAccountControl attribute,
396
User Account Control UAC,
512
user accounts, creating Exchange Server 2010
exercise,
565
568
multiple,
546
547
when creating mailbox,
544
546
User class,
394
[<0058>-11<0056>-17<0048>-15<0055>-15<0010>-22<0047>-11<0048>-14<00C0>-7<0051>-14<0048>-21<004700030056>-8<0051>-7<004C>-5<0053>-11<0053>-17<0048>-15<0057>-23<0056>-24<000F>]TJ
260
UserDomain property,
UserGroupTest group,
434
[<0038>-8<0056>-17<0048>-15<0055>-13<0031>-10<0044>-8<0050>-14<0048>-17<0056>-24<0011>7<0057>-38<005B>-41<0057000300C0>-7<004F>-11<0048>-14<000F>]TJ
565
UserName variable,
331
user principal name UPN,
544
users
Active Directory and
computer account,
395
396
deleting users,
411
412
exposing address information,
400
401
general user information,
398
399
groups,
394
395
[<0050>-14<0052>-18<0047>-4<004C>-8<0049>-52<005C>-17<004C>-5<0051>-15<004A00030058>-11<0056>-17<0048>-15<005500030053>-11<0055>-17<0052>-6<00C0>-7<004F>-11<004800030056>-17<0048>-15<0057>-35<0057>-7<004C>-5<0051>-15<004A>-11<0056>-24<000F>]TJ
403
405
modifying user properties,
397
398
multiple users, creating,
408
409
multivalued users, creating,
414
417
organizational settings, modifying,
409
411
overview,
393
394
telephone settings, modifying,
405
407
user account control,
396
397
soliciting input from,
594
Use-Transaction cmdlet,
577
[<00380056004C>3<0051>-7<004A>19<003A>-7<004B>-3<00440057>1<004C0049>16<0011>15<0057>-30<005B>-33<0057>8<0003>8<00C0>1<004F>-3<0048>-6<000F>]TJ
[<00580056>3<0053>-6<0048>-4<0051>-4<0047>-6<0026>8<00520051>6<00C0>4<0055>-5<00500044>3<0057>4<004C>1<00520051>-7<0032>-13<0049>-21<0026>14<0050>-4<0047>7<004F0048>-4<0057>-12<0056>-13<0011>18<0057>-27<005B>-30<0057>11<0003>11<00C0>4<004F0048>-3<000F>]TJ
ValidateRange parameter attribute,
528
-value argument,
ValueFromPipelineByPropertyName property,
217
220
ValueFromPipeline parameter property,
217
220
221
246
ValueFromRemainingArguments property,
217
220
-value parameter,
324
468
values
passing to functions,
175
retrieving from registry,
-variable parameter,
485
486
variables
constants compared with,
146
creating,
100
101
170
deleting,
101
grouping,
631
improperly initialized,
479
481
488
indicating can only contain integers,
145
initializing properly,
623
naming,
631
nonexistent,
479
provider for,
putting property selection into,
373
recycled,
631
retrieving,
100
scope of,
631
setting breakpoints on,
485
489
special,
142
storing CIM instance in,
374
storing remote session as,
116
117
unfocused,
631
using,
141
146
Windows environment variables,
330
335
VariableValue variable,
331
-verb argument,
-verbose parameter,
210
211
227
516
519
  
verbs,
172
175
distribution of,
grouping of,
-version parameter,
482
version property,
174
517
video classes, WMI,
380
381
[<001F>5<0059>-17<004C>-10<0048>-13<005A>9<002100030046>-4<0052>-11<0051>-5<00C0>-12<004A>-8<0058>-4<0055>-13<0044>-8<0057>-7<004C>-10<0052>-11<0051>-19<000F>]TJ
294
VolumeDirty property,
188
VolumeName property,
188
VolumeSerialNumber property,
188
VpnClient module,
580
Wait cmdlet,
584
Wait-Event cmdlet,
577
Wait-Job cmdlet,
124
451
Wait-Process cmdlet,
577
WbemTest Windows Management Instrumentation 
Tester,
361
513
Wdac module,
580
Web Services Description Language WSDL,
190
Web Services Management WSMAN,
108
-whatif parameter,
261
629
adding support for to function,
214
215
controlling execution with,
using before altering system state,
Whea module,
581
whenCreated property,
441
where alias,
Where clause,
325
Where cmdlet,
585
Where-Object cmdlet,
108
204
261
299
493
559
alias for,
compounding,
searching for aliases using,
WhileDoesNotRun.ps1 script,
156
While...Not ...Wend loop,
147
WhileReadLine.ps1 script,
150
WhileReadLineWend.vbs script,
147
While statement
constructing,
148
149
example of,
150
looping with,
150
preventing unwanted execution using,
155
156
While...Wend loop,
147
whoami command,
128
-Width parameter,
wildcards
asterisk * character,
293
309
442
in Commands add-on,
252
in Windows PowerShell 2.0,
226
loading modules using,
226
searching for cmdlets using,
searching job names,
121
Win32_1394Controller class,
598
Win32_1394ControllerDevice class,
598
Win32_Account class,
614
Win32_AccountSID class,
610
Win32_ACE class,
610
Win32_ActiveRoute class,
607
Win32_AllocatedResource class,
598
Win32_AssociatedBattery class,
601
Win32_AssociatedProcessorMemory class,
598
Win32_AutochkSetting class,
598
Win32_BaseBoard class,
598
Win32_BaseService class,
612
Win32_Battery class,
601
Win32_Bios WMI class,
292
309
343
371
501
512
514
598
[<003A>-21<004C>-5<00510016>8<0015>-21<0042>-38<0025>-17<0052>-17<0052>-7<0057>-22<0026>-3<0052>-11<0051>-5<00C0>-12<004A>-8<0058>-4<0055>-13<0044>-8<0057>-7<004C>-10<0052>-11<005100030046>-1<004F>-9<0044>-15<0056>-18<0056>-24<000F>]TJ
608
Win32_Bus class,
598
Win32_CacheMemory class,
598
Win32_CDROMDrive class,
598
Win32_CIMLogicalDeviceCIMDataFile class,
604
Win32_ClassicCOMApplicationClasses class,
603
Win32_ClassicCOMClass class,
603
Win32_ClassicCOMClassSettings class,
603
Win32_ClientApplicationSetting class,
603
Win32_CodecFile class,
607
Win32_CollectionStatistics class,
605
Win32_COMApplication class,
603
Win32_COMApplicationClasses class,
603
Win32_COMApplicationSettings class,
603
Win32_COMClassAutoEmulator class,
603
Win32_COMClass class,
603
Win32_COMClassEmulator class,
603
Win32_ComponentCategory class,
603
Win32_ComputerShutdownEvent class,
607
Win32_ComputerSystem class,
309
319
608
Win32_ComputerSystemEvent class,
607
Win32_ComputerSystemProcessor class,
608
Win32_ComputerSystemProduct class,
608
Win32_ComputerSystemWindows
ProductActivationSetting class,
615
Win32_COMSetting class,
603
Win32_ConnectionShare class,
612
Win32_ControllerHasHub class,
598
Win32_CurrentProbe class,
601
Win32_CurrentTime WMI class,
294
Win32_DCOMApplicationAccessAllowedSetting 
class,
603
Win32_DCOMApplication class,
603
Win32_DCOMApplicationLaunchAllowedSetting 
class,
604
Win32_DCOMApplicationSetting class,
604
Win32_DependentService class,
608
Win32_Desktop class,
296
298
604
Win32_DesktopMonitor class,
294
602
Win32_DeviceBus class,
598
Win32_DeviceChangeEvent class,
607
Win32_DeviceMemoryAddress class,
598
Win32_DeviceSettings class,
598
Win32_DFSNode class,
612
Win32_DFSNodeTarget class,
612
Win32_DFSTarget class,
612
Win32_Directory class,
604
[<003A>-21<004C>-5<00510016>8<0015>-21<0042>-38<0027>-12<004C>-5<0055>-17<0048>-21<0046>-29<0057>-5<0052>-11<0055>-51<005C>-28<0036>-4<0053>-17<0048>-21<0046>-1<004C>-9<00C0>-10<0046>-19<0044>-8<0057>-7<004C>-10<0052>-11<005100030046>-1<004F>-9<0044>-15<0056>-18<0056>-24<000F>]TJ
604
Win32_DiskDrive class,
598
Win32_DiskDriveToDiskPartition class,
604
Win32_DiskPartition class,
604
Win32_DiskQuota class,
604
[<003A>-21<004C>-5<00510016>8<0015>-21<0042>-38<0027>-12<004C>-10<0056>-8<0053>-12<004F>-9<0044>-3<005C>-25<0026>-3<0052>-11<0051>-5<00C0>-12<004A>-8<0058>-4<0055>-13<0044>-8<0057>-7<004C>-10<0052>-11<005100030046>-1<004F>-9<0044>-15<0056>-18<0056>-24<000F>]TJ
370
602
[<003A>-10<004C>6<0051>11<0016>19<0015>-10<0042>-27<0027>-1<004C>1<0056>3<0053>-1<004F>2<0044>8<005C>-14<0026>8<00520051>6<0057>4<0055>-6<0052004F>7<004F0048>-4<0055>-22<0026>8<00520051>6<00C0>-1<004A>3<0058>7<0055>-2<0044>3<0057>4<004C>1<00520051>11<0003>11<0046>10<004F>2<0044>-4<0056>-7<0056>-13<000F>]TJ
602
Win32_DMAChannel class,
598
Win32_DriverForDevice class,
601
Win32_DriverVXD class,
604
Win32_Environment class,
330
604
Win32_Fan class,
597
Win32_FloppyController class,
598
Win32_FloppyDrive class,
598
Win32_Group class,
614
Win32_GroupInDomain class,
614
Win32_GroupUser class,
614
Win32_HeatPipe class,
597
Win32_IDEController class,
599
Win32_IDEControllerDevice class,
599
Win32_ImplementedCategory class,
604
Win32_InfraredDevice class,
599
Win32_IP4PersistedRouteTable class,
607
Win32_IP4RouteTable class,
607
Win32_IP4RouteTableEvent class,
607
Win32_IRQResource class,
599
Win32_Keyboard class,
597
Win32_LoadOrderGroup class,
608
Win32_LoadOrderGroupServiceDependencies 
class,
608
Win32_LoadOrderGroupServiceMembers class,
608
Win32_LocalTime class,
610
WIN32_loggedonuser WMI class,
341
Win32_LogicalDisk class,
146
187
189
318
605
Win32_LogicalDiskRootDirectory class,
605
Win32_LogicalDiskToPartition class,
605
WIN32_LogicalDisk WMI class,
312
314
Win32_LogicalFileAccess class,
611
Win32_LogicalFileAuditing class,
611
Win32_LogicalFileGroup class,
611
Win32_LogicalFileOwner class,
611
Win32_LogicalFileSecuritySetting class,
611
[<003A>-21<004C>-5<00510016>8<0015>-21<0042>-38<002F>-12<0052>-18<004A>-4<004C>-8<0046>-19<0044>-9<004F>-7<0030>-14<0048>-15<0050>-14<0052>-11<0055>-51<005C>-25<0026>-3<0052>-11<0051>-5<00C0>-12<004A>-8<0058>-4<0055>-13<0044>-7<0057>-7<004C>-10<0052>-11<005100030046>-1<004F>-9<0044>-15<0056>-18<0056>-24<000F>]TJ
606
Win32_LogicalProgramGroup class,
612
Win32_LogicalProgramGroupDirectory class,
612
Win32_LogicalProgramGroupItem class,
613
Win32_LogicalProgramGroupItemDataFile class,
613
Win32_LogicalShareAccess class,
611
Win32_LogicalShareAuditing class,
611
Win32_LogicalShareSecuritySetting class,
611
Win32_LogonSession class,
614
Win32_LogonSessionMappedDisk class,
614
Win32_LogonSession WMI class,
374
Win32_LUIDandAttributes class,
605
Win32_LUID class,
605
Win32_MappedLogicalDisk class,
605
Win32_MemoryArray class,
599
Win32_MemoryArrayLocation class,
599
Win32_MemoryDeviceArray class,
599
Win32_MemoryDevice class,
599
Win32_MemoryDeviceLocation class,
599
Win32_ModuleLoadTrace class,
607
Win32_ModuleTrace class,
607
Win32_MotherboardDevice class,
599
Win32_NamedJobObjectActgInfo class,
606
Win32_NamedJobObject class,
605
Win32_NamedJobObjectLimit class,
606
Win32_NamedJobObjectLimitSetting class,
606
Win32_NamedJobObjectProcess class,
606
Win32_NamedJobObjectSecLimit class,
606
Win32_NamedJobObjectSecLimitSetting class,
606
Win32_NamedJobObjectStatistics class,
606
Win32_NetworkAdapter class,
601
[<003A>-13<004C>3<0051>8<0016>16<0015>-13<0042>-30<0031>-5<0048>-7<0057>-31<005A>2<0052>-3<0055>-8<004E>-45<0024004700440053>-2<00570048>-7<0055>-25<0026>5<0052>-3<0051>3<00C0>-4<004A0058>4<0055>-5<00440057>1<004C>-2<0052>-3<0051>8<0003>8<0046>7<004F>-1<0044>-7<0056>-10<0056>-16<000F>]TJ
196
601
Win32_NetworkAdapterSetting class,
601
Win32_NetworkClient class,
607
Win32_NetworkConnection class,
607
[<003A>-21<004C>-5<00510016>8<0015>-21<0042>-38<0031>-13<0048>-15<0057>-39<005A>-6<0052>-11<0055>-16<004E>-16<002F>-12<0052>-17<004A>-5<004C>-5<0051>-11<0033>-2<0055>-17<0052>-6<00C0>-7<004F>-11<004800030046>-1<004F>-9<0044>-15<0056>-18<0056>-24<000F>]TJ
614
Win32_NetworkProtocol class,
607
Win32_NTDomain class,
607
  
Win32_NTEventlogFile class,
614
Win32_NTLogEvent class,
614
Win32_NTLogEventComputer class,
614
Win32_NTLogEventLog class,
614
Win32_NTLogEventUser class,
614
Win32_OnBoardDevice class,
599
Win32_OperatingSystemAutochkSetting class,
605
Win32_OperatingSystem class,
174
319
608
Win32_OperatingSystemQFE class,
608
[<003A>-21<004C>-5<00510016>8<0015>-21<0042>-16<0032>-6<0036>-5<0035>-7<0048>-21<0046>-4<0052>-6<0059>-4<0048>-15<0055>-51<005C>-25<0026>-3<0052>-11<0051>-5<00C0>-12<004A>-8<0058>-4<0055>-13<0044>-7<0057>-7<004C>-10<0052>-11<005100030046>-1<004F>-9<0044>-15<0056>-18<0056>-24<000F>]TJ
609
Win32_PageFile class,
606
Win32_PageFileElementSetting class,
606
Win32_PageFileSetting class,
606
Win32_PageFileUsage class,
606
Win32_ParallelPort class,
599
Win32_PCMCIAController class,
599
Win32_PerfFormattedData_ASP_ActiveServerPages 
class,
615
Win32_PerfFormattedData class,
615
Win32_PerfFormattedData_ContentFilter_
IndexingServiceFilter class,
615
Win32_PerfFormattedData_ContentIndex_
IndexingService class,
615
Win32_PerfFormattedData_InetInfo_
InternetInformationServicesGlobal 
class,
615
Win32_PerfFormattedData_ISAPISearch_
HttpIndexingService class,
615
Win32_PerfFormattedData_MSDTC_
DistributedTransactionCoordinator 
class,
615
Win32_PerfFormattedData_NTFSDRV_
SMTPNTFSStoreDriver class,
615
Win32_PerfFormattedData_PerfDisk_LogicalDisk 
class,
615
Win32_PerfFormattedData_PerfDisk_PhysicalDisk 
class,
615
Win32_PerfFormattedData_PerfNet_Browser 
class,
615
Win32_PerfFormattedData_PerfNet_Redirector 
class,
615
Win32_PerfFormattedData_PerfNet_Server 
class,
Win32_PerfFormattedData_PerfNet_
ServerWorkQueues class,
Win32_PerfFormattedData_PerfOS_Cache class,
Win32_PerfFormattedData_PerfOS_Memory 
class,
Win32_PerfFormattedData_PerfOS_Objects 
class,
Win32_PerfFormattedData_PerfOS_PagingFile 
class,
Win32_PerfFormattedData_PerfOS_Processor 
class,
Win32_PerfFormattedData_PerfOS_System 
class,
Win32_PerfFormattedData_PerfProc_FullImage_
Costly class,
Win32_PerfFormattedData_PerfProc_Image_Costly 
class,
Win32_PerfFormattedData_PerfProc_JobObject 
class,
Win32_PerfFormattedData_PerfProc_
JobObjectDetails class,
Win32_PerfFormattedData_PerfProc_
ProcessAddressSpace_Costly class,
Win32_PerfFormattedData_PerfProc_Process 
class,
Win32_PerfFormattedData_PerfProc_Thread 
class,
617
Win32_PerfFormattedData_PerfProc_ThreadDetails_
Costly class,
617
Win32_PerfFormattedData_PSched_PSchedFlow 
class,
617
Win32_PerfFormattedData_PSched_PSchedPipe 
class,
617
Win32_PerfFormattedData_RemoteAccess_RASPort 
class,
617
Win32_PerfFormattedData_RemoteAccess_RASTotal 
class,
617
Win32_PerfFormattedData_RSVP_ACSRSVPInterfaces 
class,
617
Win32_PerfFormattedData_RSVP_ACSRSVPService 
class,
617
Win32_PerfFormattedData_SMTPSVC_SMTPServer 
class,
617
Win32_PerfFormattedData_Spooler_PrintQueue 
class,
617
Win32_PerfFormattedData_TapiSrv_Telephony 
class,
617
Win32_PerfFormattedData_Tcpip_ICMP class,
617
Win32_PerfFormattedData_Tcpip_IP class,
617
Win32_PerfFormattedData_Tcpip_NBTConnection 
class,
617
Win32_PerfFormattedData_Tcpip_NetworkInterface 
class,
617
Win32_PerfFormattedData_Tcpip_TCP class,
617
Win32_PerfFormattedData_Tcpip_UDP class,
618
Win32_PerfFormattedData_TermService_
TerminalServices class,
618
Win32_PerfFormattedData_W3SVC_WebService 
class,
618
Win32_PerfRawData_ASP_ActiveServerPages 
class,
618
Win32_PerfRawData class,
618
Win32_PerfRawData_ContentFilter_
IndexingServiceFilter class,
618
Win32_PerfRawData_ContentIndex_IndexingService 
class,
618
Win32_PerfRawData_InetInfo_
InternetInformationServicesGlobal 
class,
618
Win32_PerfRawData_ISAPISearch_
HttpIndexingService class,
618
Win32_PerfRawData_MSDTC_
DistributedTransactionCoordinator 
class,
618
Win32_PerfRawData_NTFSDRV_
SMTPNTFSStoreDriver class,
618
Win32_PerfRawData_PerfDisk_LogicalDisk class,
618
Win32_PerfRawData_PerfDisk_PhysicalDisk 
class,
618
Win32_PerfRawData_PerfNet_Browser class,
618
Win32_PerfRawData_PerfNet_Redirector class,
618
Win32_PerfRawData_PerfNet_Server class,
619
Win32_PerfRawData_PerfNet_ServerWorkQueues 
class,
619
Win32_PerfRawData_PerfOS_Cache class,
619
Win32_PerfRawData_PerfOS_Memory class,
619
Win32_PerfRawData_PerfOS_Objects class,
619
Win32_PerfRawData_PerfOS_PagingFile class,
619
Win32_PerfRawData_PerfOS_Processor class,
619
Win32_PerfRawData_PerfOS_System class,
619
Win32_PerfRawData_PerfProc_FullImage_Costly 
class,
619
Win32_PerfRawData_PerfProc_Image_Costly 
class,
619
Win32_PerfRawData_PerfProc_JobObject class,
619
Win32_PerfRawData_PerfProc_JobObjectDetails 
class,
619
Win32_PerfRawData_PerfProc_
ProcessAddressSpace_Costly class,
619
Win32_PerfRawData_PerfProc_Process class,
619
Win32_PerfRawData_PerfProc_Thread class,
619
Win32_PerfRawData_PerfProc_ThreadDetails_Costly 
class,
619
Win32_PerfRawData_PSched_PSchedFlow class,
620
Win32_PerfRawData_PSched_PSchedPipe class,
620
Win32_PerfRawData_RemoteAccess_RASPort 
class,
620
Win32_PerfRawData_RemoteAccess_RASTotal 
class,
620
Win32_PerfRawData_RSVP_ACSRSVPInterfaces 
class,
620
Win32_PerfRawData_RSVP_ACSRSVPService 
class,
620
Win32_PerfRawData_SMTPSVC_SMTPServer 
class,
620
Win32_PerfRawData_Spooler_PrintQueue class,
620
Win32_PerfRawData_TapiSrv_Telephony class,
620
Win32_PerfRawData_Tcpip_ICMP class,
620
Win32_PerfRawData_Tcpip_IP class,
620
Win32_PerfRawData_Tcpip_NBTConnection 
class,
620
Win32_PerfRawData_Tcpip_NetworkInterface 
class,
620
Win32_PerfRawData_Tcpip_TCP class,
620
Win32_PerfRawData_Tcpip_UDP class,
620
Win32_PerfRawData_TermService_TerminalServices 
class,
620
Win32_PerfRawData_TermService_
TerminalServicesSession class,
620
Win32_PerfRawData_W3SVC_WebService class,
620
Win32_PhysicalMedia class,
598
Win32_PhysicalMemoryArray class,
599
Win32_PhysicalMemory class,
599
Win32_PhysicalMemoryLocation class,
599
Win32_PingStatus class,
506
607
Win32_PNPAllocatedResource class,
599
Win32_PNPDevice class,
599
Win32_PNPEntity class,
382
599
Win32_PointingDevice class,
597
Win32_PortableBattery class,
601
Win32_PortConnector class,
599
Win32_PortResource class,
600
Win32_POTSModem class,
602
Win32_POTSModemToSerialPort class,
602
Win32_PowerManagementEvent class,
601
Win32_Printer class,
601
[<003A>-21<004C>-5<00510016>8<0015>-21<0042>-38<0033>-2<0055>-16<004C>-5<0051>-5<0057>-7<0048>-15<0055>-33<0026>-3<0052>-11<0051>-5<00C0>-12<004A>-8<0058>-4<0055>-13<0044>-8<0057>-7<004C>-10<0052>-11<005100030046>-1<004F>-9<0044>-15<0056>-18<0056>-24<000F>]TJ
601
Win32_PrinterController class,
601
Win32_PrinterDriver class,
601
Win32_PrinterDriverDll class,
601
Win32_PrinterSetting class,
602
Win32_PrinterShare class,
612
Win32_PrintJob class,
602
Win32_PrivilegesStatus class,
611
Win32_Process class,
262
294
326
355
360
374
610
Win32_Processor class,
294
600
  
Win32_ProcessStartTrace class,
607
Win32_ProcessStartup class,
610
Win32_ProcessStopTrace class,
607
Win32_ProcessTrace class,
607
Win32_Product class,
126
516
518
Win32_ProgramGroup class,
613
Win32_ProgramGroupContents class,
613
Win32_ProgramGroupOrItem class,
613
Win32_ProtocolBinding class,
607
Win32_Proxy class,
615
Win32_QuickFixEngineering class,
609
Win32_QuotaSetting class,
605
Win32_Refrigeration class,
597
Win32_Registry class,
610
Win32_ScheduledJob class,
132
610
Win32_SCSIController class,
600
Win32_SCSIControllerDevice class,
600
Win32_SecurityDescriptor class,
611
Win32_SecurityDescriptorHelper class,
361
362
Win32_SecuritySettingAccess class,
611
Win32_SecuritySettingAuditing class,
611
Win32_SecuritySetting class,
611
Win32_SecuritySettingGroup class,
611
Win32_SecuritySettingOfLogicalFile class,
611
Win32_SecuritySettingOfLogicalShare class,
611
Win32_SecuritySettingOfObject class,
611
Win32_SecuritySettingOwner class,
611
Win32_SerialPort class,
600
[<003A>-21<004C>-5<00510016>8<0015>-21<0042>-49<0036>-15<0048>-15<0055>-16<004C>-7<0044>-9<004F>-7<0033>1<0052>-11<0055>-45<0057>-22<0026>-3<0052>-11<0051>-5<00C0>-12<004A>-8<0058>-4<0055>-13<0044>-8<0057>-7<004C>-10<0052>-11<005100030046>-1<004F>-9<0044>-15<0056>-18<0056>-24<000F>]TJ
600
Win32_SerialPortSetting class,
600
Win32_ServerConnection class,
612
Win32_ServerSession class,
612
Win32_Service class,
294
301
373
612
Win32_SessionConnection class,
612
Win32_SessionProcess class,
612
Win32_ShadowBy class,
613
Win32_ShadowContext class,
613
Win32_ShadowCopy class,
613
Win32_ShadowDiffVolumeSupport class,
613
Win32_ShadowFor class,
613
Win32_ShadowOn class,
613
Win32_ShadowProvider class,
613
Win32_ShadowStorage class,
613
Win32_ShadowVolumeSupport class,
614
Win32_Share class,
315
612
Win32_ShareToDirectory class,
612
Win32_ShortcutFile class,
605
Win32_SIDandAttributes class,
606
Win32_SID class,
611
Win32_SMBIOSMemory class,
600
Win32_SoundDevice class,
600
Win32_StartupCommand class,
609
Win32_SubDirectory class,
605
Win32_SystemAccount class,
614
Win32_SystemBIOS class,
600
[<003A>-21<004C>-5<00510016>8<0015>-21<0042>-49<0036>13<005C>-16<0056>-20<0057>-8<0048>-15<0050>-11<0025>-17<0052>-18<0052>-7<0057>-22<0026>-3<0052>-11<0051>-5<00C0>-12<004A>-8<0058>-4<0055>-13<0044>-8<0057>-7<004C>-10<0052>-11<005100030046004F>-9<0044>-15<0056>-18<0056>-24<000F>]TJ
609
[<003A>-21<004C>-5<00510016>8<0015>-21<0042>-49<0036>13<005C>-16<0056>-20<0057>-8<0048>-15<0050>-18<0026>-3<0052>-11<0051>-5<00C0>-12<004A>-8<0058>-4<0055>-13<0044>-8<0057>-7<004C>-10<0052>-11<0051>-18<0026>3<004B>-11<0044>-8<0051>-15<004A>-11<0048>-17<0028>-3<0059>-4<0048>-15<0051>-5<005700030046004F>-9<0044>-15<0056>-18<0056>-24<000F>]TJ
608
Win32_SystemDesktop class,
609
Win32_SystemDevices class,
609
Win32_SystemDriver class,
604
Win32_SystemDriverPNPEntity class,
600
Win32_SystemEnclosure class,
600
Win32_SystemLoadOrderGroups class,
609
[<003A>-13<004C>3<0051>8<0016>16<0015>-13<0042>-42<0036>21<005C>-8<0056>-12<00570048>-7<0050>-3<002F>-4<0052>-10<004A>4<004C0046>-11<0044>-1<004F>1<0030>-6<0048>-7<0050>-6<0052>-3<0055>-43<005C>-17<0026>5<0052>-3<0051>3<00C0>-4<004A0058>4<0055>-5<00440057>1<004C>-2<0052>-3<0051>8<0003>]TJ
class,
606
Win32_SystemMemoryResource class,
600
Win32_SystemNetworkConnections class,
609
Win32_SystemOperatingSystem class,
609
Win32_SystemPartitions class,
605
Win32_SystemProcesses class,
609
Win32_SystemProgramGroups class,
609
Win32_SystemResources class,
609
Win32_SystemServices class,
609
Win32_SystemSetting class,
609
Win32_SystemSlot class,
600
Win32_SystemSystemDriver class,
610
Win32_SystemTimeZone class,
610
Win32_SystemTrace class,
608
Win32_SystemUsers class,
610
Win32_TapeDrive class,
598
Win32_TCPIPPrinterPort class,
602
Win32_TemperatureProbe class,
597
Win32_Thread class,
610
Win32_ThreadStartTrace class,
608
Win32_ThreadStopTrace class,
608
Win32_ThreadTrace class,
608
Win32_TimeZone class,
604
Win32_TokenGroups class,
606
Win32_TokenPrivileges class,
606
Win32_Trustee class,
611
Win32_UninterruptiblePowerSupply class,
601
Win32_USBController class,
600
Win32_USBControllerDevice class,
600
Win32_USBHub class,
600
Win32_UserAccount class,
132
376
614
Win32_UserDesktop class,
604
Win32_UserInDomain class,
614
[<003A>-21<004C>-5<00510016>8<0015>-21<0042>27<0039>-22<004C>-10<0047>-11<0048>-21<0052>-21<0026>-3<0052>-11<0051>-5<00C0>-12<004A>-8<0058>-4<0055>-13<0044>-8<0057>-7<004C>-10<0052>-11<005100030046>-1<004F>-9<0044>-15<0056>-18<0056>-24<000F>]TJ
602
Win32_VideoController class,
602
Win32_VideoSettings class,
602
Win32_VoltageProbe class,
601
Win32_VolumeChangeEvent class,
608
Win32_Volume class,
605
614
Win32_VolumeQuota class,
605
Win32_VolumeQuotaSetting class,
605
Win32_VolumeUserQuota class,
605
614
Win32_WindowsProductActivation class,
615
windir variable,
Windows 7, taskbar shortcuts in,
Windows 8
[<00C0>-7<0055>-17<0048>-13<005A>-7<0044>-9<004F>-4<004F00030048>-11<005B0046>-6<0048>-15<0053>-10<0057>-7<004C>-10<0052>-11<0051>-13<005600030049>-12<0052>-11<0055>34<000F>]TJ
114
using -force parameter,
prompts displayed prior to stopping certain 
processes,
216
WinRM in PowerShell Client,
112
WindowsDeveloperLicense module,
581
Windows environment variables,
330
335
WindowsErrorReporting module,
581
[<003A>-21<004C>-5<0051>-15<0047>-10<0052>-7<005A>-16<0056000300C1>-11<0044>-15<004A0003004E>7<0048>-11<005C>29<000F>]TJ
Windows Management Framework 3.0 package,
Windows Management Instrumentation.
See
WMI
Windows Management Instrumentation Tester 
WbemTest,
361
Windows PowerShell.
See
PowerShell
Windows PowerShell 2.0,
226
Windows PowerShell console,
Windows PowerShell ISE
creating modules in,
238
239
IntelliSense in,
256
navigating in,
252
254
running,
251
running commands in,
255
script pane in,
254
255
snippets in
creating code with,
257
259
[<0046>13<0055>-3<00480044>7<0057>7<004C>9<0051>-1<004A>14<0003>14<0058>3<0056>-3<0048>-1<0055>-1<0010>-8<0047>3<004800C0>7<00510048>-7<0047>1<000F>]TJ
259
260
[<0047>3<004800C0>7<00510048>-7<0047>1<000F>]TJ
257
[<0055>-3<0048>-1<00500052>8<0059>-3<004C>9<0051>-1<004A>14<0003>14<0058>3<0056>-3<0048>-1<0055>-1<0010>-8<0047>3<004800C0>7<00510048>-7<0047>1<000F>]TJ
261
262
Tab expansion in,
256
Windows PowerShell remoting
discovering information about forest and 
domain,
428
431
obtaining FSMO information using,
428
Windows Remote Management WinRM,
Windows Server 2003,
227
Windows Server 2012,
112
Windows XP,
227
WinNT provider,
385
WinRM Windows Remote Management,
[<0046>12<0052>5<0051>11<00C0>4<004A>8<0058>12<0055004C>11<0051>1<004A>1<000F>]TJ
112
114
[<00C0>-7<0055>-17<0048>-13<005A>-7<0044>-9<004F>-4<004F00030048>-11<005B0046>-6<0048>-15<0053>-10<0057>-7<004C>-10<0052>-11<0051>-13<0056>-24<000F>]TJ
114
overview,
112
[<0057>-8<0048>-17<0056>-20<0057>-7<004C>-5<0051>-15<004A00030046>-4<0052>-11<0051>-5<00C0>-12<004A>-8<0058>-4<0055>-13<0044>-7<0057>-7<004C>-10<0052>-11<0051>-19<000F>]TJ
113
114
wjb alias,
WMI classes
abstract,
370
association classes,
373
378
description of,
597
620
dynamic,
370
list of,
597
620
properties of,
597
620
retrieving WMI instances
cleaning up output from command,
373
overview,
371
372
reducing returned properties and 
instances,
372
373
using CIM cmdlets to explore
[<00C0>-7<004F>-10<0057>-7<0048>-15<0055>-16<004C>-5<0051>-15<004A00030046>-1<004F>-9<0044>-15<0056>-18<0056>-17<0048>-17<005600030045>-7<005C00030054>-8<0058>-8<0044>-9<004F>-5<004C>-9<00C0>-12<0048>-15<0055>34<000F>]TJ
369
371
[<00C0>-7<0051>-15<0047>-5<004C>-5<0051>-15<004A0003003A>-12<0030>-9<002C00030046>-1<004F>-9<0044>-15<0056>-18<005600030050>-14<0048>-15<0057>-7<004B>-14<0052>-17<0047>-11<0056>-24<000F>]TJ
368
369
overview,
367
retrieving associated WMI classes,
381
382
using -classname parameter,
367
368
WMI video classes,
380
381
[wmiclass] type accelerator,
523
524
WMI cmdlets
Invoke-WmiMethod cmdlet,
358
360
overview,
355
357
using terminate method directly,
357
358
[wmi] type accelerator,
360
361
WMI Query argument,
320
WMI Tester WbemTest,
513
518
[wmi] type accelerator,
189
360
361
WMI Windows Management 
Instrumentation,
See also
WMI classes; 
WMI cmdlets
classes in,
289
293
connecting to, default values for,
307
308
importance of,
283
284
missing providers, handling,
513
523
model for,
284
namespaces in,
284
288
obtaining operating system version using,
174
[<0052>-11<0045>-10<0057>-24<0044>-7<004C>-5<0051>-7<004C>-5<0051>-15<004A00030056>-8<0053>-17<0048>-21<0046>-1<004C>-9<00C0>-10<004600030047>-8<0044>-8<0057>-23<004400030049>-17<0055>-17<0052>-11<0050>-19<000F>]TJ
189
providers in,
289
queries from bogus users,
463
querying
eliminating WMI query argument,
320
321
[<00C0>-7<0051>-15<0047>-5<004C>-5<0051>-15<004A0003004C>-4<0051>-13<0056>-20<0057>-24<0044>-9<004F>-4<004F>-11<0048>-21<004700030056>-17<0052>-4<0049>-45<0057>-39<005A>-7<0044>-8<0055>-17<0048>-14<000F>]TJ
327
330
  
identifying service accounts,
322
323
logging service accounts,
323
324
obtaining BIOS information,
308
311
using operators,
321
322
overview,
293
[<0055>-17<0048>-15<0057>-7<0055>-16<004C>-10<0048>-12<0059>-17<004C>-5<0051>-15<004A00030047>-8<0044>-8<0057>-23<004400030049>-17<0055>-17<0052>-11<005000030056>-8<0053>-17<0048>-21<0046>-1<004C>-9<00C0>-10<00460003004C>-5<0051>-13<0056>-20<0057>-23<0044>-8<0051>-14<0046>-6<0048>-17<005600030052>-5<00490003>]TJ
class,
319
320
retrieving default WMI settings,
308
retrieving every property from every instance 
of class,
314
retrieving information about all shares on 
local machine,
315
retrieving list of running processes,
317
318
[<0055>-17<0048>-15<0057>-7<0055>-16<004C>-10<0048>-12<0059>-17<004C>-5<0051>-15<004A00030056>-8<0053>-17<0048>-21<0046>-1<004C>-9<00C0>-10<004600030053>-11<0055>-17<0052>-11<0053>-17<0048>-15<0055>-45<0057>-7<004C>-10<0048>-17<005600030049>-17<0055>-17<0052>-11<005000030046004F>-9<0044>-15<0056>-18<0056>-24<000F>]TJ
316
shortening syntax,
325
326
[<0056>-8<0053>-17<0048>-21<0046>-1<004C>-9<00C0>-10<004600030046>-1<004F>-9<0044>-15<0056>-18<0056>-24<000F>]TJ
293
296
specifying maximum number of connections 
to server,
316
317
substituting Where clause with variable,
325
viewing Windows environment 
variables,
330
335
Win32_Desktop class,
296
298
working with disk drives,
312
314
remoting
using CIM classes to query WMI classes,
343
344
disadvantages of,
341
[<0058>-11<0056>-8<004C>-5<0051>-15<004A0003004A>-4<0055>-17<0052>-14<0058>-4<005300030053>-17<0052>-11<004F>-5<004C>-8<0046>-34<005C00030057>-5<005200030046>-4<0052>-11<0051>-5<00C0>-12<004A>-8<0058>-4<0055>-17<00480003003A>-12<0030>-9<002C>-21<000F>]TJ
337
338
remote results,
344
348
supplying alternate credentials for  remote 
connection,
338
341
using to work with static methods,
361
365
366
[<003A>10<0052>-11<0055>-16<004E>-19<004C>-5<0051>-15<004A>11<003A>-21<004C>-10<0057>-7<004B>28<0039>25<0044>-8<0055>-16<004C>-7<0044>-8<0045>-12<004F>-11<0048>-17<0056>-24<0011>7<0057>-38<005B>-41<0057000300C0>-7<004F>-11<0048>-14<000F>]TJ
-Wrap switch,
255
write alias,
Write cmdlet,
583
Write-Debug cmdlet,
174
463
464
464
465
577
Write-Error cmdlet,
174
577
Write-EventLog cmdlet,
577
Write-Host cmdlet,
178
328
488
577
592
Write mode,
485
Write-Output cmdlet,
577
Write-Path function,
176
Write-Progress cmdlet,
577
629
Write-Verbose cmdlet,
209
519
520
577
Write-Warning cmdlet,
577
Wscript.Echo command,
133
Wscript.Quit statement,
WSDL Web Services Description Language,
190
wshNetwork object,
wshShell object,
WS-Management protocol,
112
WSMAN Web Services Management,
108
[xml] alias,
146
190
bout the 
uthor
ED WILSON
 is a well-known scripting expert who delivers popu
lar scripting workshops to Microsoft customers and employees 
worldwide. He's written several books on Windows scripting, 
including 
Windows PowerShell31 2.0 Best Practices
Microsoft
Windows PowerShell31 Step By Step
, and 
Microsoft
 VBScript 
Step by Step
. Ed is a senior consultant at Microsoft Corporation 
and writes Hey, Scripting Guy!, one of the most popular TechNet 
blogs.
How To 
Download 
Your eBook
: This access code is non-transferable and is void if altered or revised in any way. It may not be 
sold or redeemed for cash, credit, or refund.
Your access code:
Windows PowerShell31 3.0 Step by Step
To download your eBook, go to
http://go.microsoft.com/FWLink/?Linkid=224345
Thank you for purchasing this Microsoft Press
 title. Your companion PDF eBook is ready to 
[<00470052005A0051004F005200440047000300490055>13<005200500003003200B700350048004C004F004F005C0003003000480047004C0044000F00030052>18<004900C00046004C0044004F00030047004C005600570055004C0045005800570052005500030052>17<004900030030004C00460055>13<005200560052>18<0049>-18<0057000300330055>13<00480056005600030057004C0057004F004800560011>]TJ
Your PDF eBook allows you to:
Search the full text
free updates to your eBook.
mspbooksupport@oreilly.com
Please note: You will be asked to create a 
free online account and enter the access 
code below.
What do 
you think of 
We want to hear from you! 
To participate in a brief online survey, please visit: 
Tell us how well this book meets your needs
27what works effectively, and what we can  
do better. Your feedback will help us continually improve our books and learning  
resources for you.   
microsoft.com/learning/booksurvey
